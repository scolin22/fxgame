
vga_demo.elf:     file format elf32-littlenios2
vga_demo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00012a50 memsz 0x00012a50 flags r-x
    LOAD off    0x00013a70 vaddr 0x01012a70 paddr 0x01014594 align 2**12
         filesz 0x00001b24 memsz 0x00001b24 flags rw-
    LOAD off    0x000160b8 vaddr 0x010160b8 paddr 0x010160b8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012204  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006b8  010123b8  010123b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b24  01012a70  01014594  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  010160b8  010160b8  000160b8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015594  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  000155c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b12  00000000  00000000  00016558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002884f  00000000  00000000  0001806a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000093fc  00000000  00000000  000408b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001878e  00000000  00000000  00049cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020a4  00000000  00000000  00062444  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029cf  00000000  00000000  000644e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e13e  00000000  00000000  00066eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00074ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a98  00000000  00000000  00075048  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007956a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0007956d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007957c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007957d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007957e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00079589  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00079594  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0007959f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  000795aa  2**0
                  CONTENTS, READONLY
 26 .jdi          00005b37  00000000  00000000  000795d4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00069a19  00000000  00000000  0007f10b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
010123b8 l    d  .rodata	00000000 .rodata
01012a70 l    d  .rwdata	00000000 .rwdata
010160b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 queue_type.c
00000000 l    df *ABS*	00000000 vga_demo.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0101254c l     O .rodata	00000108 two_over_pi
010124cc l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
01012654 l     O .rodata	00000010 init_jk
01012664 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
010035bc l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
010039b8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01004620 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01005aa4 l     F .text	00000058 __sprint_r
0101283a l     O .rodata	00000010 blanks.3452
0101282a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01007b20 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01009548 l     F .text	00000058 std
01009654 l     F .text	00000008 __fp_lock
0100965c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01012e78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
01014568 l     O .rwdata	00000004 charset
01012870 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010129b8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100d854 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100d8b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100d9b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100dadc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100dbbc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100dd1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100df4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01014584 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100e234 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101342c l     O .rwdata	00001060 jtag_uart_0
0101448c l     O .rwdata	0000002c character_lcd_0
010144b8 l     O .rwdata	00000048 char_drawer
01014500 l     O .rwdata	00000054 pixel_buffer_dma
0100e5d8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100e818 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100ea40 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01011210 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010116c8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01011818 l     F .text	000000f8 alt_file_locked
01011a9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01012134 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
010122e8 l     F .text	00000040 alt_sim_halt
0100abf8 g     F .text	00000094 _mprec_log10
0100ace4 g     F .text	00000088 __any_on
0100c42c g     F .text	00000070 _isatty_r
01012990 g     O .rodata	00000028 __mprec_tinytens
0100dd7c g     F .text	0000006c alt_main
01010580 g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
0100590c g     F .text	000000a0 _puts_r
01016114 g     O .bss	00000100 alt_irq
0100317c g     F .text	00000018 fabs
0100c49c g     F .text	00000078 _lseek_r
01014594 g       *ABS*	00000000 __flash_rwdata_start
0100f138 g     F .text	00000034 alt_up_character_lcd_send_cmd
01004280 g     F .text	00000088 __eqdf2
01000674 g     F .text	00000140 pulsing_box
010163a4 g       *ABS*	00000000 __alt_heap_start
01005894 g     F .text	00000044 printf
0100bee4 g     F .text	00000068 __sseek
010095b0 g     F .text	000000a4 __sinit
0100f780 g     F .text	00000114 alt_up_char_buffer_string
0100a2bc g     F .text	00000084 _setlocale_r
010096b0 g     F .text	0000009c __sfmoreglue
0100de08 g     F .text	00000020 __malloc_unlock
01000b6c g     F .text	00000338 infinite_spinner
01000400 g     F .text	00000048 is_full
0100f6b0 g     F .text	000000d0 alt_up_char_buffer_draw
0100a674 g     F .text	000000e0 memmove
010096a0 g     F .text	00000010 _cleanup
0100ad6c g     F .text	000000bc _Balloc
0100060c g     F .text	00000068 verbose_dequeue
01000588 g     F .text	00000084 verbose_enqueue
0100f930 g     F .text	000001ac alt_up_pixel_buffer_dma_draw
01004308 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100f0bc g     F .text	0000007c get_DDRAM_addr
0100f8f0 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100c3b8 g     F .text	00000074 _fstat_r
010160c4 g     O .bss	00000004 errno
010045e8 g     F .text	00000038 __make_dp
01003194 g     F .text	00000224 floor
0100048c g     F .text	000000fc print_queue
010160d8 g     O .bss	00000004 alt_argv
0101c554 g       *ABS*	00000000 _gp
0100e0e0 g     F .text	00000030 usleep
010037a0 g     F .text	00000070 __subsf3
0100fadc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
010132ac g     O .rwdata	00000180 alt_fd_list
0100128c g     F .text	00000828 __ieee754_rem_pio2
01011338 g     F .text	00000094 alt_find_dev
0100a5d4 g     F .text	000000a0 memcpy
0100f2d0 g     F .text	0000004c alt_up_character_lcd_write_fd
0100f894 g     F .text	0000005c alt_up_char_buffer_clear
01009694 g     F .text	0000000c _cleanup_r
01004418 g     F .text	000000f8 __floatsidf
010117a0 g     F .text	00000078 alt_io_redirect
0100d538 g     F .text	00000088 __ltdf2
010123b8 g       *ABS*	00000000 __DTOR_END__
010059ac g     F .text	00000014 puts
010007b4 g     F .text	000003b8 spinner
0100ab48 g     F .text	000000b0 __ratio
0100fb8c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0100ec58 g     F .text	00000224 altera_avalon_jtag_uart_read
01005140 g     F .text	00000014 malloc
010058d8 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100475c g     F .text	00000008 __udivsi3
0100da18 g     F .text	000000c4 isatty
010128a0 g     O .rodata	000000c8 __mprec_tens
01010228 g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
0100a298 g     F .text	00000008 __locale_charset
01001ab4 g     F .text	0000052c __kernel_cos
01011eb0 g     F .text	00000090 alt_icache_flush
010160b8 g     O .bss	00000004 __malloc_top_pad
01014564 g     O .rwdata	00000004 __mb_cur_max
0100a2a0 g     F .text	0000000c _localeconv_r
0100b4d0 g     F .text	0000003c __i2b
01009c7c g     F .text	0000049c __sfvwrite_r
010059c0 g     F .text	00000070 _sbrk_r
01010a1c g     F .text	000000d8 helper_plot_pixel
0100c514 g     F .text	00000078 _read_r
01013278 g     O .rwdata	0000000c __lc_ctype
0101457c g     O .rwdata	00000004 alt_max_fd
01004f2c g     F .text	00000138 __unpack_d
0100c294 g     F .text	00000110 _fclose_r
01009514 g     F .text	00000034 fflush
010160bc g     O .bss	00000004 __malloc_max_sbrked_mem
01002e64 g     F .text	00000318 __kernel_sin
01003964 g     F .text	00000054 __extendsfdf2
01003e48 g     F .text	00000074 __adddf3
0100aa28 g     F .text	00000120 __b2d
0100fbc0 g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
0100cbf8 g     F .text	00000660 __umoddi3
0100dc28 g     F .text	000000f4 lseek
01014560 g     O .rwdata	00000004 _global_impure_ptr
0100b878 g     F .text	000005f4 _realloc_r
010163a4 g       *ABS*	00000000 __bss_end
010115d0 g     F .text	000000f8 alt_iic_isr_register
0100fd2c g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
01011b94 g     F .text	0000010c alt_tick
0100c58c g     F .text	0000066c __udivdi3
01012968 g     O .rodata	00000028 __mprec_bigtens
0100b758 g     F .text	00000120 __s2b
0100d5c0 g     F .text	00000194 __floatunsidf
0100a948 g     F .text	00000060 __mcmp
0100967c g     F .text	00000018 __fp_lock_all
01011588 g     F .text	00000048 alt_ic_irq_enabled
01011afc g     F .text	00000098 alt_alarm_stop
010160e0 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01013284 g     O .rwdata	00000028 alt_dev_null
01001fe0 g     F .text	00000e84 __kernel_rem_pio2
01000448 g     F .text	00000044 is_empty
01004aa8 g     F .text	000000c8 __unpack_f
0100f5b8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01011140 g     F .text	0000001c alt_dcache_flush_all
0100a814 g     F .text	00000070 __hi0bits
01010958 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01004510 g     F .text	000000d8 __fixdfsi
01014594 g       *ABS*	00000000 __ram_rwdata_end
01014574 g     O .rwdata	00000008 alt_dev_list
0100e110 g     F .text	00000124 write
01003874 g     F .text	00000078 __gtsf2
01010af4 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
01012a70 g       *ABS*	00000000 __ram_rodata_end
0100d8e0 g     F .text	000000d8 fstat
0100b638 g     F .text	00000120 __pow5mult
010160c8 g     O .bss	00000004 __nlocale_changed
01004764 g     F .text	00000008 __umodsi3
010163a4 g       *ABS*	00000000 end
01004948 g     F .text	00000160 __pack_f
0100f5ec g     F .text	00000084 alt_up_char_buffer_init
0100e758 g     F .text	000000c0 altera_avalon_jtag_uart_init
010123b4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010048c8 g     F .text	00000080 __clzsi2
0100ee7c g     F .text	00000240 altera_avalon_jtag_uart_write
01000fb8 g     F .text	00000168 cos
010095a0 g     F .text	00000004 __sfp_lock_acquire
0100a4f0 g     F .text	000000e4 memchr
0100f1e0 g     F .text	00000078 alt_up_character_lcd_write
01005afc g     F .text	00001ec4 ___vfprintf_internal_r
01009968 g     F .text	00000314 _free_r
01012138 g     F .text	000001b0 __call_exitprocs
010160cc g     O .bss	00000004 __mlocale_changed
01014558 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010160e4 g     O .bss	00000004 _alt_tick_rate
01001120 g     F .text	0000016c sin
0100b130 g     F .text	0000014c __lshift
010160e8 g     O .bss	00000004 _alt_nticks
0100de28 g     F .text	00000124 read
0100e2c8 g     F .text	00000310 alt_sys_init
0100f444 g     F .text	000000b0 alt_up_character_lcd_shift_display
01012000 g     F .text	00000134 __register_exitproc
0100b27c g     F .text	00000254 __multiply
0100f4f4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100eaf0 g     F .text	00000074 altera_avalon_jtag_uart_close
0100476c g     F .text	00000038 __mulsi3
01012a70 g       *ABS*	00000000 __ram_rwdata_start
010123b8 g       *ABS*	00000000 __ram_rodata_start
010160ec g     O .bss	00000028 __malloc_current_mallinfo
0100ae28 g     F .text	0000017c __d2b
0100e610 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01011de0 g     F .text	000000d0 alt_get_fd
01010fe4 g     F .text	0000015c alt_busy_sleep
01005064 g     F .text	000000c8 __fpcmp_parts_d
0100c224 g     F .text	00000070 _close_r
01011f8c g     F .text	00000074 memcmp
0100e6c0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010163a4 g       *ABS*	00000000 __alt_stack_base
0100e708 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010079e4 g     F .text	0000013c __swsetup_r
0100d258 g     F .text	00000258 __divdf3
0100974c g     F .text	000000f0 __sfp
0100ac8c g     F .text	00000058 __copybits
01012a70 g     O .rwdata	00000408 __malloc_av_
010095ac g     F .text	00000004 __sinit_lock_release
01003ebc g     F .text	000003c4 __muldf3
0100bfc8 g     F .text	00000060 __sread
010126a4 g     O .rodata	00000010 __thenan_sf
01011cc0 g     F .text	00000120 alt_find_file
0101115c g     F .text	000000b4 alt_dev_llist_insert
0100dde8 g     F .text	00000020 __malloc_lock
0100e024 g     F .text	000000bc sbrk
01009318 g     F .text	000001fc _fflush_r
0100c15c g     F .text	000000c8 _calloc_r
010160b8 g       *ABS*	00000000 __bss_start
0100a754 g     F .text	00000098 memset
01000ea4 g     F .text	00000114 main
010160dc g     O .bss	00000004 alt_envp
010160c0 g     O .bss	00000004 __malloc_max_total_mem
0100fb34 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0100f670 g     F .text	00000040 alt_up_char_buffer_open_dev
0100e668 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
010038ec g     F .text	00000078 __ltsf2
0100f394 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100bedc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100c3a4 g     F .text	00000014 fclose
01016214 g     O .bss	00000190 _atexit0
01007d64 g     F .text	000015b4 _dtoa_r
01005154 g     F .text	00000740 _malloc_r
01014580 g     O .rwdata	00000004 alt_errno
0100a1e0 g     F .text	000000b8 _fwalk
0100469c g     F .text	00000060 __divsi3
010126b4 g     O .rodata	00000014 __thenan_df
0100f1a0 g     F .text	00000040 alt_up_character_lcd_open_dev
0100983c g     F .text	0000012c _malloc_trim_r
010123b8 g       *ABS*	00000000 __CTOR_END__
0100f16c g     F .text	00000034 alt_up_character_lcd_init
0100c028 g     F .text	000000bc strcmp
010123b8 g       *ABS*	00000000 __flash_rodata_start
010123b8 g       *ABS*	00000000 __DTOR_LIST__
01003598 g     F .text	00000024 copysign
0100d4b0 g     F .text	00000088 __nedf2
0100e294 g     F .text	00000034 alt_irq_init
0100dfac g     F .text	00000078 alt_release_fd
0100f584 g     F .text	00000034 alt_up_character_lcd_cursor_off
010126c8 g     O .rodata	00000100 __clz_tab
010160d0 g     O .bss	00000004 _PathLocale
01011f40 g     F .text	00000014 atexit
0100c0e4 g     F .text	00000078 _write_r
0100a340 g     F .text	0000001c setlocale
0101455c g     O .rwdata	00000004 _impure_ptr
010160d4 g     O .bss	00000004 alt_argc
010033b8 g     F .text	000001e0 scalbn
010112d4 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
0100a9a8 g     F .text	00000080 __ulp
0100be6c g     F .text	00000040 __isinfd
01009664 g     F .text	00000018 __fp_unlock_all
0101456c g     O .rwdata	00000008 alt_fs_list
0100026c g     F .text	000000cc enqueue
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100a2ac g     F .text	00000010 localeconv
010113fc g     F .text	00000050 alt_ic_isr_register
01000338 g     F .text	000000c8 dequeue
01014594 g       *ABS*	00000000 _edata
010163a4 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100eb64 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010114e8 g     F .text	000000a0 alt_ic_irq_disable
0100bf4c g     F .text	0000007c __swrite
01014554 g     O .rwdata	00000004 __malloc_trim_threshold
01011ca0 g     F .text	00000020 altera_nios2_qsys_irq_init
01011f54 g     F .text	00000038 exit
0100a118 g     F .text	000000c8 _fwalk_reent
0100afa4 g     F .text	0000018c __mdiff
010046fc g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010095a4 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100f258 g     F .text	00000078 alt_up_character_lcd_string
01004b70 g     F .text	000000a8 __fpcmp_parts_f
01012328 g     F .text	00000020 _exit
0100beac g     F .text	00000030 __isnand
01010e90 g     F .text	00000154 alt_alarm_start
010047a4 g     F .text	00000124 __muldi3
0100a35c g     F .text	00000194 __smakebuf_r
01005a30 g     F .text	00000074 strlen
01011910 g     F .text	0000018c open
01004390 g     F .text	00000088 __gedf2
010113cc g     F .text	00000030 alt_icache_flush_all
0100f31c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01014588 g     O .rwdata	00000004 alt_priority_mask
0101144c g     F .text	0000009c alt_ic_irq_enable
010001f0 g     F .text	0000007c queue_new
010079c0 g     F .text	00000024 __vfprintf_internal
01003dc8 g     F .text	00000080 __subdf3
0100a884 g     F .text	000000c4 __lo0bits
0101458c g     O .rwdata	00000008 alt_alarm_list
01011270 g     F .text	00000064 _do_ctors
0100d754 g     F .text	00000100 close
01003810 g     F .text	00000064 __addsf3
0100db3c g     F .text	00000080 alt_load
01004c18 g     F .text	00000314 __pack_d
0100512c g     F .text	00000014 free
010095a8 g     F .text	00000004 __sinit_lock_acquire
0100b50c g     F .text	0000012c __multadd
0100a7ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18d84504 	addi	r3,r3,24852
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18d84504 	addi	r3,r3,24852
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6b15514 	ori	gp,gp,50516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10982e14 	ori	r2,r2,24760

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18d8e914 	ori	r3,r3,25508

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100db3c0 	call	100db3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100dd7c0 	call	100dd7c <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <queue_new>:
#include <stdio.h>
#include <stdlib.h>
#include "queue_type.h"

Queue *queue_new(int capacity) {
 10001f0:	defffc04 	addi	sp,sp,-16
 10001f4:	dfc00315 	stw	ra,12(sp)
 10001f8:	df000215 	stw	fp,8(sp)
 10001fc:	df000204 	addi	fp,sp,8
 1000200:	e13fff15 	stw	r4,-4(fp)
    Queue *queue = malloc(sizeof(Queue));
 1000204:	01000504 	movi	r4,20
 1000208:	10051400 	call	1005140 <malloc>
 100020c:	e0bffe15 	stw	r2,-8(fp)
    queue->front = 0;
 1000210:	e0bffe17 	ldw	r2,-8(fp)
 1000214:	10000015 	stw	zero,0(r2)
    queue->back = 0;
 1000218:	e0bffe17 	ldw	r2,-8(fp)
 100021c:	10000115 	stw	zero,4(r2)
    queue->capacity = capacity;
 1000220:	e0fffe17 	ldw	r3,-8(fp)
 1000224:	e0bfff17 	ldw	r2,-4(fp)
 1000228:	18800215 	stw	r2,8(r3)
    queue->size = 0;
 100022c:	e0bffe17 	ldw	r2,-8(fp)
 1000230:	10000315 	stw	zero,12(r2)

    queue->array = malloc(capacity * sizeof(int));
 1000234:	e0bfff17 	ldw	r2,-4(fp)
 1000238:	1085883a 	add	r2,r2,r2
 100023c:	1085883a 	add	r2,r2,r2
 1000240:	1009883a 	mov	r4,r2
 1000244:	10051400 	call	1005140 <malloc>
 1000248:	1007883a 	mov	r3,r2
 100024c:	e0bffe17 	ldw	r2,-8(fp)
 1000250:	10c00415 	stw	r3,16(r2)

    return queue;
 1000254:	e0bffe17 	ldw	r2,-8(fp)
}
 1000258:	e037883a 	mov	sp,fp
 100025c:	dfc00117 	ldw	ra,4(sp)
 1000260:	df000017 	ldw	fp,0(sp)
 1000264:	dec00204 	addi	sp,sp,8
 1000268:	f800283a 	ret

0100026c <enqueue>:

int enqueue(Queue * queue, int value) {
 100026c:	defffb04 	addi	sp,sp,-20
 1000270:	dfc00415 	stw	ra,16(sp)
 1000274:	df000315 	stw	fp,12(sp)
 1000278:	df000304 	addi	fp,sp,12
 100027c:	e13ffd15 	stw	r4,-12(fp)
 1000280:	e17ffe15 	stw	r5,-8(fp)
    if (!is_full(queue)) {
 1000284:	e13ffd17 	ldw	r4,-12(fp)
 1000288:	10004000 	call	1000400 <is_full>
 100028c:	1004c03a 	cmpne	r2,r2,zero
 1000290:	1000221e 	bne	r2,zero,100031c <enqueue+0xb0>
        if (!is_empty(queue)) {
 1000294:	e13ffd17 	ldw	r4,-12(fp)
 1000298:	10004480 	call	1000448 <is_empty>
 100029c:	1004c03a 	cmpne	r2,r2,zero
 10002a0:	10000d1e 	bne	r2,zero,10002d8 <enqueue+0x6c>
            queue->back++;
 10002a4:	e0bffd17 	ldw	r2,-12(fp)
 10002a8:	10800117 	ldw	r2,4(r2)
 10002ac:	10c00044 	addi	r3,r2,1
 10002b0:	e0bffd17 	ldw	r2,-12(fp)
 10002b4:	10c00115 	stw	r3,4(r2)
            queue->back %= queue->capacity;
 10002b8:	e0bffd17 	ldw	r2,-12(fp)
 10002bc:	11000117 	ldw	r4,4(r2)
 10002c0:	e0bffd17 	ldw	r2,-12(fp)
 10002c4:	11400217 	ldw	r5,8(r2)
 10002c8:	10046fc0 	call	10046fc <__modsi3>
 10002cc:	1007883a 	mov	r3,r2
 10002d0:	e0bffd17 	ldw	r2,-12(fp)
 10002d4:	10c00115 	stw	r3,4(r2)
        }
        queue->array[queue->back] = value;
 10002d8:	e0bffd17 	ldw	r2,-12(fp)
 10002dc:	10c00417 	ldw	r3,16(r2)
 10002e0:	e0bffd17 	ldw	r2,-12(fp)
 10002e4:	10800117 	ldw	r2,4(r2)
 10002e8:	1085883a 	add	r2,r2,r2
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	1887883a 	add	r3,r3,r2
 10002f4:	e0bffe17 	ldw	r2,-8(fp)
 10002f8:	18800015 	stw	r2,0(r3)
        queue->size++;
 10002fc:	e0bffd17 	ldw	r2,-12(fp)
 1000300:	10800317 	ldw	r2,12(r2)
 1000304:	10c00044 	addi	r3,r2,1
 1000308:	e0bffd17 	ldw	r2,-12(fp)
 100030c:	10c00315 	stw	r3,12(r2)
        return 1;
 1000310:	00800044 	movi	r2,1
 1000314:	e0bfff15 	stw	r2,-4(fp)
 1000318:	00000106 	br	1000320 <enqueue+0xb4>
    } else
        return 0;
 100031c:	e03fff15 	stw	zero,-4(fp)
 1000320:	e0bfff17 	ldw	r2,-4(fp)
}
 1000324:	e037883a 	mov	sp,fp
 1000328:	dfc00117 	ldw	ra,4(sp)
 100032c:	df000017 	ldw	fp,0(sp)
 1000330:	dec00204 	addi	sp,sp,8
 1000334:	f800283a 	ret

01000338 <dequeue>:

int dequeue(Queue * queue) {
 1000338:	defffb04 	addi	sp,sp,-20
 100033c:	dfc00415 	stw	ra,16(sp)
 1000340:	df000315 	stw	fp,12(sp)
 1000344:	df000304 	addi	fp,sp,12
 1000348:	e13ffe15 	stw	r4,-8(fp)
    if (!is_empty(queue)) {
 100034c:	e13ffe17 	ldw	r4,-8(fp)
 1000350:	10004480 	call	1000448 <is_empty>
 1000354:	1004c03a 	cmpne	r2,r2,zero
 1000358:	1000221e 	bne	r2,zero,10003e4 <dequeue+0xac>
        int dequeued = queue->array[queue->front];
 100035c:	e0bffe17 	ldw	r2,-8(fp)
 1000360:	10c00417 	ldw	r3,16(r2)
 1000364:	e0bffe17 	ldw	r2,-8(fp)
 1000368:	10800017 	ldw	r2,0(r2)
 100036c:	1085883a 	add	r2,r2,r2
 1000370:	1085883a 	add	r2,r2,r2
 1000374:	1885883a 	add	r2,r3,r2
 1000378:	10800017 	ldw	r2,0(r2)
 100037c:	e0bffd15 	stw	r2,-12(fp)
        queue->size--;
 1000380:	e0bffe17 	ldw	r2,-8(fp)
 1000384:	10800317 	ldw	r2,12(r2)
 1000388:	10ffffc4 	addi	r3,r2,-1
 100038c:	e0bffe17 	ldw	r2,-8(fp)
 1000390:	10c00315 	stw	r3,12(r2)
        if (!is_empty(queue)) {
 1000394:	e13ffe17 	ldw	r4,-8(fp)
 1000398:	10004480 	call	1000448 <is_empty>
 100039c:	1004c03a 	cmpne	r2,r2,zero
 10003a0:	10000d1e 	bne	r2,zero,10003d8 <dequeue+0xa0>
            queue->front++;
 10003a4:	e0bffe17 	ldw	r2,-8(fp)
 10003a8:	10800017 	ldw	r2,0(r2)
 10003ac:	10c00044 	addi	r3,r2,1
 10003b0:	e0bffe17 	ldw	r2,-8(fp)
 10003b4:	10c00015 	stw	r3,0(r2)
            queue->front %= queue->capacity;
 10003b8:	e0bffe17 	ldw	r2,-8(fp)
 10003bc:	11000017 	ldw	r4,0(r2)
 10003c0:	e0bffe17 	ldw	r2,-8(fp)
 10003c4:	11400217 	ldw	r5,8(r2)
 10003c8:	10046fc0 	call	10046fc <__modsi3>
 10003cc:	1007883a 	mov	r3,r2
 10003d0:	e0bffe17 	ldw	r2,-8(fp)
 10003d4:	10c00015 	stw	r3,0(r2)
        }
        return dequeued;
 10003d8:	e0bffd17 	ldw	r2,-12(fp)
 10003dc:	e0bfff15 	stw	r2,-4(fp)
 10003e0:	00000106 	br	10003e8 <dequeue+0xb0>
    }
    else
        return 0;
 10003e4:	e03fff15 	stw	zero,-4(fp)
 10003e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10003ec:	e037883a 	mov	sp,fp
 10003f0:	dfc00117 	ldw	ra,4(sp)
 10003f4:	df000017 	ldw	fp,0(sp)
 10003f8:	dec00204 	addi	sp,sp,8
 10003fc:	f800283a 	ret

01000400 <is_full>:

int is_full(Queue * queue) {
 1000400:	defffd04 	addi	sp,sp,-12
 1000404:	df000215 	stw	fp,8(sp)
 1000408:	df000204 	addi	fp,sp,8
 100040c:	e13ffe15 	stw	r4,-8(fp)
    if (queue->size >= queue->capacity)
 1000410:	e0bffe17 	ldw	r2,-8(fp)
 1000414:	10c00317 	ldw	r3,12(r2)
 1000418:	e0bffe17 	ldw	r2,-8(fp)
 100041c:	10800217 	ldw	r2,8(r2)
 1000420:	18800316 	blt	r3,r2,1000430 <is_full+0x30>
        return 1;
 1000424:	00800044 	movi	r2,1
 1000428:	e0bfff15 	stw	r2,-4(fp)
 100042c:	00000106 	br	1000434 <is_full+0x34>
    else
        return 0;
 1000430:	e03fff15 	stw	zero,-4(fp)
 1000434:	e0bfff17 	ldw	r2,-4(fp)
}
 1000438:	e037883a 	mov	sp,fp
 100043c:	df000017 	ldw	fp,0(sp)
 1000440:	dec00104 	addi	sp,sp,4
 1000444:	f800283a 	ret

01000448 <is_empty>:

int is_empty(Queue * queue) {
 1000448:	defffd04 	addi	sp,sp,-12
 100044c:	df000215 	stw	fp,8(sp)
 1000450:	df000204 	addi	fp,sp,8
 1000454:	e13ffe15 	stw	r4,-8(fp)
    if (queue->size == 0)
 1000458:	e0bffe17 	ldw	r2,-8(fp)
 100045c:	10800317 	ldw	r2,12(r2)
 1000460:	1004c03a 	cmpne	r2,r2,zero
 1000464:	1000031e 	bne	r2,zero,1000474 <is_empty+0x2c>
        return 1;
 1000468:	00800044 	movi	r2,1
 100046c:	e0bfff15 	stw	r2,-4(fp)
 1000470:	00000106 	br	1000478 <is_empty+0x30>
    else
        return 0;
 1000474:	e03fff15 	stw	zero,-4(fp)
 1000478:	e0bfff17 	ldw	r2,-4(fp)
}
 100047c:	e037883a 	mov	sp,fp
 1000480:	df000017 	ldw	fp,0(sp)
 1000484:	dec00104 	addi	sp,sp,4
 1000488:	f800283a 	ret

0100048c <print_queue>:

void print_queue(Queue * queue) {
 100048c:	defffb04 	addi	sp,sp,-20
 1000490:	dfc00415 	stw	ra,16(sp)
 1000494:	df000315 	stw	fp,12(sp)
 1000498:	df000304 	addi	fp,sp,12
 100049c:	e13fff15 	stw	r4,-4(fp)
    printf("Front: %d\n", queue->front);
 10004a0:	e0bfff17 	ldw	r2,-4(fp)
 10004a4:	11400017 	ldw	r5,0(r2)
 10004a8:	01004074 	movhi	r4,257
 10004ac:	2108ee04 	addi	r4,r4,9144
 10004b0:	10058940 	call	1005894 <printf>
    printf("Back: %d\n", queue->back);
 10004b4:	e0bfff17 	ldw	r2,-4(fp)
 10004b8:	11400117 	ldw	r5,4(r2)
 10004bc:	01004074 	movhi	r4,257
 10004c0:	2108f104 	addi	r4,r4,9156
 10004c4:	10058940 	call	1005894 <printf>
    int i;
    printf("Current List: ");
 10004c8:	01004074 	movhi	r4,257
 10004cc:	2108f404 	addi	r4,r4,9168
 10004d0:	10058940 	call	1005894 <printf>
    if (queue->size == 0)
 10004d4:	e0bfff17 	ldw	r2,-4(fp)
 10004d8:	10800317 	ldw	r2,12(r2)
 10004dc:	1004c03a 	cmpne	r2,r2,zero
 10004e0:	1000041e 	bne	r2,zero,10004f4 <print_queue+0x68>
        printf("Empty");
 10004e4:	01004074 	movhi	r4,257
 10004e8:	2108f804 	addi	r4,r4,9184
 10004ec:	10058940 	call	1005894 <printf>
 10004f0:	00001d06 	br	1000568 <print_queue+0xdc>
    else
        for (i = 0; i < queue->size; i++) {
 10004f4:	e03ffe15 	stw	zero,-8(fp)
 10004f8:	00001706 	br	1000558 <print_queue+0xcc>
            int index = queue->front + i;
 10004fc:	e0bfff17 	ldw	r2,-4(fp)
 1000500:	10c00017 	ldw	r3,0(r2)
 1000504:	e0bffe17 	ldw	r2,-8(fp)
 1000508:	1885883a 	add	r2,r3,r2
 100050c:	e0bffd15 	stw	r2,-12(fp)
            index %= queue->capacity;
 1000510:	e0bfff17 	ldw	r2,-4(fp)
 1000514:	11400217 	ldw	r5,8(r2)
 1000518:	e13ffd17 	ldw	r4,-12(fp)
 100051c:	10046fc0 	call	10046fc <__modsi3>
 1000520:	e0bffd15 	stw	r2,-12(fp)
            printf("%d ", queue->array[index]);
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10c00417 	ldw	r3,16(r2)
 100052c:	e0bffd17 	ldw	r2,-12(fp)
 1000530:	1085883a 	add	r2,r2,r2
 1000534:	1085883a 	add	r2,r2,r2
 1000538:	1885883a 	add	r2,r3,r2
 100053c:	11400017 	ldw	r5,0(r2)
 1000540:	01004074 	movhi	r4,257
 1000544:	2108fa04 	addi	r4,r4,9192
 1000548:	10058940 	call	1005894 <printf>
    int i;
    printf("Current List: ");
    if (queue->size == 0)
        printf("Empty");
    else
        for (i = 0; i < queue->size; i++) {
 100054c:	e0bffe17 	ldw	r2,-8(fp)
 1000550:	10800044 	addi	r2,r2,1
 1000554:	e0bffe15 	stw	r2,-8(fp)
 1000558:	e0bfff17 	ldw	r2,-4(fp)
 100055c:	10c00317 	ldw	r3,12(r2)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	10ffe516 	blt	r2,r3,10004fc <print_queue+0x70>
            int index = queue->front + i;
            index %= queue->capacity;
            printf("%d ", queue->array[index]);
        }
    printf("\n\n");
 1000568:	01004074 	movhi	r4,257
 100056c:	2108fb04 	addi	r4,r4,9196
 1000570:	10059ac0 	call	10059ac <puts>
}
 1000574:	e037883a 	mov	sp,fp
 1000578:	dfc00117 	ldw	ra,4(sp)
 100057c:	df000017 	ldw	fp,0(sp)
 1000580:	dec00204 	addi	sp,sp,8
 1000584:	f800283a 	ret

01000588 <verbose_enqueue>:

void verbose_enqueue(Queue * queue, int value) {
 1000588:	defffc04 	addi	sp,sp,-16
 100058c:	dfc00315 	stw	ra,12(sp)
 1000590:	df000215 	stw	fp,8(sp)
 1000594:	df000204 	addi	fp,sp,8
 1000598:	e13ffe15 	stw	r4,-8(fp)
 100059c:	e17fff15 	stw	r5,-4(fp)
    if (enqueue(queue, value)) printf("Enqueued %d\n", queue->array[queue->back]);
 10005a0:	e13ffe17 	ldw	r4,-8(fp)
 10005a4:	e17fff17 	ldw	r5,-4(fp)
 10005a8:	100026c0 	call	100026c <enqueue>
 10005ac:	1005003a 	cmpeq	r2,r2,zero
 10005b0:	10000c1e 	bne	r2,zero,10005e4 <verbose_enqueue+0x5c>
 10005b4:	e0bffe17 	ldw	r2,-8(fp)
 10005b8:	10c00417 	ldw	r3,16(r2)
 10005bc:	e0bffe17 	ldw	r2,-8(fp)
 10005c0:	10800117 	ldw	r2,4(r2)
 10005c4:	1085883a 	add	r2,r2,r2
 10005c8:	1085883a 	add	r2,r2,r2
 10005cc:	1885883a 	add	r2,r3,r2
 10005d0:	11400017 	ldw	r5,0(r2)
 10005d4:	01004074 	movhi	r4,257
 10005d8:	2108fc04 	addi	r4,r4,9200
 10005dc:	10058940 	call	1005894 <printf>
 10005e0:	00000306 	br	10005f0 <verbose_enqueue+0x68>
    else printf("Failed to enqueue\n");
 10005e4:	01004074 	movhi	r4,257
 10005e8:	21090004 	addi	r4,r4,9216
 10005ec:	10059ac0 	call	10059ac <puts>

    print_queue(queue);
 10005f0:	e13ffe17 	ldw	r4,-8(fp)
 10005f4:	100048c0 	call	100048c <print_queue>
}
 10005f8:	e037883a 	mov	sp,fp
 10005fc:	dfc00117 	ldw	ra,4(sp)
 1000600:	df000017 	ldw	fp,0(sp)
 1000604:	dec00204 	addi	sp,sp,8
 1000608:	f800283a 	ret

0100060c <verbose_dequeue>:

void verbose_dequeue(Queue * queue) {
 100060c:	defffc04 	addi	sp,sp,-16
 1000610:	dfc00315 	stw	ra,12(sp)
 1000614:	df000215 	stw	fp,8(sp)
 1000618:	df000204 	addi	fp,sp,8
 100061c:	e13fff15 	stw	r4,-4(fp)
    int dequeued = dequeue(queue);
 1000620:	e13fff17 	ldw	r4,-4(fp)
 1000624:	10003380 	call	1000338 <dequeue>
 1000628:	e0bffe15 	stw	r2,-8(fp)
    if (dequeued) printf("Dequeued %d\n", dequeued);
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	1005003a 	cmpeq	r2,r2,zero
 1000634:	1000051e 	bne	r2,zero,100064c <verbose_dequeue+0x40>
 1000638:	01004074 	movhi	r4,257
 100063c:	21090504 	addi	r4,r4,9236
 1000640:	e17ffe17 	ldw	r5,-8(fp)
 1000644:	10058940 	call	1005894 <printf>
 1000648:	00000306 	br	1000658 <verbose_dequeue+0x4c>
    else printf("Failed to dequeue\n");
 100064c:	01004074 	movhi	r4,257
 1000650:	21090904 	addi	r4,r4,9252
 1000654:	10059ac0 	call	10059ac <puts>

    print_queue(queue);
 1000658:	e13fff17 	ldw	r4,-4(fp)
 100065c:	100048c0 	call	100048c <print_queue>
}
 1000660:	e037883a 	mov	sp,fp
 1000664:	dfc00117 	ldw	ra,4(sp)
 1000668:	df000017 	ldw	fp,0(sp)
 100066c:	dec00204 	addi	sp,sp,8
 1000670:	f800283a 	ret

01000674 <pulsing_box>:

int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue);

int infinite_spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue);

int pulsing_box(alt_up_pixel_buffer_dma_dev *pixel_buffer) {
 1000674:	defff404 	addi	sp,sp,-48
 1000678:	dfc00b15 	stw	ra,44(sp)
 100067c:	df000a15 	stw	fp,40(sp)
 1000680:	df000a04 	addi	fp,sp,40
 1000684:	e13fff15 	stw	r4,-4(fp)
    int x0 = X_OFFSET, y0 = Y_OFFSET, x1 = WIDTH, y1 = HEIGHT, i, color = 0;
 1000688:	00800184 	movi	r2,6
 100068c:	e0bffe15 	stw	r2,-8(fp)
 1000690:	e03ffd15 	stw	zero,-12(fp)
 1000694:	00805004 	movi	r2,320
 1000698:	e0bffc15 	stw	r2,-16(fp)
 100069c:	00803c04 	movi	r2,240
 10006a0:	e0bffb15 	stw	r2,-20(fp)
 10006a4:	e03ff915 	stw	zero,-28(fp)

    for (i = 0; i < HEIGHT / 2; i++) {
 10006a8:	e03ffa15 	stw	zero,-24(fp)
 10006ac:	00001a06 	br	1000718 <pulsing_box+0xa4>
        color += COLOR_INC;
 10006b0:	e0bff917 	ldw	r2,-28(fp)
 10006b4:	10808884 	addi	r2,r2,546
 10006b8:	e0bff915 	stw	r2,-28(fp)
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
 10006bc:	e0fffe17 	ldw	r3,-8(fp)
 10006c0:	e0bffa17 	ldw	r2,-24(fp)
 10006c4:	188b883a 	add	r5,r3,r2
 10006c8:	e0fffd17 	ldw	r3,-12(fp)
 10006cc:	e0bffa17 	ldw	r2,-24(fp)
 10006d0:	188d883a 	add	r6,r3,r2
 10006d4:	e0fffc17 	ldw	r3,-16(fp)
 10006d8:	e0bffa17 	ldw	r2,-24(fp)
 10006dc:	188fc83a 	sub	r7,r3,r2
 10006e0:	e0fffb17 	ldw	r3,-20(fp)
 10006e4:	e0bffa17 	ldw	r2,-24(fp)
 10006e8:	1885c83a 	sub	r2,r3,r2
 10006ec:	d8800015 	stw	r2,0(sp)
 10006f0:	e0bff917 	ldw	r2,-28(fp)
 10006f4:	d8800115 	stw	r2,4(sp)
 10006f8:	d8000215 	stw	zero,8(sp)
 10006fc:	e13fff17 	ldw	r4,-4(fp)
 1000700:	10109580 	call	1010958 <alt_up_pixel_buffer_dma_draw_rectangle>
        usleep(SLEEP);
 1000704:	010f4244 	movi	r4,15625
 1000708:	100e0e00 	call	100e0e0 <usleep>
int infinite_spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue);

int pulsing_box(alt_up_pixel_buffer_dma_dev *pixel_buffer) {
    int x0 = X_OFFSET, y0 = Y_OFFSET, x1 = WIDTH, y1 = HEIGHT, i, color = 0;

    for (i = 0; i < HEIGHT / 2; i++) {
 100070c:	e0bffa17 	ldw	r2,-24(fp)
 1000710:	10800044 	addi	r2,r2,1
 1000714:	e0bffa15 	stw	r2,-24(fp)
 1000718:	e0bffa17 	ldw	r2,-24(fp)
 100071c:	10801e10 	cmplti	r2,r2,120
 1000720:	103fe31e 	bne	r2,zero,10006b0 <pulsing_box+0x3c>
        color += COLOR_INC;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }
    for (i = HEIGHT / 2; i >= 0; i--) {
 1000724:	00801e04 	movi	r2,120
 1000728:	e0bffa15 	stw	r2,-24(fp)
 100072c:	00001806 	br	1000790 <pulsing_box+0x11c>
        color = 0x0000;
 1000730:	e03ff915 	stw	zero,-28(fp)
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
 1000734:	e0fffe17 	ldw	r3,-8(fp)
 1000738:	e0bffa17 	ldw	r2,-24(fp)
 100073c:	188b883a 	add	r5,r3,r2
 1000740:	e0fffd17 	ldw	r3,-12(fp)
 1000744:	e0bffa17 	ldw	r2,-24(fp)
 1000748:	188d883a 	add	r6,r3,r2
 100074c:	e0fffc17 	ldw	r3,-16(fp)
 1000750:	e0bffa17 	ldw	r2,-24(fp)
 1000754:	188fc83a 	sub	r7,r3,r2
 1000758:	e0fffb17 	ldw	r3,-20(fp)
 100075c:	e0bffa17 	ldw	r2,-24(fp)
 1000760:	1885c83a 	sub	r2,r3,r2
 1000764:	d8800015 	stw	r2,0(sp)
 1000768:	e0bff917 	ldw	r2,-28(fp)
 100076c:	d8800115 	stw	r2,4(sp)
 1000770:	d8000215 	stw	zero,8(sp)
 1000774:	e13fff17 	ldw	r4,-4(fp)
 1000778:	10109580 	call	1010958 <alt_up_pixel_buffer_dma_draw_rectangle>
        usleep(SLEEP);
 100077c:	010f4244 	movi	r4,15625
 1000780:	100e0e00 	call	100e0e0 <usleep>
    for (i = 0; i < HEIGHT / 2; i++) {
        color += COLOR_INC;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }
    for (i = HEIGHT / 2; i >= 0; i--) {
 1000784:	e0bffa17 	ldw	r2,-24(fp)
 1000788:	10bfffc4 	addi	r2,r2,-1
 100078c:	e0bffa15 	stw	r2,-24(fp)
 1000790:	e0bffa17 	ldw	r2,-24(fp)
 1000794:	1004403a 	cmpge	r2,r2,zero
 1000798:	103fe51e 	bne	r2,zero,1000730 <pulsing_box+0xbc>
        color = 0x0000;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }

    return 0;
 100079c:	0005883a 	mov	r2,zero
}
 10007a0:	e037883a 	mov	sp,fp
 10007a4:	dfc00117 	ldw	ra,4(sp)
 10007a8:	df000017 	ldw	fp,0(sp)
 10007ac:	dec00204 	addi	sp,sp,8
 10007b0:	f800283a 	ret

010007b4 <spinner>:

int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue) {
 10007b4:	deffe904 	addi	sp,sp,-92
 10007b8:	dfc01615 	stw	ra,88(sp)
 10007bc:	df001515 	stw	fp,84(sp)
 10007c0:	dc401415 	stw	r17,80(sp)
 10007c4:	dc001315 	stw	r16,76(sp)
 10007c8:	df001304 	addi	fp,sp,76
 10007cc:	e13ffc15 	stw	r4,-16(fp)
 10007d0:	e17ffd15 	stw	r5,-12(fp)
 10007d4:	e1bffe15 	stw	r6,-8(fp)
 10007d8:	e1ffff15 	stw	r7,-4(fp)
    // int x0 = -40, y0 = 120, x1 = 360, y1 = 120;
    float theta = 0.0, r = 100.0, inc = 0.01745, pi = 3.14159;
 10007dc:	e03ffb15 	stw	zero,-20(fp)
 10007e0:	0090b234 	movhi	r2,17096
 10007e4:	e0bffa15 	stw	r2,-24(fp)
 10007e8:	008f23f4 	movhi	r2,15503
 10007ec:	10bcd344 	addi	r2,r2,-3251
 10007f0:	e0bff915 	stw	r2,-28(fp)
 10007f4:	00901274 	movhi	r2,16457
 10007f8:	1083f404 	addi	r2,r2,4048
 10007fc:	e0bff815 	stw	r2,-32(fp)
    int x0, y0, x1, y1, i, color = 0xFFFF, delay = 19, delay_count = delay;
 1000800:	00bfffd4 	movui	r2,65535
 1000804:	e0bff215 	stw	r2,-56(fp)
 1000808:	008004c4 	movi	r2,19
 100080c:	e0bff115 	stw	r2,-60(fp)
 1000810:	e0bff117 	ldw	r2,-60(fp)
 1000814:	e0bff015 	stw	r2,-64(fp)

    while (theta < pi) {
 1000818:	0000ad06 	br	1000ad0 <spinner+0x31c>
        //if (theta > pi) theta = 0.0;

        //I don't know the cost of calculation
        x0 = (int)(r * cos(theta)) + WIDTH / 2;
 100081c:	e13ffa17 	ldw	r4,-24(fp)
 1000820:	10039640 	call	1003964 <__extendsfdf2>
 1000824:	1021883a 	mov	r16,r2
 1000828:	1823883a 	mov	r17,r3
 100082c:	e13ffb17 	ldw	r4,-20(fp)
 1000830:	10039640 	call	1003964 <__extendsfdf2>
 1000834:	100b883a 	mov	r5,r2
 1000838:	180d883a 	mov	r6,r3
 100083c:	2809883a 	mov	r4,r5
 1000840:	300b883a 	mov	r5,r6
 1000844:	1000fb80 	call	1000fb8 <cos>
 1000848:	100f883a 	mov	r7,r2
 100084c:	1811883a 	mov	r8,r3
 1000850:	8009883a 	mov	r4,r16
 1000854:	880b883a 	mov	r5,r17
 1000858:	380d883a 	mov	r6,r7
 100085c:	400f883a 	mov	r7,r8
 1000860:	1003ebc0 	call	1003ebc <__muldf3>
 1000864:	1009883a 	mov	r4,r2
 1000868:	180b883a 	mov	r5,r3
 100086c:	2005883a 	mov	r2,r4
 1000870:	2807883a 	mov	r3,r5
 1000874:	1009883a 	mov	r4,r2
 1000878:	180b883a 	mov	r5,r3
 100087c:	10045100 	call	1004510 <__fixdfsi>
 1000880:	10802804 	addi	r2,r2,160
 1000884:	e0bff715 	stw	r2,-36(fp)
        y0 = (int)(r * sin(theta)) + HEIGHT / 2;
 1000888:	e13ffa17 	ldw	r4,-24(fp)
 100088c:	10039640 	call	1003964 <__extendsfdf2>
 1000890:	1021883a 	mov	r16,r2
 1000894:	1823883a 	mov	r17,r3
 1000898:	e13ffb17 	ldw	r4,-20(fp)
 100089c:	10039640 	call	1003964 <__extendsfdf2>
 10008a0:	100b883a 	mov	r5,r2
 10008a4:	180d883a 	mov	r6,r3
 10008a8:	2809883a 	mov	r4,r5
 10008ac:	300b883a 	mov	r5,r6
 10008b0:	10011200 	call	1001120 <sin>
 10008b4:	100f883a 	mov	r7,r2
 10008b8:	1811883a 	mov	r8,r3
 10008bc:	8009883a 	mov	r4,r16
 10008c0:	880b883a 	mov	r5,r17
 10008c4:	380d883a 	mov	r6,r7
 10008c8:	400f883a 	mov	r7,r8
 10008cc:	1003ebc0 	call	1003ebc <__muldf3>
 10008d0:	1009883a 	mov	r4,r2
 10008d4:	180b883a 	mov	r5,r3
 10008d8:	2005883a 	mov	r2,r4
 10008dc:	2807883a 	mov	r3,r5
 10008e0:	1009883a 	mov	r4,r2
 10008e4:	180b883a 	mov	r5,r3
 10008e8:	10045100 	call	1004510 <__fixdfsi>
 10008ec:	10801e04 	addi	r2,r2,120
 10008f0:	e0bff615 	stw	r2,-40(fp)
        x1 = (int)(r * cos(theta + pi)) + WIDTH / 2;
 10008f4:	e13ffa17 	ldw	r4,-24(fp)
 10008f8:	10039640 	call	1003964 <__extendsfdf2>
 10008fc:	1021883a 	mov	r16,r2
 1000900:	1823883a 	mov	r17,r3
 1000904:	e13ffb17 	ldw	r4,-20(fp)
 1000908:	e17ff817 	ldw	r5,-32(fp)
 100090c:	10038100 	call	1003810 <__addsf3>
 1000910:	1009883a 	mov	r4,r2
 1000914:	10039640 	call	1003964 <__extendsfdf2>
 1000918:	100b883a 	mov	r5,r2
 100091c:	180d883a 	mov	r6,r3
 1000920:	2809883a 	mov	r4,r5
 1000924:	300b883a 	mov	r5,r6
 1000928:	1000fb80 	call	1000fb8 <cos>
 100092c:	100f883a 	mov	r7,r2
 1000930:	1811883a 	mov	r8,r3
 1000934:	8009883a 	mov	r4,r16
 1000938:	880b883a 	mov	r5,r17
 100093c:	380d883a 	mov	r6,r7
 1000940:	400f883a 	mov	r7,r8
 1000944:	1003ebc0 	call	1003ebc <__muldf3>
 1000948:	1009883a 	mov	r4,r2
 100094c:	180b883a 	mov	r5,r3
 1000950:	2005883a 	mov	r2,r4
 1000954:	2807883a 	mov	r3,r5
 1000958:	1009883a 	mov	r4,r2
 100095c:	180b883a 	mov	r5,r3
 1000960:	10045100 	call	1004510 <__fixdfsi>
 1000964:	10802804 	addi	r2,r2,160
 1000968:	e0bff515 	stw	r2,-44(fp)
        y1 = (int)(r * sin(theta + pi)) + HEIGHT / 2;
 100096c:	e13ffa17 	ldw	r4,-24(fp)
 1000970:	10039640 	call	1003964 <__extendsfdf2>
 1000974:	1021883a 	mov	r16,r2
 1000978:	1823883a 	mov	r17,r3
 100097c:	e13ffb17 	ldw	r4,-20(fp)
 1000980:	e17ff817 	ldw	r5,-32(fp)
 1000984:	10038100 	call	1003810 <__addsf3>
 1000988:	1009883a 	mov	r4,r2
 100098c:	10039640 	call	1003964 <__extendsfdf2>
 1000990:	100b883a 	mov	r5,r2
 1000994:	180d883a 	mov	r6,r3
 1000998:	2809883a 	mov	r4,r5
 100099c:	300b883a 	mov	r5,r6
 10009a0:	10011200 	call	1001120 <sin>
 10009a4:	100f883a 	mov	r7,r2
 10009a8:	1811883a 	mov	r8,r3
 10009ac:	8009883a 	mov	r4,r16
 10009b0:	880b883a 	mov	r5,r17
 10009b4:	380d883a 	mov	r6,r7
 10009b8:	400f883a 	mov	r7,r8
 10009bc:	1003ebc0 	call	1003ebc <__muldf3>
 10009c0:	1009883a 	mov	r4,r2
 10009c4:	180b883a 	mov	r5,r3
 10009c8:	2005883a 	mov	r2,r4
 10009cc:	2807883a 	mov	r3,r5
 10009d0:	1009883a 	mov	r4,r2
 10009d4:	180b883a 	mov	r5,r3
 10009d8:	10045100 	call	1004510 <__fixdfsi>
 10009dc:	10801e04 	addi	r2,r2,120
 10009e0:	e0bff415 	stw	r2,-48(fp)

        theta += inc;
 10009e4:	e13ffb17 	ldw	r4,-20(fp)
 10009e8:	e17ff917 	ldw	r5,-28(fp)
 10009ec:	10038100 	call	1003810 <__addsf3>
 10009f0:	e0bffb15 	stw	r2,-20(fp)

        enqueue(x0_queue, x0);
 10009f4:	e13ffd17 	ldw	r4,-12(fp)
 10009f8:	e17ff717 	ldw	r5,-36(fp)
 10009fc:	100026c0 	call	100026c <enqueue>
        enqueue(y0_queue, y0);
 1000a00:	e13fff17 	ldw	r4,-4(fp)
 1000a04:	e17ff617 	ldw	r5,-40(fp)
 1000a08:	100026c0 	call	100026c <enqueue>
        enqueue(x1_queue, x1);
 1000a0c:	e13ffe17 	ldw	r4,-8(fp)
 1000a10:	e17ff517 	ldw	r5,-44(fp)
 1000a14:	100026c0 	call	100026c <enqueue>
        enqueue(y1_queue, y1);
 1000a18:	e1000417 	ldw	r4,16(fp)
 1000a1c:	e17ff417 	ldw	r5,-48(fp)
 1000a20:	100026c0 	call	100026c <enqueue>

        color += COLOR_INC;
 1000a24:	e0bff217 	ldw	r2,-56(fp)
 1000a28:	10808884 	addi	r2,r2,546
 1000a2c:	e0bff215 	stw	r2,-56(fp)
        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 0);
 1000a30:	e0bff417 	ldw	r2,-48(fp)
 1000a34:	d8800015 	stw	r2,0(sp)
 1000a38:	e0bff217 	ldw	r2,-56(fp)
 1000a3c:	d8800115 	stw	r2,4(sp)
 1000a40:	d8000215 	stw	zero,8(sp)
 1000a44:	e13ffc17 	ldw	r4,-16(fp)
 1000a48:	e17ff717 	ldw	r5,-36(fp)
 1000a4c:	e1bff617 	ldw	r6,-40(fp)
 1000a50:	e1fff517 	ldw	r7,-44(fp)
 1000a54:	1010af40 	call	1010af4 <alt_up_pixel_buffer_dma_draw_line>

        if (delay_count == 0) {
 1000a58:	e0bff017 	ldw	r2,-64(fp)
 1000a5c:	1004c03a 	cmpne	r2,r2,zero
 1000a60:	1000161e 	bne	r2,zero,1000abc <spinner+0x308>
            x0 = dequeue(x0_queue);
 1000a64:	e13ffd17 	ldw	r4,-12(fp)
 1000a68:	10003380 	call	1000338 <dequeue>
 1000a6c:	e0bff715 	stw	r2,-36(fp)
            y0 = dequeue(y0_queue);
 1000a70:	e13fff17 	ldw	r4,-4(fp)
 1000a74:	10003380 	call	1000338 <dequeue>
 1000a78:	e0bff615 	stw	r2,-40(fp)
            x1 = dequeue(x1_queue);
 1000a7c:	e13ffe17 	ldw	r4,-8(fp)
 1000a80:	10003380 	call	1000338 <dequeue>
 1000a84:	e0bff515 	stw	r2,-44(fp)
            y1 = dequeue(y1_queue);
 1000a88:	e1000417 	ldw	r4,16(fp)
 1000a8c:	10003380 	call	1000338 <dequeue>
 1000a90:	e0bff415 	stw	r2,-48(fp)

            alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
 1000a94:	e0bff417 	ldw	r2,-48(fp)
 1000a98:	d8800015 	stw	r2,0(sp)
 1000a9c:	d8000115 	stw	zero,4(sp)
 1000aa0:	d8000215 	stw	zero,8(sp)
 1000aa4:	e13ffc17 	ldw	r4,-16(fp)
 1000aa8:	e17ff717 	ldw	r5,-36(fp)
 1000aac:	e1bff617 	ldw	r6,-40(fp)
 1000ab0:	e1fff517 	ldw	r7,-44(fp)
 1000ab4:	1010af40 	call	1010af4 <alt_up_pixel_buffer_dma_draw_line>
 1000ab8:	00000306 	br	1000ac8 <spinner+0x314>
        }
        else
            delay_count--;
 1000abc:	e0bff017 	ldw	r2,-64(fp)
 1000ac0:	10bfffc4 	addi	r2,r2,-1
 1000ac4:	e0bff015 	stw	r2,-64(fp)

        usleep(SLEEP);
 1000ac8:	010f4244 	movi	r4,15625
 1000acc:	100e0e00 	call	100e0e0 <usleep>
int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue) {
    // int x0 = -40, y0 = 120, x1 = 360, y1 = 120;
    float theta = 0.0, r = 100.0, inc = 0.01745, pi = 3.14159;
    int x0, y0, x1, y1, i, color = 0xFFFF, delay = 19, delay_count = delay;

    while (theta < pi) {
 1000ad0:	e13ffb17 	ldw	r4,-20(fp)
 1000ad4:	e17ff817 	ldw	r5,-32(fp)
 1000ad8:	10038ec0 	call	10038ec <__ltsf2>
 1000adc:	1004803a 	cmplt	r2,r2,zero
 1000ae0:	103f4e1e 	bne	r2,zero,100081c <spinner+0x68>

        usleep(SLEEP);
    }

    // Clears the old lines
    while (!is_empty(x0_queue)) {
 1000ae4:	00001506 	br	1000b3c <spinner+0x388>
        x0 = dequeue(x0_queue);
 1000ae8:	e13ffd17 	ldw	r4,-12(fp)
 1000aec:	10003380 	call	1000338 <dequeue>
 1000af0:	e0bff715 	stw	r2,-36(fp)
        y0 = dequeue(y0_queue);
 1000af4:	e13fff17 	ldw	r4,-4(fp)
 1000af8:	10003380 	call	1000338 <dequeue>
 1000afc:	e0bff615 	stw	r2,-40(fp)
        x1 = dequeue(x1_queue);
 1000b00:	e13ffe17 	ldw	r4,-8(fp)
 1000b04:	10003380 	call	1000338 <dequeue>
 1000b08:	e0bff515 	stw	r2,-44(fp)
        y1 = dequeue(y1_queue);
 1000b0c:	e1000417 	ldw	r4,16(fp)
 1000b10:	10003380 	call	1000338 <dequeue>
 1000b14:	e0bff415 	stw	r2,-48(fp)

        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
 1000b18:	e0bff417 	ldw	r2,-48(fp)
 1000b1c:	d8800015 	stw	r2,0(sp)
 1000b20:	d8000115 	stw	zero,4(sp)
 1000b24:	d8000215 	stw	zero,8(sp)
 1000b28:	e13ffc17 	ldw	r4,-16(fp)
 1000b2c:	e17ff717 	ldw	r5,-36(fp)
 1000b30:	e1bff617 	ldw	r6,-40(fp)
 1000b34:	e1fff517 	ldw	r7,-44(fp)
 1000b38:	1010af40 	call	1010af4 <alt_up_pixel_buffer_dma_draw_line>

        usleep(SLEEP);
    }

    // Clears the old lines
    while (!is_empty(x0_queue)) {
 1000b3c:	e13ffd17 	ldw	r4,-12(fp)
 1000b40:	10004480 	call	1000448 <is_empty>
 1000b44:	1005003a 	cmpeq	r2,r2,zero
 1000b48:	103fe71e 	bne	r2,zero,1000ae8 <spinner+0x334>
        y1 = dequeue(y1_queue);

        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
    }

    return 0;
 1000b4c:	0005883a 	mov	r2,zero
}
 1000b50:	e037883a 	mov	sp,fp
 1000b54:	dfc00317 	ldw	ra,12(sp)
 1000b58:	df000217 	ldw	fp,8(sp)
 1000b5c:	dc400117 	ldw	r17,4(sp)
 1000b60:	dc000017 	ldw	r16,0(sp)
 1000b64:	dec00404 	addi	sp,sp,16
 1000b68:	f800283a 	ret

01000b6c <infinite_spinner>:

int infinite_spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer, Queue * x0_queue, Queue * x1_queue, Queue * y0_queue, Queue * y1_queue) {
 1000b6c:	deffe904 	addi	sp,sp,-92
 1000b70:	dfc01615 	stw	ra,88(sp)
 1000b74:	df001515 	stw	fp,84(sp)
 1000b78:	dc401415 	stw	r17,80(sp)
 1000b7c:	dc001315 	stw	r16,76(sp)
 1000b80:	df001304 	addi	fp,sp,76
 1000b84:	e13ffc15 	stw	r4,-16(fp)
 1000b88:	e17ffd15 	stw	r5,-12(fp)
 1000b8c:	e1bffe15 	stw	r6,-8(fp)
 1000b90:	e1ffff15 	stw	r7,-4(fp)
    // int x0 = -40, y0 = 120, x1 = 360, y1 = 120;
    float theta = 0.0, r = 100.0, inc = 0.01745, pi = 3.14159;
 1000b94:	e03ffb15 	stw	zero,-20(fp)
 1000b98:	0090b234 	movhi	r2,17096
 1000b9c:	e0bffa15 	stw	r2,-24(fp)
 1000ba0:	008f23f4 	movhi	r2,15503
 1000ba4:	10bcd344 	addi	r2,r2,-3251
 1000ba8:	e0bff915 	stw	r2,-28(fp)
 1000bac:	00901274 	movhi	r2,16457
 1000bb0:	1083f404 	addi	r2,r2,4048
 1000bb4:	e0bff815 	stw	r2,-32(fp)
    int x0, y0, x1, y1, i, color = 0xFFFF, delay = 19, delay_count = delay;
 1000bb8:	00bfffd4 	movui	r2,65535
 1000bbc:	e0bff215 	stw	r2,-56(fp)
 1000bc0:	008004c4 	movi	r2,19
 1000bc4:	e0bff115 	stw	r2,-60(fp)
 1000bc8:	e0bff117 	ldw	r2,-60(fp)
 1000bcc:	e0bff015 	stw	r2,-64(fp)

    while (1) {
        if (theta > pi) theta = 0.0;
 1000bd0:	e13ffb17 	ldw	r4,-20(fp)
 1000bd4:	e17ff817 	ldw	r5,-32(fp)
 1000bd8:	10038740 	call	1003874 <__gtsf2>
 1000bdc:	10800048 	cmpgei	r2,r2,1
 1000be0:	1000011e 	bne	r2,zero,1000be8 <infinite_spinner+0x7c>
 1000be4:	00000106 	br	1000bec <infinite_spinner+0x80>
 1000be8:	e03ffb15 	stw	zero,-20(fp)

        //I don't know the cost of calculation
        x0 = (int)(r * cos(theta)) + WIDTH / 2;
 1000bec:	e13ffa17 	ldw	r4,-24(fp)
 1000bf0:	10039640 	call	1003964 <__extendsfdf2>
 1000bf4:	1021883a 	mov	r16,r2
 1000bf8:	1823883a 	mov	r17,r3
 1000bfc:	e13ffb17 	ldw	r4,-20(fp)
 1000c00:	10039640 	call	1003964 <__extendsfdf2>
 1000c04:	100b883a 	mov	r5,r2
 1000c08:	180d883a 	mov	r6,r3
 1000c0c:	2809883a 	mov	r4,r5
 1000c10:	300b883a 	mov	r5,r6
 1000c14:	1000fb80 	call	1000fb8 <cos>
 1000c18:	100f883a 	mov	r7,r2
 1000c1c:	1811883a 	mov	r8,r3
 1000c20:	8009883a 	mov	r4,r16
 1000c24:	880b883a 	mov	r5,r17
 1000c28:	380d883a 	mov	r6,r7
 1000c2c:	400f883a 	mov	r7,r8
 1000c30:	1003ebc0 	call	1003ebc <__muldf3>
 1000c34:	1009883a 	mov	r4,r2
 1000c38:	180b883a 	mov	r5,r3
 1000c3c:	2005883a 	mov	r2,r4
 1000c40:	2807883a 	mov	r3,r5
 1000c44:	1009883a 	mov	r4,r2
 1000c48:	180b883a 	mov	r5,r3
 1000c4c:	10045100 	call	1004510 <__fixdfsi>
 1000c50:	10802804 	addi	r2,r2,160
 1000c54:	e0bff715 	stw	r2,-36(fp)
        y0 = (int)(r * sin(theta)) + HEIGHT / 2;
 1000c58:	e13ffa17 	ldw	r4,-24(fp)
 1000c5c:	10039640 	call	1003964 <__extendsfdf2>
 1000c60:	1021883a 	mov	r16,r2
 1000c64:	1823883a 	mov	r17,r3
 1000c68:	e13ffb17 	ldw	r4,-20(fp)
 1000c6c:	10039640 	call	1003964 <__extendsfdf2>
 1000c70:	100b883a 	mov	r5,r2
 1000c74:	180d883a 	mov	r6,r3
 1000c78:	2809883a 	mov	r4,r5
 1000c7c:	300b883a 	mov	r5,r6
 1000c80:	10011200 	call	1001120 <sin>
 1000c84:	100f883a 	mov	r7,r2
 1000c88:	1811883a 	mov	r8,r3
 1000c8c:	8009883a 	mov	r4,r16
 1000c90:	880b883a 	mov	r5,r17
 1000c94:	380d883a 	mov	r6,r7
 1000c98:	400f883a 	mov	r7,r8
 1000c9c:	1003ebc0 	call	1003ebc <__muldf3>
 1000ca0:	1009883a 	mov	r4,r2
 1000ca4:	180b883a 	mov	r5,r3
 1000ca8:	2005883a 	mov	r2,r4
 1000cac:	2807883a 	mov	r3,r5
 1000cb0:	1009883a 	mov	r4,r2
 1000cb4:	180b883a 	mov	r5,r3
 1000cb8:	10045100 	call	1004510 <__fixdfsi>
 1000cbc:	10801e04 	addi	r2,r2,120
 1000cc0:	e0bff615 	stw	r2,-40(fp)
        x1 = (int)(r * cos(theta + pi)) + WIDTH / 2;
 1000cc4:	e13ffa17 	ldw	r4,-24(fp)
 1000cc8:	10039640 	call	1003964 <__extendsfdf2>
 1000ccc:	1021883a 	mov	r16,r2
 1000cd0:	1823883a 	mov	r17,r3
 1000cd4:	e13ffb17 	ldw	r4,-20(fp)
 1000cd8:	e17ff817 	ldw	r5,-32(fp)
 1000cdc:	10038100 	call	1003810 <__addsf3>
 1000ce0:	1009883a 	mov	r4,r2
 1000ce4:	10039640 	call	1003964 <__extendsfdf2>
 1000ce8:	100b883a 	mov	r5,r2
 1000cec:	180d883a 	mov	r6,r3
 1000cf0:	2809883a 	mov	r4,r5
 1000cf4:	300b883a 	mov	r5,r6
 1000cf8:	1000fb80 	call	1000fb8 <cos>
 1000cfc:	100f883a 	mov	r7,r2
 1000d00:	1811883a 	mov	r8,r3
 1000d04:	8009883a 	mov	r4,r16
 1000d08:	880b883a 	mov	r5,r17
 1000d0c:	380d883a 	mov	r6,r7
 1000d10:	400f883a 	mov	r7,r8
 1000d14:	1003ebc0 	call	1003ebc <__muldf3>
 1000d18:	1009883a 	mov	r4,r2
 1000d1c:	180b883a 	mov	r5,r3
 1000d20:	2005883a 	mov	r2,r4
 1000d24:	2807883a 	mov	r3,r5
 1000d28:	1009883a 	mov	r4,r2
 1000d2c:	180b883a 	mov	r5,r3
 1000d30:	10045100 	call	1004510 <__fixdfsi>
 1000d34:	10802804 	addi	r2,r2,160
 1000d38:	e0bff515 	stw	r2,-44(fp)
        y1 = (int)(r * sin(theta + pi)) + HEIGHT / 2;
 1000d3c:	e13ffa17 	ldw	r4,-24(fp)
 1000d40:	10039640 	call	1003964 <__extendsfdf2>
 1000d44:	1021883a 	mov	r16,r2
 1000d48:	1823883a 	mov	r17,r3
 1000d4c:	e13ffb17 	ldw	r4,-20(fp)
 1000d50:	e17ff817 	ldw	r5,-32(fp)
 1000d54:	10038100 	call	1003810 <__addsf3>
 1000d58:	1009883a 	mov	r4,r2
 1000d5c:	10039640 	call	1003964 <__extendsfdf2>
 1000d60:	100b883a 	mov	r5,r2
 1000d64:	180d883a 	mov	r6,r3
 1000d68:	2809883a 	mov	r4,r5
 1000d6c:	300b883a 	mov	r5,r6
 1000d70:	10011200 	call	1001120 <sin>
 1000d74:	100f883a 	mov	r7,r2
 1000d78:	1811883a 	mov	r8,r3
 1000d7c:	8009883a 	mov	r4,r16
 1000d80:	880b883a 	mov	r5,r17
 1000d84:	380d883a 	mov	r6,r7
 1000d88:	400f883a 	mov	r7,r8
 1000d8c:	1003ebc0 	call	1003ebc <__muldf3>
 1000d90:	1009883a 	mov	r4,r2
 1000d94:	180b883a 	mov	r5,r3
 1000d98:	2005883a 	mov	r2,r4
 1000d9c:	2807883a 	mov	r3,r5
 1000da0:	1009883a 	mov	r4,r2
 1000da4:	180b883a 	mov	r5,r3
 1000da8:	10045100 	call	1004510 <__fixdfsi>
 1000dac:	10801e04 	addi	r2,r2,120
 1000db0:	e0bff415 	stw	r2,-48(fp)

        theta += inc;
 1000db4:	e13ffb17 	ldw	r4,-20(fp)
 1000db8:	e17ff917 	ldw	r5,-28(fp)
 1000dbc:	10038100 	call	1003810 <__addsf3>
 1000dc0:	e0bffb15 	stw	r2,-20(fp)

        enqueue(x0_queue, x0);
 1000dc4:	e13ffd17 	ldw	r4,-12(fp)
 1000dc8:	e17ff717 	ldw	r5,-36(fp)
 1000dcc:	100026c0 	call	100026c <enqueue>
        enqueue(y0_queue, y0);
 1000dd0:	e13fff17 	ldw	r4,-4(fp)
 1000dd4:	e17ff617 	ldw	r5,-40(fp)
 1000dd8:	100026c0 	call	100026c <enqueue>
        enqueue(x1_queue, x1);
 1000ddc:	e13ffe17 	ldw	r4,-8(fp)
 1000de0:	e17ff517 	ldw	r5,-44(fp)
 1000de4:	100026c0 	call	100026c <enqueue>
        enqueue(y1_queue, y1);
 1000de8:	e1000417 	ldw	r4,16(fp)
 1000dec:	e17ff417 	ldw	r5,-48(fp)
 1000df0:	100026c0 	call	100026c <enqueue>

        color += COLOR_INC;
 1000df4:	e0bff217 	ldw	r2,-56(fp)
 1000df8:	10808884 	addi	r2,r2,546
 1000dfc:	e0bff215 	stw	r2,-56(fp)
        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 0);
 1000e00:	e0bff417 	ldw	r2,-48(fp)
 1000e04:	d8800015 	stw	r2,0(sp)
 1000e08:	e0bff217 	ldw	r2,-56(fp)
 1000e0c:	d8800115 	stw	r2,4(sp)
 1000e10:	d8000215 	stw	zero,8(sp)
 1000e14:	e13ffc17 	ldw	r4,-16(fp)
 1000e18:	e17ff717 	ldw	r5,-36(fp)
 1000e1c:	e1bff617 	ldw	r6,-40(fp)
 1000e20:	e1fff517 	ldw	r7,-44(fp)
 1000e24:	1010af40 	call	1010af4 <alt_up_pixel_buffer_dma_draw_line>

        if (delay_count == 0) {
 1000e28:	e0bff017 	ldw	r2,-64(fp)
 1000e2c:	1004c03a 	cmpne	r2,r2,zero
 1000e30:	1000161e 	bne	r2,zero,1000e8c <infinite_spinner+0x320>
            x0 = dequeue(x0_queue);
 1000e34:	e13ffd17 	ldw	r4,-12(fp)
 1000e38:	10003380 	call	1000338 <dequeue>
 1000e3c:	e0bff715 	stw	r2,-36(fp)
            y0 = dequeue(y0_queue);
 1000e40:	e13fff17 	ldw	r4,-4(fp)
 1000e44:	10003380 	call	1000338 <dequeue>
 1000e48:	e0bff615 	stw	r2,-40(fp)
            x1 = dequeue(x1_queue);
 1000e4c:	e13ffe17 	ldw	r4,-8(fp)
 1000e50:	10003380 	call	1000338 <dequeue>
 1000e54:	e0bff515 	stw	r2,-44(fp)
            y1 = dequeue(y1_queue);
 1000e58:	e1000417 	ldw	r4,16(fp)
 1000e5c:	10003380 	call	1000338 <dequeue>
 1000e60:	e0bff415 	stw	r2,-48(fp)

            alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
 1000e64:	e0bff417 	ldw	r2,-48(fp)
 1000e68:	d8800015 	stw	r2,0(sp)
 1000e6c:	d8000115 	stw	zero,4(sp)
 1000e70:	d8000215 	stw	zero,8(sp)
 1000e74:	e13ffc17 	ldw	r4,-16(fp)
 1000e78:	e17ff717 	ldw	r5,-36(fp)
 1000e7c:	e1bff617 	ldw	r6,-40(fp)
 1000e80:	e1fff517 	ldw	r7,-44(fp)
 1000e84:	1010af40 	call	1010af4 <alt_up_pixel_buffer_dma_draw_line>
 1000e88:	00000306 	br	1000e98 <infinite_spinner+0x32c>
        }
        else
            delay_count--;
 1000e8c:	e0bff017 	ldw	r2,-64(fp)
 1000e90:	10bfffc4 	addi	r2,r2,-1
 1000e94:	e0bff015 	stw	r2,-64(fp)

        usleep((int)SLEEP/2);
 1000e98:	0107a104 	movi	r4,7812
 1000e9c:	100e0e00 	call	100e0e0 <usleep>
    }
 1000ea0:	003f4b06 	br	1000bd0 <infinite_spinner+0x64>

01000ea4 <main>:
    return 0;
}

int main(void) {
 1000ea4:	defff704 	addi	sp,sp,-36
 1000ea8:	dfc00815 	stw	ra,32(sp)
 1000eac:	df000715 	stw	fp,28(sp)
 1000eb0:	df000704 	addi	fp,sp,28
    printf("Hello Colin, from Nios II!\n");
 1000eb4:	01004074 	movhi	r4,257
 1000eb8:	21090e04 	addi	r4,r4,9272
 1000ebc:	10059ac0 	call	10059ac <puts>

    //Character Buffer
    alt_up_char_buffer_dev *char_buffer;
    char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
 1000ec0:	01004074 	movhi	r4,257
 1000ec4:	21091504 	addi	r4,r4,9300
 1000ec8:	100f6700 	call	100f670 <alt_up_char_buffer_open_dev>
 1000ecc:	e0bfff15 	stw	r2,-4(fp)
    alt_up_char_buffer_init(char_buffer);
 1000ed0:	e13fff17 	ldw	r4,-4(fp)
 1000ed4:	100f5ec0 	call	100f5ec <alt_up_char_buffer_init>

    //Write some text
    alt_up_char_buffer_string(char_buffer, "WELCOME TO FRUIT EXPLOSION", 27, 29);
 1000ed8:	e13fff17 	ldw	r4,-4(fp)
 1000edc:	01404074 	movhi	r5,257
 1000ee0:	29491a04 	addi	r5,r5,9320
 1000ee4:	018006c4 	movi	r6,27
 1000ee8:	01c00744 	movi	r7,29
 1000eec:	100f7800 	call	100f780 <alt_up_char_buffer_string>
    alt_up_char_buffer_string(char_buffer, "THE FRUIT EXPLODING GAME", 28, 31);
 1000ef0:	e13fff17 	ldw	r4,-4(fp)
 1000ef4:	01404074 	movhi	r5,257
 1000ef8:	29492104 	addi	r5,r5,9348
 1000efc:	01800704 	movi	r6,28
 1000f00:	01c007c4 	movi	r7,31
 1000f04:	100f7800 	call	100f780 <alt_up_char_buffer_string>
    alt_up_char_buffer_string(char_buffer, "GAME COMING SOON", 32, 36);
 1000f08:	e13fff17 	ldw	r4,-4(fp)
 1000f0c:	01404074 	movhi	r5,257
 1000f10:	29492804 	addi	r5,r5,9376
 1000f14:	01800804 	movi	r6,32
 1000f18:	01c00904 	movi	r7,36
 1000f1c:	100f7800 	call	100f780 <alt_up_char_buffer_string>

    //Pixel Buffer
    alt_up_pixel_buffer_dma_dev *pixel_buffer;

    //Opens the pixel buffer device specified by /dev/pixel_buffer_dma
    pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
 1000f20:	01004074 	movhi	r4,257
 1000f24:	21092d04 	addi	r4,r4,9396
 1000f28:	100f8f00 	call	100f8f0 <alt_up_pixel_buffer_dma_open_dev>
 1000f2c:	e0bffe15 	stw	r2,-8(fp)

    //Set the background buffer address - Although we don't use the background, they only provide a function to change the background buffer address, so we must set that, and then swap it to the foreground
    //Changes the back buffer's start address
    alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
 1000f30:	e13ffe17 	ldw	r4,-8(fp)
 1000f34:	01400234 	movhi	r5,8
 1000f38:	100fadc0 	call	100fadc <alt_up_pixel_buffer_dma_change_back_buffer_address>

    //Swap background and foreground buffers
    alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000f3c:	e13ffe17 	ldw	r4,-8(fp)
 1000f40:	100fb340 	call	100fb34 <alt_up_pixel_buffer_dma_swap_buffers>

    //Wait for the swap to complete
    while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 1000f44:	e13ffe17 	ldw	r4,-8(fp)
 1000f48:	100fb8c0 	call	100fb8c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000f4c:	1004c03a 	cmpne	r2,r2,zero
 1000f50:	103ffc1e 	bne	r2,zero,1000f44 <main+0xa0>

    //Clear the screen
    alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1000f54:	e13ffe17 	ldw	r4,-8(fp)
 1000f58:	000b883a 	mov	r5,zero
 1000f5c:	100fbc00 	call	100fbc0 <alt_up_pixel_buffer_dma_clear_screen>

    //Do your thing
    Queue * x0_queue = queue_new(20);
 1000f60:	01000504 	movi	r4,20
 1000f64:	10001f00 	call	10001f0 <queue_new>
 1000f68:	e0bffd15 	stw	r2,-12(fp)
    Queue * y0_queue = queue_new(20);
 1000f6c:	01000504 	movi	r4,20
 1000f70:	10001f00 	call	10001f0 <queue_new>
 1000f74:	e0bffc15 	stw	r2,-16(fp)
    Queue * x1_queue = queue_new(20);
 1000f78:	01000504 	movi	r4,20
 1000f7c:	10001f00 	call	10001f0 <queue_new>
 1000f80:	e0bffb15 	stw	r2,-20(fp)
    Queue * y1_queue = queue_new(20);
 1000f84:	01000504 	movi	r4,20
 1000f88:	10001f00 	call	10001f0 <queue_new>
 1000f8c:	e0bffa15 	stw	r2,-24(fp)
    while(1) {
        spinner(pixel_buffer, x0_queue, x1_queue, y0_queue, y1_queue);
 1000f90:	e0bffa17 	ldw	r2,-24(fp)
 1000f94:	d8800015 	stw	r2,0(sp)
 1000f98:	e13ffe17 	ldw	r4,-8(fp)
 1000f9c:	e17ffd17 	ldw	r5,-12(fp)
 1000fa0:	e1bffb17 	ldw	r6,-20(fp)
 1000fa4:	e1fffc17 	ldw	r7,-16(fp)
 1000fa8:	10007b40 	call	10007b4 <spinner>
        pulsing_box(pixel_buffer);
 1000fac:	e13ffe17 	ldw	r4,-8(fp)
 1000fb0:	10006740 	call	1000674 <pulsing_box>
    }
 1000fb4:	003ff606 	br	1000f90 <main+0xec>

01000fb8 <cos>:
 1000fb8:	00a00034 	movhi	r2,32768
 1000fbc:	10bfffc4 	addi	r2,r2,-1
 1000fc0:	defffa04 	addi	sp,sp,-24
 1000fc4:	114c703a 	and	r6,r2,r5
 1000fc8:	008ffa74 	movhi	r2,16361
 1000fcc:	10887ec4 	addi	r2,r2,8699
 1000fd0:	dfc00515 	stw	ra,20(sp)
 1000fd4:	2011883a 	mov	r8,r4
 1000fd8:	1180210e 	bge	r2,r6,1001060 <cos+0xa8>
 1000fdc:	009ffc34 	movhi	r2,32752
 1000fe0:	10bfffc4 	addi	r2,r2,-1
 1000fe4:	11800a0e 	bge	r2,r6,1001010 <cos+0x58>
 1000fe8:	280f883a 	mov	r7,r5
 1000fec:	400d883a 	mov	r6,r8
 1000ff0:	1003dc80 	call	1003dc8 <__subdf3>
 1000ff4:	100d883a 	mov	r6,r2
 1000ff8:	180f883a 	mov	r7,r3
 1000ffc:	3005883a 	mov	r2,r6
 1001000:	3807883a 	mov	r3,r7
 1001004:	dfc00517 	ldw	ra,20(sp)
 1001008:	dec00604 	addi	sp,sp,24
 100100c:	f800283a 	ret
 1001010:	d9800104 	addi	r6,sp,4
 1001014:	100128c0 	call	100128c <__ieee754_rem_pio2>
 1001018:	10c000cc 	andi	r3,r2,3
 100101c:	01000044 	movi	r4,1
 1001020:	19001926 	beq	r3,r4,1001088 <cos+0xd0>
 1001024:	00800084 	movi	r2,2
 1001028:	18803126 	beq	r3,r2,10010f0 <cos+0x138>
 100102c:	1800231e 	bne	r3,zero,10010bc <cos+0x104>
 1001030:	d8800117 	ldw	r2,4(sp)
 1001034:	da000317 	ldw	r8,12(sp)
 1001038:	d8c00217 	ldw	r3,8(sp)
 100103c:	da400417 	ldw	r9,16(sp)
 1001040:	400d883a 	mov	r6,r8
 1001044:	180b883a 	mov	r5,r3
 1001048:	480f883a 	mov	r7,r9
 100104c:	1009883a 	mov	r4,r2
 1001050:	1001ab40 	call	1001ab4 <__kernel_cos>
 1001054:	100d883a 	mov	r6,r2
 1001058:	180f883a 	mov	r7,r3
 100105c:	003fe706 	br	1000ffc <cos+0x44>
 1001060:	000d883a 	mov	r6,zero
 1001064:	000f883a 	mov	r7,zero
 1001068:	1001ab40 	call	1001ab4 <__kernel_cos>
 100106c:	100d883a 	mov	r6,r2
 1001070:	180f883a 	mov	r7,r3
 1001074:	3005883a 	mov	r2,r6
 1001078:	3807883a 	mov	r3,r7
 100107c:	dfc00517 	ldw	ra,20(sp)
 1001080:	dec00604 	addi	sp,sp,24
 1001084:	f800283a 	ret
 1001088:	d8800117 	ldw	r2,4(sp)
 100108c:	da000317 	ldw	r8,12(sp)
 1001090:	d8c00217 	ldw	r3,8(sp)
 1001094:	da400417 	ldw	r9,16(sp)
 1001098:	d9000015 	stw	r4,0(sp)
 100109c:	400d883a 	mov	r6,r8
 10010a0:	480f883a 	mov	r7,r9
 10010a4:	180b883a 	mov	r5,r3
 10010a8:	1009883a 	mov	r4,r2
 10010ac:	1002e640 	call	1002e64 <__kernel_sin>
 10010b0:	100d883a 	mov	r6,r2
 10010b4:	19e0003c 	xorhi	r7,r3,32768
 10010b8:	003fd006 	br	1000ffc <cos+0x44>
 10010bc:	d8800117 	ldw	r2,4(sp)
 10010c0:	da000317 	ldw	r8,12(sp)
 10010c4:	d8c00217 	ldw	r3,8(sp)
 10010c8:	da400417 	ldw	r9,16(sp)
 10010cc:	d9000015 	stw	r4,0(sp)
 10010d0:	400d883a 	mov	r6,r8
 10010d4:	480f883a 	mov	r7,r9
 10010d8:	180b883a 	mov	r5,r3
 10010dc:	1009883a 	mov	r4,r2
 10010e0:	1002e640 	call	1002e64 <__kernel_sin>
 10010e4:	100d883a 	mov	r6,r2
 10010e8:	180f883a 	mov	r7,r3
 10010ec:	003fc306 	br	1000ffc <cos+0x44>
 10010f0:	d8800117 	ldw	r2,4(sp)
 10010f4:	da000317 	ldw	r8,12(sp)
 10010f8:	d8c00217 	ldw	r3,8(sp)
 10010fc:	da400417 	ldw	r9,16(sp)
 1001100:	400d883a 	mov	r6,r8
 1001104:	180b883a 	mov	r5,r3
 1001108:	480f883a 	mov	r7,r9
 100110c:	1009883a 	mov	r4,r2
 1001110:	1001ab40 	call	1001ab4 <__kernel_cos>
 1001114:	100d883a 	mov	r6,r2
 1001118:	19e0003c 	xorhi	r7,r3,32768
 100111c:	003fb706 	br	1000ffc <cos+0x44>

01001120 <sin>:
 1001120:	00a00034 	movhi	r2,32768
 1001124:	10bfffc4 	addi	r2,r2,-1
 1001128:	defffa04 	addi	sp,sp,-24
 100112c:	114c703a 	and	r6,r2,r5
 1001130:	008ffa74 	movhi	r2,16361
 1001134:	10887ec4 	addi	r2,r2,8699
 1001138:	dfc00515 	stw	ra,20(sp)
 100113c:	2011883a 	mov	r8,r4
 1001140:	1180220e 	bge	r2,r6,10011cc <sin+0xac>
 1001144:	009ffc34 	movhi	r2,32752
 1001148:	10bfffc4 	addi	r2,r2,-1
 100114c:	11800a0e 	bge	r2,r6,1001178 <sin+0x58>
 1001150:	280f883a 	mov	r7,r5
 1001154:	400d883a 	mov	r6,r8
 1001158:	1003dc80 	call	1003dc8 <__subdf3>
 100115c:	100d883a 	mov	r6,r2
 1001160:	180f883a 	mov	r7,r3
 1001164:	3005883a 	mov	r2,r6
 1001168:	3807883a 	mov	r3,r7
 100116c:	dfc00517 	ldw	ra,20(sp)
 1001170:	dec00604 	addi	sp,sp,24
 1001174:	f800283a 	ret
 1001178:	d9800104 	addi	r6,sp,4
 100117c:	100128c0 	call	100128c <__ieee754_rem_pio2>
 1001180:	10c000cc 	andi	r3,r2,3
 1001184:	01000044 	movi	r4,1
 1001188:	19001b26 	beq	r3,r4,10011f8 <sin+0xd8>
 100118c:	00800084 	movi	r2,2
 1001190:	18803126 	beq	r3,r2,1001258 <sin+0x138>
 1001194:	1800241e 	bne	r3,zero,1001228 <sin+0x108>
 1001198:	d8800117 	ldw	r2,4(sp)
 100119c:	da000317 	ldw	r8,12(sp)
 10011a0:	d8c00217 	ldw	r3,8(sp)
 10011a4:	da400417 	ldw	r9,16(sp)
 10011a8:	d9000015 	stw	r4,0(sp)
 10011ac:	400d883a 	mov	r6,r8
 10011b0:	480f883a 	mov	r7,r9
 10011b4:	180b883a 	mov	r5,r3
 10011b8:	1009883a 	mov	r4,r2
 10011bc:	1002e640 	call	1002e64 <__kernel_sin>
 10011c0:	100d883a 	mov	r6,r2
 10011c4:	180f883a 	mov	r7,r3
 10011c8:	003fe606 	br	1001164 <sin+0x44>
 10011cc:	000d883a 	mov	r6,zero
 10011d0:	000f883a 	mov	r7,zero
 10011d4:	d8000015 	stw	zero,0(sp)
 10011d8:	1002e640 	call	1002e64 <__kernel_sin>
 10011dc:	100d883a 	mov	r6,r2
 10011e0:	180f883a 	mov	r7,r3
 10011e4:	3005883a 	mov	r2,r6
 10011e8:	3807883a 	mov	r3,r7
 10011ec:	dfc00517 	ldw	ra,20(sp)
 10011f0:	dec00604 	addi	sp,sp,24
 10011f4:	f800283a 	ret
 10011f8:	d8800117 	ldw	r2,4(sp)
 10011fc:	da000317 	ldw	r8,12(sp)
 1001200:	d8c00217 	ldw	r3,8(sp)
 1001204:	da400417 	ldw	r9,16(sp)
 1001208:	400d883a 	mov	r6,r8
 100120c:	180b883a 	mov	r5,r3
 1001210:	480f883a 	mov	r7,r9
 1001214:	1009883a 	mov	r4,r2
 1001218:	1001ab40 	call	1001ab4 <__kernel_cos>
 100121c:	100d883a 	mov	r6,r2
 1001220:	180f883a 	mov	r7,r3
 1001224:	003fcf06 	br	1001164 <sin+0x44>
 1001228:	d8800117 	ldw	r2,4(sp)
 100122c:	da000317 	ldw	r8,12(sp)
 1001230:	d8c00217 	ldw	r3,8(sp)
 1001234:	da400417 	ldw	r9,16(sp)
 1001238:	400d883a 	mov	r6,r8
 100123c:	180b883a 	mov	r5,r3
 1001240:	480f883a 	mov	r7,r9
 1001244:	1009883a 	mov	r4,r2
 1001248:	1001ab40 	call	1001ab4 <__kernel_cos>
 100124c:	100d883a 	mov	r6,r2
 1001250:	19e0003c 	xorhi	r7,r3,32768
 1001254:	003fc306 	br	1001164 <sin+0x44>
 1001258:	d8800117 	ldw	r2,4(sp)
 100125c:	da000317 	ldw	r8,12(sp)
 1001260:	d8c00217 	ldw	r3,8(sp)
 1001264:	da400417 	ldw	r9,16(sp)
 1001268:	d9000015 	stw	r4,0(sp)
 100126c:	400d883a 	mov	r6,r8
 1001270:	480f883a 	mov	r7,r9
 1001274:	180b883a 	mov	r5,r3
 1001278:	1009883a 	mov	r4,r2
 100127c:	1002e640 	call	1002e64 <__kernel_sin>
 1001280:	100d883a 	mov	r6,r2
 1001284:	19e0003c 	xorhi	r7,r3,32768
 1001288:	003fb606 	br	1001164 <sin+0x44>

0100128c <__ieee754_rem_pio2>:
 100128c:	deffe304 	addi	sp,sp,-116
 1001290:	00a00034 	movhi	r2,32768
 1001294:	10bfffc4 	addi	r2,r2,-1
 1001298:	dd801915 	stw	r22,100(sp)
 100129c:	28ac703a 	and	r22,r5,r2
 10012a0:	008ffa74 	movhi	r2,16361
 10012a4:	10887ec4 	addi	r2,r2,8699
 10012a8:	df001b15 	stw	fp,108(sp)
 10012ac:	dfc01c15 	stw	ra,112(sp)
 10012b0:	ddc01a15 	stw	r23,104(sp)
 10012b4:	dd401815 	stw	r21,96(sp)
 10012b8:	dd001715 	stw	r20,92(sp)
 10012bc:	dcc01615 	stw	r19,88(sp)
 10012c0:	dc801515 	stw	r18,84(sp)
 10012c4:	dc401415 	stw	r17,80(sp)
 10012c8:	dc001315 	stw	r16,76(sp)
 10012cc:	2013883a 	mov	r9,r4
 10012d0:	d9400a15 	stw	r5,40(sp)
 10012d4:	3039883a 	mov	fp,r6
 10012d8:	15801216 	blt	r2,r22,1001324 <__ieee754_rem_pio2+0x98>
 10012dc:	e1400115 	stw	r5,4(fp)
 10012e0:	30000315 	stw	zero,12(r6)
 10012e4:	e1000015 	stw	r4,0(fp)
 10012e8:	d8000b15 	stw	zero,44(sp)
 10012ec:	30000215 	stw	zero,8(r6)
 10012f0:	d8800b17 	ldw	r2,44(sp)
 10012f4:	dfc01c17 	ldw	ra,112(sp)
 10012f8:	df001b17 	ldw	fp,108(sp)
 10012fc:	ddc01a17 	ldw	r23,104(sp)
 1001300:	dd801917 	ldw	r22,100(sp)
 1001304:	dd401817 	ldw	r21,96(sp)
 1001308:	dd001717 	ldw	r20,92(sp)
 100130c:	dcc01617 	ldw	r19,88(sp)
 1001310:	dc801517 	ldw	r18,84(sp)
 1001314:	dc401417 	ldw	r17,80(sp)
 1001318:	dc001317 	ldw	r16,76(sp)
 100131c:	dec01d04 	addi	sp,sp,116
 1001320:	f800283a 	ret
 1001324:	009000f4 	movhi	r2,16387
 1001328:	10b65ec4 	addi	r2,r2,-9861
 100132c:	15800f0e 	bge	r2,r22,100136c <__ieee754_rem_pio2+0xe0>
 1001330:	00904e74 	movhi	r2,16697
 1001334:	10887ec4 	addi	r2,r2,8699
 1001338:	1580330e 	bge	r2,r22,1001408 <__ieee754_rem_pio2+0x17c>
 100133c:	009ffc34 	movhi	r2,32752
 1001340:	10bfffc4 	addi	r2,r2,-1
 1001344:	1580fe0e 	bge	r2,r22,1001740 <__ieee754_rem_pio2+0x4b4>
 1001348:	280f883a 	mov	r7,r5
 100134c:	480d883a 	mov	r6,r9
 1001350:	1003dc80 	call	1003dc8 <__subdf3>
 1001354:	e0c00115 	stw	r3,4(fp)
 1001358:	d8000b15 	stw	zero,44(sp)
 100135c:	e0800015 	stw	r2,0(fp)
 1001360:	e0800215 	stw	r2,8(fp)
 1001364:	e0c00315 	stw	r3,12(fp)
 1001368:	003fe106 	br	10012f0 <__ieee754_rem_pio2+0x64>
 100136c:	d9000a17 	ldw	r4,40(sp)
 1001370:	0100ce0e 	bge	zero,r4,10016ac <__ieee754_rem_pio2+0x420>
 1001374:	04151034 	movhi	r16,21568
 1001378:	044ffe74 	movhi	r17,16377
 100137c:	8c487ec4 	addi	r17,r17,8699
 1001380:	4809883a 	mov	r4,r9
 1001384:	800d883a 	mov	r6,r16
 1001388:	880f883a 	mov	r7,r17
 100138c:	1003dc80 	call	1003dc8 <__subdf3>
 1001390:	1025883a 	mov	r18,r2
 1001394:	1827883a 	mov	r19,r3
 1001398:	b4413c26 	beq	r22,r17,100188c <__ieee754_rem_pio2+0x600>
 100139c:	040698b4 	movhi	r16,6754
 10013a0:	8418cc44 	addi	r16,r16,25393
 10013a4:	044f7474 	movhi	r17,15825
 10013a8:	8c6d1844 	addi	r17,r17,-19359
 10013ac:	1009883a 	mov	r4,r2
 10013b0:	180b883a 	mov	r5,r3
 10013b4:	800d883a 	mov	r6,r16
 10013b8:	880f883a 	mov	r7,r17
 10013bc:	1003dc80 	call	1003dc8 <__subdf3>
 10013c0:	100d883a 	mov	r6,r2
 10013c4:	9009883a 	mov	r4,r18
 10013c8:	980b883a 	mov	r5,r19
 10013cc:	180f883a 	mov	r7,r3
 10013d0:	e0800015 	stw	r2,0(fp)
 10013d4:	e0c00115 	stw	r3,4(fp)
 10013d8:	1003dc80 	call	1003dc8 <__subdf3>
 10013dc:	1009883a 	mov	r4,r2
 10013e0:	800d883a 	mov	r6,r16
 10013e4:	880f883a 	mov	r7,r17
 10013e8:	180b883a 	mov	r5,r3
 10013ec:	1003dc80 	call	1003dc8 <__subdf3>
 10013f0:	1009883a 	mov	r4,r2
 10013f4:	00800044 	movi	r2,1
 10013f8:	d8800b15 	stw	r2,44(sp)
 10013fc:	e0c00315 	stw	r3,12(fp)
 1001400:	e1000215 	stw	r4,8(fp)
 1001404:	003fba06 	br	10012f0 <__ieee754_rem_pio2+0x64>
 1001408:	100317c0 	call	100317c <fabs>
 100140c:	021b72b4 	movhi	r8,28106
 1001410:	423220c4 	addi	r8,r8,-14205
 1001414:	024ff934 	movhi	r9,16356
 1001418:	4a57cc04 	addi	r9,r9,24368
 100141c:	480f883a 	mov	r7,r9
 1001420:	400d883a 	mov	r6,r8
 1001424:	1009883a 	mov	r4,r2
 1001428:	180b883a 	mov	r5,r3
 100142c:	1025883a 	mov	r18,r2
 1001430:	1827883a 	mov	r19,r3
 1001434:	1003ebc0 	call	1003ebc <__muldf3>
 1001438:	0011883a 	mov	r8,zero
 100143c:	024ff834 	movhi	r9,16352
 1001440:	480f883a 	mov	r7,r9
 1001444:	400d883a 	mov	r6,r8
 1001448:	180b883a 	mov	r5,r3
 100144c:	1009883a 	mov	r4,r2
 1001450:	1003e480 	call	1003e48 <__adddf3>
 1001454:	180b883a 	mov	r5,r3
 1001458:	1009883a 	mov	r4,r2
 100145c:	10045100 	call	1004510 <__fixdfsi>
 1001460:	1009883a 	mov	r4,r2
 1001464:	d8800b15 	stw	r2,44(sp)
 1001468:	10044180 	call	1004418 <__floatsidf>
 100146c:	1823883a 	mov	r17,r3
 1001470:	1009883a 	mov	r4,r2
 1001474:	d8800c15 	stw	r2,48(sp)
 1001478:	00effe74 	movhi	r3,49145
 100147c:	18c87ec4 	addi	r3,r3,8699
 1001480:	00951034 	movhi	r2,21568
 1001484:	880b883a 	mov	r5,r17
 1001488:	180f883a 	mov	r7,r3
 100148c:	100d883a 	mov	r6,r2
 1001490:	dc400d15 	stw	r17,52(sp)
 1001494:	1003ebc0 	call	1003ebc <__muldf3>
 1001498:	180f883a 	mov	r7,r3
 100149c:	980b883a 	mov	r5,r19
 10014a0:	9009883a 	mov	r4,r18
 10014a4:	100d883a 	mov	r6,r2
 10014a8:	1003e480 	call	1003e48 <__adddf3>
 10014ac:	d9000c17 	ldw	r4,48(sp)
 10014b0:	020698b4 	movhi	r8,6754
 10014b4:	4218cc44 	addi	r8,r8,25393
 10014b8:	024f7474 	movhi	r9,15825
 10014bc:	4a6d1844 	addi	r9,r9,-19359
 10014c0:	880b883a 	mov	r5,r17
 10014c4:	480f883a 	mov	r7,r9
 10014c8:	400d883a 	mov	r6,r8
 10014cc:	1025883a 	mov	r18,r2
 10014d0:	1827883a 	mov	r19,r3
 10014d4:	1003ebc0 	call	1003ebc <__muldf3>
 10014d8:	d9000b17 	ldw	r4,44(sp)
 10014dc:	100f883a 	mov	r7,r2
 10014e0:	1811883a 	mov	r8,r3
 10014e4:	008007c4 	movi	r2,31
 10014e8:	dc800e15 	stw	r18,56(sp)
 10014ec:	3821883a 	mov	r16,r7
 10014f0:	dcc00f15 	stw	r19,60(sp)
 10014f4:	4023883a 	mov	r17,r8
 10014f8:	11010a0e 	bge	r2,r4,1001924 <__ieee754_rem_pio2+0x698>
 10014fc:	d9000e17 	ldw	r4,56(sp)
 1001500:	d9400f17 	ldw	r5,60(sp)
 1001504:	800d883a 	mov	r6,r16
 1001508:	880f883a 	mov	r7,r17
 100150c:	1003dc80 	call	1003dc8 <__subdf3>
 1001510:	1810d53a 	srli	r8,r3,20
 1001514:	b02dd53a 	srai	r22,r22,20
 1001518:	1009883a 	mov	r4,r2
 100151c:	4201ffcc 	andi	r8,r8,2047
 1001520:	180b883a 	mov	r5,r3
 1001524:	b211c83a 	sub	r8,r22,r8
 1001528:	00800404 	movi	r2,16
 100152c:	dd801015 	stw	r22,64(sp)
 1001530:	e1000015 	stw	r4,0(fp)
 1001534:	e1400115 	stw	r5,4(fp)
 1001538:	1200430e 	bge	r2,r8,1001648 <__ieee754_rem_pio2+0x3bc>
 100153c:	d9000c17 	ldw	r4,48(sp)
 1001540:	d9400d17 	ldw	r5,52(sp)
 1001544:	00869834 	movhi	r2,6752
 1001548:	00cf7474 	movhi	r3,15825
 100154c:	18ed1844 	addi	r3,r3,-19359
 1001550:	180f883a 	mov	r7,r3
 1001554:	100d883a 	mov	r6,r2
 1001558:	1003ebc0 	call	1003ebc <__muldf3>
 100155c:	d9000e17 	ldw	r4,56(sp)
 1001560:	d9400f17 	ldw	r5,60(sp)
 1001564:	100d883a 	mov	r6,r2
 1001568:	180f883a 	mov	r7,r3
 100156c:	1025883a 	mov	r18,r2
 1001570:	1827883a 	mov	r19,r3
 1001574:	1003dc80 	call	1003dc8 <__subdf3>
 1001578:	d9000c17 	ldw	r4,48(sp)
 100157c:	d9400d17 	ldw	r5,52(sp)
 1001580:	058b80f4 	movhi	r22,11779
 1001584:	b59c1cc4 	addi	r22,r22,28787
 1001588:	05cee8f4 	movhi	r23,15267
 100158c:	bdc66284 	addi	r23,r23,6538
 1001590:	b00d883a 	mov	r6,r22
 1001594:	b80f883a 	mov	r7,r23
 1001598:	d8801115 	stw	r2,68(sp)
 100159c:	d8c01215 	stw	r3,72(sp)
 10015a0:	d8800815 	stw	r2,32(sp)
 10015a4:	1003ebc0 	call	1003ebc <__muldf3>
 10015a8:	d9001217 	ldw	r4,72(sp)
 10015ac:	d9400f17 	ldw	r5,60(sp)
 10015b0:	d9800817 	ldw	r6,32(sp)
 10015b4:	d9000915 	stw	r4,36(sp)
 10015b8:	d9c01217 	ldw	r7,72(sp)
 10015bc:	d9000e17 	ldw	r4,56(sp)
 10015c0:	1021883a 	mov	r16,r2
 10015c4:	1823883a 	mov	r17,r3
 10015c8:	1003dc80 	call	1003dc8 <__subdf3>
 10015cc:	180b883a 	mov	r5,r3
 10015d0:	900d883a 	mov	r6,r18
 10015d4:	980f883a 	mov	r7,r19
 10015d8:	1009883a 	mov	r4,r2
 10015dc:	1003dc80 	call	1003dc8 <__subdf3>
 10015e0:	180f883a 	mov	r7,r3
 10015e4:	880b883a 	mov	r5,r17
 10015e8:	8009883a 	mov	r4,r16
 10015ec:	100d883a 	mov	r6,r2
 10015f0:	1003dc80 	call	1003dc8 <__subdf3>
 10015f4:	d9000817 	ldw	r4,32(sp)
 10015f8:	d9401217 	ldw	r5,72(sp)
 10015fc:	180f883a 	mov	r7,r3
 1001600:	100d883a 	mov	r6,r2
 1001604:	1021883a 	mov	r16,r2
 1001608:	1823883a 	mov	r17,r3
 100160c:	1003dc80 	call	1003dc8 <__subdf3>
 1001610:	1810d53a 	srli	r8,r3,20
 1001614:	1009883a 	mov	r4,r2
 1001618:	d8801017 	ldw	r2,64(sp)
 100161c:	4201ffcc 	andi	r8,r8,2047
 1001620:	180b883a 	mov	r5,r3
 1001624:	1211c83a 	sub	r8,r2,r8
 1001628:	00800c44 	movi	r2,49
 100162c:	e1000015 	stw	r4,0(fp)
 1001630:	e1400115 	stw	r5,4(fp)
 1001634:	1200f016 	blt	r2,r8,10019f8 <__ieee754_rem_pio2+0x76c>
 1001638:	d8c00817 	ldw	r3,32(sp)
 100163c:	d9001217 	ldw	r4,72(sp)
 1001640:	d8c00e15 	stw	r3,56(sp)
 1001644:	d9000f15 	stw	r4,60(sp)
 1001648:	e1800017 	ldw	r6,0(fp)
 100164c:	e1c00117 	ldw	r7,4(fp)
 1001650:	d9400f17 	ldw	r5,60(sp)
 1001654:	d9000e17 	ldw	r4,56(sp)
 1001658:	1003dc80 	call	1003dc8 <__subdf3>
 100165c:	180b883a 	mov	r5,r3
 1001660:	800d883a 	mov	r6,r16
 1001664:	880f883a 	mov	r7,r17
 1001668:	1009883a 	mov	r4,r2
 100166c:	1003dc80 	call	1003dc8 <__subdf3>
 1001670:	d9400a17 	ldw	r5,40(sp)
 1001674:	e0800215 	stw	r2,8(fp)
 1001678:	e1800204 	addi	r6,fp,8
 100167c:	30c00115 	stw	r3,4(r6)
 1001680:	283f1b0e 	bge	r5,zero,10012f0 <__ieee754_rem_pio2+0x64>
 1001684:	e0c00117 	ldw	r3,4(fp)
 1001688:	d8800b17 	ldw	r2,44(sp)
 100168c:	18e0003c 	xorhi	r3,r3,32768
 1001690:	0085c83a 	sub	r2,zero,r2
 1001694:	e0c00115 	stw	r3,4(fp)
 1001698:	d8800b15 	stw	r2,44(sp)
 100169c:	30800117 	ldw	r2,4(r6)
 10016a0:	10a0003c 	xorhi	r2,r2,32768
 10016a4:	30800115 	stw	r2,4(r6)
 10016a8:	003f1106 	br	10012f0 <__ieee754_rem_pio2+0x64>
 10016ac:	04151034 	movhi	r16,21568
 10016b0:	044ffe74 	movhi	r17,16377
 10016b4:	8c487ec4 	addi	r17,r17,8699
 10016b8:	4809883a 	mov	r4,r9
 10016bc:	800d883a 	mov	r6,r16
 10016c0:	880f883a 	mov	r7,r17
 10016c4:	1003e480 	call	1003e48 <__adddf3>
 10016c8:	1025883a 	mov	r18,r2
 10016cc:	1827883a 	mov	r19,r3
 10016d0:	b440a326 	beq	r22,r17,1001960 <__ieee754_rem_pio2+0x6d4>
 10016d4:	040698b4 	movhi	r16,6754
 10016d8:	8418cc44 	addi	r16,r16,25393
 10016dc:	044f7474 	movhi	r17,15825
 10016e0:	8c6d1844 	addi	r17,r17,-19359
 10016e4:	1009883a 	mov	r4,r2
 10016e8:	180b883a 	mov	r5,r3
 10016ec:	800d883a 	mov	r6,r16
 10016f0:	880f883a 	mov	r7,r17
 10016f4:	1003e480 	call	1003e48 <__adddf3>
 10016f8:	100d883a 	mov	r6,r2
 10016fc:	9009883a 	mov	r4,r18
 1001700:	980b883a 	mov	r5,r19
 1001704:	180f883a 	mov	r7,r3
 1001708:	e0800015 	stw	r2,0(fp)
 100170c:	e0c00115 	stw	r3,4(fp)
 1001710:	1003dc80 	call	1003dc8 <__subdf3>
 1001714:	1009883a 	mov	r4,r2
 1001718:	800d883a 	mov	r6,r16
 100171c:	880f883a 	mov	r7,r17
 1001720:	180b883a 	mov	r5,r3
 1001724:	1003e480 	call	1003e48 <__adddf3>
 1001728:	1009883a 	mov	r4,r2
 100172c:	00bfffc4 	movi	r2,-1
 1001730:	d8800b15 	stw	r2,44(sp)
 1001734:	e0c00315 	stw	r3,12(fp)
 1001738:	e1000215 	stw	r4,8(fp)
 100173c:	003eec06 	br	10012f0 <__ieee754_rem_pio2+0x64>
 1001740:	b005d53a 	srai	r2,r22,20
 1001744:	4821883a 	mov	r16,r9
 1001748:	05505c34 	movhi	r21,16752
 100174c:	15fefa84 	addi	r23,r2,-1046
 1001750:	b826953a 	slli	r19,r23,20
 1001754:	0029883a 	mov	r20,zero
 1001758:	048000c4 	movi	r18,3
 100175c:	b4e7c83a 	sub	r19,r22,r19
 1001760:	980b883a 	mov	r5,r19
 1001764:	10045100 	call	1004510 <__fixdfsi>
 1001768:	1009883a 	mov	r4,r2
 100176c:	10044180 	call	1004418 <__floatsidf>
 1001770:	980b883a 	mov	r5,r19
 1001774:	8009883a 	mov	r4,r16
 1001778:	180f883a 	mov	r7,r3
 100177c:	100d883a 	mov	r6,r2
 1001780:	d8800215 	stw	r2,8(sp)
 1001784:	d8c00315 	stw	r3,12(sp)
 1001788:	1003dc80 	call	1003dc8 <__subdf3>
 100178c:	180b883a 	mov	r5,r3
 1001790:	a00d883a 	mov	r6,r20
 1001794:	a80f883a 	mov	r7,r21
 1001798:	1009883a 	mov	r4,r2
 100179c:	1003ebc0 	call	1003ebc <__muldf3>
 10017a0:	180b883a 	mov	r5,r3
 10017a4:	1009883a 	mov	r4,r2
 10017a8:	1823883a 	mov	r17,r3
 10017ac:	1021883a 	mov	r16,r2
 10017b0:	10045100 	call	1004510 <__fixdfsi>
 10017b4:	1009883a 	mov	r4,r2
 10017b8:	10044180 	call	1004418 <__floatsidf>
 10017bc:	880b883a 	mov	r5,r17
 10017c0:	8009883a 	mov	r4,r16
 10017c4:	180f883a 	mov	r7,r3
 10017c8:	100d883a 	mov	r6,r2
 10017cc:	d8800415 	stw	r2,16(sp)
 10017d0:	d8c00515 	stw	r3,20(sp)
 10017d4:	1003dc80 	call	1003dc8 <__subdf3>
 10017d8:	180b883a 	mov	r5,r3
 10017dc:	000d883a 	mov	r6,zero
 10017e0:	a80f883a 	mov	r7,r21
 10017e4:	1009883a 	mov	r4,r2
 10017e8:	1003ebc0 	call	1003ebc <__muldf3>
 10017ec:	d8c00715 	stw	r3,28(sp)
 10017f0:	d8800615 	stw	r2,24(sp)
 10017f4:	00000106 	br	10017fc <__ieee754_rem_pio2+0x570>
 10017f8:	8025883a 	mov	r18,r16
 10017fc:	943fffc4 	addi	r16,r18,-1
 1001800:	800890fa 	slli	r4,r16,3
 1001804:	d9400204 	addi	r5,sp,8
 1001808:	000d883a 	mov	r6,zero
 100180c:	2149883a 	add	r4,r4,r5
 1001810:	20c00117 	ldw	r3,4(r4)
 1001814:	20800017 	ldw	r2,0(r4)
 1001818:	000f883a 	mov	r7,zero
 100181c:	180b883a 	mov	r5,r3
 1001820:	1009883a 	mov	r4,r2
 1001824:	10042800 	call	1004280 <__eqdf2>
 1001828:	103ff326 	beq	r2,zero,10017f8 <__ieee754_rem_pio2+0x56c>
 100182c:	00800084 	movi	r2,2
 1001830:	00c04074 	movhi	r3,257
 1001834:	18c95304 	addi	r3,r3,9548
 1001838:	b80d883a 	mov	r6,r23
 100183c:	900f883a 	mov	r7,r18
 1001840:	d9000204 	addi	r4,sp,8
 1001844:	e00b883a 	mov	r5,fp
 1001848:	d8800015 	stw	r2,0(sp)
 100184c:	d8c00115 	stw	r3,4(sp)
 1001850:	1001fe00 	call	1001fe0 <__kernel_rem_pio2>
 1001854:	d8800b15 	stw	r2,44(sp)
 1001858:	d8800a17 	ldw	r2,40(sp)
 100185c:	103ea40e 	bge	r2,zero,10012f0 <__ieee754_rem_pio2+0x64>
 1001860:	e0800117 	ldw	r2,4(fp)
 1001864:	d8c00b17 	ldw	r3,44(sp)
 1001868:	e1000204 	addi	r4,fp,8
 100186c:	10a0003c 	xorhi	r2,r2,32768
 1001870:	00c7c83a 	sub	r3,zero,r3
 1001874:	e0800115 	stw	r2,4(fp)
 1001878:	d8c00b15 	stw	r3,44(sp)
 100187c:	20c00117 	ldw	r3,4(r4)
 1001880:	18e0003c 	xorhi	r3,r3,32768
 1001884:	20c00115 	stw	r3,4(r4)
 1001888:	003e9906 	br	10012f0 <__ieee754_rem_pio2+0x64>
 100188c:	00869834 	movhi	r2,6752
 1001890:	00cf7474 	movhi	r3,15825
 1001894:	18ed1844 	addi	r3,r3,-19359
 1001898:	9009883a 	mov	r4,r18
 100189c:	980b883a 	mov	r5,r19
 10018a0:	180f883a 	mov	r7,r3
 10018a4:	100d883a 	mov	r6,r2
 10018a8:	1003dc80 	call	1003dc8 <__subdf3>
 10018ac:	048b80f4 	movhi	r18,11779
 10018b0:	949c1cc4 	addi	r18,r18,28787
 10018b4:	04cee8f4 	movhi	r19,15267
 10018b8:	9cc66284 	addi	r19,r19,6538
 10018bc:	1009883a 	mov	r4,r2
 10018c0:	180b883a 	mov	r5,r3
 10018c4:	900d883a 	mov	r6,r18
 10018c8:	980f883a 	mov	r7,r19
 10018cc:	1021883a 	mov	r16,r2
 10018d0:	1823883a 	mov	r17,r3
 10018d4:	1003dc80 	call	1003dc8 <__subdf3>
 10018d8:	100d883a 	mov	r6,r2
 10018dc:	8009883a 	mov	r4,r16
 10018e0:	880b883a 	mov	r5,r17
 10018e4:	180f883a 	mov	r7,r3
 10018e8:	e0800015 	stw	r2,0(fp)
 10018ec:	e0c00115 	stw	r3,4(fp)
 10018f0:	1003dc80 	call	1003dc8 <__subdf3>
 10018f4:	180b883a 	mov	r5,r3
 10018f8:	1009883a 	mov	r4,r2
 10018fc:	900d883a 	mov	r6,r18
 1001900:	980f883a 	mov	r7,r19
 1001904:	1003dc80 	call	1003dc8 <__subdf3>
 1001908:	180b883a 	mov	r5,r3
 100190c:	1009883a 	mov	r4,r2
 1001910:	00c00044 	movi	r3,1
 1001914:	d8c00b15 	stw	r3,44(sp)
 1001918:	e1400315 	stw	r5,12(fp)
 100191c:	e1000215 	stw	r4,8(fp)
 1001920:	003e7306 	br	10012f0 <__ieee754_rem_pio2+0x64>
 1001924:	2105883a 	add	r2,r4,r4
 1001928:	1085883a 	add	r2,r2,r2
 100192c:	00c04074 	movhi	r3,257
 1001930:	18c93304 	addi	r3,r3,9420
 1001934:	10c5883a 	add	r2,r2,r3
 1001938:	113fff17 	ldw	r4,-4(r2)
 100193c:	b13eef26 	beq	r22,r4,10014fc <__ieee754_rem_pio2+0x270>
 1001940:	980b883a 	mov	r5,r19
 1001944:	400f883a 	mov	r7,r8
 1001948:	9009883a 	mov	r4,r18
 100194c:	800d883a 	mov	r6,r16
 1001950:	1003dc80 	call	1003dc8 <__subdf3>
 1001954:	e0c00115 	stw	r3,4(fp)
 1001958:	e0800015 	stw	r2,0(fp)
 100195c:	003f3a06 	br	1001648 <__ieee754_rem_pio2+0x3bc>
 1001960:	00869834 	movhi	r2,6752
 1001964:	00cf7474 	movhi	r3,15825
 1001968:	18ed1844 	addi	r3,r3,-19359
 100196c:	9009883a 	mov	r4,r18
 1001970:	980b883a 	mov	r5,r19
 1001974:	180f883a 	mov	r7,r3
 1001978:	100d883a 	mov	r6,r2
 100197c:	1003e480 	call	1003e48 <__adddf3>
 1001980:	048b80f4 	movhi	r18,11779
 1001984:	949c1cc4 	addi	r18,r18,28787
 1001988:	04cee8f4 	movhi	r19,15267
 100198c:	9cc66284 	addi	r19,r19,6538
 1001990:	1009883a 	mov	r4,r2
 1001994:	180b883a 	mov	r5,r3
 1001998:	900d883a 	mov	r6,r18
 100199c:	980f883a 	mov	r7,r19
 10019a0:	1021883a 	mov	r16,r2
 10019a4:	1823883a 	mov	r17,r3
 10019a8:	1003e480 	call	1003e48 <__adddf3>
 10019ac:	100d883a 	mov	r6,r2
 10019b0:	8009883a 	mov	r4,r16
 10019b4:	880b883a 	mov	r5,r17
 10019b8:	180f883a 	mov	r7,r3
 10019bc:	e0800015 	stw	r2,0(fp)
 10019c0:	e0c00115 	stw	r3,4(fp)
 10019c4:	1003dc80 	call	1003dc8 <__subdf3>
 10019c8:	180b883a 	mov	r5,r3
 10019cc:	1009883a 	mov	r4,r2
 10019d0:	900d883a 	mov	r6,r18
 10019d4:	980f883a 	mov	r7,r19
 10019d8:	1003e480 	call	1003e48 <__adddf3>
 10019dc:	180b883a 	mov	r5,r3
 10019e0:	1009883a 	mov	r4,r2
 10019e4:	00ffffc4 	movi	r3,-1
 10019e8:	d8c00b15 	stw	r3,44(sp)
 10019ec:	e1400315 	stw	r5,12(fp)
 10019f0:	e1000215 	stw	r4,8(fp)
 10019f4:	003e3e06 	br	10012f0 <__ieee754_rem_pio2+0x64>
 10019f8:	d9000c17 	ldw	r4,48(sp)
 10019fc:	d9400d17 	ldw	r5,52(sp)
 1001a00:	018b8034 	movhi	r6,11776
 1001a04:	b80f883a 	mov	r7,r23
 1001a08:	1003ebc0 	call	1003ebc <__muldf3>
 1001a0c:	d9000817 	ldw	r4,32(sp)
 1001a10:	d9401217 	ldw	r5,72(sp)
 1001a14:	100d883a 	mov	r6,r2
 1001a18:	180f883a 	mov	r7,r3
 1001a1c:	1025883a 	mov	r18,r2
 1001a20:	1827883a 	mov	r19,r3
 1001a24:	1003dc80 	call	1003dc8 <__subdf3>
 1001a28:	d9400d17 	ldw	r5,52(sp)
 1001a2c:	d9000c17 	ldw	r4,48(sp)
 1001a30:	02094834 	movhi	r8,9504
 1001a34:	42127044 	addi	r8,r8,18881
 1001a38:	024e5f34 	movhi	r9,14716
 1001a3c:	4a60e684 	addi	r9,r9,-31846
 1001a40:	480f883a 	mov	r7,r9
 1001a44:	400d883a 	mov	r6,r8
 1001a48:	182b883a 	mov	r21,r3
 1001a4c:	d8800e15 	stw	r2,56(sp)
 1001a50:	1003ebc0 	call	1003ebc <__muldf3>
 1001a54:	d9000817 	ldw	r4,32(sp)
 1001a58:	d9401217 	ldw	r5,72(sp)
 1001a5c:	d9800e17 	ldw	r6,56(sp)
 1001a60:	a80f883a 	mov	r7,r21
 1001a64:	1021883a 	mov	r16,r2
 1001a68:	1823883a 	mov	r17,r3
 1001a6c:	dd400f15 	stw	r21,60(sp)
 1001a70:	1003dc80 	call	1003dc8 <__subdf3>
 1001a74:	180b883a 	mov	r5,r3
 1001a78:	900d883a 	mov	r6,r18
 1001a7c:	980f883a 	mov	r7,r19
 1001a80:	1009883a 	mov	r4,r2
 1001a84:	1003dc80 	call	1003dc8 <__subdf3>
 1001a88:	180f883a 	mov	r7,r3
 1001a8c:	880b883a 	mov	r5,r17
 1001a90:	8009883a 	mov	r4,r16
 1001a94:	100d883a 	mov	r6,r2
 1001a98:	1003dc80 	call	1003dc8 <__subdf3>
 1001a9c:	d9000e17 	ldw	r4,56(sp)
 1001aa0:	1021883a 	mov	r16,r2
 1001aa4:	1823883a 	mov	r17,r3
 1001aa8:	a80b883a 	mov	r5,r21
 1001aac:	180f883a 	mov	r7,r3
 1001ab0:	003fa606 	br	100194c <__ieee754_rem_pio2+0x6c0>

01001ab4 <__kernel_cos>:
 1001ab4:	defff104 	addi	sp,sp,-60
 1001ab8:	00a00034 	movhi	r2,32768
 1001abc:	10bfffc4 	addi	r2,r2,-1
 1001ac0:	dd800c15 	stw	r22,48(sp)
 1001ac4:	116c703a 	and	r22,r2,r5
 1001ac8:	0005883a 	mov	r2,zero
 1001acc:	dd000a15 	stw	r20,40(sp)
 1001ad0:	d8800215 	stw	r2,8(sp)
 1001ad4:	2029883a 	mov	r20,r4
 1001ad8:	008f9034 	movhi	r2,15936
 1001adc:	10bfffc4 	addi	r2,r2,-1
 1001ae0:	0009883a 	mov	r4,zero
 1001ae4:	dd400b15 	stw	r21,44(sp)
 1001ae8:	dfc00e15 	stw	ra,56(sp)
 1001aec:	ddc00d15 	stw	r23,52(sp)
 1001af0:	dcc00915 	stw	r19,36(sp)
 1001af4:	dc800815 	stw	r18,32(sp)
 1001af8:	dc400715 	stw	r17,28(sp)
 1001afc:	dc000615 	stw	r16,24(sp)
 1001b00:	282b883a 	mov	r21,r5
 1001b04:	d9800415 	stw	r6,16(sp)
 1001b08:	d9c00515 	stw	r7,20(sp)
 1001b0c:	d9000315 	stw	r4,12(sp)
 1001b10:	15809216 	blt	r2,r22,1001d5c <__kernel_cos+0x2a8>
 1001b14:	a009883a 	mov	r4,r20
 1001b18:	10045100 	call	1004510 <__fixdfsi>
 1001b1c:	10011c26 	beq	r2,zero,1001f90 <__kernel_cos+0x4dc>
 1001b20:	a009883a 	mov	r4,r20
 1001b24:	a80b883a 	mov	r5,r21
 1001b28:	a00d883a 	mov	r6,r20
 1001b2c:	a80f883a 	mov	r7,r21
 1001b30:	1003ebc0 	call	1003ebc <__muldf3>
 1001b34:	1021883a 	mov	r16,r2
 1001b38:	1823883a 	mov	r17,r3
 1001b3c:	1025883a 	mov	r18,r2
 1001b40:	1827883a 	mov	r19,r3
 1001b44:	00afa234 	movhi	r2,48776
 1001b48:	108e3504 	addi	r2,r2,14548
 1001b4c:	00ef6a74 	movhi	r3,48553
 1001b50:	18feba44 	addi	r3,r3,-1303
 1001b54:	8009883a 	mov	r4,r16
 1001b58:	880b883a 	mov	r5,r17
 1001b5c:	180f883a 	mov	r7,r3
 1001b60:	100d883a 	mov	r6,r2
 1001b64:	1003ebc0 	call	1003ebc <__muldf3>
 1001b68:	022f6d74 	movhi	r8,48565
 1001b6c:	422c7104 	addi	r8,r8,-20028
 1001b70:	024f88b4 	movhi	r9,15906
 1001b74:	4a7ba784 	addi	r9,r9,-4450
 1001b78:	480f883a 	mov	r7,r9
 1001b7c:	400d883a 	mov	r6,r8
 1001b80:	180b883a 	mov	r5,r3
 1001b84:	1009883a 	mov	r4,r2
 1001b88:	1003e480 	call	1003e48 <__adddf3>
 1001b8c:	180f883a 	mov	r7,r3
 1001b90:	8009883a 	mov	r4,r16
 1001b94:	880b883a 	mov	r5,r17
 1001b98:	100d883a 	mov	r6,r2
 1001b9c:	1003ebc0 	call	1003ebc <__muldf3>
 1001ba0:	02202734 	movhi	r8,32924
 1001ba4:	4214ab44 	addi	r8,r8,21165
 1001ba8:	024fa4b4 	movhi	r9,16018
 1001bac:	4a5f93c4 	addi	r9,r9,32335
 1001bb0:	480f883a 	mov	r7,r9
 1001bb4:	400d883a 	mov	r6,r8
 1001bb8:	180b883a 	mov	r5,r3
 1001bbc:	1009883a 	mov	r4,r2
 1001bc0:	1003dc80 	call	1003dc8 <__subdf3>
 1001bc4:	180f883a 	mov	r7,r3
 1001bc8:	8009883a 	mov	r4,r16
 1001bcc:	880b883a 	mov	r5,r17
 1001bd0:	100d883a 	mov	r6,r2
 1001bd4:	1003ebc0 	call	1003ebc <__muldf3>
 1001bd8:	020672f4 	movhi	r8,6603
 1001bdc:	42056404 	addi	r8,r8,5520
 1001be0:	024fbeb4 	movhi	r9,16122
 1001be4:	4a406804 	addi	r9,r9,416
 1001be8:	480f883a 	mov	r7,r9
 1001bec:	400d883a 	mov	r6,r8
 1001bf0:	180b883a 	mov	r5,r3
 1001bf4:	1009883a 	mov	r4,r2
 1001bf8:	1003e480 	call	1003e48 <__adddf3>
 1001bfc:	180f883a 	mov	r7,r3
 1001c00:	8009883a 	mov	r4,r16
 1001c04:	880b883a 	mov	r5,r17
 1001c08:	100d883a 	mov	r6,r2
 1001c0c:	1003ebc0 	call	1003ebc <__muldf3>
 1001c10:	0205b074 	movhi	r8,5825
 1001c14:	42145dc4 	addi	r8,r8,20855
 1001c18:	024fd5f4 	movhi	r9,16215
 1001c1c:	4a705b04 	addi	r9,r9,-16020
 1001c20:	480f883a 	mov	r7,r9
 1001c24:	400d883a 	mov	r6,r8
 1001c28:	180b883a 	mov	r5,r3
 1001c2c:	1009883a 	mov	r4,r2
 1001c30:	1003dc80 	call	1003dc8 <__subdf3>
 1001c34:	180f883a 	mov	r7,r3
 1001c38:	8009883a 	mov	r4,r16
 1001c3c:	880b883a 	mov	r5,r17
 1001c40:	100d883a 	mov	r6,r2
 1001c44:	1003ebc0 	call	1003ebc <__muldf3>
 1001c48:	02155574 	movhi	r8,21845
 1001c4c:	42155304 	addi	r8,r8,21836
 1001c50:	024fe974 	movhi	r9,16293
 1001c54:	4a555544 	addi	r9,r9,21845
 1001c58:	480f883a 	mov	r7,r9
 1001c5c:	400d883a 	mov	r6,r8
 1001c60:	180b883a 	mov	r5,r3
 1001c64:	1009883a 	mov	r4,r2
 1001c68:	1003e480 	call	1003e48 <__adddf3>
 1001c6c:	180f883a 	mov	r7,r3
 1001c70:	880b883a 	mov	r5,r17
 1001c74:	8009883a 	mov	r4,r16
 1001c78:	100d883a 	mov	r6,r2
 1001c7c:	1003ebc0 	call	1003ebc <__muldf3>
 1001c80:	1021883a 	mov	r16,r2
 1001c84:	1823883a 	mov	r17,r3
 1001c88:	0005883a 	mov	r2,zero
 1001c8c:	00cff834 	movhi	r3,16352
 1001c90:	9009883a 	mov	r4,r18
 1001c94:	980b883a 	mov	r5,r19
 1001c98:	180f883a 	mov	r7,r3
 1001c9c:	100d883a 	mov	r6,r2
 1001ca0:	1003ebc0 	call	1003ebc <__muldf3>
 1001ca4:	980b883a 	mov	r5,r19
 1001ca8:	880f883a 	mov	r7,r17
 1001cac:	9009883a 	mov	r4,r18
 1001cb0:	800d883a 	mov	r6,r16
 1001cb4:	1025883a 	mov	r18,r2
 1001cb8:	1827883a 	mov	r19,r3
 1001cbc:	1003ebc0 	call	1003ebc <__muldf3>
 1001cc0:	d9c00517 	ldw	r7,20(sp)
 1001cc4:	d9800417 	ldw	r6,16(sp)
 1001cc8:	a80b883a 	mov	r5,r21
 1001ccc:	a009883a 	mov	r4,r20
 1001cd0:	1021883a 	mov	r16,r2
 1001cd4:	1823883a 	mov	r17,r3
 1001cd8:	1003ebc0 	call	1003ebc <__muldf3>
 1001cdc:	180f883a 	mov	r7,r3
 1001ce0:	880b883a 	mov	r5,r17
 1001ce4:	8009883a 	mov	r4,r16
 1001ce8:	100d883a 	mov	r6,r2
 1001cec:	1003dc80 	call	1003dc8 <__subdf3>
 1001cf0:	180f883a 	mov	r7,r3
 1001cf4:	980b883a 	mov	r5,r19
 1001cf8:	9009883a 	mov	r4,r18
 1001cfc:	100d883a 	mov	r6,r2
 1001d00:	1003dc80 	call	1003dc8 <__subdf3>
 1001d04:	0011883a 	mov	r8,zero
 1001d08:	024ffc34 	movhi	r9,16368
 1001d0c:	480b883a 	mov	r5,r9
 1001d10:	180f883a 	mov	r7,r3
 1001d14:	4009883a 	mov	r4,r8
 1001d18:	100d883a 	mov	r6,r2
 1001d1c:	1003dc80 	call	1003dc8 <__subdf3>
 1001d20:	100d883a 	mov	r6,r2
 1001d24:	180f883a 	mov	r7,r3
 1001d28:	3005883a 	mov	r2,r6
 1001d2c:	3807883a 	mov	r3,r7
 1001d30:	dfc00e17 	ldw	ra,56(sp)
 1001d34:	ddc00d17 	ldw	r23,52(sp)
 1001d38:	dd800c17 	ldw	r22,48(sp)
 1001d3c:	dd400b17 	ldw	r21,44(sp)
 1001d40:	dd000a17 	ldw	r20,40(sp)
 1001d44:	dcc00917 	ldw	r19,36(sp)
 1001d48:	dc800817 	ldw	r18,32(sp)
 1001d4c:	dc400717 	ldw	r17,28(sp)
 1001d50:	dc000617 	ldw	r16,24(sp)
 1001d54:	dec00f04 	addi	sp,sp,60
 1001d58:	f800283a 	ret
 1001d5c:	280f883a 	mov	r7,r5
 1001d60:	a009883a 	mov	r4,r20
 1001d64:	a00d883a 	mov	r6,r20
 1001d68:	1003ebc0 	call	1003ebc <__muldf3>
 1001d6c:	1021883a 	mov	r16,r2
 1001d70:	1823883a 	mov	r17,r3
 1001d74:	1025883a 	mov	r18,r2
 1001d78:	1827883a 	mov	r19,r3
 1001d7c:	00afa234 	movhi	r2,48776
 1001d80:	108e3504 	addi	r2,r2,14548
 1001d84:	00ef6a74 	movhi	r3,48553
 1001d88:	18feba44 	addi	r3,r3,-1303
 1001d8c:	8009883a 	mov	r4,r16
 1001d90:	880b883a 	mov	r5,r17
 1001d94:	180f883a 	mov	r7,r3
 1001d98:	100d883a 	mov	r6,r2
 1001d9c:	1003ebc0 	call	1003ebc <__muldf3>
 1001da0:	022f6d74 	movhi	r8,48565
 1001da4:	422c7104 	addi	r8,r8,-20028
 1001da8:	024f88b4 	movhi	r9,15906
 1001dac:	4a7ba784 	addi	r9,r9,-4450
 1001db0:	480f883a 	mov	r7,r9
 1001db4:	400d883a 	mov	r6,r8
 1001db8:	180b883a 	mov	r5,r3
 1001dbc:	1009883a 	mov	r4,r2
 1001dc0:	1003e480 	call	1003e48 <__adddf3>
 1001dc4:	180f883a 	mov	r7,r3
 1001dc8:	8009883a 	mov	r4,r16
 1001dcc:	880b883a 	mov	r5,r17
 1001dd0:	100d883a 	mov	r6,r2
 1001dd4:	1003ebc0 	call	1003ebc <__muldf3>
 1001dd8:	02202734 	movhi	r8,32924
 1001ddc:	4214ab44 	addi	r8,r8,21165
 1001de0:	024fa4b4 	movhi	r9,16018
 1001de4:	4a5f93c4 	addi	r9,r9,32335
 1001de8:	480f883a 	mov	r7,r9
 1001dec:	400d883a 	mov	r6,r8
 1001df0:	180b883a 	mov	r5,r3
 1001df4:	1009883a 	mov	r4,r2
 1001df8:	1003dc80 	call	1003dc8 <__subdf3>
 1001dfc:	180f883a 	mov	r7,r3
 1001e00:	8009883a 	mov	r4,r16
 1001e04:	880b883a 	mov	r5,r17
 1001e08:	100d883a 	mov	r6,r2
 1001e0c:	1003ebc0 	call	1003ebc <__muldf3>
 1001e10:	020672f4 	movhi	r8,6603
 1001e14:	42056404 	addi	r8,r8,5520
 1001e18:	024fbeb4 	movhi	r9,16122
 1001e1c:	4a406804 	addi	r9,r9,416
 1001e20:	480f883a 	mov	r7,r9
 1001e24:	400d883a 	mov	r6,r8
 1001e28:	180b883a 	mov	r5,r3
 1001e2c:	1009883a 	mov	r4,r2
 1001e30:	1003e480 	call	1003e48 <__adddf3>
 1001e34:	180f883a 	mov	r7,r3
 1001e38:	8009883a 	mov	r4,r16
 1001e3c:	880b883a 	mov	r5,r17
 1001e40:	100d883a 	mov	r6,r2
 1001e44:	1003ebc0 	call	1003ebc <__muldf3>
 1001e48:	0205b074 	movhi	r8,5825
 1001e4c:	42145dc4 	addi	r8,r8,20855
 1001e50:	024fd5f4 	movhi	r9,16215
 1001e54:	4a705b04 	addi	r9,r9,-16020
 1001e58:	480f883a 	mov	r7,r9
 1001e5c:	400d883a 	mov	r6,r8
 1001e60:	180b883a 	mov	r5,r3
 1001e64:	1009883a 	mov	r4,r2
 1001e68:	1003dc80 	call	1003dc8 <__subdf3>
 1001e6c:	180f883a 	mov	r7,r3
 1001e70:	8009883a 	mov	r4,r16
 1001e74:	880b883a 	mov	r5,r17
 1001e78:	100d883a 	mov	r6,r2
 1001e7c:	1003ebc0 	call	1003ebc <__muldf3>
 1001e80:	02155574 	movhi	r8,21845
 1001e84:	42155304 	addi	r8,r8,21836
 1001e88:	024fe974 	movhi	r9,16293
 1001e8c:	4a555544 	addi	r9,r9,21845
 1001e90:	480f883a 	mov	r7,r9
 1001e94:	400d883a 	mov	r6,r8
 1001e98:	180b883a 	mov	r5,r3
 1001e9c:	1009883a 	mov	r4,r2
 1001ea0:	1003e480 	call	1003e48 <__adddf3>
 1001ea4:	180f883a 	mov	r7,r3
 1001ea8:	880b883a 	mov	r5,r17
 1001eac:	8009883a 	mov	r4,r16
 1001eb0:	100d883a 	mov	r6,r2
 1001eb4:	1003ebc0 	call	1003ebc <__muldf3>
 1001eb8:	1021883a 	mov	r16,r2
 1001ebc:	008ff4f4 	movhi	r2,16339
 1001ec0:	108ccc84 	addi	r2,r2,13106
 1001ec4:	1823883a 	mov	r17,r3
 1001ec8:	15bf6f0e 	bge	r2,r22,1001c88 <__kernel_cos+0x1d4>
 1001ecc:	008ffa74 	movhi	r2,16361
 1001ed0:	1580320e 	bge	r2,r22,1001f9c <__kernel_cos+0x4e8>
 1001ed4:	0005883a 	mov	r2,zero
 1001ed8:	010ff9f4 	movhi	r4,16359
 1001edc:	002d883a 	mov	r22,zero
 1001ee0:	d8800015 	stw	r2,0(sp)
 1001ee4:	05cff4b4 	movhi	r23,16338
 1001ee8:	d9000115 	stw	r4,4(sp)
 1001eec:	0005883a 	mov	r2,zero
 1001ef0:	00cff834 	movhi	r3,16352
 1001ef4:	9009883a 	mov	r4,r18
 1001ef8:	980b883a 	mov	r5,r19
 1001efc:	180f883a 	mov	r7,r3
 1001f00:	100d883a 	mov	r6,r2
 1001f04:	1003ebc0 	call	1003ebc <__muldf3>
 1001f08:	180b883a 	mov	r5,r3
 1001f0c:	b80f883a 	mov	r7,r23
 1001f10:	1009883a 	mov	r4,r2
 1001f14:	b00d883a 	mov	r6,r22
 1001f18:	1003dc80 	call	1003dc8 <__subdf3>
 1001f1c:	980b883a 	mov	r5,r19
 1001f20:	880f883a 	mov	r7,r17
 1001f24:	9009883a 	mov	r4,r18
 1001f28:	800d883a 	mov	r6,r16
 1001f2c:	1025883a 	mov	r18,r2
 1001f30:	1827883a 	mov	r19,r3
 1001f34:	1003ebc0 	call	1003ebc <__muldf3>
 1001f38:	d9c00517 	ldw	r7,20(sp)
 1001f3c:	d9800417 	ldw	r6,16(sp)
 1001f40:	a80b883a 	mov	r5,r21
 1001f44:	a009883a 	mov	r4,r20
 1001f48:	1021883a 	mov	r16,r2
 1001f4c:	1823883a 	mov	r17,r3
 1001f50:	1003ebc0 	call	1003ebc <__muldf3>
 1001f54:	180f883a 	mov	r7,r3
 1001f58:	880b883a 	mov	r5,r17
 1001f5c:	8009883a 	mov	r4,r16
 1001f60:	100d883a 	mov	r6,r2
 1001f64:	1003dc80 	call	1003dc8 <__subdf3>
 1001f68:	180f883a 	mov	r7,r3
 1001f6c:	980b883a 	mov	r5,r19
 1001f70:	9009883a 	mov	r4,r18
 1001f74:	100d883a 	mov	r6,r2
 1001f78:	1003dc80 	call	1003dc8 <__subdf3>
 1001f7c:	d9400117 	ldw	r5,4(sp)
 1001f80:	d9000017 	ldw	r4,0(sp)
 1001f84:	180f883a 	mov	r7,r3
 1001f88:	100d883a 	mov	r6,r2
 1001f8c:	003f6306 	br	1001d1c <__kernel_cos+0x268>
 1001f90:	000d883a 	mov	r6,zero
 1001f94:	01cffc34 	movhi	r7,16368
 1001f98:	003f6306 	br	1001d28 <__kernel_cos+0x274>
 1001f9c:	00bff834 	movhi	r2,65504
 1001fa0:	b0ad883a 	add	r22,r22,r2
 1001fa4:	dd800315 	stw	r22,12(sp)
 1001fa8:	d9000317 	ldw	r4,12(sp)
 1001fac:	0005883a 	mov	r2,zero
 1001fb0:	00cffc34 	movhi	r3,16368
 1001fb4:	002d883a 	mov	r22,zero
 1001fb8:	200f883a 	mov	r7,r4
 1001fbc:	202f883a 	mov	r23,r4
 1001fc0:	180b883a 	mov	r5,r3
 1001fc4:	1009883a 	mov	r4,r2
 1001fc8:	b00d883a 	mov	r6,r22
 1001fcc:	d8800215 	stw	r2,8(sp)
 1001fd0:	1003dc80 	call	1003dc8 <__subdf3>
 1001fd4:	d8800015 	stw	r2,0(sp)
 1001fd8:	d8c00115 	stw	r3,4(sp)
 1001fdc:	003fc306 	br	1001eec <__kernel_cos+0x438>

01001fe0 <__kernel_rem_pio2>:
 1001fe0:	deff5304 	addi	sp,sp,-692
 1001fe4:	d880ad17 	ldw	r2,692(sp)
 1001fe8:	d9009615 	stw	r4,600(sp)
 1001fec:	d9409715 	stw	r5,604(sp)
 1001ff0:	1087883a 	add	r3,r2,r2
 1001ff4:	18c7883a 	add	r3,r3,r3
 1001ff8:	00804074 	movhi	r2,257
 1001ffc:	10899504 	addi	r2,r2,9812
 1002000:	1887883a 	add	r3,r3,r2
 1002004:	18c00017 	ldw	r3,0(r3)
 1002008:	313fff44 	addi	r4,r6,-3
 100200c:	01400604 	movi	r5,24
 1002010:	df00ab15 	stw	fp,684(sp)
 1002014:	dc00a315 	stw	r16,652(sp)
 1002018:	d8c09515 	stw	r3,596(sp)
 100201c:	dfc0ac15 	stw	ra,688(sp)
 1002020:	ddc0aa15 	stw	r23,680(sp)
 1002024:	dd80a915 	stw	r22,676(sp)
 1002028:	dd40a815 	stw	r21,672(sp)
 100202c:	dd00a715 	stw	r20,668(sp)
 1002030:	dcc0a615 	stw	r19,664(sp)
 1002034:	dc80a515 	stw	r18,660(sp)
 1002038:	dc40a415 	stw	r17,656(sp)
 100203c:	3021883a 	mov	r16,r6
 1002040:	d9c09815 	stw	r7,608(sp)
 1002044:	100469c0 	call	100469c <__divsi3>
 1002048:	d8c09817 	ldw	r3,608(sp)
 100204c:	d8808c15 	stw	r2,560(sp)
 1002050:	1f3fffc4 	addi	fp,r3,-1
 1002054:	10031a16 	blt	r2,zero,1002cc0 <__kernel_rem_pio2+0xce0>
 1002058:	d9008c17 	ldw	r4,560(sp)
 100205c:	017ffa04 	movi	r5,-24
 1002060:	100476c0 	call	100476c <__mulsi3>
 1002064:	d9009517 	ldw	r4,596(sp)
 1002068:	8085883a 	add	r2,r16,r2
 100206c:	10bffa04 	addi	r2,r2,-24
 1002070:	2707883a 	add	r3,r4,fp
 1002074:	d8809315 	stw	r2,588(sp)
 1002078:	18001616 	blt	r3,zero,10020d4 <__kernel_rem_pio2+0xf4>
 100207c:	d9408c17 	ldw	r5,560(sp)
 1002080:	d980ae17 	ldw	r6,696(sp)
 1002084:	dc801404 	addi	r18,sp,80
 1002088:	2f21c83a 	sub	r16,r5,fp
 100208c:	8405883a 	add	r2,r16,r16
 1002090:	1085883a 	add	r2,r2,r2
 1002094:	30a3883a 	add	r17,r6,r2
 1002098:	80e7883a 	add	r19,r16,r3
 100209c:	00000106 	br	10020a4 <__kernel_rem_pio2+0xc4>
 10020a0:	84000044 	addi	r16,r16,1
 10020a4:	0009883a 	mov	r4,zero
 10020a8:	000b883a 	mov	r5,zero
 10020ac:	80000416 	blt	r16,zero,10020c0 <__kernel_rem_pio2+0xe0>
 10020b0:	89000017 	ldw	r4,0(r17)
 10020b4:	10044180 	call	1004418 <__floatsidf>
 10020b8:	1009883a 	mov	r4,r2
 10020bc:	180b883a 	mov	r5,r3
 10020c0:	91400115 	stw	r5,4(r18)
 10020c4:	91000015 	stw	r4,0(r18)
 10020c8:	8c400104 	addi	r17,r17,4
 10020cc:	94800204 	addi	r18,r18,8
 10020d0:	84fff31e 	bne	r16,r19,10020a0 <__kernel_rem_pio2+0xc0>
 10020d4:	d9c09517 	ldw	r7,596(sp)
 10020d8:	38002416 	blt	r7,zero,100216c <__kernel_rem_pio2+0x18c>
 10020dc:	da809817 	ldw	r10,608(sp)
 10020e0:	e029883a 	mov	r20,fp
 10020e4:	dd406404 	addi	r21,sp,400
 10020e8:	3aaf883a 	add	r23,r7,r10
 10020ec:	e02c403a 	cmpge	r22,fp,zero
 10020f0:	b0023e26 	beq	r22,zero,10029ec <__kernel_rem_pio2+0xa0c>
 10020f4:	dcc09617 	ldw	r19,600(sp)
 10020f8:	0021883a 	mov	r16,zero
 10020fc:	0025883a 	mov	r18,zero
 1002100:	0023883a 	mov	r17,zero
 1002104:	a489c83a 	sub	r4,r20,r18
 1002108:	200890fa 	slli	r4,r4,3
 100210c:	99800017 	ldw	r6,0(r19)
 1002110:	99c00117 	ldw	r7,4(r19)
 1002114:	26c9883a 	add	r4,r4,sp
 1002118:	20c01517 	ldw	r3,84(r4)
 100211c:	20801417 	ldw	r2,80(r4)
 1002120:	94800044 	addi	r18,r18,1
 1002124:	180b883a 	mov	r5,r3
 1002128:	1009883a 	mov	r4,r2
 100212c:	1003ebc0 	call	1003ebc <__muldf3>
 1002130:	180f883a 	mov	r7,r3
 1002134:	880b883a 	mov	r5,r17
 1002138:	8009883a 	mov	r4,r16
 100213c:	100d883a 	mov	r6,r2
 1002140:	1003e480 	call	1003e48 <__adddf3>
 1002144:	1021883a 	mov	r16,r2
 1002148:	d8809817 	ldw	r2,608(sp)
 100214c:	9cc00204 	addi	r19,r19,8
 1002150:	1823883a 	mov	r17,r3
 1002154:	14bfeb1e 	bne	r2,r18,1002104 <__kernel_rem_pio2+0x124>
 1002158:	a5000044 	addi	r20,r20,1
 100215c:	ac400115 	stw	r17,4(r21)
 1002160:	ac000015 	stw	r16,0(r21)
 1002164:	ad400204 	addi	r21,r21,8
 1002168:	a5ffe11e 	bne	r20,r23,10020f0 <__kernel_rem_pio2+0x110>
 100216c:	d8c09517 	ldw	r3,596(sp)
 1002170:	d9409317 	ldw	r5,588(sp)
 1002174:	e038403a 	cmpge	fp,fp,zero
 1002178:	d8c08d15 	stw	r3,564(sp)
 100217c:	d9008d17 	ldw	r4,564(sp)
 1002180:	18c5883a 	add	r2,r3,r3
 1002184:	10c7883a 	add	r3,r2,r3
 1002188:	1907883a 	add	r3,r3,r4
 100218c:	1085883a 	add	r2,r2,r2
 1002190:	16c5883a 	add	r2,r2,sp
 1002194:	1ec7883a 	add	r3,r3,sp
 1002198:	29400050 	cmplti	r5,r5,1
 100219c:	df00a215 	stw	fp,648(sp)
 10021a0:	d8809915 	stw	r2,612(sp)
 10021a4:	d8c0a115 	stw	r3,644(sp)
 10021a8:	d940a015 	stw	r5,640(sp)
 10021ac:	d9808d17 	ldw	r6,564(sp)
 10021b0:	300490fa 	slli	r2,r6,3
 10021b4:	16c5883a 	add	r2,r2,sp
 10021b8:	15006417 	ldw	r20,400(r2)
 10021bc:	15406517 	ldw	r21,404(r2)
 10021c0:	01802e0e 	bge	zero,r6,100227c <__kernel_rem_pio2+0x29c>
 10021c4:	102d883a 	mov	r22,r2
 10021c8:	302f883a 	mov	r23,r6
 10021cc:	d839883a 	mov	fp,sp
 10021d0:	0005883a 	mov	r2,zero
 10021d4:	00cf9c34 	movhi	r3,15984
 10021d8:	180f883a 	mov	r7,r3
 10021dc:	100d883a 	mov	r6,r2
 10021e0:	a009883a 	mov	r4,r20
 10021e4:	a80b883a 	mov	r5,r21
 10021e8:	1003ebc0 	call	1003ebc <__muldf3>
 10021ec:	180b883a 	mov	r5,r3
 10021f0:	1009883a 	mov	r4,r2
 10021f4:	10045100 	call	1004510 <__fixdfsi>
 10021f8:	1009883a 	mov	r4,r2
 10021fc:	10044180 	call	1004418 <__floatsidf>
 1002200:	1021883a 	mov	r16,r2
 1002204:	1823883a 	mov	r17,r3
 1002208:	0005883a 	mov	r2,zero
 100220c:	00f05c34 	movhi	r3,49520
 1002210:	180f883a 	mov	r7,r3
 1002214:	8009883a 	mov	r4,r16
 1002218:	880b883a 	mov	r5,r17
 100221c:	100d883a 	mov	r6,r2
 1002220:	1003ebc0 	call	1003ebc <__muldf3>
 1002224:	180b883a 	mov	r5,r3
 1002228:	a80f883a 	mov	r7,r21
 100222c:	a00d883a 	mov	r6,r20
 1002230:	1009883a 	mov	r4,r2
 1002234:	1003e480 	call	1003e48 <__adddf3>
 1002238:	180b883a 	mov	r5,r3
 100223c:	1009883a 	mov	r4,r2
 1002240:	10045100 	call	1004510 <__fixdfsi>
 1002244:	e0800015 	stw	r2,0(fp)
 1002248:	b5bffe04 	addi	r22,r22,-8
 100224c:	b0806417 	ldw	r2,400(r22)
 1002250:	b0c06517 	ldw	r3,404(r22)
 1002254:	8009883a 	mov	r4,r16
 1002258:	880b883a 	mov	r5,r17
 100225c:	180f883a 	mov	r7,r3
 1002260:	100d883a 	mov	r6,r2
 1002264:	1003e480 	call	1003e48 <__adddf3>
 1002268:	bdffffc4 	addi	r23,r23,-1
 100226c:	e7000104 	addi	fp,fp,4
 1002270:	1029883a 	mov	r20,r2
 1002274:	182b883a 	mov	r21,r3
 1002278:	b83fd51e 	bne	r23,zero,10021d0 <__kernel_rem_pio2+0x1f0>
 100227c:	d9809317 	ldw	r6,588(sp)
 1002280:	a80b883a 	mov	r5,r21
 1002284:	a009883a 	mov	r4,r20
 1002288:	10033b80 	call	10033b8 <scalbn>
 100228c:	0009883a 	mov	r4,zero
 1002290:	014ff034 	movhi	r5,16320
 1002294:	280f883a 	mov	r7,r5
 1002298:	200d883a 	mov	r6,r4
 100229c:	180b883a 	mov	r5,r3
 10022a0:	1009883a 	mov	r4,r2
 10022a4:	1021883a 	mov	r16,r2
 10022a8:	1823883a 	mov	r17,r3
 10022ac:	1003ebc0 	call	1003ebc <__muldf3>
 10022b0:	180b883a 	mov	r5,r3
 10022b4:	1009883a 	mov	r4,r2
 10022b8:	10031940 	call	1003194 <floor>
 10022bc:	0011883a 	mov	r8,zero
 10022c0:	02700834 	movhi	r9,49184
 10022c4:	480f883a 	mov	r7,r9
 10022c8:	400d883a 	mov	r6,r8
 10022cc:	180b883a 	mov	r5,r3
 10022d0:	1009883a 	mov	r4,r2
 10022d4:	1003ebc0 	call	1003ebc <__muldf3>
 10022d8:	180f883a 	mov	r7,r3
 10022dc:	100d883a 	mov	r6,r2
 10022e0:	880b883a 	mov	r5,r17
 10022e4:	8009883a 	mov	r4,r16
 10022e8:	1003e480 	call	1003e48 <__adddf3>
 10022ec:	180b883a 	mov	r5,r3
 10022f0:	1009883a 	mov	r4,r2
 10022f4:	1823883a 	mov	r17,r3
 10022f8:	1021883a 	mov	r16,r2
 10022fc:	10045100 	call	1004510 <__fixdfsi>
 1002300:	1009883a 	mov	r4,r2
 1002304:	d8809415 	stw	r2,592(sp)
 1002308:	10044180 	call	1004418 <__floatsidf>
 100230c:	880b883a 	mov	r5,r17
 1002310:	8009883a 	mov	r4,r16
 1002314:	180f883a 	mov	r7,r3
 1002318:	100d883a 	mov	r6,r2
 100231c:	1003dc80 	call	1003dc8 <__subdf3>
 1002320:	d9c0a017 	ldw	r7,640(sp)
 1002324:	180d883a 	mov	r6,r3
 1002328:	1021883a 	mov	r16,r2
 100232c:	1823883a 	mov	r17,r3
 1002330:	38017d1e 	bne	r7,zero,1002928 <__kernel_rem_pio2+0x948>
 1002334:	da808d17 	ldw	r10,564(sp)
 1002338:	d9009317 	ldw	r4,588(sp)
 100233c:	00c00604 	movi	r3,24
 1002340:	50bfffc4 	addi	r2,r10,-1
 1002344:	1085883a 	add	r2,r2,r2
 1002348:	1085883a 	add	r2,r2,r2
 100234c:	16c5883a 	add	r2,r2,sp
 1002350:	11400017 	ldw	r5,0(r2)
 1002354:	1907c83a 	sub	r3,r3,r4
 1002358:	d9c09317 	ldw	r7,588(sp)
 100235c:	28cdd83a 	sra	r6,r5,r3
 1002360:	010005c4 	movi	r4,23
 1002364:	da809417 	ldw	r10,592(sp)
 1002368:	30c6983a 	sll	r3,r6,r3
 100236c:	21c9c83a 	sub	r4,r4,r7
 1002370:	5195883a 	add	r10,r10,r6
 1002374:	28cbc83a 	sub	r5,r5,r3
 1002378:	2909d83a 	sra	r4,r5,r4
 100237c:	da809415 	stw	r10,592(sp)
 1002380:	11400015 	stw	r5,0(r2)
 1002384:	d9009215 	stw	r4,584(sp)
 1002388:	d9409217 	ldw	r5,584(sp)
 100238c:	0140270e 	bge	zero,r5,100242c <__kernel_rem_pio2+0x44c>
 1002390:	d9809417 	ldw	r6,592(sp)
 1002394:	d9c08d17 	ldw	r7,564(sp)
 1002398:	31800044 	addi	r6,r6,1
 100239c:	d9809415 	stw	r6,592(sp)
 10023a0:	01c1a50e 	bge	zero,r7,1002a38 <__kernel_rem_pio2+0xa58>
 10023a4:	002d883a 	mov	r22,zero
 10023a8:	000b883a 	mov	r5,zero
 10023ac:	d809883a 	mov	r4,sp
 10023b0:	01c04034 	movhi	r7,256
 10023b4:	01804034 	movhi	r6,256
 10023b8:	31bfffc4 	addi	r6,r6,-1
 10023bc:	00000806 	br	10023e0 <__kernel_rem_pio2+0x400>
 10023c0:	38c5c83a 	sub	r2,r7,r3
 10023c4:	18000226 	beq	r3,zero,10023d0 <__kernel_rem_pio2+0x3f0>
 10023c8:	05800044 	movi	r22,1
 10023cc:	20800015 	stw	r2,0(r4)
 10023d0:	da808d17 	ldw	r10,564(sp)
 10023d4:	29400044 	addi	r5,r5,1
 10023d8:	21000104 	addi	r4,r4,4
 10023dc:	51400926 	beq	r10,r5,1002404 <__kernel_rem_pio2+0x424>
 10023e0:	b004c03a 	cmpne	r2,r22,zero
 10023e4:	20c00017 	ldw	r3,0(r4)
 10023e8:	103ff526 	beq	r2,zero,10023c0 <__kernel_rem_pio2+0x3e0>
 10023ec:	da808d17 	ldw	r10,564(sp)
 10023f0:	30c5c83a 	sub	r2,r6,r3
 10023f4:	29400044 	addi	r5,r5,1
 10023f8:	20800015 	stw	r2,0(r4)
 10023fc:	21000104 	addi	r4,r4,4
 1002400:	517ff71e 	bne	r10,r5,10023e0 <__kernel_rem_pio2+0x400>
 1002404:	d880a017 	ldw	r2,640(sp)
 1002408:	1000051e 	bne	r2,zero,1002420 <__kernel_rem_pio2+0x440>
 100240c:	d8c09317 	ldw	r3,588(sp)
 1002410:	00800044 	movi	r2,1
 1002414:	18814e26 	beq	r3,r2,1002950 <__kernel_rem_pio2+0x970>
 1002418:	00800084 	movi	r2,2
 100241c:	18815826 	beq	r3,r2,1002980 <__kernel_rem_pio2+0x9a0>
 1002420:	d9c09217 	ldw	r7,584(sp)
 1002424:	00800084 	movi	r2,2
 1002428:	38806926 	beq	r7,r2,10025d0 <__kernel_rem_pio2+0x5f0>
 100242c:	000d883a 	mov	r6,zero
 1002430:	000f883a 	mov	r7,zero
 1002434:	8009883a 	mov	r4,r16
 1002438:	880b883a 	mov	r5,r17
 100243c:	10042800 	call	1004280 <__eqdf2>
 1002440:	1000811e 	bne	r2,zero,1002648 <__kernel_rem_pio2+0x668>
 1002444:	da808d17 	ldw	r10,564(sp)
 1002448:	d8809517 	ldw	r2,596(sp)
 100244c:	51bfffc4 	addi	r6,r10,-1
 1002450:	30800c16 	blt	r6,r2,1002484 <__kernel_rem_pio2+0x4a4>
 1002454:	3185883a 	add	r2,r6,r6
 1002458:	1085883a 	add	r2,r2,r2
 100245c:	16c9883a 	add	r4,r2,sp
 1002460:	3007883a 	mov	r3,r6
 1002464:	000b883a 	mov	r5,zero
 1002468:	20800017 	ldw	r2,0(r4)
 100246c:	d9c09517 	ldw	r7,596(sp)
 1002470:	18ffffc4 	addi	r3,r3,-1
 1002474:	213fff04 	addi	r4,r4,-4
 1002478:	288ab03a 	or	r5,r5,r2
 100247c:	19fffa0e 	bge	r3,r7,1002468 <__kernel_rem_pio2+0x488>
 1002480:	2800791e 	bne	r5,zero,1002668 <__kernel_rem_pio2+0x688>
 1002484:	da809917 	ldw	r10,612(sp)
 1002488:	50bfff17 	ldw	r2,-4(r10)
 100248c:	1001511e 	bne	r2,zero,10029d4 <__kernel_rem_pio2+0x9f4>
 1002490:	d880a117 	ldw	r2,644(sp)
 1002494:	01000044 	movi	r4,1
 1002498:	10ffff04 	addi	r3,r2,-4
 100249c:	18ffff04 	addi	r3,r3,-4
 10024a0:	18800017 	ldw	r2,0(r3)
 10024a4:	21000044 	addi	r4,r4,1
 10024a8:	103ffc26 	beq	r2,zero,100249c <__kernel_rem_pio2+0x4bc>
 10024ac:	d8c08d17 	ldw	r3,564(sp)
 10024b0:	192f883a 	add	r23,r3,r4
 10024b4:	1f000044 	addi	fp,r3,1
 10024b8:	bf00020e 	bge	r23,fp,10024c4 <__kernel_rem_pio2+0x4e4>
 10024bc:	ddc08d15 	stw	r23,564(sp)
 10024c0:	003f3a06 	br	10021ac <__kernel_rem_pio2+0x1cc>
 10024c4:	d9408c17 	ldw	r5,560(sp)
 10024c8:	d9009817 	ldw	r4,608(sp)
 10024cc:	da80ae17 	ldw	r10,696(sp)
 10024d0:	1945883a 	add	r2,r3,r5
 10024d4:	190f883a 	add	r7,r3,r4
 10024d8:	1085883a 	add	r2,r2,r2
 10024dc:	380a90fa 	slli	r5,r7,3
 10024e0:	e00c90fa 	slli	r6,fp,3
 10024e4:	1085883a 	add	r2,r2,r2
 10024e8:	5085883a 	add	r2,r10,r2
 10024ec:	d8c01404 	addi	r3,sp,80
 10024f0:	d9006404 	addi	r4,sp,400
 10024f4:	10800104 	addi	r2,r2,4
 10024f8:	196b883a 	add	r21,r3,r5
 10024fc:	21a1883a 	add	r16,r4,r6
 1002500:	d8809115 	stw	r2,580(sp)
 1002504:	d9c09015 	stw	r7,576(sp)
 1002508:	d8809117 	ldw	r2,580(sp)
 100250c:	11000017 	ldw	r4,0(r2)
 1002510:	10044180 	call	1004418 <__floatsidf>
 1002514:	a8c00115 	stw	r3,4(r21)
 1002518:	d8c0a217 	ldw	r3,648(sp)
 100251c:	a8800015 	stw	r2,0(r21)
 1002520:	18002826 	beq	r3,zero,10025c4 <__kernel_rem_pio2+0x5e4>
 1002524:	d9009017 	ldw	r4,576(sp)
 1002528:	dd009617 	ldw	r20,600(sp)
 100252c:	0023883a 	mov	r17,zero
 1002530:	200490fa 	slli	r2,r4,3
 1002534:	002d883a 	mov	r22,zero
 1002538:	0025883a 	mov	r18,zero
 100253c:	16e7883a 	add	r19,r2,sp
 1002540:	98801417 	ldw	r2,80(r19)
 1002544:	98c01517 	ldw	r3,84(r19)
 1002548:	a1800017 	ldw	r6,0(r20)
 100254c:	a1c00117 	ldw	r7,4(r20)
 1002550:	180b883a 	mov	r5,r3
 1002554:	1009883a 	mov	r4,r2
 1002558:	1003ebc0 	call	1003ebc <__muldf3>
 100255c:	180f883a 	mov	r7,r3
 1002560:	900b883a 	mov	r5,r18
 1002564:	8809883a 	mov	r4,r17
 1002568:	100d883a 	mov	r6,r2
 100256c:	1003e480 	call	1003e48 <__adddf3>
 1002570:	d9409817 	ldw	r5,608(sp)
 1002574:	b5800044 	addi	r22,r22,1
 1002578:	9cfffe04 	addi	r19,r19,-8
 100257c:	1023883a 	mov	r17,r2
 1002580:	1825883a 	mov	r18,r3
 1002584:	a5000204 	addi	r20,r20,8
 1002588:	2dbfed1e 	bne	r5,r22,1002540 <__kernel_rem_pio2+0x560>
 100258c:	d9809117 	ldw	r6,580(sp)
 1002590:	d9c09017 	ldw	r7,576(sp)
 1002594:	e7000044 	addi	fp,fp,1
 1002598:	31800104 	addi	r6,r6,4
 100259c:	39c00044 	addi	r7,r7,1
 10025a0:	84800115 	stw	r18,4(r16)
 10025a4:	84400015 	stw	r17,0(r16)
 10025a8:	d9809115 	stw	r6,580(sp)
 10025ac:	ad400204 	addi	r21,r21,8
 10025b0:	84000204 	addi	r16,r16,8
 10025b4:	d9c09015 	stw	r7,576(sp)
 10025b8:	bf3fd30e 	bge	r23,fp,1002508 <__kernel_rem_pio2+0x528>
 10025bc:	ddc08d15 	stw	r23,564(sp)
 10025c0:	003efa06 	br	10021ac <__kernel_rem_pio2+0x1cc>
 10025c4:	0023883a 	mov	r17,zero
 10025c8:	0025883a 	mov	r18,zero
 10025cc:	003fef06 	br	100258c <__kernel_rem_pio2+0x5ac>
 10025d0:	0029883a 	mov	r20,zero
 10025d4:	054ffc34 	movhi	r21,16368
 10025d8:	880f883a 	mov	r7,r17
 10025dc:	800d883a 	mov	r6,r16
 10025e0:	a009883a 	mov	r4,r20
 10025e4:	a80b883a 	mov	r5,r21
 10025e8:	1003dc80 	call	1003dc8 <__subdf3>
 10025ec:	1025883a 	mov	r18,r2
 10025f0:	b005003a 	cmpeq	r2,r22,zero
 10025f4:	1827883a 	mov	r19,r3
 10025f8:	9021883a 	mov	r16,r18
 10025fc:	1823883a 	mov	r17,r3
 1002600:	103f8a1e 	bne	r2,zero,100242c <__kernel_rem_pio2+0x44c>
 1002604:	d9809317 	ldw	r6,588(sp)
 1002608:	0009883a 	mov	r4,zero
 100260c:	a80b883a 	mov	r5,r21
 1002610:	10033b80 	call	10033b8 <scalbn>
 1002614:	180f883a 	mov	r7,r3
 1002618:	9009883a 	mov	r4,r18
 100261c:	980b883a 	mov	r5,r19
 1002620:	100d883a 	mov	r6,r2
 1002624:	1003dc80 	call	1003dc8 <__subdf3>
 1002628:	1021883a 	mov	r16,r2
 100262c:	1823883a 	mov	r17,r3
 1002630:	000d883a 	mov	r6,zero
 1002634:	000f883a 	mov	r7,zero
 1002638:	8009883a 	mov	r4,r16
 100263c:	880b883a 	mov	r5,r17
 1002640:	10042800 	call	1004280 <__eqdf2>
 1002644:	103f7f26 	beq	r2,zero,1002444 <__kernel_rem_pio2+0x464>
 1002648:	000d883a 	mov	r6,zero
 100264c:	000f883a 	mov	r7,zero
 1002650:	8009883a 	mov	r4,r16
 1002654:	880b883a 	mov	r5,r17
 1002658:	10042800 	call	1004280 <__eqdf2>
 100265c:	10019a1e 	bne	r2,zero,1002cc8 <__kernel_rem_pio2+0xce8>
 1002660:	da808d17 	ldw	r10,564(sp)
 1002664:	51bfffc4 	addi	r6,r10,-1
 1002668:	3185883a 	add	r2,r6,r6
 100266c:	1085883a 	add	r2,r2,r2
 1002670:	d9009317 	ldw	r4,588(sp)
 1002674:	16c5883a 	add	r2,r2,sp
 1002678:	10c00017 	ldw	r3,0(r2)
 100267c:	213ffa04 	addi	r4,r4,-24
 1002680:	d9009315 	stw	r4,588(sp)
 1002684:	1801d41e 	bne	r3,zero,1002dd8 <__kernel_rem_pio2+0xdf8>
 1002688:	d9808d15 	stw	r6,564(sp)
 100268c:	1007883a 	mov	r3,r2
 1002690:	d9408d17 	ldw	r5,564(sp)
 1002694:	d9809317 	ldw	r6,588(sp)
 1002698:	18ffff04 	addi	r3,r3,-4
 100269c:	18800017 	ldw	r2,0(r3)
 10026a0:	297fffc4 	addi	r5,r5,-1
 10026a4:	31bffa04 	addi	r6,r6,-24
 10026a8:	d9408d15 	stw	r5,564(sp)
 10026ac:	d9809315 	stw	r6,588(sp)
 10026b0:	103ff726 	beq	r2,zero,1002690 <__kernel_rem_pio2+0x6b0>
 10026b4:	d9809317 	ldw	r6,588(sp)
 10026b8:	0005883a 	mov	r2,zero
 10026bc:	00cffc34 	movhi	r3,16368
 10026c0:	180b883a 	mov	r5,r3
 10026c4:	1009883a 	mov	r4,r2
 10026c8:	10033b80 	call	10033b8 <scalbn>
 10026cc:	d9808d17 	ldw	r6,564(sp)
 10026d0:	1021883a 	mov	r16,r2
 10026d4:	1823883a 	mov	r17,r3
 10026d8:	30004616 	blt	r6,zero,10027f4 <__kernel_rem_pio2+0x814>
 10026dc:	300690fa 	slli	r3,r6,3
 10026e0:	3185883a 	add	r2,r6,r6
 10026e4:	1085883a 	add	r2,r2,r2
 10026e8:	16e9883a 	add	r20,r2,sp
 10026ec:	1ee5883a 	add	r18,r3,sp
 10026f0:	3027883a 	mov	r19,r6
 10026f4:	057fffc4 	movi	r21,-1
 10026f8:	a1000017 	ldw	r4,0(r20)
 10026fc:	9cffffc4 	addi	r19,r19,-1
 1002700:	a53fff04 	addi	r20,r20,-4
 1002704:	10044180 	call	1004418 <__floatsidf>
 1002708:	800d883a 	mov	r6,r16
 100270c:	880f883a 	mov	r7,r17
 1002710:	180b883a 	mov	r5,r3
 1002714:	1009883a 	mov	r4,r2
 1002718:	1003ebc0 	call	1003ebc <__muldf3>
 100271c:	0015883a 	mov	r10,zero
 1002720:	02cf9c34 	movhi	r11,15984
 1002724:	880b883a 	mov	r5,r17
 1002728:	8009883a 	mov	r4,r16
 100272c:	90c06515 	stw	r3,404(r18)
 1002730:	90806415 	stw	r2,400(r18)
 1002734:	580f883a 	mov	r7,r11
 1002738:	500d883a 	mov	r6,r10
 100273c:	1003ebc0 	call	1003ebc <__muldf3>
 1002740:	1021883a 	mov	r16,r2
 1002744:	1823883a 	mov	r17,r3
 1002748:	94bffe04 	addi	r18,r18,-8
 100274c:	9d7fea1e 	bne	r19,r21,10026f8 <__kernel_rem_pio2+0x718>
 1002750:	d9c09517 	ldw	r7,596(sp)
 1002754:	dd808d17 	ldw	r22,564(sp)
 1002758:	002b883a 	mov	r21,zero
 100275c:	382e403a 	cmpge	r23,r7,zero
 1002760:	b800aa26 	beq	r23,zero,1002a0c <__kernel_rem_pio2+0xa2c>
 1002764:	a800a916 	blt	r21,zero,1002a0c <__kernel_rem_pio2+0xa2c>
 1002768:	b00690fa 	slli	r3,r22,3
 100276c:	d8806404 	addi	r2,sp,400
 1002770:	0021883a 	mov	r16,zero
 1002774:	10e9883a 	add	r20,r2,r3
 1002778:	0027883a 	mov	r19,zero
 100277c:	0023883a 	mov	r17,zero
 1002780:	04804074 	movhi	r18,257
 1002784:	94899904 	addi	r18,r18,9828
 1002788:	00000106 	br	1002790 <__kernel_rem_pio2+0x7b0>
 100278c:	acc01116 	blt	r21,r19,10027d4 <__kernel_rem_pio2+0x7f4>
 1002790:	91000017 	ldw	r4,0(r18)
 1002794:	91400117 	ldw	r5,4(r18)
 1002798:	a1800017 	ldw	r6,0(r20)
 100279c:	a1c00117 	ldw	r7,4(r20)
 10027a0:	9cc00044 	addi	r19,r19,1
 10027a4:	94800204 	addi	r18,r18,8
 10027a8:	1003ebc0 	call	1003ebc <__muldf3>
 10027ac:	180f883a 	mov	r7,r3
 10027b0:	880b883a 	mov	r5,r17
 10027b4:	8009883a 	mov	r4,r16
 10027b8:	100d883a 	mov	r6,r2
 10027bc:	1003e480 	call	1003e48 <__adddf3>
 10027c0:	da809517 	ldw	r10,596(sp)
 10027c4:	a5000204 	addi	r20,r20,8
 10027c8:	1021883a 	mov	r16,r2
 10027cc:	1823883a 	mov	r17,r3
 10027d0:	54ffee0e 	bge	r10,r19,100278c <__kernel_rem_pio2+0x7ac>
 10027d4:	a80490fa 	slli	r2,r21,3
 10027d8:	b5bfffc4 	addi	r22,r22,-1
 10027dc:	ad400044 	addi	r21,r21,1
 10027e0:	16c5883a 	add	r2,r2,sp
 10027e4:	14403d15 	stw	r17,244(r2)
 10027e8:	14003c15 	stw	r16,240(r2)
 10027ec:	00bfffc4 	movi	r2,-1
 10027f0:	b0bfdb1e 	bne	r22,r2,1002760 <__kernel_rem_pio2+0x780>
 10027f4:	d8c0ad17 	ldw	r3,692(sp)
 10027f8:	00800084 	movi	r2,2
 10027fc:	10c09316 	blt	r2,r3,1002a4c <__kernel_rem_pio2+0xa6c>
 1002800:	00c1120e 	bge	zero,r3,1002c4c <__kernel_rem_pio2+0xc6c>
 1002804:	d9808d17 	ldw	r6,564(sp)
 1002808:	30018d16 	blt	r6,zero,1002e40 <__kernel_rem_pio2+0xe60>
 100280c:	d8c08d17 	ldw	r3,564(sp)
 1002810:	0011883a 	mov	r8,zero
 1002814:	0013883a 	mov	r9,zero
 1002818:	180490fa 	slli	r2,r3,3
 100281c:	1823883a 	mov	r17,r3
 1002820:	04bfffc4 	movi	r18,-1
 1002824:	16e1883a 	add	r16,r2,sp
 1002828:	80803c17 	ldw	r2,240(r16)
 100282c:	80c03d17 	ldw	r3,244(r16)
 1002830:	480b883a 	mov	r5,r9
 1002834:	4009883a 	mov	r4,r8
 1002838:	180f883a 	mov	r7,r3
 100283c:	100d883a 	mov	r6,r2
 1002840:	1003e480 	call	1003e48 <__adddf3>
 1002844:	8c7fffc4 	addi	r17,r17,-1
 1002848:	843ffe04 	addi	r16,r16,-8
 100284c:	1011883a 	mov	r8,r2
 1002850:	1813883a 	mov	r9,r3
 1002854:	8cbff41e 	bne	r17,r18,1002828 <__kernel_rem_pio2+0x848>
 1002858:	d9009217 	ldw	r4,584(sp)
 100285c:	20015b1e 	bne	r4,zero,1002dcc <__kernel_rem_pio2+0xdec>
 1002860:	4009883a 	mov	r4,r8
 1002864:	480b883a 	mov	r5,r9
 1002868:	d9809717 	ldw	r6,604(sp)
 100286c:	d8803c17 	ldw	r2,240(sp)
 1002870:	480f883a 	mov	r7,r9
 1002874:	31400115 	stw	r5,4(r6)
 1002878:	31000015 	stw	r4,0(r6)
 100287c:	d8c03d17 	ldw	r3,244(sp)
 1002880:	400d883a 	mov	r6,r8
 1002884:	1009883a 	mov	r4,r2
 1002888:	180b883a 	mov	r5,r3
 100288c:	1003dc80 	call	1003dc8 <__subdf3>
 1002890:	d9c08d17 	ldw	r7,564(sp)
 1002894:	1011883a 	mov	r8,r2
 1002898:	1813883a 	mov	r9,r3
 100289c:	01c00d0e 	bge	zero,r7,10028d4 <__kernel_rem_pio2+0x8f4>
 10028a0:	0023883a 	mov	r17,zero
 10028a4:	dc003e04 	addi	r16,sp,248
 10028a8:	81800017 	ldw	r6,0(r16)
 10028ac:	81c00117 	ldw	r7,4(r16)
 10028b0:	480b883a 	mov	r5,r9
 10028b4:	4009883a 	mov	r4,r8
 10028b8:	1003e480 	call	1003e48 <__adddf3>
 10028bc:	da808d17 	ldw	r10,564(sp)
 10028c0:	8c400044 	addi	r17,r17,1
 10028c4:	1011883a 	mov	r8,r2
 10028c8:	1813883a 	mov	r9,r3
 10028cc:	84000204 	addi	r16,r16,8
 10028d0:	8abff51e 	bne	r17,r10,10028a8 <__kernel_rem_pio2+0x8c8>
 10028d4:	d8809217 	ldw	r2,584(sp)
 10028d8:	10000226 	beq	r2,zero,10028e4 <__kernel_rem_pio2+0x904>
 10028dc:	48e0003c 	xorhi	r3,r9,32768
 10028e0:	1813883a 	mov	r9,r3
 10028e4:	d8c09717 	ldw	r3,604(sp)
 10028e8:	1a400315 	stw	r9,12(r3)
 10028ec:	1a000215 	stw	r8,8(r3)
 10028f0:	d8c09417 	ldw	r3,592(sp)
 10028f4:	188001cc 	andi	r2,r3,7
 10028f8:	dfc0ac17 	ldw	ra,688(sp)
 10028fc:	df00ab17 	ldw	fp,684(sp)
 1002900:	ddc0aa17 	ldw	r23,680(sp)
 1002904:	dd80a917 	ldw	r22,676(sp)
 1002908:	dd40a817 	ldw	r21,672(sp)
 100290c:	dd00a717 	ldw	r20,668(sp)
 1002910:	dcc0a617 	ldw	r19,664(sp)
 1002914:	dc80a517 	ldw	r18,660(sp)
 1002918:	dc40a417 	ldw	r17,656(sp)
 100291c:	dc00a317 	ldw	r16,652(sp)
 1002920:	dec0ad04 	addi	sp,sp,692
 1002924:	f800283a 	ret
 1002928:	d8809317 	ldw	r2,588(sp)
 100292c:	10001f1e 	bne	r2,zero,10029ac <__kernel_rem_pio2+0x9cc>
 1002930:	d8c08d17 	ldw	r3,564(sp)
 1002934:	18c5883a 	add	r2,r3,r3
 1002938:	1085883a 	add	r2,r2,r2
 100293c:	16c5883a 	add	r2,r2,sp
 1002940:	10ffff17 	ldw	r3,-4(r2)
 1002944:	1807d5fa 	srai	r3,r3,23
 1002948:	d8c09215 	stw	r3,584(sp)
 100294c:	003e8e06 	br	1002388 <__kernel_rem_pio2+0x3a8>
 1002950:	d9008d17 	ldw	r4,564(sp)
 1002954:	d9409317 	ldw	r5,588(sp)
 1002958:	2145c83a 	sub	r2,r4,r5
 100295c:	1085883a 	add	r2,r2,r2
 1002960:	1085883a 	add	r2,r2,r2
 1002964:	16c5883a 	add	r2,r2,sp
 1002968:	10c00017 	ldw	r3,0(r2)
 100296c:	01002034 	movhi	r4,128
 1002970:	213fffc4 	addi	r4,r4,-1
 1002974:	1906703a 	and	r3,r3,r4
 1002978:	10c00015 	stw	r3,0(r2)
 100297c:	003ea806 	br	1002420 <__kernel_rem_pio2+0x440>
 1002980:	d9808d17 	ldw	r6,564(sp)
 1002984:	01001034 	movhi	r4,64
 1002988:	213fffc4 	addi	r4,r4,-1
 100298c:	30bfffc4 	addi	r2,r6,-1
 1002990:	1085883a 	add	r2,r2,r2
 1002994:	1085883a 	add	r2,r2,r2
 1002998:	16c5883a 	add	r2,r2,sp
 100299c:	10c00017 	ldw	r3,0(r2)
 10029a0:	1906703a 	and	r3,r3,r4
 10029a4:	10c00015 	stw	r3,0(r2)
 10029a8:	003e9d06 	br	1002420 <__kernel_rem_pio2+0x440>
 10029ac:	0005883a 	mov	r2,zero
 10029b0:	00cff834 	movhi	r3,16352
 10029b4:	300b883a 	mov	r5,r6
 10029b8:	180f883a 	mov	r7,r3
 10029bc:	8009883a 	mov	r4,r16
 10029c0:	100d883a 	mov	r6,r2
 10029c4:	10043900 	call	1004390 <__gedf2>
 10029c8:	10001d0e 	bge	r2,zero,1002a40 <__kernel_rem_pio2+0xa60>
 10029cc:	d8009215 	stw	zero,584(sp)
 10029d0:	003e9606 	br	100242c <__kernel_rem_pio2+0x44c>
 10029d4:	d8c08d17 	ldw	r3,564(sp)
 10029d8:	01000044 	movi	r4,1
 10029dc:	192f883a 	add	r23,r3,r4
 10029e0:	1f000044 	addi	fp,r3,1
 10029e4:	bf3eb516 	blt	r23,fp,10024bc <__kernel_rem_pio2+0x4dc>
 10029e8:	003eb606 	br	10024c4 <__kernel_rem_pio2+0x4e4>
 10029ec:	0021883a 	mov	r16,zero
 10029f0:	0023883a 	mov	r17,zero
 10029f4:	a5000044 	addi	r20,r20,1
 10029f8:	ac400115 	stw	r17,4(r21)
 10029fc:	ac000015 	stw	r16,0(r21)
 1002a00:	ad400204 	addi	r21,r21,8
 1002a04:	a5fdba1e 	bne	r20,r23,10020f0 <__kernel_rem_pio2+0x110>
 1002a08:	003dd806 	br	100216c <__kernel_rem_pio2+0x18c>
 1002a0c:	a80490fa 	slli	r2,r21,3
 1002a10:	0021883a 	mov	r16,zero
 1002a14:	0023883a 	mov	r17,zero
 1002a18:	16c5883a 	add	r2,r2,sp
 1002a1c:	14403d15 	stw	r17,244(r2)
 1002a20:	14003c15 	stw	r16,240(r2)
 1002a24:	b5bfffc4 	addi	r22,r22,-1
 1002a28:	00bfffc4 	movi	r2,-1
 1002a2c:	ad400044 	addi	r21,r21,1
 1002a30:	b0bf4b1e 	bne	r22,r2,1002760 <__kernel_rem_pio2+0x780>
 1002a34:	003f6f06 	br	10027f4 <__kernel_rem_pio2+0x814>
 1002a38:	002d883a 	mov	r22,zero
 1002a3c:	003e7106 	br	1002404 <__kernel_rem_pio2+0x424>
 1002a40:	01000084 	movi	r4,2
 1002a44:	d9009215 	stw	r4,584(sp)
 1002a48:	003e5106 	br	1002390 <__kernel_rem_pio2+0x3b0>
 1002a4c:	d900ad17 	ldw	r4,692(sp)
 1002a50:	008000c4 	movi	r2,3
 1002a54:	20bfa61e 	bne	r4,r2,10028f0 <__kernel_rem_pio2+0x910>
 1002a58:	d9c08d17 	ldw	r7,564(sp)
 1002a5c:	01c02c0e 	bge	zero,r7,1002b10 <__kernel_rem_pio2+0xb30>
 1002a60:	3805883a 	mov	r2,r7
 1002a64:	00000106 	br	1002a6c <__kernel_rem_pio2+0xa8c>
 1002a68:	d8808e17 	ldw	r2,568(sp)
 1002a6c:	113fffc4 	addi	r4,r2,-1
 1002a70:	100690fa 	slli	r3,r2,3
 1002a74:	200490fa 	slli	r2,r4,3
 1002a78:	d9008e15 	stw	r4,568(sp)
 1002a7c:	1ef9883a 	add	fp,r3,sp
 1002a80:	16c5883a 	add	r2,r2,sp
 1002a84:	d8809a15 	stw	r2,616(sp)
 1002a88:	11403c04 	addi	r5,r2,240
 1002a8c:	e1803c04 	addi	r6,fp,240
 1002a90:	14003c17 	ldw	r16,240(r2)
 1002a94:	e5003c17 	ldw	r20,240(fp)
 1002a98:	d9409b15 	stw	r5,620(sp)
 1002a9c:	d9809c15 	stw	r6,624(sp)
 1002aa0:	35400117 	ldw	r21,4(r6)
 1002aa4:	2c400117 	ldw	r17,4(r5)
 1002aa8:	8009883a 	mov	r4,r16
 1002aac:	a00d883a 	mov	r6,r20
 1002ab0:	880b883a 	mov	r5,r17
 1002ab4:	a80f883a 	mov	r7,r21
 1002ab8:	1003e480 	call	1003e48 <__adddf3>
 1002abc:	100d883a 	mov	r6,r2
 1002ac0:	880b883a 	mov	r5,r17
 1002ac4:	8009883a 	mov	r4,r16
 1002ac8:	180f883a 	mov	r7,r3
 1002acc:	1025883a 	mov	r18,r2
 1002ad0:	1827883a 	mov	r19,r3
 1002ad4:	1003dc80 	call	1003dc8 <__subdf3>
 1002ad8:	180f883a 	mov	r7,r3
 1002adc:	a80b883a 	mov	r5,r21
 1002ae0:	a009883a 	mov	r4,r20
 1002ae4:	100d883a 	mov	r6,r2
 1002ae8:	1003e480 	call	1003e48 <__adddf3>
 1002aec:	e0803c15 	stw	r2,240(fp)
 1002af0:	d9c09c17 	ldw	r7,624(sp)
 1002af4:	38c00115 	stw	r3,4(r7)
 1002af8:	da809a17 	ldw	r10,616(sp)
 1002afc:	54803c15 	stw	r18,240(r10)
 1002b00:	d8809b17 	ldw	r2,620(sp)
 1002b04:	14c00115 	stw	r19,4(r2)
 1002b08:	d8c08e17 	ldw	r3,568(sp)
 1002b0c:	183fd61e 	bne	r3,zero,1002a68 <__kernel_rem_pio2+0xa88>
 1002b10:	d9008d17 	ldw	r4,564(sp)
 1002b14:	00800044 	movi	r2,1
 1002b18:	1100cc0e 	bge	r2,r4,1002e4c <__kernel_rem_pio2+0xe6c>
 1002b1c:	d8808d17 	ldw	r2,564(sp)
 1002b20:	117fffc4 	addi	r5,r2,-1
 1002b24:	100690fa 	slli	r3,r2,3
 1002b28:	280490fa 	slli	r2,r5,3
 1002b2c:	d9408f15 	stw	r5,572(sp)
 1002b30:	1ef9883a 	add	fp,r3,sp
 1002b34:	16c5883a 	add	r2,r2,sp
 1002b38:	d8809d15 	stw	r2,628(sp)
 1002b3c:	11803c04 	addi	r6,r2,240
 1002b40:	e1c03c04 	addi	r7,fp,240
 1002b44:	14003c17 	ldw	r16,240(r2)
 1002b48:	e5003c17 	ldw	r20,240(fp)
 1002b4c:	d9809e15 	stw	r6,632(sp)
 1002b50:	d9c09f15 	stw	r7,636(sp)
 1002b54:	34400117 	ldw	r17,4(r6)
 1002b58:	3d400117 	ldw	r21,4(r7)
 1002b5c:	8009883a 	mov	r4,r16
 1002b60:	880b883a 	mov	r5,r17
 1002b64:	a00d883a 	mov	r6,r20
 1002b68:	a80f883a 	mov	r7,r21
 1002b6c:	1003e480 	call	1003e48 <__adddf3>
 1002b70:	100d883a 	mov	r6,r2
 1002b74:	880b883a 	mov	r5,r17
 1002b78:	8009883a 	mov	r4,r16
 1002b7c:	180f883a 	mov	r7,r3
 1002b80:	1025883a 	mov	r18,r2
 1002b84:	1827883a 	mov	r19,r3
 1002b88:	1003dc80 	call	1003dc8 <__subdf3>
 1002b8c:	180f883a 	mov	r7,r3
 1002b90:	a80b883a 	mov	r5,r21
 1002b94:	a009883a 	mov	r4,r20
 1002b98:	100d883a 	mov	r6,r2
 1002b9c:	1003e480 	call	1003e48 <__adddf3>
 1002ba0:	e0803c15 	stw	r2,240(fp)
 1002ba4:	da809f17 	ldw	r10,636(sp)
 1002ba8:	50c00115 	stw	r3,4(r10)
 1002bac:	d8c09d17 	ldw	r3,628(sp)
 1002bb0:	d8808f17 	ldw	r2,572(sp)
 1002bb4:	1c803c15 	stw	r18,240(r3)
 1002bb8:	d9009e17 	ldw	r4,632(sp)
 1002bbc:	00c00044 	movi	r3,1
 1002bc0:	24c00115 	stw	r19,4(r4)
 1002bc4:	d9408f17 	ldw	r5,572(sp)
 1002bc8:	28ffd51e 	bne	r5,r3,1002b20 <__kernel_rem_pio2+0xb40>
 1002bcc:	dc008d17 	ldw	r16,564(sp)
 1002bd0:	0011883a 	mov	r8,zero
 1002bd4:	1825883a 	mov	r18,r3
 1002bd8:	800490fa 	slli	r2,r16,3
 1002bdc:	0013883a 	mov	r9,zero
 1002be0:	16e3883a 	add	r17,r2,sp
 1002be4:	88803c17 	ldw	r2,240(r17)
 1002be8:	88c03d17 	ldw	r3,244(r17)
 1002bec:	480b883a 	mov	r5,r9
 1002bf0:	4009883a 	mov	r4,r8
 1002bf4:	180f883a 	mov	r7,r3
 1002bf8:	100d883a 	mov	r6,r2
 1002bfc:	1003e480 	call	1003e48 <__adddf3>
 1002c00:	843fffc4 	addi	r16,r16,-1
 1002c04:	8c7ffe04 	addi	r17,r17,-8
 1002c08:	1011883a 	mov	r8,r2
 1002c0c:	1813883a 	mov	r9,r3
 1002c10:	84bff41e 	bne	r16,r18,1002be4 <__kernel_rem_pio2+0xc04>
 1002c14:	d9809217 	ldw	r6,584(sp)
 1002c18:	30007a1e 	bne	r6,zero,1002e04 <__kernel_rem_pio2+0xe24>
 1002c1c:	d9c09717 	ldw	r7,604(sp)
 1002c20:	d8803c17 	ldw	r2,240(sp)
 1002c24:	d9003e17 	ldw	r4,248(sp)
 1002c28:	3a400515 	stw	r9,20(r7)
 1002c2c:	d8c03d17 	ldw	r3,244(sp)
 1002c30:	d9403f17 	ldw	r5,252(sp)
 1002c34:	3a000415 	stw	r8,16(r7)
 1002c38:	38c00115 	stw	r3,4(r7)
 1002c3c:	39400315 	stw	r5,12(r7)
 1002c40:	38800015 	stw	r2,0(r7)
 1002c44:	39000215 	stw	r4,8(r7)
 1002c48:	003f2906 	br	10028f0 <__kernel_rem_pio2+0x910>
 1002c4c:	183f281e 	bne	r3,zero,10028f0 <__kernel_rem_pio2+0x910>
 1002c50:	d9408d17 	ldw	r5,564(sp)
 1002c54:	28008016 	blt	r5,zero,1002e58 <__kernel_rem_pio2+0xe78>
 1002c58:	dc008d17 	ldw	r16,564(sp)
 1002c5c:	000d883a 	mov	r6,zero
 1002c60:	000f883a 	mov	r7,zero
 1002c64:	800490fa 	slli	r2,r16,3
 1002c68:	04bfffc4 	movi	r18,-1
 1002c6c:	16e3883a 	add	r17,r2,sp
 1002c70:	88803c17 	ldw	r2,240(r17)
 1002c74:	88c03d17 	ldw	r3,244(r17)
 1002c78:	380b883a 	mov	r5,r7
 1002c7c:	3009883a 	mov	r4,r6
 1002c80:	180f883a 	mov	r7,r3
 1002c84:	100d883a 	mov	r6,r2
 1002c88:	1003e480 	call	1003e48 <__adddf3>
 1002c8c:	843fffc4 	addi	r16,r16,-1
 1002c90:	8c7ffe04 	addi	r17,r17,-8
 1002c94:	100d883a 	mov	r6,r2
 1002c98:	180f883a 	mov	r7,r3
 1002c9c:	84bff41e 	bne	r16,r18,1002c70 <__kernel_rem_pio2+0xc90>
 1002ca0:	da809217 	ldw	r10,584(sp)
 1002ca4:	50000226 	beq	r10,zero,1002cb0 <__kernel_rem_pio2+0xcd0>
 1002ca8:	38e0003c 	xorhi	r3,r7,32768
 1002cac:	180f883a 	mov	r7,r3
 1002cb0:	d8809717 	ldw	r2,604(sp)
 1002cb4:	11c00115 	stw	r7,4(r2)
 1002cb8:	11800015 	stw	r6,0(r2)
 1002cbc:	003f0c06 	br	10028f0 <__kernel_rem_pio2+0x910>
 1002cc0:	d8008c15 	stw	zero,560(sp)
 1002cc4:	003ce406 	br	1002058 <__kernel_rem_pio2+0x78>
 1002cc8:	d9c09317 	ldw	r7,588(sp)
 1002ccc:	880b883a 	mov	r5,r17
 1002cd0:	8009883a 	mov	r4,r16
 1002cd4:	01cdc83a 	sub	r6,zero,r7
 1002cd8:	10033b80 	call	10033b8 <scalbn>
 1002cdc:	0011883a 	mov	r8,zero
 1002ce0:	02505c34 	movhi	r9,16752
 1002ce4:	480f883a 	mov	r7,r9
 1002ce8:	1009883a 	mov	r4,r2
 1002cec:	180b883a 	mov	r5,r3
 1002cf0:	400d883a 	mov	r6,r8
 1002cf4:	102d883a 	mov	r22,r2
 1002cf8:	182f883a 	mov	r23,r3
 1002cfc:	10043900 	call	1004390 <__gedf2>
 1002d00:	10003716 	blt	r2,zero,1002de0 <__kernel_rem_pio2+0xe00>
 1002d04:	0005883a 	mov	r2,zero
 1002d08:	00cf9c34 	movhi	r3,15984
 1002d0c:	180f883a 	mov	r7,r3
 1002d10:	100d883a 	mov	r6,r2
 1002d14:	b009883a 	mov	r4,r22
 1002d18:	b80b883a 	mov	r5,r23
 1002d1c:	1003ebc0 	call	1003ebc <__muldf3>
 1002d20:	180b883a 	mov	r5,r3
 1002d24:	1009883a 	mov	r4,r2
 1002d28:	10045100 	call	1004510 <__fixdfsi>
 1002d2c:	1009883a 	mov	r4,r2
 1002d30:	10044180 	call	1004418 <__floatsidf>
 1002d34:	da808d17 	ldw	r10,564(sp)
 1002d38:	1023883a 	mov	r17,r2
 1002d3c:	1825883a 	mov	r18,r3
 1002d40:	0005883a 	mov	r2,zero
 1002d44:	00f05c34 	movhi	r3,49520
 1002d48:	180f883a 	mov	r7,r3
 1002d4c:	8809883a 	mov	r4,r17
 1002d50:	900b883a 	mov	r5,r18
 1002d54:	100d883a 	mov	r6,r2
 1002d58:	52ab883a 	add	r21,r10,r10
 1002d5c:	1003ebc0 	call	1003ebc <__muldf3>
 1002d60:	180f883a 	mov	r7,r3
 1002d64:	b80b883a 	mov	r5,r23
 1002d68:	100d883a 	mov	r6,r2
 1002d6c:	b009883a 	mov	r4,r22
 1002d70:	1003e480 	call	1003e48 <__adddf3>
 1002d74:	100d883a 	mov	r6,r2
 1002d78:	d8808d17 	ldw	r2,564(sp)
 1002d7c:	180b883a 	mov	r5,r3
 1002d80:	3009883a 	mov	r4,r6
 1002d84:	10800044 	addi	r2,r2,1
 1002d88:	ad6b883a 	add	r21,r21,r21
 1002d8c:	d8808d15 	stw	r2,564(sp)
 1002d90:	10045100 	call	1004510 <__fixdfsi>
 1002d94:	d8c08d17 	ldw	r3,564(sp)
 1002d98:	aeeb883a 	add	r21,r21,sp
 1002d9c:	8809883a 	mov	r4,r17
 1002da0:	900b883a 	mov	r5,r18
 1002da4:	a8800015 	stw	r2,0(r21)
 1002da8:	18e1883a 	add	r16,r3,r3
 1002dac:	10045100 	call	1004510 <__fixdfsi>
 1002db0:	d9009317 	ldw	r4,588(sp)
 1002db4:	8421883a 	add	r16,r16,r16
 1002db8:	86e1883a 	add	r16,r16,sp
 1002dbc:	21000604 	addi	r4,r4,24
 1002dc0:	d9009315 	stw	r4,588(sp)
 1002dc4:	80800015 	stw	r2,0(r16)
 1002dc8:	003e3a06 	br	10026b4 <__kernel_rem_pio2+0x6d4>
 1002dcc:	4009883a 	mov	r4,r8
 1002dd0:	4960003c 	xorhi	r5,r9,32768
 1002dd4:	003ea406 	br	1002868 <__kernel_rem_pio2+0x888>
 1002dd8:	d9808d15 	stw	r6,564(sp)
 1002ddc:	003e3506 	br	10026b4 <__kernel_rem_pio2+0x6d4>
 1002de0:	d9408d17 	ldw	r5,564(sp)
 1002de4:	b009883a 	mov	r4,r22
 1002de8:	2961883a 	add	r16,r5,r5
 1002dec:	8421883a 	add	r16,r16,r16
 1002df0:	b80b883a 	mov	r5,r23
 1002df4:	86e1883a 	add	r16,r16,sp
 1002df8:	10045100 	call	1004510 <__fixdfsi>
 1002dfc:	80800015 	stw	r2,0(r16)
 1002e00:	003e2c06 	br	10026b4 <__kernel_rem_pio2+0x6d4>
 1002e04:	d8c03d17 	ldw	r3,244(sp)
 1002e08:	d9403f17 	ldw	r5,252(sp)
 1002e0c:	da809717 	ldw	r10,604(sp)
 1002e10:	d8803c17 	ldw	r2,240(sp)
 1002e14:	d9003e17 	ldw	r4,248(sp)
 1002e18:	49e0003c 	xorhi	r7,r9,32768
 1002e1c:	51c00515 	stw	r7,20(r10)
 1002e20:	19a0003c 	xorhi	r6,r3,32768
 1002e24:	29e0003c 	xorhi	r7,r5,32768
 1002e28:	51800115 	stw	r6,4(r10)
 1002e2c:	51c00315 	stw	r7,12(r10)
 1002e30:	50800015 	stw	r2,0(r10)
 1002e34:	51000215 	stw	r4,8(r10)
 1002e38:	52000415 	stw	r8,16(r10)
 1002e3c:	003eac06 	br	10028f0 <__kernel_rem_pio2+0x910>
 1002e40:	0011883a 	mov	r8,zero
 1002e44:	0013883a 	mov	r9,zero
 1002e48:	003e8306 	br	1002858 <__kernel_rem_pio2+0x878>
 1002e4c:	0011883a 	mov	r8,zero
 1002e50:	0013883a 	mov	r9,zero
 1002e54:	003f6f06 	br	1002c14 <__kernel_rem_pio2+0xc34>
 1002e58:	000d883a 	mov	r6,zero
 1002e5c:	000f883a 	mov	r7,zero
 1002e60:	003f8f06 	br	1002ca0 <__kernel_rem_pio2+0xcc0>

01002e64 <__kernel_sin>:
 1002e64:	00a00034 	movhi	r2,32768
 1002e68:	10bfffc4 	addi	r2,r2,-1
 1002e6c:	deffef04 	addi	sp,sp,-68
 1002e70:	1144703a 	and	r2,r2,r5
 1002e74:	00cf9034 	movhi	r3,15936
 1002e78:	18ffffc4 	addi	r3,r3,-1
 1002e7c:	dd400d15 	stw	r21,52(sp)
 1002e80:	dd000c15 	stw	r20,48(sp)
 1002e84:	dfc01015 	stw	ra,64(sp)
 1002e88:	ddc00f15 	stw	r23,60(sp)
 1002e8c:	dd800e15 	stw	r22,56(sp)
 1002e90:	dcc00b15 	stw	r19,44(sp)
 1002e94:	dc800a15 	stw	r18,40(sp)
 1002e98:	dc400915 	stw	r17,36(sp)
 1002e9c:	dc000815 	stw	r16,32(sp)
 1002ea0:	2029883a 	mov	r20,r4
 1002ea4:	282b883a 	mov	r21,r5
 1002ea8:	d9800415 	stw	r6,16(sp)
 1002eac:	d9c00515 	stw	r7,20(sp)
 1002eb0:	18800216 	blt	r3,r2,1002ebc <__kernel_sin+0x58>
 1002eb4:	10045100 	call	1004510 <__fixdfsi>
 1002eb8:	10008826 	beq	r2,zero,10030dc <__kernel_sin+0x278>
 1002ebc:	a009883a 	mov	r4,r20
 1002ec0:	a80b883a 	mov	r5,r21
 1002ec4:	a00d883a 	mov	r6,r20
 1002ec8:	a80f883a 	mov	r7,r21
 1002ecc:	1003ebc0 	call	1003ebc <__muldf3>
 1002ed0:	102d883a 	mov	r22,r2
 1002ed4:	a009883a 	mov	r4,r20
 1002ed8:	a80b883a 	mov	r5,r21
 1002edc:	b00d883a 	mov	r6,r22
 1002ee0:	180f883a 	mov	r7,r3
 1002ee4:	182f883a 	mov	r23,r3
 1002ee8:	d8800215 	stw	r2,8(sp)
 1002eec:	d8c00315 	stw	r3,12(sp)
 1002ef0:	1003ebc0 	call	1003ebc <__muldf3>
 1002ef4:	d9000217 	ldw	r4,8(sp)
 1002ef8:	0216b434 	movhi	r8,23248
 1002efc:	42355f04 	addi	r8,r8,-10884
 1002f00:	024f79b4 	movhi	r9,15846
 1002f04:	4a764e84 	addi	r9,r9,-9926
 1002f08:	480f883a 	mov	r7,r9
 1002f0c:	400d883a 	mov	r6,r8
 1002f10:	b80b883a 	mov	r5,r23
 1002f14:	d8800615 	stw	r2,24(sp)
 1002f18:	d8c00715 	stw	r3,28(sp)
 1002f1c:	1003ebc0 	call	1003ebc <__muldf3>
 1002f20:	02228b34 	movhi	r8,35372
 1002f24:	42273ac4 	addi	r8,r8,-25365
 1002f28:	024f96f4 	movhi	r9,15963
 1002f2c:	4a797984 	addi	r9,r9,-6682
 1002f30:	480f883a 	mov	r7,r9
 1002f34:	400d883a 	mov	r6,r8
 1002f38:	180b883a 	mov	r5,r3
 1002f3c:	1009883a 	mov	r4,r2
 1002f40:	1003dc80 	call	1003dc8 <__subdf3>
 1002f44:	d9000217 	ldw	r4,8(sp)
 1002f48:	180f883a 	mov	r7,r3
 1002f4c:	b80b883a 	mov	r5,r23
 1002f50:	100d883a 	mov	r6,r2
 1002f54:	1003ebc0 	call	1003ebc <__muldf3>
 1002f58:	0215ecb4 	movhi	r8,22450
 1002f5c:	423f9f44 	addi	r8,r8,-387
 1002f60:	024fb1f4 	movhi	r9,16071
 1002f64:	4a4778c4 	addi	r9,r9,7651
 1002f68:	480f883a 	mov	r7,r9
 1002f6c:	400d883a 	mov	r6,r8
 1002f70:	180b883a 	mov	r5,r3
 1002f74:	1009883a 	mov	r4,r2
 1002f78:	1003e480 	call	1003e48 <__adddf3>
 1002f7c:	d9000217 	ldw	r4,8(sp)
 1002f80:	180f883a 	mov	r7,r3
 1002f84:	b80b883a 	mov	r5,r23
 1002f88:	100d883a 	mov	r6,r2
 1002f8c:	1003ebc0 	call	1003ebc <__muldf3>
 1002f90:	02067074 	movhi	r8,6593
 1002f94:	42187544 	addi	r8,r8,25045
 1002f98:	024fcab4 	movhi	r9,16170
 1002f9c:	4a406804 	addi	r9,r9,416
 1002fa0:	480f883a 	mov	r7,r9
 1002fa4:	400d883a 	mov	r6,r8
 1002fa8:	180b883a 	mov	r5,r3
 1002fac:	1009883a 	mov	r4,r2
 1002fb0:	1003dc80 	call	1003dc8 <__subdf3>
 1002fb4:	d9000217 	ldw	r4,8(sp)
 1002fb8:	180f883a 	mov	r7,r3
 1002fbc:	b80b883a 	mov	r5,r23
 1002fc0:	100d883a 	mov	r6,r2
 1002fc4:	1003ebc0 	call	1003ebc <__muldf3>
 1002fc8:	02044474 	movhi	r8,4369
 1002fcc:	423e2984 	addi	r8,r8,-1882
 1002fd0:	024fe074 	movhi	r9,16257
 1002fd4:	4a444444 	addi	r9,r9,4369
 1002fd8:	180b883a 	mov	r5,r3
 1002fdc:	480f883a 	mov	r7,r9
 1002fe0:	1009883a 	mov	r4,r2
 1002fe4:	400d883a 	mov	r6,r8
 1002fe8:	1003e480 	call	1003e48 <__adddf3>
 1002fec:	1021883a 	mov	r16,r2
 1002ff0:	d8800617 	ldw	r2,24(sp)
 1002ff4:	1823883a 	mov	r17,r3
 1002ff8:	d8800015 	stw	r2,0(sp)
 1002ffc:	d8800717 	ldw	r2,28(sp)
 1003000:	d8800115 	stw	r2,4(sp)
 1003004:	d8801117 	ldw	r2,68(sp)
 1003008:	10004126 	beq	r2,zero,1003110 <__kernel_sin+0x2ac>
 100300c:	d9000417 	ldw	r4,16(sp)
 1003010:	d9400517 	ldw	r5,20(sp)
 1003014:	0005883a 	mov	r2,zero
 1003018:	00cff834 	movhi	r3,16352
 100301c:	180f883a 	mov	r7,r3
 1003020:	100d883a 	mov	r6,r2
 1003024:	1003ebc0 	call	1003ebc <__muldf3>
 1003028:	d9000017 	ldw	r4,0(sp)
 100302c:	d9400717 	ldw	r5,28(sp)
 1003030:	800d883a 	mov	r6,r16
 1003034:	880f883a 	mov	r7,r17
 1003038:	1021883a 	mov	r16,r2
 100303c:	1823883a 	mov	r17,r3
 1003040:	1003ebc0 	call	1003ebc <__muldf3>
 1003044:	180f883a 	mov	r7,r3
 1003048:	880b883a 	mov	r5,r17
 100304c:	8009883a 	mov	r4,r16
 1003050:	100d883a 	mov	r6,r2
 1003054:	1003dc80 	call	1003dc8 <__subdf3>
 1003058:	d9000217 	ldw	r4,8(sp)
 100305c:	b80b883a 	mov	r5,r23
 1003060:	180f883a 	mov	r7,r3
 1003064:	100d883a 	mov	r6,r2
 1003068:	1003ebc0 	call	1003ebc <__muldf3>
 100306c:	d9c00517 	ldw	r7,20(sp)
 1003070:	d9800417 	ldw	r6,16(sp)
 1003074:	180b883a 	mov	r5,r3
 1003078:	1009883a 	mov	r4,r2
 100307c:	1003dc80 	call	1003dc8 <__subdf3>
 1003080:	d9000017 	ldw	r4,0(sp)
 1003084:	d9400717 	ldw	r5,28(sp)
 1003088:	02155574 	movhi	r8,21845
 100308c:	42155244 	addi	r8,r8,21833
 1003090:	024ff174 	movhi	r9,16325
 1003094:	4a555544 	addi	r9,r9,21845
 1003098:	480f883a 	mov	r7,r9
 100309c:	400d883a 	mov	r6,r8
 10030a0:	1021883a 	mov	r16,r2
 10030a4:	1823883a 	mov	r17,r3
 10030a8:	1003ebc0 	call	1003ebc <__muldf3>
 10030ac:	180f883a 	mov	r7,r3
 10030b0:	880b883a 	mov	r5,r17
 10030b4:	8009883a 	mov	r4,r16
 10030b8:	100d883a 	mov	r6,r2
 10030bc:	1003e480 	call	1003e48 <__adddf3>
 10030c0:	180f883a 	mov	r7,r3
 10030c4:	a80b883a 	mov	r5,r21
 10030c8:	a009883a 	mov	r4,r20
 10030cc:	100d883a 	mov	r6,r2
 10030d0:	1003dc80 	call	1003dc8 <__subdf3>
 10030d4:	1029883a 	mov	r20,r2
 10030d8:	182b883a 	mov	r21,r3
 10030dc:	a005883a 	mov	r2,r20
 10030e0:	a807883a 	mov	r3,r21
 10030e4:	dfc01017 	ldw	ra,64(sp)
 10030e8:	ddc00f17 	ldw	r23,60(sp)
 10030ec:	dd800e17 	ldw	r22,56(sp)
 10030f0:	dd400d17 	ldw	r21,52(sp)
 10030f4:	dd000c17 	ldw	r20,48(sp)
 10030f8:	dcc00b17 	ldw	r19,44(sp)
 10030fc:	dc800a17 	ldw	r18,40(sp)
 1003100:	dc400917 	ldw	r17,36(sp)
 1003104:	dc000817 	ldw	r16,32(sp)
 1003108:	dec01104 	addi	sp,sp,68
 100310c:	f800283a 	ret
 1003110:	d9000217 	ldw	r4,8(sp)
 1003114:	b80b883a 	mov	r5,r23
 1003118:	800d883a 	mov	r6,r16
 100311c:	180f883a 	mov	r7,r3
 1003120:	1003ebc0 	call	1003ebc <__muldf3>
 1003124:	02155574 	movhi	r8,21845
 1003128:	42155244 	addi	r8,r8,21833
 100312c:	024ff174 	movhi	r9,16325
 1003130:	4a555544 	addi	r9,r9,21845
 1003134:	480f883a 	mov	r7,r9
 1003138:	400d883a 	mov	r6,r8
 100313c:	180b883a 	mov	r5,r3
 1003140:	1009883a 	mov	r4,r2
 1003144:	1003dc80 	call	1003dc8 <__subdf3>
 1003148:	d9000017 	ldw	r4,0(sp)
 100314c:	d9400717 	ldw	r5,28(sp)
 1003150:	180f883a 	mov	r7,r3
 1003154:	100d883a 	mov	r6,r2
 1003158:	1003ebc0 	call	1003ebc <__muldf3>
 100315c:	180f883a 	mov	r7,r3
 1003160:	a80b883a 	mov	r5,r21
 1003164:	a009883a 	mov	r4,r20
 1003168:	100d883a 	mov	r6,r2
 100316c:	1003e480 	call	1003e48 <__adddf3>
 1003170:	1029883a 	mov	r20,r2
 1003174:	182b883a 	mov	r21,r3
 1003178:	003fd806 	br	10030dc <__kernel_sin+0x278>

0100317c <fabs>:
 100317c:	01e00034 	movhi	r7,32768
 1003180:	39ffffc4 	addi	r7,r7,-1
 1003184:	394e703a 	and	r7,r7,r5
 1003188:	2005883a 	mov	r2,r4
 100318c:	3807883a 	mov	r3,r7
 1003190:	f800283a 	ret

01003194 <floor>:
 1003194:	2805d53a 	srai	r2,r5,20
 1003198:	defff604 	addi	sp,sp,-40
 100319c:	dd800615 	stw	r22,24(sp)
 10031a0:	10c1ffcc 	andi	r3,r2,2047
 10031a4:	1dbf0044 	addi	r22,r3,-1023
 10031a8:	008004c4 	movi	r2,19
 10031ac:	ddc00715 	stw	r23,28(sp)
 10031b0:	dc800215 	stw	r18,8(sp)
 10031b4:	dc400115 	stw	r17,4(sp)
 10031b8:	dc000015 	stw	r16,0(sp)
 10031bc:	dfc00915 	stw	ra,36(sp)
 10031c0:	df000815 	stw	fp,32(sp)
 10031c4:	dd400515 	stw	r21,20(sp)
 10031c8:	dd000415 	stw	r20,16(sp)
 10031cc:	dcc00315 	stw	r19,12(sp)
 10031d0:	2021883a 	mov	r16,r4
 10031d4:	2823883a 	mov	r17,r5
 10031d8:	282f883a 	mov	r23,r5
 10031dc:	2025883a 	mov	r18,r4
 10031e0:	15802916 	blt	r2,r22,1003288 <floor+0xf4>
 10031e4:	b0004816 	blt	r22,zero,1003308 <floor+0x174>
 10031e8:	00800434 	movhi	r2,16
 10031ec:	10bfffc4 	addi	r2,r2,-1
 10031f0:	15b9d83a 	sra	fp,r2,r22
 10031f4:	282f883a 	mov	r23,r5
 10031f8:	e144703a 	and	r2,fp,r5
 10031fc:	1104b03a 	or	r2,r2,r4
 1003200:	10001326 	beq	r2,zero,1003250 <floor+0xbc>
 1003204:	00a20034 	movhi	r2,34816
 1003208:	109d6704 	addi	r2,r2,30108
 100320c:	00df8e34 	movhi	r3,32312
 1003210:	18f90f04 	addi	r3,r3,-7108
 1003214:	180f883a 	mov	r7,r3
 1003218:	100d883a 	mov	r6,r2
 100321c:	1003e480 	call	1003e48 <__adddf3>
 1003220:	180b883a 	mov	r5,r3
 1003224:	000d883a 	mov	r6,zero
 1003228:	000f883a 	mov	r7,zero
 100322c:	1009883a 	mov	r4,r2
 1003230:	10043080 	call	1004308 <__gtdf2>
 1003234:	0080040e 	bge	zero,r2,1003248 <floor+0xb4>
 1003238:	88004416 	blt	r17,zero,100334c <floor+0x1b8>
 100323c:	0704303a 	nor	r2,zero,fp
 1003240:	b8ae703a 	and	r23,r23,r2
 1003244:	0025883a 	mov	r18,zero
 1003248:	9021883a 	mov	r16,r18
 100324c:	b823883a 	mov	r17,r23
 1003250:	8005883a 	mov	r2,r16
 1003254:	8807883a 	mov	r3,r17
 1003258:	dfc00917 	ldw	ra,36(sp)
 100325c:	df000817 	ldw	fp,32(sp)
 1003260:	ddc00717 	ldw	r23,28(sp)
 1003264:	dd800617 	ldw	r22,24(sp)
 1003268:	dd400517 	ldw	r21,20(sp)
 100326c:	dd000417 	ldw	r20,16(sp)
 1003270:	dcc00317 	ldw	r19,12(sp)
 1003274:	dc800217 	ldw	r18,8(sp)
 1003278:	dc400117 	ldw	r17,4(sp)
 100327c:	dc000017 	ldw	r16,0(sp)
 1003280:	dec00a04 	addi	sp,sp,40
 1003284:	f800283a 	ret
 1003288:	00800cc4 	movi	r2,51
 100328c:	15801616 	blt	r2,r22,10032e8 <floor+0x154>
 1003290:	18befb44 	addi	r2,r3,-1043
 1003294:	00ffffc4 	movi	r3,-1
 1003298:	18b8d83a 	srl	fp,r3,r2
 100329c:	e104703a 	and	r2,fp,r4
 10032a0:	103feb26 	beq	r2,zero,1003250 <floor+0xbc>
 10032a4:	00a20034 	movhi	r2,34816
 10032a8:	109d6704 	addi	r2,r2,30108
 10032ac:	00df8e34 	movhi	r3,32312
 10032b0:	18f90f04 	addi	r3,r3,-7108
 10032b4:	180f883a 	mov	r7,r3
 10032b8:	100d883a 	mov	r6,r2
 10032bc:	1003e480 	call	1003e48 <__adddf3>
 10032c0:	180b883a 	mov	r5,r3
 10032c4:	000d883a 	mov	r6,zero
 10032c8:	000f883a 	mov	r7,zero
 10032cc:	1009883a 	mov	r4,r2
 10032d0:	10043080 	call	1004308 <__gtdf2>
 10032d4:	0080210e 	bge	zero,r2,100335c <floor+0x1c8>
 10032d8:	88002216 	blt	r17,zero,1003364 <floor+0x1d0>
 10032dc:	0704303a 	nor	r2,zero,fp
 10032e0:	90a4703a 	and	r18,r18,r2
 10032e4:	003fd806 	br	1003248 <floor+0xb4>
 10032e8:	00810004 	movi	r2,1024
 10032ec:	b0bfd81e 	bne	r22,r2,1003250 <floor+0xbc>
 10032f0:	800d883a 	mov	r6,r16
 10032f4:	280f883a 	mov	r7,r5
 10032f8:	1003e480 	call	1003e48 <__adddf3>
 10032fc:	1021883a 	mov	r16,r2
 1003300:	1823883a 	mov	r17,r3
 1003304:	003fd206 	br	1003250 <floor+0xbc>
 1003308:	00a20034 	movhi	r2,34816
 100330c:	109d6704 	addi	r2,r2,30108
 1003310:	00df8e34 	movhi	r3,32312
 1003314:	18f90f04 	addi	r3,r3,-7108
 1003318:	180f883a 	mov	r7,r3
 100331c:	100d883a 	mov	r6,r2
 1003320:	1003e480 	call	1003e48 <__adddf3>
 1003324:	180b883a 	mov	r5,r3
 1003328:	000d883a 	mov	r6,zero
 100332c:	000f883a 	mov	r7,zero
 1003330:	1009883a 	mov	r4,r2
 1003334:	10043080 	call	1004308 <__gtdf2>
 1003338:	00bfc30e 	bge	zero,r2,1003248 <floor+0xb4>
 100333c:	88001416 	blt	r17,zero,1003390 <floor+0x1fc>
 1003340:	002f883a 	mov	r23,zero
 1003344:	0025883a 	mov	r18,zero
 1003348:	003fbf06 	br	1003248 <floor+0xb4>
 100334c:	00800434 	movhi	r2,16
 1003350:	1585d83a 	sra	r2,r2,r22
 1003354:	88af883a 	add	r23,r17,r2
 1003358:	003fb806 	br	100323c <floor+0xa8>
 100335c:	882f883a 	mov	r23,r17
 1003360:	003fb906 	br	1003248 <floor+0xb4>
 1003364:	00800504 	movi	r2,20
 1003368:	b0801126 	beq	r22,r2,10033b0 <floor+0x21c>
 100336c:	00c00d04 	movi	r3,52
 1003370:	1d87c83a 	sub	r3,r3,r22
 1003374:	00800044 	movi	r2,1
 1003378:	10c4983a 	sll	r2,r2,r3
 100337c:	8085883a 	add	r2,r16,r2
 1003380:	1400012e 	bgeu	r2,r16,1003388 <floor+0x1f4>
 1003384:	8dc00044 	addi	r23,r17,1
 1003388:	1025883a 	mov	r18,r2
 100338c:	003fd306 	br	10032dc <floor+0x148>
 1003390:	00a00034 	movhi	r2,32768
 1003394:	10bfffc4 	addi	r2,r2,-1
 1003398:	8884703a 	and	r2,r17,r2
 100339c:	8084b03a 	or	r2,r16,r2
 10033a0:	103fee26 	beq	r2,zero,100335c <floor+0x1c8>
 10033a4:	05effc34 	movhi	r23,49136
 10033a8:	0025883a 	mov	r18,zero
 10033ac:	003fa606 	br	1003248 <floor+0xb4>
 10033b0:	8dc00044 	addi	r23,r17,1
 10033b4:	003fc906 	br	10032dc <floor+0x148>

010033b8 <scalbn>:
 10033b8:	2011883a 	mov	r8,r4
 10033bc:	291ffc2c 	andhi	r4,r5,32752
 10033c0:	2009d53a 	srai	r4,r4,20
 10033c4:	defffd04 	addi	sp,sp,-12
 10033c8:	dc000015 	stw	r16,0(sp)
 10033cc:	dfc00215 	stw	ra,8(sp)
 10033d0:	dc400115 	stw	r17,4(sp)
 10033d4:	2813883a 	mov	r9,r5
 10033d8:	2815883a 	mov	r10,r5
 10033dc:	3021883a 	mov	r16,r6
 10033e0:	2000281e 	bne	r4,zero,1003484 <scalbn+0xcc>
 10033e4:	00a00034 	movhi	r2,32768
 10033e8:	10bfffc4 	addi	r2,r2,-1
 10033ec:	2884703a 	and	r2,r5,r2
 10033f0:	4084b03a 	or	r2,r8,r2
 10033f4:	10001826 	beq	r2,zero,1003458 <scalbn+0xa0>
 10033f8:	0005883a 	mov	r2,zero
 10033fc:	00d0d434 	movhi	r3,17232
 1003400:	4009883a 	mov	r4,r8
 1003404:	100d883a 	mov	r6,r2
 1003408:	180f883a 	mov	r7,r3
 100340c:	1003ebc0 	call	1003ebc <__muldf3>
 1003410:	100b883a 	mov	r5,r2
 1003414:	1011883a 	mov	r8,r2
 1003418:	00bffff4 	movhi	r2,65535
 100341c:	108f2c04 	addi	r2,r2,15536
 1003420:	180d883a 	mov	r6,r3
 1003424:	1813883a 	mov	r9,r3
 1003428:	8080120e 	bge	r16,r2,1003474 <scalbn+0xbc>
 100342c:	00b0be74 	movhi	r2,49913
 1003430:	10bcd644 	addi	r2,r2,-3239
 1003434:	00c06974 	movhi	r3,421
 1003438:	18db87c4 	addi	r3,r3,28191
 100343c:	2809883a 	mov	r4,r5
 1003440:	180f883a 	mov	r7,r3
 1003444:	300b883a 	mov	r5,r6
 1003448:	100d883a 	mov	r6,r2
 100344c:	1003ebc0 	call	1003ebc <__muldf3>
 1003450:	1011883a 	mov	r8,r2
 1003454:	1813883a 	mov	r9,r3
 1003458:	4005883a 	mov	r2,r8
 100345c:	4807883a 	mov	r3,r9
 1003460:	dfc00217 	ldw	ra,8(sp)
 1003464:	dc400117 	ldw	r17,4(sp)
 1003468:	dc000017 	ldw	r16,0(sp)
 100346c:	dec00304 	addi	sp,sp,12
 1003470:	f800283a 	ret
 1003474:	189ffc2c 	andhi	r2,r3,32752
 1003478:	1005d53a 	srai	r2,r2,20
 100347c:	1815883a 	mov	r10,r3
 1003480:	113ff284 	addi	r4,r2,-54
 1003484:	0081ffc4 	movi	r2,2047
 1003488:	20801126 	beq	r4,r2,10034d0 <scalbn+0x118>
 100348c:	2409883a 	add	r4,r4,r16
 1003490:	0081ff84 	movi	r2,2046
 1003494:	11001c16 	blt	r2,r4,1003508 <scalbn+0x150>
 1003498:	0100290e 	bge	zero,r4,1003540 <scalbn+0x188>
 100349c:	200a953a 	slli	r5,r4,20
 10034a0:	01200434 	movhi	r4,32784
 10034a4:	213fffc4 	addi	r4,r4,-1
 10034a8:	5108703a 	and	r4,r10,r4
 10034ac:	2148b03a 	or	r4,r4,r5
 10034b0:	2013883a 	mov	r9,r4
 10034b4:	4005883a 	mov	r2,r8
 10034b8:	4807883a 	mov	r3,r9
 10034bc:	dfc00217 	ldw	ra,8(sp)
 10034c0:	dc400117 	ldw	r17,4(sp)
 10034c4:	dc000017 	ldw	r16,0(sp)
 10034c8:	dec00304 	addi	sp,sp,12
 10034cc:	f800283a 	ret
 10034d0:	480f883a 	mov	r7,r9
 10034d4:	4009883a 	mov	r4,r8
 10034d8:	480b883a 	mov	r5,r9
 10034dc:	400d883a 	mov	r6,r8
 10034e0:	1003e480 	call	1003e48 <__adddf3>
 10034e4:	1011883a 	mov	r8,r2
 10034e8:	1813883a 	mov	r9,r3
 10034ec:	4005883a 	mov	r2,r8
 10034f0:	4807883a 	mov	r3,r9
 10034f4:	dfc00217 	ldw	ra,8(sp)
 10034f8:	dc400117 	ldw	r17,4(sp)
 10034fc:	dc000017 	ldw	r16,0(sp)
 1003500:	dec00304 	addi	sp,sp,12
 1003504:	f800283a 	ret
 1003508:	04220034 	movhi	r16,34816
 100350c:	841d6704 	addi	r16,r16,30108
 1003510:	045f8e34 	movhi	r17,32312
 1003514:	8c790f04 	addi	r17,r17,-7108
 1003518:	480f883a 	mov	r7,r9
 100351c:	400d883a 	mov	r6,r8
 1003520:	8009883a 	mov	r4,r16
 1003524:	880b883a 	mov	r5,r17
 1003528:	10035980 	call	1003598 <copysign>
 100352c:	180b883a 	mov	r5,r3
 1003530:	800d883a 	mov	r6,r16
 1003534:	880f883a 	mov	r7,r17
 1003538:	1009883a 	mov	r4,r2
 100353c:	003fc306 	br	100344c <scalbn+0x94>
 1003540:	00bff284 	movi	r2,-54
 1003544:	11000716 	blt	r2,r4,1003564 <scalbn+0x1ac>
 1003548:	00b0d414 	movui	r2,50000
 100354c:	143fee16 	blt	r2,r16,1003508 <scalbn+0x150>
 1003550:	0430be74 	movhi	r16,49913
 1003554:	843cd644 	addi	r16,r16,-3239
 1003558:	04406974 	movhi	r17,421
 100355c:	8c5b87c4 	addi	r17,r17,28191
 1003560:	003fed06 	br	1003518 <scalbn+0x160>
 1003564:	21000d84 	addi	r4,r4,54
 1003568:	2008953a 	slli	r4,r4,20
 100356c:	01e00434 	movhi	r7,32784
 1003570:	39ffffc4 	addi	r7,r7,-1
 1003574:	51ce703a 	and	r7,r10,r7
 1003578:	390eb03a 	or	r7,r7,r4
 100357c:	024f2434 	movhi	r9,15504
 1003580:	4009883a 	mov	r4,r8
 1003584:	0011883a 	mov	r8,zero
 1003588:	380b883a 	mov	r5,r7
 100358c:	400d883a 	mov	r6,r8
 1003590:	480f883a 	mov	r7,r9
 1003594:	003fad06 	br	100344c <scalbn+0x94>

01003598 <copysign>:
 1003598:	3813883a 	mov	r9,r7
 100359c:	01e00034 	movhi	r7,32768
 10035a0:	39ffffc4 	addi	r7,r7,-1
 10035a4:	394e703a 	and	r7,r7,r5
 10035a8:	4aa0002c 	andhi	r10,r9,32768
 10035ac:	3a8eb03a 	or	r7,r7,r10
 10035b0:	2005883a 	mov	r2,r4
 10035b4:	3807883a 	mov	r3,r7
 10035b8:	f800283a 	ret

010035bc <_fpadd_parts>:
 10035bc:	21c00017 	ldw	r7,0(r4)
 10035c0:	02000044 	movi	r8,1
 10035c4:	41c0332e 	bgeu	r8,r7,1003694 <_fpadd_parts+0xd8>
 10035c8:	28800017 	ldw	r2,0(r5)
 10035cc:	4080462e 	bgeu	r8,r2,10036e8 <_fpadd_parts+0x12c>
 10035d0:	00c00104 	movi	r3,4
 10035d4:	38c06b26 	beq	r7,r3,1003784 <_fpadd_parts+0x1c8>
 10035d8:	10c04326 	beq	r2,r3,10036e8 <_fpadd_parts+0x12c>
 10035dc:	00c00084 	movi	r3,2
 10035e0:	10c02e26 	beq	r2,r3,100369c <_fpadd_parts+0xe0>
 10035e4:	38c04026 	beq	r7,r3,10036e8 <_fpadd_parts+0x12c>
 10035e8:	22800217 	ldw	r10,8(r4)
 10035ec:	28c00217 	ldw	r3,8(r5)
 10035f0:	23000317 	ldw	r12,12(r4)
 10035f4:	2a400317 	ldw	r9,12(r5)
 10035f8:	50cfc83a 	sub	r7,r10,r3
 10035fc:	3817883a 	mov	r11,r7
 1003600:	38004f16 	blt	r7,zero,1003740 <_fpadd_parts+0x184>
 1003604:	008007c4 	movi	r2,31
 1003608:	11c03316 	blt	r2,r7,10036d8 <_fpadd_parts+0x11c>
 100360c:	02c0540e 	bge	zero,r11,1003760 <_fpadd_parts+0x1a4>
 1003610:	41c4983a 	sll	r2,r8,r7
 1003614:	49c6d83a 	srl	r3,r9,r7
 1003618:	10bfffc4 	addi	r2,r2,-1
 100361c:	4884703a 	and	r2,r9,r2
 1003620:	1004c03a 	cmpne	r2,r2,zero
 1003624:	1892b03a 	or	r9,r3,r2
 1003628:	20c00117 	ldw	r3,4(r4)
 100362c:	28800117 	ldw	r2,4(r5)
 1003630:	18803c26 	beq	r3,r2,1003724 <_fpadd_parts+0x168>
 1003634:	18002f26 	beq	r3,zero,10036f4 <_fpadd_parts+0x138>
 1003638:	4b05c83a 	sub	r2,r9,r12
 100363c:	10004216 	blt	r2,zero,1003748 <_fpadd_parts+0x18c>
 1003640:	32800215 	stw	r10,8(r6)
 1003644:	30800315 	stw	r2,12(r6)
 1003648:	30000115 	stw	zero,4(r6)
 100364c:	31000317 	ldw	r4,12(r6)
 1003650:	01d00034 	movhi	r7,16384
 1003654:	39ffff84 	addi	r7,r7,-2
 1003658:	20bfffc4 	addi	r2,r4,-1
 100365c:	2007883a 	mov	r3,r4
 1003660:	38800836 	bltu	r7,r2,1003684 <_fpadd_parts+0xc8>
 1003664:	31400217 	ldw	r5,8(r6)
 1003668:	18c9883a 	add	r4,r3,r3
 100366c:	20bfffc4 	addi	r2,r4,-1
 1003670:	297fffc4 	addi	r5,r5,-1
 1003674:	2007883a 	mov	r3,r4
 1003678:	38bffb2e 	bgeu	r7,r2,1003668 <_fpadd_parts+0xac>
 100367c:	31400215 	stw	r5,8(r6)
 1003680:	31000315 	stw	r4,12(r6)
 1003684:	008000c4 	movi	r2,3
 1003688:	30800015 	stw	r2,0(r6)
 100368c:	20001b16 	blt	r4,zero,10036fc <_fpadd_parts+0x140>
 1003690:	3009883a 	mov	r4,r6
 1003694:	2005883a 	mov	r2,r4
 1003698:	f800283a 	ret
 100369c:	38fffd1e 	bne	r7,r3,1003694 <_fpadd_parts+0xd8>
 10036a0:	31c00015 	stw	r7,0(r6)
 10036a4:	20800117 	ldw	r2,4(r4)
 10036a8:	30800115 	stw	r2,4(r6)
 10036ac:	20c00217 	ldw	r3,8(r4)
 10036b0:	30c00215 	stw	r3,8(r6)
 10036b4:	20800317 	ldw	r2,12(r4)
 10036b8:	30800315 	stw	r2,12(r6)
 10036bc:	20c00117 	ldw	r3,4(r4)
 10036c0:	28800117 	ldw	r2,4(r5)
 10036c4:	3009883a 	mov	r4,r6
 10036c8:	1886703a 	and	r3,r3,r2
 10036cc:	2005883a 	mov	r2,r4
 10036d0:	30c00115 	stw	r3,4(r6)
 10036d4:	f800283a 	ret
 10036d8:	1a801716 	blt	r3,r10,1003738 <_fpadd_parts+0x17c>
 10036dc:	1815883a 	mov	r10,r3
 10036e0:	0019883a 	mov	r12,zero
 10036e4:	003fd006 	br	1003628 <_fpadd_parts+0x6c>
 10036e8:	2809883a 	mov	r4,r5
 10036ec:	2005883a 	mov	r2,r4
 10036f0:	f800283a 	ret
 10036f4:	6245c83a 	sub	r2,r12,r9
 10036f8:	003fd006 	br	100363c <_fpadd_parts+0x80>
 10036fc:	30800217 	ldw	r2,8(r6)
 1003700:	2006d07a 	srli	r3,r4,1
 1003704:	2100004c 	andi	r4,r4,1
 1003708:	10800044 	addi	r2,r2,1
 100370c:	1906b03a 	or	r3,r3,r4
 1003710:	3009883a 	mov	r4,r6
 1003714:	30800215 	stw	r2,8(r6)
 1003718:	2005883a 	mov	r2,r4
 100371c:	30c00315 	stw	r3,12(r6)
 1003720:	f800283a 	ret
 1003724:	4b09883a 	add	r4,r9,r12
 1003728:	30c00115 	stw	r3,4(r6)
 100372c:	32800215 	stw	r10,8(r6)
 1003730:	31000315 	stw	r4,12(r6)
 1003734:	003fd306 	br	1003684 <_fpadd_parts+0xc8>
 1003738:	0013883a 	mov	r9,zero
 100373c:	003fba06 	br	1003628 <_fpadd_parts+0x6c>
 1003740:	01cfc83a 	sub	r7,zero,r7
 1003744:	003faf06 	br	1003604 <_fpadd_parts+0x48>
 1003748:	0089c83a 	sub	r4,zero,r2
 100374c:	00800044 	movi	r2,1
 1003750:	30800115 	stw	r2,4(r6)
 1003754:	32800215 	stw	r10,8(r6)
 1003758:	31000315 	stw	r4,12(r6)
 100375c:	003fbb06 	br	100364c <_fpadd_parts+0x90>
 1003760:	583fb126 	beq	r11,zero,1003628 <_fpadd_parts+0x6c>
 1003764:	41c4983a 	sll	r2,r8,r7
 1003768:	61c6d83a 	srl	r3,r12,r7
 100376c:	51d5883a 	add	r10,r10,r7
 1003770:	10bfffc4 	addi	r2,r2,-1
 1003774:	6084703a 	and	r2,r12,r2
 1003778:	1004c03a 	cmpne	r2,r2,zero
 100377c:	1898b03a 	or	r12,r3,r2
 1003780:	003fa906 	br	1003628 <_fpadd_parts+0x6c>
 1003784:	11ffc31e 	bne	r2,r7,1003694 <_fpadd_parts+0xd8>
 1003788:	28c00117 	ldw	r3,4(r5)
 100378c:	20800117 	ldw	r2,4(r4)
 1003790:	10ffc026 	beq	r2,r3,1003694 <_fpadd_parts+0xd8>
 1003794:	01004074 	movhi	r4,257
 1003798:	2109a904 	addi	r4,r4,9892
 100379c:	003fbd06 	br	1003694 <_fpadd_parts+0xd8>

010037a0 <__subsf3>:
 10037a0:	deffef04 	addi	sp,sp,-68
 10037a4:	dcc00f15 	stw	r19,60(sp)
 10037a8:	dcc00204 	addi	r19,sp,8
 10037ac:	dc400e15 	stw	r17,56(sp)
 10037b0:	d9000015 	stw	r4,0(sp)
 10037b4:	d9400115 	stw	r5,4(sp)
 10037b8:	d809883a 	mov	r4,sp
 10037bc:	980b883a 	mov	r5,r19
 10037c0:	dc400604 	addi	r17,sp,24
 10037c4:	dfc01015 	stw	ra,64(sp)
 10037c8:	1004aa80 	call	1004aa8 <__unpack_f>
 10037cc:	d9000104 	addi	r4,sp,4
 10037d0:	880b883a 	mov	r5,r17
 10037d4:	1004aa80 	call	1004aa8 <__unpack_f>
 10037d8:	d8800717 	ldw	r2,28(sp)
 10037dc:	9809883a 	mov	r4,r19
 10037e0:	880b883a 	mov	r5,r17
 10037e4:	d9800a04 	addi	r6,sp,40
 10037e8:	1080005c 	xori	r2,r2,1
 10037ec:	d8800715 	stw	r2,28(sp)
 10037f0:	10035bc0 	call	10035bc <_fpadd_parts>
 10037f4:	1009883a 	mov	r4,r2
 10037f8:	10049480 	call	1004948 <__pack_f>
 10037fc:	dfc01017 	ldw	ra,64(sp)
 1003800:	dcc00f17 	ldw	r19,60(sp)
 1003804:	dc400e17 	ldw	r17,56(sp)
 1003808:	dec01104 	addi	sp,sp,68
 100380c:	f800283a 	ret

01003810 <__addsf3>:
 1003810:	deffef04 	addi	sp,sp,-68
 1003814:	dcc00f15 	stw	r19,60(sp)
 1003818:	dcc00204 	addi	r19,sp,8
 100381c:	dc400e15 	stw	r17,56(sp)
 1003820:	d9000015 	stw	r4,0(sp)
 1003824:	d9400115 	stw	r5,4(sp)
 1003828:	d809883a 	mov	r4,sp
 100382c:	980b883a 	mov	r5,r19
 1003830:	dc400604 	addi	r17,sp,24
 1003834:	dfc01015 	stw	ra,64(sp)
 1003838:	1004aa80 	call	1004aa8 <__unpack_f>
 100383c:	d9000104 	addi	r4,sp,4
 1003840:	880b883a 	mov	r5,r17
 1003844:	1004aa80 	call	1004aa8 <__unpack_f>
 1003848:	d9800a04 	addi	r6,sp,40
 100384c:	9809883a 	mov	r4,r19
 1003850:	880b883a 	mov	r5,r17
 1003854:	10035bc0 	call	10035bc <_fpadd_parts>
 1003858:	1009883a 	mov	r4,r2
 100385c:	10049480 	call	1004948 <__pack_f>
 1003860:	dfc01017 	ldw	ra,64(sp)
 1003864:	dcc00f17 	ldw	r19,60(sp)
 1003868:	dc400e17 	ldw	r17,56(sp)
 100386c:	dec01104 	addi	sp,sp,68
 1003870:	f800283a 	ret

01003874 <__gtsf2>:
 1003874:	defff304 	addi	sp,sp,-52
 1003878:	dc400b15 	stw	r17,44(sp)
 100387c:	dc400204 	addi	r17,sp,8
 1003880:	dc000a15 	stw	r16,40(sp)
 1003884:	d9000015 	stw	r4,0(sp)
 1003888:	d9400115 	stw	r5,4(sp)
 100388c:	d809883a 	mov	r4,sp
 1003890:	880b883a 	mov	r5,r17
 1003894:	dc000604 	addi	r16,sp,24
 1003898:	dfc00c15 	stw	ra,48(sp)
 100389c:	1004aa80 	call	1004aa8 <__unpack_f>
 10038a0:	d9000104 	addi	r4,sp,4
 10038a4:	800b883a 	mov	r5,r16
 10038a8:	1004aa80 	call	1004aa8 <__unpack_f>
 10038ac:	d8800217 	ldw	r2,8(sp)
 10038b0:	00c00044 	movi	r3,1
 10038b4:	01bfffc4 	movi	r6,-1
 10038b8:	1880062e 	bgeu	r3,r2,10038d4 <__gtsf2+0x60>
 10038bc:	d8800617 	ldw	r2,24(sp)
 10038c0:	8809883a 	mov	r4,r17
 10038c4:	800b883a 	mov	r5,r16
 10038c8:	1880022e 	bgeu	r3,r2,10038d4 <__gtsf2+0x60>
 10038cc:	1004b700 	call	1004b70 <__fpcmp_parts_f>
 10038d0:	100d883a 	mov	r6,r2
 10038d4:	3005883a 	mov	r2,r6
 10038d8:	dfc00c17 	ldw	ra,48(sp)
 10038dc:	dc400b17 	ldw	r17,44(sp)
 10038e0:	dc000a17 	ldw	r16,40(sp)
 10038e4:	dec00d04 	addi	sp,sp,52
 10038e8:	f800283a 	ret

010038ec <__ltsf2>:
 10038ec:	defff304 	addi	sp,sp,-52
 10038f0:	dc400b15 	stw	r17,44(sp)
 10038f4:	dc400204 	addi	r17,sp,8
 10038f8:	dc000a15 	stw	r16,40(sp)
 10038fc:	d9000015 	stw	r4,0(sp)
 1003900:	d9400115 	stw	r5,4(sp)
 1003904:	d809883a 	mov	r4,sp
 1003908:	880b883a 	mov	r5,r17
 100390c:	dc000604 	addi	r16,sp,24
 1003910:	dfc00c15 	stw	ra,48(sp)
 1003914:	1004aa80 	call	1004aa8 <__unpack_f>
 1003918:	d9000104 	addi	r4,sp,4
 100391c:	800b883a 	mov	r5,r16
 1003920:	1004aa80 	call	1004aa8 <__unpack_f>
 1003924:	d8800217 	ldw	r2,8(sp)
 1003928:	00c00044 	movi	r3,1
 100392c:	180d883a 	mov	r6,r3
 1003930:	1880062e 	bgeu	r3,r2,100394c <__ltsf2+0x60>
 1003934:	d8800617 	ldw	r2,24(sp)
 1003938:	8809883a 	mov	r4,r17
 100393c:	800b883a 	mov	r5,r16
 1003940:	1880022e 	bgeu	r3,r2,100394c <__ltsf2+0x60>
 1003944:	1004b700 	call	1004b70 <__fpcmp_parts_f>
 1003948:	100d883a 	mov	r6,r2
 100394c:	3005883a 	mov	r2,r6
 1003950:	dfc00c17 	ldw	ra,48(sp)
 1003954:	dc400b17 	ldw	r17,44(sp)
 1003958:	dc000a17 	ldw	r16,40(sp)
 100395c:	dec00d04 	addi	sp,sp,52
 1003960:	f800283a 	ret

01003964 <__extendsfdf2>:
 1003964:	defff904 	addi	sp,sp,-28
 1003968:	d9000115 	stw	r4,4(sp)
 100396c:	d9400204 	addi	r5,sp,8
 1003970:	d9000104 	addi	r4,sp,4
 1003974:	dfc00615 	stw	ra,24(sp)
 1003978:	1004aa80 	call	1004aa8 <__unpack_f>
 100397c:	d9c00517 	ldw	r7,20(sp)
 1003980:	0011883a 	mov	r8,zero
 1003984:	400697ba 	slli	r3,r8,30
 1003988:	3812d0ba 	srli	r9,r7,2
 100398c:	380497ba 	slli	r2,r7,30
 1003990:	d9000217 	ldw	r4,8(sp)
 1003994:	d9400317 	ldw	r5,12(sp)
 1003998:	d9800417 	ldw	r6,16(sp)
 100399c:	48c6b03a 	or	r3,r9,r3
 10039a0:	100f883a 	mov	r7,r2
 10039a4:	d8c00015 	stw	r3,0(sp)
 10039a8:	10045e80 	call	10045e8 <__make_dp>
 10039ac:	dfc00617 	ldw	ra,24(sp)
 10039b0:	dec00704 	addi	sp,sp,28
 10039b4:	f800283a 	ret

010039b8 <_fpadd_parts>:
 10039b8:	defff804 	addi	sp,sp,-32
 10039bc:	dcc00315 	stw	r19,12(sp)
 10039c0:	2027883a 	mov	r19,r4
 10039c4:	21000017 	ldw	r4,0(r4)
 10039c8:	00c00044 	movi	r3,1
 10039cc:	dd400515 	stw	r21,20(sp)
 10039d0:	dd000415 	stw	r20,16(sp)
 10039d4:	ddc00715 	stw	r23,28(sp)
 10039d8:	dd800615 	stw	r22,24(sp)
 10039dc:	dc800215 	stw	r18,8(sp)
 10039e0:	dc400115 	stw	r17,4(sp)
 10039e4:	dc000015 	stw	r16,0(sp)
 10039e8:	282b883a 	mov	r21,r5
 10039ec:	3029883a 	mov	r20,r6
 10039f0:	1900632e 	bgeu	r3,r4,1003b80 <_fpadd_parts+0x1c8>
 10039f4:	28800017 	ldw	r2,0(r5)
 10039f8:	1880812e 	bgeu	r3,r2,1003c00 <_fpadd_parts+0x248>
 10039fc:	00c00104 	movi	r3,4
 1003a00:	20c0dc26 	beq	r4,r3,1003d74 <_fpadd_parts+0x3bc>
 1003a04:	10c07e26 	beq	r2,r3,1003c00 <_fpadd_parts+0x248>
 1003a08:	00c00084 	movi	r3,2
 1003a0c:	10c06726 	beq	r2,r3,1003bac <_fpadd_parts+0x1f4>
 1003a10:	20c07b26 	beq	r4,r3,1003c00 <_fpadd_parts+0x248>
 1003a14:	9dc00217 	ldw	r23,8(r19)
 1003a18:	28c00217 	ldw	r3,8(r5)
 1003a1c:	9c400317 	ldw	r17,12(r19)
 1003a20:	2bc00317 	ldw	r15,12(r5)
 1003a24:	b8cdc83a 	sub	r6,r23,r3
 1003a28:	9c800417 	ldw	r18,16(r19)
 1003a2c:	2c000417 	ldw	r16,16(r5)
 1003a30:	3009883a 	mov	r4,r6
 1003a34:	30009716 	blt	r6,zero,1003c94 <_fpadd_parts+0x2dc>
 1003a38:	00800fc4 	movi	r2,63
 1003a3c:	11806b16 	blt	r2,r6,1003bec <_fpadd_parts+0x234>
 1003a40:	0100a40e 	bge	zero,r4,1003cd4 <_fpadd_parts+0x31c>
 1003a44:	35bff804 	addi	r22,r6,-32
 1003a48:	b000bc16 	blt	r22,zero,1003d3c <_fpadd_parts+0x384>
 1003a4c:	8596d83a 	srl	r11,r16,r22
 1003a50:	0019883a 	mov	r12,zero
 1003a54:	0013883a 	mov	r9,zero
 1003a58:	01000044 	movi	r4,1
 1003a5c:	0015883a 	mov	r10,zero
 1003a60:	b000be16 	blt	r22,zero,1003d5c <_fpadd_parts+0x3a4>
 1003a64:	2590983a 	sll	r8,r4,r22
 1003a68:	000f883a 	mov	r7,zero
 1003a6c:	00bfffc4 	movi	r2,-1
 1003a70:	3889883a 	add	r4,r7,r2
 1003a74:	408b883a 	add	r5,r8,r2
 1003a78:	21cd803a 	cmpltu	r6,r4,r7
 1003a7c:	314b883a 	add	r5,r6,r5
 1003a80:	7904703a 	and	r2,r15,r4
 1003a84:	8146703a 	and	r3,r16,r5
 1003a88:	10c4b03a 	or	r2,r2,r3
 1003a8c:	10000226 	beq	r2,zero,1003a98 <_fpadd_parts+0xe0>
 1003a90:	02400044 	movi	r9,1
 1003a94:	0015883a 	mov	r10,zero
 1003a98:	5a5eb03a 	or	r15,r11,r9
 1003a9c:	62a0b03a 	or	r16,r12,r10
 1003aa0:	99400117 	ldw	r5,4(r19)
 1003aa4:	a8800117 	ldw	r2,4(r21)
 1003aa8:	28806e26 	beq	r5,r2,1003c64 <_fpadd_parts+0x2ac>
 1003aac:	28006626 	beq	r5,zero,1003c48 <_fpadd_parts+0x290>
 1003ab0:	7c45c83a 	sub	r2,r15,r17
 1003ab4:	7889803a 	cmpltu	r4,r15,r2
 1003ab8:	8487c83a 	sub	r3,r16,r18
 1003abc:	1909c83a 	sub	r4,r3,r4
 1003ac0:	100d883a 	mov	r6,r2
 1003ac4:	200f883a 	mov	r7,r4
 1003ac8:	38007716 	blt	r7,zero,1003ca8 <_fpadd_parts+0x2f0>
 1003acc:	a5c00215 	stw	r23,8(r20)
 1003ad0:	a1c00415 	stw	r7,16(r20)
 1003ad4:	a0000115 	stw	zero,4(r20)
 1003ad8:	a1800315 	stw	r6,12(r20)
 1003adc:	a2000317 	ldw	r8,12(r20)
 1003ae0:	a2400417 	ldw	r9,16(r20)
 1003ae4:	00bfffc4 	movi	r2,-1
 1003ae8:	408b883a 	add	r5,r8,r2
 1003aec:	2a09803a 	cmpltu	r4,r5,r8
 1003af0:	488d883a 	add	r6,r9,r2
 1003af4:	01c40034 	movhi	r7,4096
 1003af8:	39ffffc4 	addi	r7,r7,-1
 1003afc:	218d883a 	add	r6,r4,r6
 1003b00:	39801736 	bltu	r7,r6,1003b60 <_fpadd_parts+0x1a8>
 1003b04:	31c06526 	beq	r6,r7,1003c9c <_fpadd_parts+0x2e4>
 1003b08:	a3000217 	ldw	r12,8(r20)
 1003b0c:	4209883a 	add	r4,r8,r8
 1003b10:	00bfffc4 	movi	r2,-1
 1003b14:	220f803a 	cmpltu	r7,r4,r8
 1003b18:	4a4b883a 	add	r5,r9,r9
 1003b1c:	394f883a 	add	r7,r7,r5
 1003b20:	2095883a 	add	r10,r4,r2
 1003b24:	3897883a 	add	r11,r7,r2
 1003b28:	510d803a 	cmpltu	r6,r10,r4
 1003b2c:	6099883a 	add	r12,r12,r2
 1003b30:	32d7883a 	add	r11,r6,r11
 1003b34:	00840034 	movhi	r2,4096
 1003b38:	10bfffc4 	addi	r2,r2,-1
 1003b3c:	2011883a 	mov	r8,r4
 1003b40:	3813883a 	mov	r9,r7
 1003b44:	a1000315 	stw	r4,12(r20)
 1003b48:	a1c00415 	stw	r7,16(r20)
 1003b4c:	a3000215 	stw	r12,8(r20)
 1003b50:	12c00336 	bltu	r2,r11,1003b60 <_fpadd_parts+0x1a8>
 1003b54:	58bfed1e 	bne	r11,r2,1003b0c <_fpadd_parts+0x154>
 1003b58:	00bfff84 	movi	r2,-2
 1003b5c:	12bfeb2e 	bgeu	r2,r10,1003b0c <_fpadd_parts+0x154>
 1003b60:	a2800417 	ldw	r10,16(r20)
 1003b64:	008000c4 	movi	r2,3
 1003b68:	00c80034 	movhi	r3,8192
 1003b6c:	18ffffc4 	addi	r3,r3,-1
 1003b70:	a2400317 	ldw	r9,12(r20)
 1003b74:	a0800015 	stw	r2,0(r20)
 1003b78:	1a802336 	bltu	r3,r10,1003c08 <_fpadd_parts+0x250>
 1003b7c:	a027883a 	mov	r19,r20
 1003b80:	9805883a 	mov	r2,r19
 1003b84:	ddc00717 	ldw	r23,28(sp)
 1003b88:	dd800617 	ldw	r22,24(sp)
 1003b8c:	dd400517 	ldw	r21,20(sp)
 1003b90:	dd000417 	ldw	r20,16(sp)
 1003b94:	dcc00317 	ldw	r19,12(sp)
 1003b98:	dc800217 	ldw	r18,8(sp)
 1003b9c:	dc400117 	ldw	r17,4(sp)
 1003ba0:	dc000017 	ldw	r16,0(sp)
 1003ba4:	dec00804 	addi	sp,sp,32
 1003ba8:	f800283a 	ret
 1003bac:	20fff41e 	bne	r4,r3,1003b80 <_fpadd_parts+0x1c8>
 1003bb0:	31000015 	stw	r4,0(r6)
 1003bb4:	98800117 	ldw	r2,4(r19)
 1003bb8:	30800115 	stw	r2,4(r6)
 1003bbc:	98c00217 	ldw	r3,8(r19)
 1003bc0:	30c00215 	stw	r3,8(r6)
 1003bc4:	98800317 	ldw	r2,12(r19)
 1003bc8:	30800315 	stw	r2,12(r6)
 1003bcc:	98c00417 	ldw	r3,16(r19)
 1003bd0:	30c00415 	stw	r3,16(r6)
 1003bd4:	98800117 	ldw	r2,4(r19)
 1003bd8:	28c00117 	ldw	r3,4(r5)
 1003bdc:	3027883a 	mov	r19,r6
 1003be0:	10c4703a 	and	r2,r2,r3
 1003be4:	30800115 	stw	r2,4(r6)
 1003be8:	003fe506 	br	1003b80 <_fpadd_parts+0x1c8>
 1003bec:	1dc02616 	blt	r3,r23,1003c88 <_fpadd_parts+0x2d0>
 1003bf0:	0023883a 	mov	r17,zero
 1003bf4:	182f883a 	mov	r23,r3
 1003bf8:	0025883a 	mov	r18,zero
 1003bfc:	003fa806 	br	1003aa0 <_fpadd_parts+0xe8>
 1003c00:	a827883a 	mov	r19,r21
 1003c04:	003fde06 	br	1003b80 <_fpadd_parts+0x1c8>
 1003c08:	01800044 	movi	r6,1
 1003c0c:	500497fa 	slli	r2,r10,31
 1003c10:	4808d07a 	srli	r4,r9,1
 1003c14:	518ad83a 	srl	r5,r10,r6
 1003c18:	a2000217 	ldw	r8,8(r20)
 1003c1c:	1108b03a 	or	r4,r2,r4
 1003c20:	0007883a 	mov	r3,zero
 1003c24:	4984703a 	and	r2,r9,r6
 1003c28:	208cb03a 	or	r6,r4,r2
 1003c2c:	28ceb03a 	or	r7,r5,r3
 1003c30:	42000044 	addi	r8,r8,1
 1003c34:	a027883a 	mov	r19,r20
 1003c38:	a1c00415 	stw	r7,16(r20)
 1003c3c:	a2000215 	stw	r8,8(r20)
 1003c40:	a1800315 	stw	r6,12(r20)
 1003c44:	003fce06 	br	1003b80 <_fpadd_parts+0x1c8>
 1003c48:	8bc5c83a 	sub	r2,r17,r15
 1003c4c:	8889803a 	cmpltu	r4,r17,r2
 1003c50:	9407c83a 	sub	r3,r18,r16
 1003c54:	1909c83a 	sub	r4,r3,r4
 1003c58:	100d883a 	mov	r6,r2
 1003c5c:	200f883a 	mov	r7,r4
 1003c60:	003f9906 	br	1003ac8 <_fpadd_parts+0x110>
 1003c64:	7c45883a 	add	r2,r15,r17
 1003c68:	13c9803a 	cmpltu	r4,r2,r15
 1003c6c:	8487883a 	add	r3,r16,r18
 1003c70:	20c9883a 	add	r4,r4,r3
 1003c74:	a1400115 	stw	r5,4(r20)
 1003c78:	a5c00215 	stw	r23,8(r20)
 1003c7c:	a0800315 	stw	r2,12(r20)
 1003c80:	a1000415 	stw	r4,16(r20)
 1003c84:	003fb606 	br	1003b60 <_fpadd_parts+0x1a8>
 1003c88:	001f883a 	mov	r15,zero
 1003c8c:	0021883a 	mov	r16,zero
 1003c90:	003f8306 	br	1003aa0 <_fpadd_parts+0xe8>
 1003c94:	018dc83a 	sub	r6,zero,r6
 1003c98:	003f6706 	br	1003a38 <_fpadd_parts+0x80>
 1003c9c:	00bfff84 	movi	r2,-2
 1003ca0:	117faf36 	bltu	r2,r5,1003b60 <_fpadd_parts+0x1a8>
 1003ca4:	003f9806 	br	1003b08 <_fpadd_parts+0x150>
 1003ca8:	0005883a 	mov	r2,zero
 1003cac:	1189c83a 	sub	r4,r2,r6
 1003cb0:	1105803a 	cmpltu	r2,r2,r4
 1003cb4:	01cbc83a 	sub	r5,zero,r7
 1003cb8:	2885c83a 	sub	r2,r5,r2
 1003cbc:	01800044 	movi	r6,1
 1003cc0:	a1800115 	stw	r6,4(r20)
 1003cc4:	a5c00215 	stw	r23,8(r20)
 1003cc8:	a1000315 	stw	r4,12(r20)
 1003ccc:	a0800415 	stw	r2,16(r20)
 1003cd0:	003f8206 	br	1003adc <_fpadd_parts+0x124>
 1003cd4:	203f7226 	beq	r4,zero,1003aa0 <_fpadd_parts+0xe8>
 1003cd8:	35bff804 	addi	r22,r6,-32
 1003cdc:	b9af883a 	add	r23,r23,r6
 1003ce0:	b0003116 	blt	r22,zero,1003da8 <_fpadd_parts+0x3f0>
 1003ce4:	959ad83a 	srl	r13,r18,r22
 1003ce8:	001d883a 	mov	r14,zero
 1003cec:	000f883a 	mov	r7,zero
 1003cf0:	01000044 	movi	r4,1
 1003cf4:	0011883a 	mov	r8,zero
 1003cf8:	b0002516 	blt	r22,zero,1003d90 <_fpadd_parts+0x3d8>
 1003cfc:	2594983a 	sll	r10,r4,r22
 1003d00:	0013883a 	mov	r9,zero
 1003d04:	00bfffc4 	movi	r2,-1
 1003d08:	4889883a 	add	r4,r9,r2
 1003d0c:	508b883a 	add	r5,r10,r2
 1003d10:	224d803a 	cmpltu	r6,r4,r9
 1003d14:	314b883a 	add	r5,r6,r5
 1003d18:	8904703a 	and	r2,r17,r4
 1003d1c:	9146703a 	and	r3,r18,r5
 1003d20:	10c4b03a 	or	r2,r2,r3
 1003d24:	10000226 	beq	r2,zero,1003d30 <_fpadd_parts+0x378>
 1003d28:	01c00044 	movi	r7,1
 1003d2c:	0011883a 	mov	r8,zero
 1003d30:	69e2b03a 	or	r17,r13,r7
 1003d34:	7224b03a 	or	r18,r14,r8
 1003d38:	003f5906 	br	1003aa0 <_fpadd_parts+0xe8>
 1003d3c:	8407883a 	add	r3,r16,r16
 1003d40:	008007c4 	movi	r2,31
 1003d44:	1185c83a 	sub	r2,r2,r6
 1003d48:	1886983a 	sll	r3,r3,r2
 1003d4c:	7996d83a 	srl	r11,r15,r6
 1003d50:	8198d83a 	srl	r12,r16,r6
 1003d54:	1ad6b03a 	or	r11,r3,r11
 1003d58:	003f3e06 	br	1003a54 <_fpadd_parts+0x9c>
 1003d5c:	2006d07a 	srli	r3,r4,1
 1003d60:	008007c4 	movi	r2,31
 1003d64:	1185c83a 	sub	r2,r2,r6
 1003d68:	1890d83a 	srl	r8,r3,r2
 1003d6c:	218e983a 	sll	r7,r4,r6
 1003d70:	003f3e06 	br	1003a6c <_fpadd_parts+0xb4>
 1003d74:	113f821e 	bne	r2,r4,1003b80 <_fpadd_parts+0x1c8>
 1003d78:	28c00117 	ldw	r3,4(r5)
 1003d7c:	98800117 	ldw	r2,4(r19)
 1003d80:	10ff7f26 	beq	r2,r3,1003b80 <_fpadd_parts+0x1c8>
 1003d84:	04c04074 	movhi	r19,257
 1003d88:	9cc9ad04 	addi	r19,r19,9908
 1003d8c:	003f7c06 	br	1003b80 <_fpadd_parts+0x1c8>
 1003d90:	2006d07a 	srli	r3,r4,1
 1003d94:	008007c4 	movi	r2,31
 1003d98:	1185c83a 	sub	r2,r2,r6
 1003d9c:	1894d83a 	srl	r10,r3,r2
 1003da0:	2192983a 	sll	r9,r4,r6
 1003da4:	003fd706 	br	1003d04 <_fpadd_parts+0x34c>
 1003da8:	9487883a 	add	r3,r18,r18
 1003dac:	008007c4 	movi	r2,31
 1003db0:	1185c83a 	sub	r2,r2,r6
 1003db4:	1886983a 	sll	r3,r3,r2
 1003db8:	899ad83a 	srl	r13,r17,r6
 1003dbc:	919cd83a 	srl	r14,r18,r6
 1003dc0:	1b5ab03a 	or	r13,r3,r13
 1003dc4:	003fc906 	br	1003cec <_fpadd_parts+0x334>

01003dc8 <__subdf3>:
 1003dc8:	deffea04 	addi	sp,sp,-88
 1003dcc:	dcc01415 	stw	r19,80(sp)
 1003dd0:	dcc00404 	addi	r19,sp,16
 1003dd4:	2011883a 	mov	r8,r4
 1003dd8:	2813883a 	mov	r9,r5
 1003ddc:	dc401315 	stw	r17,76(sp)
 1003de0:	d809883a 	mov	r4,sp
 1003de4:	980b883a 	mov	r5,r19
 1003de8:	dc400904 	addi	r17,sp,36
 1003dec:	dfc01515 	stw	ra,84(sp)
 1003df0:	da400115 	stw	r9,4(sp)
 1003df4:	d9c00315 	stw	r7,12(sp)
 1003df8:	da000015 	stw	r8,0(sp)
 1003dfc:	d9800215 	stw	r6,8(sp)
 1003e00:	1004f2c0 	call	1004f2c <__unpack_d>
 1003e04:	d9000204 	addi	r4,sp,8
 1003e08:	880b883a 	mov	r5,r17
 1003e0c:	1004f2c0 	call	1004f2c <__unpack_d>
 1003e10:	d8800a17 	ldw	r2,40(sp)
 1003e14:	880b883a 	mov	r5,r17
 1003e18:	9809883a 	mov	r4,r19
 1003e1c:	d9800e04 	addi	r6,sp,56
 1003e20:	1080005c 	xori	r2,r2,1
 1003e24:	d8800a15 	stw	r2,40(sp)
 1003e28:	10039b80 	call	10039b8 <_fpadd_parts>
 1003e2c:	1009883a 	mov	r4,r2
 1003e30:	1004c180 	call	1004c18 <__pack_d>
 1003e34:	dfc01517 	ldw	ra,84(sp)
 1003e38:	dcc01417 	ldw	r19,80(sp)
 1003e3c:	dc401317 	ldw	r17,76(sp)
 1003e40:	dec01604 	addi	sp,sp,88
 1003e44:	f800283a 	ret

01003e48 <__adddf3>:
 1003e48:	deffea04 	addi	sp,sp,-88
 1003e4c:	dcc01415 	stw	r19,80(sp)
 1003e50:	dcc00404 	addi	r19,sp,16
 1003e54:	2011883a 	mov	r8,r4
 1003e58:	2813883a 	mov	r9,r5
 1003e5c:	dc401315 	stw	r17,76(sp)
 1003e60:	d809883a 	mov	r4,sp
 1003e64:	980b883a 	mov	r5,r19
 1003e68:	dc400904 	addi	r17,sp,36
 1003e6c:	dfc01515 	stw	ra,84(sp)
 1003e70:	da400115 	stw	r9,4(sp)
 1003e74:	d9c00315 	stw	r7,12(sp)
 1003e78:	da000015 	stw	r8,0(sp)
 1003e7c:	d9800215 	stw	r6,8(sp)
 1003e80:	1004f2c0 	call	1004f2c <__unpack_d>
 1003e84:	d9000204 	addi	r4,sp,8
 1003e88:	880b883a 	mov	r5,r17
 1003e8c:	1004f2c0 	call	1004f2c <__unpack_d>
 1003e90:	d9800e04 	addi	r6,sp,56
 1003e94:	9809883a 	mov	r4,r19
 1003e98:	880b883a 	mov	r5,r17
 1003e9c:	10039b80 	call	10039b8 <_fpadd_parts>
 1003ea0:	1009883a 	mov	r4,r2
 1003ea4:	1004c180 	call	1004c18 <__pack_d>
 1003ea8:	dfc01517 	ldw	ra,84(sp)
 1003eac:	dcc01417 	ldw	r19,80(sp)
 1003eb0:	dc401317 	ldw	r17,76(sp)
 1003eb4:	dec01604 	addi	sp,sp,88
 1003eb8:	f800283a 	ret

01003ebc <__muldf3>:
 1003ebc:	deffe004 	addi	sp,sp,-128
 1003ec0:	dc401815 	stw	r17,96(sp)
 1003ec4:	dc400404 	addi	r17,sp,16
 1003ec8:	2011883a 	mov	r8,r4
 1003ecc:	2813883a 	mov	r9,r5
 1003ed0:	dc001715 	stw	r16,92(sp)
 1003ed4:	d809883a 	mov	r4,sp
 1003ed8:	880b883a 	mov	r5,r17
 1003edc:	dc000904 	addi	r16,sp,36
 1003ee0:	dfc01f15 	stw	ra,124(sp)
 1003ee4:	da400115 	stw	r9,4(sp)
 1003ee8:	d9c00315 	stw	r7,12(sp)
 1003eec:	da000015 	stw	r8,0(sp)
 1003ef0:	d9800215 	stw	r6,8(sp)
 1003ef4:	ddc01e15 	stw	r23,120(sp)
 1003ef8:	dd801d15 	stw	r22,116(sp)
 1003efc:	dd401c15 	stw	r21,112(sp)
 1003f00:	dd001b15 	stw	r20,108(sp)
 1003f04:	dcc01a15 	stw	r19,104(sp)
 1003f08:	dc801915 	stw	r18,100(sp)
 1003f0c:	1004f2c0 	call	1004f2c <__unpack_d>
 1003f10:	d9000204 	addi	r4,sp,8
 1003f14:	800b883a 	mov	r5,r16
 1003f18:	1004f2c0 	call	1004f2c <__unpack_d>
 1003f1c:	d9000417 	ldw	r4,16(sp)
 1003f20:	00800044 	movi	r2,1
 1003f24:	1100102e 	bgeu	r2,r4,1003f68 <__muldf3+0xac>
 1003f28:	d8c00917 	ldw	r3,36(sp)
 1003f2c:	10c0062e 	bgeu	r2,r3,1003f48 <__muldf3+0x8c>
 1003f30:	00800104 	movi	r2,4
 1003f34:	20800a26 	beq	r4,r2,1003f60 <__muldf3+0xa4>
 1003f38:	1880cc26 	beq	r3,r2,100426c <__muldf3+0x3b0>
 1003f3c:	00800084 	movi	r2,2
 1003f40:	20800926 	beq	r4,r2,1003f68 <__muldf3+0xac>
 1003f44:	1880191e 	bne	r3,r2,1003fac <__muldf3+0xf0>
 1003f48:	d8c00a17 	ldw	r3,40(sp)
 1003f4c:	d8800517 	ldw	r2,20(sp)
 1003f50:	8009883a 	mov	r4,r16
 1003f54:	10c4c03a 	cmpne	r2,r2,r3
 1003f58:	d8800a15 	stw	r2,40(sp)
 1003f5c:	00000706 	br	1003f7c <__muldf3+0xc0>
 1003f60:	00800084 	movi	r2,2
 1003f64:	1880c326 	beq	r3,r2,1004274 <__muldf3+0x3b8>
 1003f68:	d8800517 	ldw	r2,20(sp)
 1003f6c:	d8c00a17 	ldw	r3,40(sp)
 1003f70:	8809883a 	mov	r4,r17
 1003f74:	10c4c03a 	cmpne	r2,r2,r3
 1003f78:	d8800515 	stw	r2,20(sp)
 1003f7c:	1004c180 	call	1004c18 <__pack_d>
 1003f80:	dfc01f17 	ldw	ra,124(sp)
 1003f84:	ddc01e17 	ldw	r23,120(sp)
 1003f88:	dd801d17 	ldw	r22,116(sp)
 1003f8c:	dd401c17 	ldw	r21,112(sp)
 1003f90:	dd001b17 	ldw	r20,108(sp)
 1003f94:	dcc01a17 	ldw	r19,104(sp)
 1003f98:	dc801917 	ldw	r18,100(sp)
 1003f9c:	dc401817 	ldw	r17,96(sp)
 1003fa0:	dc001717 	ldw	r16,92(sp)
 1003fa4:	dec02004 	addi	sp,sp,128
 1003fa8:	f800283a 	ret
 1003fac:	dd800717 	ldw	r22,28(sp)
 1003fb0:	dc800c17 	ldw	r18,48(sp)
 1003fb4:	002b883a 	mov	r21,zero
 1003fb8:	0023883a 	mov	r17,zero
 1003fbc:	a80b883a 	mov	r5,r21
 1003fc0:	b00d883a 	mov	r6,r22
 1003fc4:	880f883a 	mov	r7,r17
 1003fc8:	ddc00817 	ldw	r23,32(sp)
 1003fcc:	dcc00d17 	ldw	r19,52(sp)
 1003fd0:	9009883a 	mov	r4,r18
 1003fd4:	10047a40 	call	10047a4 <__muldi3>
 1003fd8:	001b883a 	mov	r13,zero
 1003fdc:	680f883a 	mov	r7,r13
 1003fe0:	b009883a 	mov	r4,r22
 1003fe4:	000b883a 	mov	r5,zero
 1003fe8:	980d883a 	mov	r6,r19
 1003fec:	b82d883a 	mov	r22,r23
 1003ff0:	002f883a 	mov	r23,zero
 1003ff4:	db401615 	stw	r13,88(sp)
 1003ff8:	d8801315 	stw	r2,76(sp)
 1003ffc:	d8c01415 	stw	r3,80(sp)
 1004000:	dcc01515 	stw	r19,84(sp)
 1004004:	10047a40 	call	10047a4 <__muldi3>
 1004008:	b00d883a 	mov	r6,r22
 100400c:	000b883a 	mov	r5,zero
 1004010:	9009883a 	mov	r4,r18
 1004014:	b80f883a 	mov	r7,r23
 1004018:	1021883a 	mov	r16,r2
 100401c:	1823883a 	mov	r17,r3
 1004020:	10047a40 	call	10047a4 <__muldi3>
 1004024:	8085883a 	add	r2,r16,r2
 1004028:	140d803a 	cmpltu	r6,r2,r16
 100402c:	88c7883a 	add	r3,r17,r3
 1004030:	30cd883a 	add	r6,r6,r3
 1004034:	1029883a 	mov	r20,r2
 1004038:	302b883a 	mov	r21,r6
 100403c:	da801317 	ldw	r10,76(sp)
 1004040:	dac01417 	ldw	r11,80(sp)
 1004044:	db001517 	ldw	r12,84(sp)
 1004048:	db401617 	ldw	r13,88(sp)
 100404c:	3440612e 	bgeu	r6,r17,10041d4 <__muldf3+0x318>
 1004050:	0009883a 	mov	r4,zero
 1004054:	5105883a 	add	r2,r10,r4
 1004058:	128d803a 	cmpltu	r6,r2,r10
 100405c:	5d07883a 	add	r3,r11,r20
 1004060:	30cd883a 	add	r6,r6,r3
 1004064:	0021883a 	mov	r16,zero
 1004068:	04400044 	movi	r17,1
 100406c:	1025883a 	mov	r18,r2
 1004070:	3027883a 	mov	r19,r6
 1004074:	32c06236 	bltu	r6,r11,1004200 <__muldf3+0x344>
 1004078:	59807a26 	beq	r11,r6,1004264 <__muldf3+0x3a8>
 100407c:	680b883a 	mov	r5,r13
 1004080:	b80f883a 	mov	r7,r23
 1004084:	6009883a 	mov	r4,r12
 1004088:	b00d883a 	mov	r6,r22
 100408c:	10047a40 	call	10047a4 <__muldi3>
 1004090:	1009883a 	mov	r4,r2
 1004094:	000f883a 	mov	r7,zero
 1004098:	1545883a 	add	r2,r2,r21
 100409c:	1111803a 	cmpltu	r8,r2,r4
 10040a0:	19c7883a 	add	r3,r3,r7
 10040a4:	40c7883a 	add	r3,r8,r3
 10040a8:	88cb883a 	add	r5,r17,r3
 10040ac:	d8c00617 	ldw	r3,24(sp)
 10040b0:	8089883a 	add	r4,r16,r2
 10040b4:	d8800b17 	ldw	r2,44(sp)
 10040b8:	18c00104 	addi	r3,r3,4
 10040bc:	240d803a 	cmpltu	r6,r4,r16
 10040c0:	10c7883a 	add	r3,r2,r3
 10040c4:	2013883a 	mov	r9,r4
 10040c8:	d8800a17 	ldw	r2,40(sp)
 10040cc:	d9000517 	ldw	r4,20(sp)
 10040d0:	314d883a 	add	r6,r6,r5
 10040d4:	3015883a 	mov	r10,r6
 10040d8:	2088c03a 	cmpne	r4,r4,r2
 10040dc:	00880034 	movhi	r2,8192
 10040e0:	10bfffc4 	addi	r2,r2,-1
 10040e4:	d9000f15 	stw	r4,60(sp)
 10040e8:	d8c01015 	stw	r3,64(sp)
 10040ec:	1180162e 	bgeu	r2,r6,1004148 <__muldf3+0x28c>
 10040f0:	1811883a 	mov	r8,r3
 10040f4:	101f883a 	mov	r15,r2
 10040f8:	980497fa 	slli	r2,r19,31
 10040fc:	9016d07a 	srli	r11,r18,1
 1004100:	500697fa 	slli	r3,r10,31
 1004104:	480cd07a 	srli	r6,r9,1
 1004108:	500ed07a 	srli	r7,r10,1
 100410c:	12d6b03a 	or	r11,r2,r11
 1004110:	00800044 	movi	r2,1
 1004114:	198cb03a 	or	r6,r3,r6
 1004118:	4888703a 	and	r4,r9,r2
 100411c:	9818d07a 	srli	r12,r19,1
 1004120:	001b883a 	mov	r13,zero
 1004124:	03a00034 	movhi	r14,32768
 1004128:	3013883a 	mov	r9,r6
 100412c:	3815883a 	mov	r10,r7
 1004130:	4091883a 	add	r8,r8,r2
 1004134:	20000226 	beq	r4,zero,1004140 <__muldf3+0x284>
 1004138:	5b64b03a 	or	r18,r11,r13
 100413c:	63a6b03a 	or	r19,r12,r14
 1004140:	7abfed36 	bltu	r15,r10,10040f8 <__muldf3+0x23c>
 1004144:	da001015 	stw	r8,64(sp)
 1004148:	00840034 	movhi	r2,4096
 100414c:	10bfffc4 	addi	r2,r2,-1
 1004150:	12801436 	bltu	r2,r10,10041a4 <__muldf3+0x2e8>
 1004154:	da001017 	ldw	r8,64(sp)
 1004158:	101f883a 	mov	r15,r2
 100415c:	4a45883a 	add	r2,r9,r9
 1004160:	124d803a 	cmpltu	r6,r2,r9
 1004164:	5287883a 	add	r3,r10,r10
 1004168:	9497883a 	add	r11,r18,r18
 100416c:	5c8f803a 	cmpltu	r7,r11,r18
 1004170:	9cd9883a 	add	r12,r19,r19
 1004174:	01000044 	movi	r4,1
 1004178:	30cd883a 	add	r6,r6,r3
 100417c:	3b0f883a 	add	r7,r7,r12
 1004180:	423fffc4 	addi	r8,r8,-1
 1004184:	1013883a 	mov	r9,r2
 1004188:	3015883a 	mov	r10,r6
 100418c:	111ab03a 	or	r13,r2,r4
 1004190:	98003016 	blt	r19,zero,1004254 <__muldf3+0x398>
 1004194:	5825883a 	mov	r18,r11
 1004198:	3827883a 	mov	r19,r7
 100419c:	7abfef2e 	bgeu	r15,r10,100415c <__muldf3+0x2a0>
 10041a0:	da001015 	stw	r8,64(sp)
 10041a4:	00803fc4 	movi	r2,255
 10041a8:	488e703a 	and	r7,r9,r2
 10041ac:	00802004 	movi	r2,128
 10041b0:	0007883a 	mov	r3,zero
 10041b4:	0011883a 	mov	r8,zero
 10041b8:	38801826 	beq	r7,r2,100421c <__muldf3+0x360>
 10041bc:	008000c4 	movi	r2,3
 10041c0:	d9000e04 	addi	r4,sp,56
 10041c4:	da801215 	stw	r10,72(sp)
 10041c8:	d8800e15 	stw	r2,56(sp)
 10041cc:	da401115 	stw	r9,68(sp)
 10041d0:	003f6a06 	br	1003f7c <__muldf3+0xc0>
 10041d4:	89802126 	beq	r17,r6,100425c <__muldf3+0x3a0>
 10041d8:	0009883a 	mov	r4,zero
 10041dc:	5105883a 	add	r2,r10,r4
 10041e0:	128d803a 	cmpltu	r6,r2,r10
 10041e4:	5d07883a 	add	r3,r11,r20
 10041e8:	30cd883a 	add	r6,r6,r3
 10041ec:	0021883a 	mov	r16,zero
 10041f0:	0023883a 	mov	r17,zero
 10041f4:	1025883a 	mov	r18,r2
 10041f8:	3027883a 	mov	r19,r6
 10041fc:	32ff9e2e 	bgeu	r6,r11,1004078 <__muldf3+0x1bc>
 1004200:	00800044 	movi	r2,1
 1004204:	8089883a 	add	r4,r16,r2
 1004208:	240d803a 	cmpltu	r6,r4,r16
 100420c:	344d883a 	add	r6,r6,r17
 1004210:	2021883a 	mov	r16,r4
 1004214:	3023883a 	mov	r17,r6
 1004218:	003f9806 	br	100407c <__muldf3+0x1c0>
 100421c:	403fe71e 	bne	r8,zero,10041bc <__muldf3+0x300>
 1004220:	01004004 	movi	r4,256
 1004224:	4904703a 	and	r2,r9,r4
 1004228:	10c4b03a 	or	r2,r2,r3
 100422c:	103fe31e 	bne	r2,zero,10041bc <__muldf3+0x300>
 1004230:	94c4b03a 	or	r2,r18,r19
 1004234:	103fe126 	beq	r2,zero,10041bc <__muldf3+0x300>
 1004238:	49c5883a 	add	r2,r9,r7
 100423c:	1251803a 	cmpltu	r8,r2,r9
 1004240:	4291883a 	add	r8,r8,r10
 1004244:	013fc004 	movi	r4,-256
 1004248:	1112703a 	and	r9,r2,r4
 100424c:	4015883a 	mov	r10,r8
 1004250:	003fda06 	br	10041bc <__muldf3+0x300>
 1004254:	6813883a 	mov	r9,r13
 1004258:	003fce06 	br	1004194 <__muldf3+0x2d8>
 100425c:	143f7c36 	bltu	r2,r16,1004050 <__muldf3+0x194>
 1004260:	003fdd06 	br	10041d8 <__muldf3+0x31c>
 1004264:	12bf852e 	bgeu	r2,r10,100407c <__muldf3+0x1c0>
 1004268:	003fe506 	br	1004200 <__muldf3+0x344>
 100426c:	00800084 	movi	r2,2
 1004270:	20bf351e 	bne	r4,r2,1003f48 <__muldf3+0x8c>
 1004274:	01004074 	movhi	r4,257
 1004278:	2109ad04 	addi	r4,r4,9908
 100427c:	003f3f06 	br	1003f7c <__muldf3+0xc0>

01004280 <__eqdf2>:
 1004280:	deffef04 	addi	sp,sp,-68
 1004284:	dc400f15 	stw	r17,60(sp)
 1004288:	dc400404 	addi	r17,sp,16
 100428c:	2005883a 	mov	r2,r4
 1004290:	2807883a 	mov	r3,r5
 1004294:	dc000e15 	stw	r16,56(sp)
 1004298:	d809883a 	mov	r4,sp
 100429c:	880b883a 	mov	r5,r17
 10042a0:	dc000904 	addi	r16,sp,36
 10042a4:	d8c00115 	stw	r3,4(sp)
 10042a8:	d8800015 	stw	r2,0(sp)
 10042ac:	d9800215 	stw	r6,8(sp)
 10042b0:	dfc01015 	stw	ra,64(sp)
 10042b4:	d9c00315 	stw	r7,12(sp)
 10042b8:	1004f2c0 	call	1004f2c <__unpack_d>
 10042bc:	d9000204 	addi	r4,sp,8
 10042c0:	800b883a 	mov	r5,r16
 10042c4:	1004f2c0 	call	1004f2c <__unpack_d>
 10042c8:	d8800417 	ldw	r2,16(sp)
 10042cc:	00c00044 	movi	r3,1
 10042d0:	180d883a 	mov	r6,r3
 10042d4:	1880062e 	bgeu	r3,r2,10042f0 <__eqdf2+0x70>
 10042d8:	d8800917 	ldw	r2,36(sp)
 10042dc:	8809883a 	mov	r4,r17
 10042e0:	800b883a 	mov	r5,r16
 10042e4:	1880022e 	bgeu	r3,r2,10042f0 <__eqdf2+0x70>
 10042e8:	10050640 	call	1005064 <__fpcmp_parts_d>
 10042ec:	100d883a 	mov	r6,r2
 10042f0:	3005883a 	mov	r2,r6
 10042f4:	dfc01017 	ldw	ra,64(sp)
 10042f8:	dc400f17 	ldw	r17,60(sp)
 10042fc:	dc000e17 	ldw	r16,56(sp)
 1004300:	dec01104 	addi	sp,sp,68
 1004304:	f800283a 	ret

01004308 <__gtdf2>:
 1004308:	deffef04 	addi	sp,sp,-68
 100430c:	dc400f15 	stw	r17,60(sp)
 1004310:	dc400404 	addi	r17,sp,16
 1004314:	2005883a 	mov	r2,r4
 1004318:	2807883a 	mov	r3,r5
 100431c:	dc000e15 	stw	r16,56(sp)
 1004320:	d809883a 	mov	r4,sp
 1004324:	880b883a 	mov	r5,r17
 1004328:	dc000904 	addi	r16,sp,36
 100432c:	d8c00115 	stw	r3,4(sp)
 1004330:	d8800015 	stw	r2,0(sp)
 1004334:	d9800215 	stw	r6,8(sp)
 1004338:	dfc01015 	stw	ra,64(sp)
 100433c:	d9c00315 	stw	r7,12(sp)
 1004340:	1004f2c0 	call	1004f2c <__unpack_d>
 1004344:	d9000204 	addi	r4,sp,8
 1004348:	800b883a 	mov	r5,r16
 100434c:	1004f2c0 	call	1004f2c <__unpack_d>
 1004350:	d8800417 	ldw	r2,16(sp)
 1004354:	00c00044 	movi	r3,1
 1004358:	01bfffc4 	movi	r6,-1
 100435c:	1880062e 	bgeu	r3,r2,1004378 <__gtdf2+0x70>
 1004360:	d8800917 	ldw	r2,36(sp)
 1004364:	8809883a 	mov	r4,r17
 1004368:	800b883a 	mov	r5,r16
 100436c:	1880022e 	bgeu	r3,r2,1004378 <__gtdf2+0x70>
 1004370:	10050640 	call	1005064 <__fpcmp_parts_d>
 1004374:	100d883a 	mov	r6,r2
 1004378:	3005883a 	mov	r2,r6
 100437c:	dfc01017 	ldw	ra,64(sp)
 1004380:	dc400f17 	ldw	r17,60(sp)
 1004384:	dc000e17 	ldw	r16,56(sp)
 1004388:	dec01104 	addi	sp,sp,68
 100438c:	f800283a 	ret

01004390 <__gedf2>:
 1004390:	deffef04 	addi	sp,sp,-68
 1004394:	dc400f15 	stw	r17,60(sp)
 1004398:	dc400404 	addi	r17,sp,16
 100439c:	2005883a 	mov	r2,r4
 10043a0:	2807883a 	mov	r3,r5
 10043a4:	dc000e15 	stw	r16,56(sp)
 10043a8:	d809883a 	mov	r4,sp
 10043ac:	880b883a 	mov	r5,r17
 10043b0:	dc000904 	addi	r16,sp,36
 10043b4:	d8c00115 	stw	r3,4(sp)
 10043b8:	d8800015 	stw	r2,0(sp)
 10043bc:	d9800215 	stw	r6,8(sp)
 10043c0:	dfc01015 	stw	ra,64(sp)
 10043c4:	d9c00315 	stw	r7,12(sp)
 10043c8:	1004f2c0 	call	1004f2c <__unpack_d>
 10043cc:	d9000204 	addi	r4,sp,8
 10043d0:	800b883a 	mov	r5,r16
 10043d4:	1004f2c0 	call	1004f2c <__unpack_d>
 10043d8:	d8800417 	ldw	r2,16(sp)
 10043dc:	00c00044 	movi	r3,1
 10043e0:	01bfffc4 	movi	r6,-1
 10043e4:	1880062e 	bgeu	r3,r2,1004400 <__gedf2+0x70>
 10043e8:	d8800917 	ldw	r2,36(sp)
 10043ec:	8809883a 	mov	r4,r17
 10043f0:	800b883a 	mov	r5,r16
 10043f4:	1880022e 	bgeu	r3,r2,1004400 <__gedf2+0x70>
 10043f8:	10050640 	call	1005064 <__fpcmp_parts_d>
 10043fc:	100d883a 	mov	r6,r2
 1004400:	3005883a 	mov	r2,r6
 1004404:	dfc01017 	ldw	ra,64(sp)
 1004408:	dc400f17 	ldw	r17,60(sp)
 100440c:	dc000e17 	ldw	r16,56(sp)
 1004410:	dec01104 	addi	sp,sp,68
 1004414:	f800283a 	ret

01004418 <__floatsidf>:
 1004418:	2006d7fa 	srli	r3,r4,31
 100441c:	defff604 	addi	sp,sp,-40
 1004420:	008000c4 	movi	r2,3
 1004424:	dfc00915 	stw	ra,36(sp)
 1004428:	dcc00815 	stw	r19,32(sp)
 100442c:	dc800715 	stw	r18,28(sp)
 1004430:	dc400615 	stw	r17,24(sp)
 1004434:	dc000515 	stw	r16,20(sp)
 1004438:	d8800015 	stw	r2,0(sp)
 100443c:	d8c00115 	stw	r3,4(sp)
 1004440:	20000f1e 	bne	r4,zero,1004480 <__floatsidf+0x68>
 1004444:	00800084 	movi	r2,2
 1004448:	d8800015 	stw	r2,0(sp)
 100444c:	d809883a 	mov	r4,sp
 1004450:	1004c180 	call	1004c18 <__pack_d>
 1004454:	1009883a 	mov	r4,r2
 1004458:	180b883a 	mov	r5,r3
 100445c:	2005883a 	mov	r2,r4
 1004460:	2807883a 	mov	r3,r5
 1004464:	dfc00917 	ldw	ra,36(sp)
 1004468:	dcc00817 	ldw	r19,32(sp)
 100446c:	dc800717 	ldw	r18,28(sp)
 1004470:	dc400617 	ldw	r17,24(sp)
 1004474:	dc000517 	ldw	r16,20(sp)
 1004478:	dec00a04 	addi	sp,sp,40
 100447c:	f800283a 	ret
 1004480:	00800f04 	movi	r2,60
 1004484:	1807003a 	cmpeq	r3,r3,zero
 1004488:	d8800215 	stw	r2,8(sp)
 100448c:	18001126 	beq	r3,zero,10044d4 <__floatsidf+0xbc>
 1004490:	0027883a 	mov	r19,zero
 1004494:	2025883a 	mov	r18,r4
 1004498:	d9000315 	stw	r4,12(sp)
 100449c:	dcc00415 	stw	r19,16(sp)
 10044a0:	10048c80 	call	10048c8 <__clzsi2>
 10044a4:	11000744 	addi	r4,r2,29
 10044a8:	013fe80e 	bge	zero,r4,100444c <__floatsidf+0x34>
 10044ac:	10bfff44 	addi	r2,r2,-3
 10044b0:	10000c16 	blt	r2,zero,10044e4 <__floatsidf+0xcc>
 10044b4:	90a2983a 	sll	r17,r18,r2
 10044b8:	0021883a 	mov	r16,zero
 10044bc:	d8800217 	ldw	r2,8(sp)
 10044c0:	dc400415 	stw	r17,16(sp)
 10044c4:	dc000315 	stw	r16,12(sp)
 10044c8:	1105c83a 	sub	r2,r2,r4
 10044cc:	d8800215 	stw	r2,8(sp)
 10044d0:	003fde06 	br	100444c <__floatsidf+0x34>
 10044d4:	00a00034 	movhi	r2,32768
 10044d8:	20800a26 	beq	r4,r2,1004504 <__floatsidf+0xec>
 10044dc:	0109c83a 	sub	r4,zero,r4
 10044e0:	003feb06 	br	1004490 <__floatsidf+0x78>
 10044e4:	9006d07a 	srli	r3,r18,1
 10044e8:	008007c4 	movi	r2,31
 10044ec:	1105c83a 	sub	r2,r2,r4
 10044f0:	1886d83a 	srl	r3,r3,r2
 10044f4:	9922983a 	sll	r17,r19,r4
 10044f8:	9120983a 	sll	r16,r18,r4
 10044fc:	1c62b03a 	or	r17,r3,r17
 1004500:	003fee06 	br	10044bc <__floatsidf+0xa4>
 1004504:	0009883a 	mov	r4,zero
 1004508:	01707834 	movhi	r5,49632
 100450c:	003fd306 	br	100445c <__floatsidf+0x44>

01004510 <__fixdfsi>:
 1004510:	defff804 	addi	sp,sp,-32
 1004514:	2005883a 	mov	r2,r4
 1004518:	2807883a 	mov	r3,r5
 100451c:	d809883a 	mov	r4,sp
 1004520:	d9400204 	addi	r5,sp,8
 1004524:	d8c00115 	stw	r3,4(sp)
 1004528:	d8800015 	stw	r2,0(sp)
 100452c:	dfc00715 	stw	ra,28(sp)
 1004530:	1004f2c0 	call	1004f2c <__unpack_d>
 1004534:	d8c00217 	ldw	r3,8(sp)
 1004538:	00800084 	movi	r2,2
 100453c:	1880051e 	bne	r3,r2,1004554 <__fixdfsi+0x44>
 1004540:	0007883a 	mov	r3,zero
 1004544:	1805883a 	mov	r2,r3
 1004548:	dfc00717 	ldw	ra,28(sp)
 100454c:	dec00804 	addi	sp,sp,32
 1004550:	f800283a 	ret
 1004554:	00800044 	movi	r2,1
 1004558:	10fff92e 	bgeu	r2,r3,1004540 <__fixdfsi+0x30>
 100455c:	00800104 	movi	r2,4
 1004560:	18800426 	beq	r3,r2,1004574 <__fixdfsi+0x64>
 1004564:	d8c00417 	ldw	r3,16(sp)
 1004568:	183ff516 	blt	r3,zero,1004540 <__fixdfsi+0x30>
 100456c:	00800784 	movi	r2,30
 1004570:	10c0080e 	bge	r2,r3,1004594 <__fixdfsi+0x84>
 1004574:	d8800317 	ldw	r2,12(sp)
 1004578:	1000121e 	bne	r2,zero,10045c4 <__fixdfsi+0xb4>
 100457c:	00e00034 	movhi	r3,32768
 1004580:	18ffffc4 	addi	r3,r3,-1
 1004584:	1805883a 	mov	r2,r3
 1004588:	dfc00717 	ldw	ra,28(sp)
 100458c:	dec00804 	addi	sp,sp,32
 1004590:	f800283a 	ret
 1004594:	00800f04 	movi	r2,60
 1004598:	10d1c83a 	sub	r8,r2,r3
 100459c:	40bff804 	addi	r2,r8,-32
 10045a0:	d9800517 	ldw	r6,20(sp)
 10045a4:	d9c00617 	ldw	r7,24(sp)
 10045a8:	10000816 	blt	r2,zero,10045cc <__fixdfsi+0xbc>
 10045ac:	3888d83a 	srl	r4,r7,r2
 10045b0:	d8800317 	ldw	r2,12(sp)
 10045b4:	2007883a 	mov	r3,r4
 10045b8:	103fe226 	beq	r2,zero,1004544 <__fixdfsi+0x34>
 10045bc:	0107c83a 	sub	r3,zero,r4
 10045c0:	003fe006 	br	1004544 <__fixdfsi+0x34>
 10045c4:	00e00034 	movhi	r3,32768
 10045c8:	003fde06 	br	1004544 <__fixdfsi+0x34>
 10045cc:	39c7883a 	add	r3,r7,r7
 10045d0:	008007c4 	movi	r2,31
 10045d4:	1205c83a 	sub	r2,r2,r8
 10045d8:	1886983a 	sll	r3,r3,r2
 10045dc:	3208d83a 	srl	r4,r6,r8
 10045e0:	1908b03a 	or	r4,r3,r4
 10045e4:	003ff206 	br	10045b0 <__fixdfsi+0xa0>

010045e8 <__make_dp>:
 10045e8:	defff904 	addi	sp,sp,-28
 10045ec:	d8c00717 	ldw	r3,28(sp)
 10045f0:	d9000015 	stw	r4,0(sp)
 10045f4:	d809883a 	mov	r4,sp
 10045f8:	dfc00515 	stw	ra,20(sp)
 10045fc:	d9c00615 	stw	r7,24(sp)
 1004600:	d9400115 	stw	r5,4(sp)
 1004604:	d9800215 	stw	r6,8(sp)
 1004608:	d8c00415 	stw	r3,16(sp)
 100460c:	d9c00315 	stw	r7,12(sp)
 1004610:	1004c180 	call	1004c18 <__pack_d>
 1004614:	dfc00517 	ldw	ra,20(sp)
 1004618:	dec00704 	addi	sp,sp,28
 100461c:	f800283a 	ret

01004620 <udivmodsi4>:
 1004620:	29001b2e 	bgeu	r5,r4,1004690 <udivmodsi4+0x70>
 1004624:	28001a16 	blt	r5,zero,1004690 <udivmodsi4+0x70>
 1004628:	00800044 	movi	r2,1
 100462c:	0007883a 	mov	r3,zero
 1004630:	01c007c4 	movi	r7,31
 1004634:	00000306 	br	1004644 <udivmodsi4+0x24>
 1004638:	19c01326 	beq	r3,r7,1004688 <udivmodsi4+0x68>
 100463c:	18c00044 	addi	r3,r3,1
 1004640:	28000416 	blt	r5,zero,1004654 <udivmodsi4+0x34>
 1004644:	294b883a 	add	r5,r5,r5
 1004648:	1085883a 	add	r2,r2,r2
 100464c:	293ffa36 	bltu	r5,r4,1004638 <udivmodsi4+0x18>
 1004650:	10000d26 	beq	r2,zero,1004688 <udivmodsi4+0x68>
 1004654:	0007883a 	mov	r3,zero
 1004658:	21400236 	bltu	r4,r5,1004664 <udivmodsi4+0x44>
 100465c:	2149c83a 	sub	r4,r4,r5
 1004660:	1886b03a 	or	r3,r3,r2
 1004664:	1004d07a 	srli	r2,r2,1
 1004668:	280ad07a 	srli	r5,r5,1
 100466c:	103ffa1e 	bne	r2,zero,1004658 <udivmodsi4+0x38>
 1004670:	30000226 	beq	r6,zero,100467c <udivmodsi4+0x5c>
 1004674:	2005883a 	mov	r2,r4
 1004678:	f800283a 	ret
 100467c:	1809883a 	mov	r4,r3
 1004680:	2005883a 	mov	r2,r4
 1004684:	f800283a 	ret
 1004688:	0007883a 	mov	r3,zero
 100468c:	003ff806 	br	1004670 <udivmodsi4+0x50>
 1004690:	00800044 	movi	r2,1
 1004694:	0007883a 	mov	r3,zero
 1004698:	003fef06 	br	1004658 <udivmodsi4+0x38>

0100469c <__divsi3>:
 100469c:	defffe04 	addi	sp,sp,-8
 10046a0:	dc000015 	stw	r16,0(sp)
 10046a4:	dfc00115 	stw	ra,4(sp)
 10046a8:	0021883a 	mov	r16,zero
 10046ac:	20000c16 	blt	r4,zero,10046e0 <__divsi3+0x44>
 10046b0:	000d883a 	mov	r6,zero
 10046b4:	28000e16 	blt	r5,zero,10046f0 <__divsi3+0x54>
 10046b8:	10046200 	call	1004620 <udivmodsi4>
 10046bc:	1007883a 	mov	r3,r2
 10046c0:	8005003a 	cmpeq	r2,r16,zero
 10046c4:	1000011e 	bne	r2,zero,10046cc <__divsi3+0x30>
 10046c8:	00c7c83a 	sub	r3,zero,r3
 10046cc:	1805883a 	mov	r2,r3
 10046d0:	dfc00117 	ldw	ra,4(sp)
 10046d4:	dc000017 	ldw	r16,0(sp)
 10046d8:	dec00204 	addi	sp,sp,8
 10046dc:	f800283a 	ret
 10046e0:	0109c83a 	sub	r4,zero,r4
 10046e4:	04000044 	movi	r16,1
 10046e8:	000d883a 	mov	r6,zero
 10046ec:	283ff20e 	bge	r5,zero,10046b8 <__divsi3+0x1c>
 10046f0:	014bc83a 	sub	r5,zero,r5
 10046f4:	8021003a 	cmpeq	r16,r16,zero
 10046f8:	003fef06 	br	10046b8 <__divsi3+0x1c>

010046fc <__modsi3>:
 10046fc:	deffff04 	addi	sp,sp,-4
 1004700:	dfc00015 	stw	ra,0(sp)
 1004704:	01800044 	movi	r6,1
 1004708:	2807883a 	mov	r3,r5
 100470c:	20000416 	blt	r4,zero,1004720 <__modsi3+0x24>
 1004710:	28000c16 	blt	r5,zero,1004744 <__modsi3+0x48>
 1004714:	dfc00017 	ldw	ra,0(sp)
 1004718:	dec00104 	addi	sp,sp,4
 100471c:	10046201 	jmpi	1004620 <udivmodsi4>
 1004720:	0109c83a 	sub	r4,zero,r4
 1004724:	28000b16 	blt	r5,zero,1004754 <__modsi3+0x58>
 1004728:	180b883a 	mov	r5,r3
 100472c:	01800044 	movi	r6,1
 1004730:	10046200 	call	1004620 <udivmodsi4>
 1004734:	0085c83a 	sub	r2,zero,r2
 1004738:	dfc00017 	ldw	ra,0(sp)
 100473c:	dec00104 	addi	sp,sp,4
 1004740:	f800283a 	ret
 1004744:	014bc83a 	sub	r5,zero,r5
 1004748:	dfc00017 	ldw	ra,0(sp)
 100474c:	dec00104 	addi	sp,sp,4
 1004750:	10046201 	jmpi	1004620 <udivmodsi4>
 1004754:	0147c83a 	sub	r3,zero,r5
 1004758:	003ff306 	br	1004728 <__modsi3+0x2c>

0100475c <__udivsi3>:
 100475c:	000d883a 	mov	r6,zero
 1004760:	10046201 	jmpi	1004620 <udivmodsi4>

01004764 <__umodsi3>:
 1004764:	01800044 	movi	r6,1
 1004768:	10046201 	jmpi	1004620 <udivmodsi4>

0100476c <__mulsi3>:
 100476c:	20000a26 	beq	r4,zero,1004798 <__mulsi3+0x2c>
 1004770:	0007883a 	mov	r3,zero
 1004774:	2080004c 	andi	r2,r4,1
 1004778:	1005003a 	cmpeq	r2,r2,zero
 100477c:	2008d07a 	srli	r4,r4,1
 1004780:	1000011e 	bne	r2,zero,1004788 <__mulsi3+0x1c>
 1004784:	1947883a 	add	r3,r3,r5
 1004788:	294b883a 	add	r5,r5,r5
 100478c:	203ff91e 	bne	r4,zero,1004774 <__mulsi3+0x8>
 1004790:	1805883a 	mov	r2,r3
 1004794:	f800283a 	ret
 1004798:	0007883a 	mov	r3,zero
 100479c:	1805883a 	mov	r2,r3
 10047a0:	f800283a 	ret

010047a4 <__muldi3>:
 10047a4:	defff204 	addi	sp,sp,-56
 10047a8:	df000c15 	stw	fp,48(sp)
 10047ac:	3038d43a 	srli	fp,r6,16
 10047b0:	dd000815 	stw	r20,32(sp)
 10047b4:	dc400515 	stw	r17,20(sp)
 10047b8:	2028d43a 	srli	r20,r4,16
 10047bc:	247fffcc 	andi	r17,r4,65535
 10047c0:	dc000415 	stw	r16,16(sp)
 10047c4:	343fffcc 	andi	r16,r6,65535
 10047c8:	dcc00715 	stw	r19,28(sp)
 10047cc:	d9000015 	stw	r4,0(sp)
 10047d0:	2827883a 	mov	r19,r5
 10047d4:	8809883a 	mov	r4,r17
 10047d8:	d9400115 	stw	r5,4(sp)
 10047dc:	800b883a 	mov	r5,r16
 10047e0:	d9800215 	stw	r6,8(sp)
 10047e4:	dfc00d15 	stw	ra,52(sp)
 10047e8:	d9c00315 	stw	r7,12(sp)
 10047ec:	dd800a15 	stw	r22,40(sp)
 10047f0:	dd400915 	stw	r21,36(sp)
 10047f4:	302d883a 	mov	r22,r6
 10047f8:	ddc00b15 	stw	r23,44(sp)
 10047fc:	dc800615 	stw	r18,24(sp)
 1004800:	100476c0 	call	100476c <__mulsi3>
 1004804:	8809883a 	mov	r4,r17
 1004808:	e00b883a 	mov	r5,fp
 100480c:	102b883a 	mov	r21,r2
 1004810:	100476c0 	call	100476c <__mulsi3>
 1004814:	800b883a 	mov	r5,r16
 1004818:	a009883a 	mov	r4,r20
 100481c:	1023883a 	mov	r17,r2
 1004820:	100476c0 	call	100476c <__mulsi3>
 1004824:	a009883a 	mov	r4,r20
 1004828:	e00b883a 	mov	r5,fp
 100482c:	1021883a 	mov	r16,r2
 1004830:	100476c0 	call	100476c <__mulsi3>
 1004834:	a8ffffcc 	andi	r3,r21,65535
 1004838:	a82ad43a 	srli	r21,r21,16
 100483c:	8c23883a 	add	r17,r17,r16
 1004840:	1011883a 	mov	r8,r2
 1004844:	ac6b883a 	add	r21,r21,r17
 1004848:	a804943a 	slli	r2,r21,16
 100484c:	b009883a 	mov	r4,r22
 1004850:	980b883a 	mov	r5,r19
 1004854:	10c7883a 	add	r3,r2,r3
 1004858:	a812d43a 	srli	r9,r21,16
 100485c:	180d883a 	mov	r6,r3
 1004860:	ac00022e 	bgeu	r21,r16,100486c <__muldi3+0xc8>
 1004864:	00800074 	movhi	r2,1
 1004868:	4091883a 	add	r8,r8,r2
 100486c:	4267883a 	add	r19,r8,r9
 1004870:	302d883a 	mov	r22,r6
 1004874:	100476c0 	call	100476c <__mulsi3>
 1004878:	d9400317 	ldw	r5,12(sp)
 100487c:	d9000017 	ldw	r4,0(sp)
 1004880:	1023883a 	mov	r17,r2
 1004884:	100476c0 	call	100476c <__mulsi3>
 1004888:	14cb883a 	add	r5,r2,r19
 100488c:	894b883a 	add	r5,r17,r5
 1004890:	b005883a 	mov	r2,r22
 1004894:	2807883a 	mov	r3,r5
 1004898:	dfc00d17 	ldw	ra,52(sp)
 100489c:	df000c17 	ldw	fp,48(sp)
 10048a0:	ddc00b17 	ldw	r23,44(sp)
 10048a4:	dd800a17 	ldw	r22,40(sp)
 10048a8:	dd400917 	ldw	r21,36(sp)
 10048ac:	dd000817 	ldw	r20,32(sp)
 10048b0:	dcc00717 	ldw	r19,28(sp)
 10048b4:	dc800617 	ldw	r18,24(sp)
 10048b8:	dc400517 	ldw	r17,20(sp)
 10048bc:	dc000417 	ldw	r16,16(sp)
 10048c0:	dec00e04 	addi	sp,sp,56
 10048c4:	f800283a 	ret

010048c8 <__clzsi2>:
 10048c8:	00bfffd4 	movui	r2,65535
 10048cc:	11000e36 	bltu	r2,r4,1004908 <__clzsi2+0x40>
 10048d0:	00803fc4 	movi	r2,255
 10048d4:	01400204 	movi	r5,8
 10048d8:	0007883a 	mov	r3,zero
 10048dc:	11001036 	bltu	r2,r4,1004920 <__clzsi2+0x58>
 10048e0:	000b883a 	mov	r5,zero
 10048e4:	20c6d83a 	srl	r3,r4,r3
 10048e8:	00804074 	movhi	r2,257
 10048ec:	1089b204 	addi	r2,r2,9928
 10048f0:	1887883a 	add	r3,r3,r2
 10048f4:	18800003 	ldbu	r2,0(r3)
 10048f8:	00c00804 	movi	r3,32
 10048fc:	2885883a 	add	r2,r5,r2
 1004900:	1885c83a 	sub	r2,r3,r2
 1004904:	f800283a 	ret
 1004908:	01400404 	movi	r5,16
 100490c:	00804034 	movhi	r2,256
 1004910:	10bfffc4 	addi	r2,r2,-1
 1004914:	2807883a 	mov	r3,r5
 1004918:	113ff22e 	bgeu	r2,r4,10048e4 <__clzsi2+0x1c>
 100491c:	01400604 	movi	r5,24
 1004920:	2807883a 	mov	r3,r5
 1004924:	20c6d83a 	srl	r3,r4,r3
 1004928:	00804074 	movhi	r2,257
 100492c:	1089b204 	addi	r2,r2,9928
 1004930:	1887883a 	add	r3,r3,r2
 1004934:	18800003 	ldbu	r2,0(r3)
 1004938:	00c00804 	movi	r3,32
 100493c:	2885883a 	add	r2,r5,r2
 1004940:	1885c83a 	sub	r2,r3,r2
 1004944:	f800283a 	ret

01004948 <__pack_f>:
 1004948:	20c00017 	ldw	r3,0(r4)
 100494c:	01c00044 	movi	r7,1
 1004950:	21800317 	ldw	r6,12(r4)
 1004954:	21400117 	ldw	r5,4(r4)
 1004958:	38c02d2e 	bgeu	r7,r3,1004a10 <__pack_f+0xc8>
 100495c:	00800104 	movi	r2,4
 1004960:	18802826 	beq	r3,r2,1004a04 <__pack_f+0xbc>
 1004964:	00800084 	movi	r2,2
 1004968:	18800126 	beq	r3,r2,1004970 <__pack_f+0x28>
 100496c:	3000101e 	bne	r6,zero,10049b0 <__pack_f+0x68>
 1004970:	000d883a 	mov	r6,zero
 1004974:	0007883a 	mov	r3,zero
 1004978:	19003fcc 	andi	r4,r3,255
 100497c:	200895fa 	slli	r4,r4,23
 1004980:	00c02034 	movhi	r3,128
 1004984:	18ffffc4 	addi	r3,r3,-1
 1004988:	30c6703a 	and	r3,r6,r3
 100498c:	10a0002c 	andhi	r2,r2,32768
 1004990:	10c4b03a 	or	r2,r2,r3
 1004994:	280a97fa 	slli	r5,r5,31
 1004998:	1104b03a 	or	r2,r2,r4
 100499c:	00e00034 	movhi	r3,32768
 10049a0:	18ffffc4 	addi	r3,r3,-1
 10049a4:	10c4703a 	and	r2,r2,r3
 10049a8:	1144b03a 	or	r2,r2,r5
 10049ac:	f800283a 	ret
 10049b0:	21000217 	ldw	r4,8(r4)
 10049b4:	00bfe084 	movi	r2,-126
 10049b8:	20801b16 	blt	r4,r2,1004a28 <__pack_f+0xe0>
 10049bc:	00801fc4 	movi	r2,127
 10049c0:	11001016 	blt	r2,r4,1004a04 <__pack_f+0xbc>
 10049c4:	308e703a 	and	r7,r6,r2
 10049c8:	2087883a 	add	r3,r4,r2
 10049cc:	00801004 	movi	r2,64
 10049d0:	38800526 	beq	r7,r2,10049e8 <__pack_f+0xa0>
 10049d4:	31800fc4 	addi	r6,r6,63
 10049d8:	30000716 	blt	r6,zero,10049f8 <__pack_f+0xb0>
 10049dc:	300490ba 	slli	r2,r6,2
 10049e0:	100cd27a 	srli	r6,r2,9
 10049e4:	003fe406 	br	1004978 <__pack_f+0x30>
 10049e8:	3080200c 	andi	r2,r6,128
 10049ec:	103ffa26 	beq	r2,zero,10049d8 <__pack_f+0x90>
 10049f0:	31cd883a 	add	r6,r6,r7
 10049f4:	003ff806 	br	10049d8 <__pack_f+0x90>
 10049f8:	300cd07a 	srli	r6,r6,1
 10049fc:	18c00044 	addi	r3,r3,1
 1004a00:	003ff606 	br	10049dc <__pack_f+0x94>
 1004a04:	000d883a 	mov	r6,zero
 1004a08:	00ffffc4 	movi	r3,-1
 1004a0c:	003fda06 	br	1004978 <__pack_f+0x30>
 1004a10:	31800434 	orhi	r6,r6,16
 1004a14:	00802034 	movhi	r2,128
 1004a18:	10bfffc4 	addi	r2,r2,-1
 1004a1c:	308c703a 	and	r6,r6,r2
 1004a20:	00ffffc4 	movi	r3,-1
 1004a24:	003fd406 	br	1004978 <__pack_f+0x30>
 1004a28:	1109c83a 	sub	r4,r2,r4
 1004a2c:	00800644 	movi	r2,25
 1004a30:	11001216 	blt	r2,r4,1004a7c <__pack_f+0x134>
 1004a34:	3904983a 	sll	r2,r7,r4
 1004a38:	3106d83a 	srl	r3,r6,r4
 1004a3c:	10bfffc4 	addi	r2,r2,-1
 1004a40:	3084703a 	and	r2,r6,r2
 1004a44:	1004c03a 	cmpne	r2,r2,zero
 1004a48:	1886b03a 	or	r3,r3,r2
 1004a4c:	19001fcc 	andi	r4,r3,127
 1004a50:	00801004 	movi	r2,64
 1004a54:	20800c26 	beq	r4,r2,1004a88 <__pack_f+0x140>
 1004a58:	18c00fc4 	addi	r3,r3,63
 1004a5c:	00900034 	movhi	r2,16384
 1004a60:	10bfffc4 	addi	r2,r2,-1
 1004a64:	180cd1fa 	srli	r6,r3,7
 1004a68:	10c7803a 	cmpltu	r3,r2,r3
 1004a6c:	00802034 	movhi	r2,128
 1004a70:	10bfffc4 	addi	r2,r2,-1
 1004a74:	308c703a 	and	r6,r6,r2
 1004a78:	003fbf06 	br	1004978 <__pack_f+0x30>
 1004a7c:	0007883a 	mov	r3,zero
 1004a80:	000d883a 	mov	r6,zero
 1004a84:	003ff906 	br	1004a6c <__pack_f+0x124>
 1004a88:	1880200c 	andi	r2,r3,128
 1004a8c:	10000126 	beq	r2,zero,1004a94 <__pack_f+0x14c>
 1004a90:	1907883a 	add	r3,r3,r4
 1004a94:	180cd1fa 	srli	r6,r3,7
 1004a98:	00900034 	movhi	r2,16384
 1004a9c:	10bfffc4 	addi	r2,r2,-1
 1004aa0:	10c7803a 	cmpltu	r3,r2,r3
 1004aa4:	003ff106 	br	1004a6c <__pack_f+0x124>

01004aa8 <__unpack_f>:
 1004aa8:	21800017 	ldw	r6,0(r4)
 1004aac:	00c02034 	movhi	r3,128
 1004ab0:	18ffffc4 	addi	r3,r3,-1
 1004ab4:	3004d5fa 	srli	r2,r6,23
 1004ab8:	3008d7fa 	srli	r4,r6,31
 1004abc:	30ce703a 	and	r7,r6,r3
 1004ac0:	10c03fcc 	andi	r3,r2,255
 1004ac4:	29000115 	stw	r4,4(r5)
 1004ac8:	1800131e 	bne	r3,zero,1004b18 <__unpack_f+0x70>
 1004acc:	38000f26 	beq	r7,zero,1004b0c <__unpack_f+0x64>
 1004ad0:	380691fa 	slli	r3,r7,7
 1004ad4:	01bfe084 	movi	r6,-126
 1004ad8:	008000c4 	movi	r2,3
 1004adc:	01100034 	movhi	r4,16384
 1004ae0:	213fffc4 	addi	r4,r4,-1
 1004ae4:	28800015 	stw	r2,0(r5)
 1004ae8:	29800215 	stw	r6,8(r5)
 1004aec:	20c00536 	bltu	r4,r3,1004b04 <__unpack_f+0x5c>
 1004af0:	3005883a 	mov	r2,r6
 1004af4:	18c7883a 	add	r3,r3,r3
 1004af8:	10bfffc4 	addi	r2,r2,-1
 1004afc:	20fffd2e 	bgeu	r4,r3,1004af4 <__unpack_f+0x4c>
 1004b00:	28800215 	stw	r2,8(r5)
 1004b04:	28c00315 	stw	r3,12(r5)
 1004b08:	f800283a 	ret
 1004b0c:	00800084 	movi	r2,2
 1004b10:	28800015 	stw	r2,0(r5)
 1004b14:	f800283a 	ret
 1004b18:	00803fc4 	movi	r2,255
 1004b1c:	18800826 	beq	r3,r2,1004b40 <__unpack_f+0x98>
 1004b20:	380491fa 	slli	r2,r7,7
 1004b24:	18ffe044 	addi	r3,r3,-127
 1004b28:	28c00215 	stw	r3,8(r5)
 1004b2c:	10900034 	orhi	r2,r2,16384
 1004b30:	28800315 	stw	r2,12(r5)
 1004b34:	008000c4 	movi	r2,3
 1004b38:	28800015 	stw	r2,0(r5)
 1004b3c:	f800283a 	ret
 1004b40:	3800031e 	bne	r7,zero,1004b50 <__unpack_f+0xa8>
 1004b44:	00800104 	movi	r2,4
 1004b48:	28800015 	stw	r2,0(r5)
 1004b4c:	f800283a 	ret
 1004b50:	3080042c 	andhi	r2,r6,16
 1004b54:	10000426 	beq	r2,zero,1004b68 <__unpack_f+0xc0>
 1004b58:	00800044 	movi	r2,1
 1004b5c:	28800015 	stw	r2,0(r5)
 1004b60:	29c00315 	stw	r7,12(r5)
 1004b64:	f800283a 	ret
 1004b68:	28000015 	stw	zero,0(r5)
 1004b6c:	003ffc06 	br	1004b60 <__unpack_f+0xb8>

01004b70 <__fpcmp_parts_f>:
 1004b70:	21800017 	ldw	r6,0(r4)
 1004b74:	00c00044 	movi	r3,1
 1004b78:	19800a2e 	bgeu	r3,r6,1004ba4 <__fpcmp_parts_f+0x34>
 1004b7c:	28800017 	ldw	r2,0(r5)
 1004b80:	1880082e 	bgeu	r3,r2,1004ba4 <__fpcmp_parts_f+0x34>
 1004b84:	00c00104 	movi	r3,4
 1004b88:	30c01e26 	beq	r6,r3,1004c04 <__fpcmp_parts_f+0x94>
 1004b8c:	10c01a26 	beq	r2,r3,1004bf8 <__fpcmp_parts_f+0x88>
 1004b90:	00c00084 	movi	r3,2
 1004b94:	30c00526 	beq	r6,r3,1004bac <__fpcmp_parts_f+0x3c>
 1004b98:	10c0071e 	bne	r2,r3,1004bb8 <__fpcmp_parts_f+0x48>
 1004b9c:	20800117 	ldw	r2,4(r4)
 1004ba0:	1000091e 	bne	r2,zero,1004bc8 <__fpcmp_parts_f+0x58>
 1004ba4:	00800044 	movi	r2,1
 1004ba8:	f800283a 	ret
 1004bac:	10c0121e 	bne	r2,r3,1004bf8 <__fpcmp_parts_f+0x88>
 1004bb0:	0005883a 	mov	r2,zero
 1004bb4:	f800283a 	ret
 1004bb8:	20c00117 	ldw	r3,4(r4)
 1004bbc:	28800117 	ldw	r2,4(r5)
 1004bc0:	18800326 	beq	r3,r2,1004bd0 <__fpcmp_parts_f+0x60>
 1004bc4:	183ff726 	beq	r3,zero,1004ba4 <__fpcmp_parts_f+0x34>
 1004bc8:	00bfffc4 	movi	r2,-1
 1004bcc:	f800283a 	ret
 1004bd0:	21800217 	ldw	r6,8(r4)
 1004bd4:	28800217 	ldw	r2,8(r5)
 1004bd8:	11bffa16 	blt	r2,r6,1004bc4 <__fpcmp_parts_f+0x54>
 1004bdc:	30800416 	blt	r6,r2,1004bf0 <__fpcmp_parts_f+0x80>
 1004be0:	21000317 	ldw	r4,12(r4)
 1004be4:	29400317 	ldw	r5,12(r5)
 1004be8:	293ff636 	bltu	r5,r4,1004bc4 <__fpcmp_parts_f+0x54>
 1004bec:	217ff02e 	bgeu	r4,r5,1004bb0 <__fpcmp_parts_f+0x40>
 1004bf0:	183fec1e 	bne	r3,zero,1004ba4 <__fpcmp_parts_f+0x34>
 1004bf4:	003ff406 	br	1004bc8 <__fpcmp_parts_f+0x58>
 1004bf8:	28800117 	ldw	r2,4(r5)
 1004bfc:	103fe91e 	bne	r2,zero,1004ba4 <__fpcmp_parts_f+0x34>
 1004c00:	003ff106 	br	1004bc8 <__fpcmp_parts_f+0x58>
 1004c04:	11bfe51e 	bne	r2,r6,1004b9c <__fpcmp_parts_f+0x2c>
 1004c08:	28c00117 	ldw	r3,4(r5)
 1004c0c:	20800117 	ldw	r2,4(r4)
 1004c10:	1885c83a 	sub	r2,r3,r2
 1004c14:	f800283a 	ret

01004c18 <__pack_d>:
 1004c18:	20c00017 	ldw	r3,0(r4)
 1004c1c:	defffd04 	addi	sp,sp,-12
 1004c20:	dc000015 	stw	r16,0(sp)
 1004c24:	dc800215 	stw	r18,8(sp)
 1004c28:	dc400115 	stw	r17,4(sp)
 1004c2c:	00800044 	movi	r2,1
 1004c30:	22000317 	ldw	r8,12(r4)
 1004c34:	001f883a 	mov	r15,zero
 1004c38:	22400417 	ldw	r9,16(r4)
 1004c3c:	24000117 	ldw	r16,4(r4)
 1004c40:	10c0552e 	bgeu	r2,r3,1004d98 <__pack_d+0x180>
 1004c44:	00800104 	movi	r2,4
 1004c48:	18804f26 	beq	r3,r2,1004d88 <__pack_d+0x170>
 1004c4c:	00800084 	movi	r2,2
 1004c50:	18800226 	beq	r3,r2,1004c5c <__pack_d+0x44>
 1004c54:	4244b03a 	or	r2,r8,r9
 1004c58:	10001a1e 	bne	r2,zero,1004cc4 <__pack_d+0xac>
 1004c5c:	000d883a 	mov	r6,zero
 1004c60:	000f883a 	mov	r7,zero
 1004c64:	0011883a 	mov	r8,zero
 1004c68:	00800434 	movhi	r2,16
 1004c6c:	10bfffc4 	addi	r2,r2,-1
 1004c70:	301d883a 	mov	r14,r6
 1004c74:	3884703a 	and	r2,r7,r2
 1004c78:	400a953a 	slli	r5,r8,20
 1004c7c:	79bffc2c 	andhi	r6,r15,65520
 1004c80:	308cb03a 	or	r6,r6,r2
 1004c84:	00e00434 	movhi	r3,32784
 1004c88:	18ffffc4 	addi	r3,r3,-1
 1004c8c:	800497fa 	slli	r2,r16,31
 1004c90:	30c6703a 	and	r3,r6,r3
 1004c94:	1946b03a 	or	r3,r3,r5
 1004c98:	01600034 	movhi	r5,32768
 1004c9c:	297fffc4 	addi	r5,r5,-1
 1004ca0:	194a703a 	and	r5,r3,r5
 1004ca4:	288ab03a 	or	r5,r5,r2
 1004ca8:	2807883a 	mov	r3,r5
 1004cac:	7005883a 	mov	r2,r14
 1004cb0:	dc800217 	ldw	r18,8(sp)
 1004cb4:	dc400117 	ldw	r17,4(sp)
 1004cb8:	dc000017 	ldw	r16,0(sp)
 1004cbc:	dec00304 	addi	sp,sp,12
 1004cc0:	f800283a 	ret
 1004cc4:	21000217 	ldw	r4,8(r4)
 1004cc8:	00bf0084 	movi	r2,-1022
 1004ccc:	20803f16 	blt	r4,r2,1004dcc <__pack_d+0x1b4>
 1004cd0:	0080ffc4 	movi	r2,1023
 1004cd4:	11002c16 	blt	r2,r4,1004d88 <__pack_d+0x170>
 1004cd8:	00803fc4 	movi	r2,255
 1004cdc:	408c703a 	and	r6,r8,r2
 1004ce0:	00802004 	movi	r2,128
 1004ce4:	0007883a 	mov	r3,zero
 1004ce8:	000f883a 	mov	r7,zero
 1004cec:	2280ffc4 	addi	r10,r4,1023
 1004cf0:	30801e26 	beq	r6,r2,1004d6c <__pack_d+0x154>
 1004cf4:	00801fc4 	movi	r2,127
 1004cf8:	4089883a 	add	r4,r8,r2
 1004cfc:	220d803a 	cmpltu	r6,r4,r8
 1004d00:	324d883a 	add	r6,r6,r9
 1004d04:	2011883a 	mov	r8,r4
 1004d08:	3013883a 	mov	r9,r6
 1004d0c:	00880034 	movhi	r2,8192
 1004d10:	10bfffc4 	addi	r2,r2,-1
 1004d14:	12400d36 	bltu	r2,r9,1004d4c <__pack_d+0x134>
 1004d18:	4804963a 	slli	r2,r9,24
 1004d1c:	400cd23a 	srli	r6,r8,8
 1004d20:	480ed23a 	srli	r7,r9,8
 1004d24:	013fffc4 	movi	r4,-1
 1004d28:	118cb03a 	or	r6,r2,r6
 1004d2c:	01400434 	movhi	r5,16
 1004d30:	297fffc4 	addi	r5,r5,-1
 1004d34:	3104703a 	and	r2,r6,r4
 1004d38:	3946703a 	and	r3,r7,r5
 1004d3c:	5201ffcc 	andi	r8,r10,2047
 1004d40:	100d883a 	mov	r6,r2
 1004d44:	180f883a 	mov	r7,r3
 1004d48:	003fc706 	br	1004c68 <__pack_d+0x50>
 1004d4c:	480897fa 	slli	r4,r9,31
 1004d50:	4004d07a 	srli	r2,r8,1
 1004d54:	4806d07a 	srli	r3,r9,1
 1004d58:	52800044 	addi	r10,r10,1
 1004d5c:	2084b03a 	or	r2,r4,r2
 1004d60:	1011883a 	mov	r8,r2
 1004d64:	1813883a 	mov	r9,r3
 1004d68:	003feb06 	br	1004d18 <__pack_d+0x100>
 1004d6c:	383fe11e 	bne	r7,zero,1004cf4 <__pack_d+0xdc>
 1004d70:	01004004 	movi	r4,256
 1004d74:	4104703a 	and	r2,r8,r4
 1004d78:	10c4b03a 	or	r2,r2,r3
 1004d7c:	103fe326 	beq	r2,zero,1004d0c <__pack_d+0xf4>
 1004d80:	3005883a 	mov	r2,r6
 1004d84:	003fdc06 	br	1004cf8 <__pack_d+0xe0>
 1004d88:	000d883a 	mov	r6,zero
 1004d8c:	000f883a 	mov	r7,zero
 1004d90:	0201ffc4 	movi	r8,2047
 1004d94:	003fb406 	br	1004c68 <__pack_d+0x50>
 1004d98:	0005883a 	mov	r2,zero
 1004d9c:	00c00234 	movhi	r3,8
 1004da0:	408cb03a 	or	r6,r8,r2
 1004da4:	48ceb03a 	or	r7,r9,r3
 1004da8:	013fffc4 	movi	r4,-1
 1004dac:	01400434 	movhi	r5,16
 1004db0:	297fffc4 	addi	r5,r5,-1
 1004db4:	3104703a 	and	r2,r6,r4
 1004db8:	3946703a 	and	r3,r7,r5
 1004dbc:	100d883a 	mov	r6,r2
 1004dc0:	180f883a 	mov	r7,r3
 1004dc4:	0201ffc4 	movi	r8,2047
 1004dc8:	003fa706 	br	1004c68 <__pack_d+0x50>
 1004dcc:	1109c83a 	sub	r4,r2,r4
 1004dd0:	00800e04 	movi	r2,56
 1004dd4:	11004316 	blt	r2,r4,1004ee4 <__pack_d+0x2cc>
 1004dd8:	21fff804 	addi	r7,r4,-32
 1004ddc:	38004516 	blt	r7,zero,1004ef4 <__pack_d+0x2dc>
 1004de0:	49d8d83a 	srl	r12,r9,r7
 1004de4:	001b883a 	mov	r13,zero
 1004de8:	0023883a 	mov	r17,zero
 1004dec:	01400044 	movi	r5,1
 1004df0:	0025883a 	mov	r18,zero
 1004df4:	38004716 	blt	r7,zero,1004f14 <__pack_d+0x2fc>
 1004df8:	29d6983a 	sll	r11,r5,r7
 1004dfc:	0015883a 	mov	r10,zero
 1004e00:	00bfffc4 	movi	r2,-1
 1004e04:	5089883a 	add	r4,r10,r2
 1004e08:	588b883a 	add	r5,r11,r2
 1004e0c:	228d803a 	cmpltu	r6,r4,r10
 1004e10:	314b883a 	add	r5,r6,r5
 1004e14:	4104703a 	and	r2,r8,r4
 1004e18:	4946703a 	and	r3,r9,r5
 1004e1c:	10c4b03a 	or	r2,r2,r3
 1004e20:	10000226 	beq	r2,zero,1004e2c <__pack_d+0x214>
 1004e24:	04400044 	movi	r17,1
 1004e28:	0025883a 	mov	r18,zero
 1004e2c:	00803fc4 	movi	r2,255
 1004e30:	644eb03a 	or	r7,r12,r17
 1004e34:	3892703a 	and	r9,r7,r2
 1004e38:	00802004 	movi	r2,128
 1004e3c:	6c90b03a 	or	r8,r13,r18
 1004e40:	0015883a 	mov	r10,zero
 1004e44:	48801626 	beq	r9,r2,1004ea0 <__pack_d+0x288>
 1004e48:	01001fc4 	movi	r4,127
 1004e4c:	3905883a 	add	r2,r7,r4
 1004e50:	11cd803a 	cmpltu	r6,r2,r7
 1004e54:	320d883a 	add	r6,r6,r8
 1004e58:	100f883a 	mov	r7,r2
 1004e5c:	00840034 	movhi	r2,4096
 1004e60:	10bfffc4 	addi	r2,r2,-1
 1004e64:	3011883a 	mov	r8,r6
 1004e68:	0007883a 	mov	r3,zero
 1004e6c:	11801b36 	bltu	r2,r6,1004edc <__pack_d+0x2c4>
 1004e70:	4004963a 	slli	r2,r8,24
 1004e74:	3808d23a 	srli	r4,r7,8
 1004e78:	400ad23a 	srli	r5,r8,8
 1004e7c:	1813883a 	mov	r9,r3
 1004e80:	1108b03a 	or	r4,r2,r4
 1004e84:	00bfffc4 	movi	r2,-1
 1004e88:	00c00434 	movhi	r3,16
 1004e8c:	18ffffc4 	addi	r3,r3,-1
 1004e90:	208c703a 	and	r6,r4,r2
 1004e94:	28ce703a 	and	r7,r5,r3
 1004e98:	4a01ffcc 	andi	r8,r9,2047
 1004e9c:	003f7206 	br	1004c68 <__pack_d+0x50>
 1004ea0:	503fe91e 	bne	r10,zero,1004e48 <__pack_d+0x230>
 1004ea4:	01004004 	movi	r4,256
 1004ea8:	3904703a 	and	r2,r7,r4
 1004eac:	0007883a 	mov	r3,zero
 1004eb0:	10c4b03a 	or	r2,r2,r3
 1004eb4:	10000626 	beq	r2,zero,1004ed0 <__pack_d+0x2b8>
 1004eb8:	3a45883a 	add	r2,r7,r9
 1004ebc:	11cd803a 	cmpltu	r6,r2,r7
 1004ec0:	320d883a 	add	r6,r6,r8
 1004ec4:	100f883a 	mov	r7,r2
 1004ec8:	3011883a 	mov	r8,r6
 1004ecc:	0007883a 	mov	r3,zero
 1004ed0:	00840034 	movhi	r2,4096
 1004ed4:	10bfffc4 	addi	r2,r2,-1
 1004ed8:	123fe52e 	bgeu	r2,r8,1004e70 <__pack_d+0x258>
 1004edc:	00c00044 	movi	r3,1
 1004ee0:	003fe306 	br	1004e70 <__pack_d+0x258>
 1004ee4:	0009883a 	mov	r4,zero
 1004ee8:	0013883a 	mov	r9,zero
 1004eec:	000b883a 	mov	r5,zero
 1004ef0:	003fe406 	br	1004e84 <__pack_d+0x26c>
 1004ef4:	4a47883a 	add	r3,r9,r9
 1004ef8:	008007c4 	movi	r2,31
 1004efc:	1105c83a 	sub	r2,r2,r4
 1004f00:	1886983a 	sll	r3,r3,r2
 1004f04:	4118d83a 	srl	r12,r8,r4
 1004f08:	491ad83a 	srl	r13,r9,r4
 1004f0c:	1b18b03a 	or	r12,r3,r12
 1004f10:	003fb506 	br	1004de8 <__pack_d+0x1d0>
 1004f14:	2806d07a 	srli	r3,r5,1
 1004f18:	008007c4 	movi	r2,31
 1004f1c:	1105c83a 	sub	r2,r2,r4
 1004f20:	1896d83a 	srl	r11,r3,r2
 1004f24:	2914983a 	sll	r10,r5,r4
 1004f28:	003fb506 	br	1004e00 <__pack_d+0x1e8>

01004f2c <__unpack_d>:
 1004f2c:	20c00117 	ldw	r3,4(r4)
 1004f30:	22400017 	ldw	r9,0(r4)
 1004f34:	00800434 	movhi	r2,16
 1004f38:	10bfffc4 	addi	r2,r2,-1
 1004f3c:	1808d53a 	srli	r4,r3,20
 1004f40:	180cd7fa 	srli	r6,r3,31
 1004f44:	1894703a 	and	r10,r3,r2
 1004f48:	2201ffcc 	andi	r8,r4,2047
 1004f4c:	281b883a 	mov	r13,r5
 1004f50:	4817883a 	mov	r11,r9
 1004f54:	29800115 	stw	r6,4(r5)
 1004f58:	5019883a 	mov	r12,r10
 1004f5c:	40001e1e 	bne	r8,zero,1004fd8 <__unpack_d+0xac>
 1004f60:	4a84b03a 	or	r2,r9,r10
 1004f64:	10001926 	beq	r2,zero,1004fcc <__unpack_d+0xa0>
 1004f68:	4804d63a 	srli	r2,r9,24
 1004f6c:	500c923a 	slli	r6,r10,8
 1004f70:	013f0084 	movi	r4,-1022
 1004f74:	00c40034 	movhi	r3,4096
 1004f78:	18ffffc4 	addi	r3,r3,-1
 1004f7c:	118cb03a 	or	r6,r2,r6
 1004f80:	008000c4 	movi	r2,3
 1004f84:	480a923a 	slli	r5,r9,8
 1004f88:	68800015 	stw	r2,0(r13)
 1004f8c:	69000215 	stw	r4,8(r13)
 1004f90:	19800b36 	bltu	r3,r6,1004fc0 <__unpack_d+0x94>
 1004f94:	200f883a 	mov	r7,r4
 1004f98:	1811883a 	mov	r8,r3
 1004f9c:	2945883a 	add	r2,r5,r5
 1004fa0:	1149803a 	cmpltu	r4,r2,r5
 1004fa4:	3187883a 	add	r3,r6,r6
 1004fa8:	20c9883a 	add	r4,r4,r3
 1004fac:	100b883a 	mov	r5,r2
 1004fb0:	200d883a 	mov	r6,r4
 1004fb4:	39ffffc4 	addi	r7,r7,-1
 1004fb8:	413ff82e 	bgeu	r8,r4,1004f9c <__unpack_d+0x70>
 1004fbc:	69c00215 	stw	r7,8(r13)
 1004fc0:	69800415 	stw	r6,16(r13)
 1004fc4:	69400315 	stw	r5,12(r13)
 1004fc8:	f800283a 	ret
 1004fcc:	00800084 	movi	r2,2
 1004fd0:	28800015 	stw	r2,0(r5)
 1004fd4:	f800283a 	ret
 1004fd8:	0081ffc4 	movi	r2,2047
 1004fdc:	40800f26 	beq	r8,r2,100501c <__unpack_d+0xf0>
 1004fe0:	480cd63a 	srli	r6,r9,24
 1004fe4:	5006923a 	slli	r3,r10,8
 1004fe8:	4804923a 	slli	r2,r9,8
 1004fec:	0009883a 	mov	r4,zero
 1004ff0:	30c6b03a 	or	r3,r6,r3
 1004ff4:	01440034 	movhi	r5,4096
 1004ff8:	110cb03a 	or	r6,r2,r4
 1004ffc:	423f0044 	addi	r8,r8,-1023
 1005000:	194eb03a 	or	r7,r3,r5
 1005004:	008000c4 	movi	r2,3
 1005008:	69c00415 	stw	r7,16(r13)
 100500c:	6a000215 	stw	r8,8(r13)
 1005010:	68800015 	stw	r2,0(r13)
 1005014:	69800315 	stw	r6,12(r13)
 1005018:	f800283a 	ret
 100501c:	4a84b03a 	or	r2,r9,r10
 1005020:	1000031e 	bne	r2,zero,1005030 <__unpack_d+0x104>
 1005024:	00800104 	movi	r2,4
 1005028:	28800015 	stw	r2,0(r5)
 100502c:	f800283a 	ret
 1005030:	0009883a 	mov	r4,zero
 1005034:	01400234 	movhi	r5,8
 1005038:	4904703a 	and	r2,r9,r4
 100503c:	5146703a 	and	r3,r10,r5
 1005040:	10c4b03a 	or	r2,r2,r3
 1005044:	10000526 	beq	r2,zero,100505c <__unpack_d+0x130>
 1005048:	00800044 	movi	r2,1
 100504c:	68800015 	stw	r2,0(r13)
 1005050:	6b000415 	stw	r12,16(r13)
 1005054:	6ac00315 	stw	r11,12(r13)
 1005058:	f800283a 	ret
 100505c:	68000015 	stw	zero,0(r13)
 1005060:	003ffb06 	br	1005050 <__unpack_d+0x124>

01005064 <__fpcmp_parts_d>:
 1005064:	21800017 	ldw	r6,0(r4)
 1005068:	00c00044 	movi	r3,1
 100506c:	19800a2e 	bgeu	r3,r6,1005098 <__fpcmp_parts_d+0x34>
 1005070:	28800017 	ldw	r2,0(r5)
 1005074:	1880082e 	bgeu	r3,r2,1005098 <__fpcmp_parts_d+0x34>
 1005078:	00c00104 	movi	r3,4
 100507c:	30c02626 	beq	r6,r3,1005118 <__fpcmp_parts_d+0xb4>
 1005080:	10c02226 	beq	r2,r3,100510c <__fpcmp_parts_d+0xa8>
 1005084:	00c00084 	movi	r3,2
 1005088:	30c00526 	beq	r6,r3,10050a0 <__fpcmp_parts_d+0x3c>
 100508c:	10c0071e 	bne	r2,r3,10050ac <__fpcmp_parts_d+0x48>
 1005090:	20800117 	ldw	r2,4(r4)
 1005094:	1000091e 	bne	r2,zero,10050bc <__fpcmp_parts_d+0x58>
 1005098:	00800044 	movi	r2,1
 100509c:	f800283a 	ret
 10050a0:	10c01a1e 	bne	r2,r3,100510c <__fpcmp_parts_d+0xa8>
 10050a4:	0005883a 	mov	r2,zero
 10050a8:	f800283a 	ret
 10050ac:	22000117 	ldw	r8,4(r4)
 10050b0:	28800117 	ldw	r2,4(r5)
 10050b4:	40800326 	beq	r8,r2,10050c4 <__fpcmp_parts_d+0x60>
 10050b8:	403ff726 	beq	r8,zero,1005098 <__fpcmp_parts_d+0x34>
 10050bc:	00bfffc4 	movi	r2,-1
 10050c0:	f800283a 	ret
 10050c4:	20c00217 	ldw	r3,8(r4)
 10050c8:	28800217 	ldw	r2,8(r5)
 10050cc:	10fffa16 	blt	r2,r3,10050b8 <__fpcmp_parts_d+0x54>
 10050d0:	18800916 	blt	r3,r2,10050f8 <__fpcmp_parts_d+0x94>
 10050d4:	21c00417 	ldw	r7,16(r4)
 10050d8:	28c00417 	ldw	r3,16(r5)
 10050dc:	21800317 	ldw	r6,12(r4)
 10050e0:	28800317 	ldw	r2,12(r5)
 10050e4:	19fff436 	bltu	r3,r7,10050b8 <__fpcmp_parts_d+0x54>
 10050e8:	38c00526 	beq	r7,r3,1005100 <__fpcmp_parts_d+0x9c>
 10050ec:	38c00236 	bltu	r7,r3,10050f8 <__fpcmp_parts_d+0x94>
 10050f0:	19ffec1e 	bne	r3,r7,10050a4 <__fpcmp_parts_d+0x40>
 10050f4:	30bfeb2e 	bgeu	r6,r2,10050a4 <__fpcmp_parts_d+0x40>
 10050f8:	403fe71e 	bne	r8,zero,1005098 <__fpcmp_parts_d+0x34>
 10050fc:	003fef06 	br	10050bc <__fpcmp_parts_d+0x58>
 1005100:	11bffa2e 	bgeu	r2,r6,10050ec <__fpcmp_parts_d+0x88>
 1005104:	403fe426 	beq	r8,zero,1005098 <__fpcmp_parts_d+0x34>
 1005108:	003fec06 	br	10050bc <__fpcmp_parts_d+0x58>
 100510c:	28800117 	ldw	r2,4(r5)
 1005110:	103fe11e 	bne	r2,zero,1005098 <__fpcmp_parts_d+0x34>
 1005114:	003fe906 	br	10050bc <__fpcmp_parts_d+0x58>
 1005118:	11bfdd1e 	bne	r2,r6,1005090 <__fpcmp_parts_d+0x2c>
 100511c:	28c00117 	ldw	r3,4(r5)
 1005120:	20800117 	ldw	r2,4(r4)
 1005124:	1885c83a 	sub	r2,r3,r2
 1005128:	f800283a 	ret

0100512c <free>:
 100512c:	00804074 	movhi	r2,257
 1005130:	10915704 	addi	r2,r2,17756
 1005134:	200b883a 	mov	r5,r4
 1005138:	11000017 	ldw	r4,0(r2)
 100513c:	10099681 	jmpi	1009968 <_free_r>

01005140 <malloc>:
 1005140:	00804074 	movhi	r2,257
 1005144:	10915704 	addi	r2,r2,17756
 1005148:	200b883a 	mov	r5,r4
 100514c:	11000017 	ldw	r4,0(r2)
 1005150:	10051541 	jmpi	1005154 <_malloc_r>

01005154 <_malloc_r>:
 1005154:	defff604 	addi	sp,sp,-40
 1005158:	28c002c4 	addi	r3,r5,11
 100515c:	00800584 	movi	r2,22
 1005160:	dc800215 	stw	r18,8(sp)
 1005164:	dfc00915 	stw	ra,36(sp)
 1005168:	df000815 	stw	fp,32(sp)
 100516c:	ddc00715 	stw	r23,28(sp)
 1005170:	dd800615 	stw	r22,24(sp)
 1005174:	dd400515 	stw	r21,20(sp)
 1005178:	dd000415 	stw	r20,16(sp)
 100517c:	dcc00315 	stw	r19,12(sp)
 1005180:	dc400115 	stw	r17,4(sp)
 1005184:	dc000015 	stw	r16,0(sp)
 1005188:	2025883a 	mov	r18,r4
 100518c:	10c01236 	bltu	r2,r3,10051d8 <_malloc_r+0x84>
 1005190:	04400404 	movi	r17,16
 1005194:	8940142e 	bgeu	r17,r5,10051e8 <_malloc_r+0x94>
 1005198:	00800304 	movi	r2,12
 100519c:	0007883a 	mov	r3,zero
 10051a0:	90800015 	stw	r2,0(r18)
 10051a4:	1805883a 	mov	r2,r3
 10051a8:	dfc00917 	ldw	ra,36(sp)
 10051ac:	df000817 	ldw	fp,32(sp)
 10051b0:	ddc00717 	ldw	r23,28(sp)
 10051b4:	dd800617 	ldw	r22,24(sp)
 10051b8:	dd400517 	ldw	r21,20(sp)
 10051bc:	dd000417 	ldw	r20,16(sp)
 10051c0:	dcc00317 	ldw	r19,12(sp)
 10051c4:	dc800217 	ldw	r18,8(sp)
 10051c8:	dc400117 	ldw	r17,4(sp)
 10051cc:	dc000017 	ldw	r16,0(sp)
 10051d0:	dec00a04 	addi	sp,sp,40
 10051d4:	f800283a 	ret
 10051d8:	00bffe04 	movi	r2,-8
 10051dc:	18a2703a 	and	r17,r3,r2
 10051e0:	883fed16 	blt	r17,zero,1005198 <_malloc_r+0x44>
 10051e4:	897fec36 	bltu	r17,r5,1005198 <_malloc_r+0x44>
 10051e8:	9009883a 	mov	r4,r18
 10051ec:	100dde80 	call	100dde8 <__malloc_lock>
 10051f0:	00807dc4 	movi	r2,503
 10051f4:	14402b2e 	bgeu	r2,r17,10052a4 <_malloc_r+0x150>
 10051f8:	8806d27a 	srli	r3,r17,9
 10051fc:	18003f1e 	bne	r3,zero,10052fc <_malloc_r+0x1a8>
 1005200:	880cd0fa 	srli	r6,r17,3
 1005204:	300490fa 	slli	r2,r6,3
 1005208:	02c04074 	movhi	r11,257
 100520c:	5aca9c04 	addi	r11,r11,10864
 1005210:	12cb883a 	add	r5,r2,r11
 1005214:	2c000317 	ldw	r16,12(r5)
 1005218:	580f883a 	mov	r7,r11
 100521c:	2c00041e 	bne	r5,r16,1005230 <_malloc_r+0xdc>
 1005220:	00000a06 	br	100524c <_malloc_r+0xf8>
 1005224:	1800860e 	bge	r3,zero,1005440 <_malloc_r+0x2ec>
 1005228:	84000317 	ldw	r16,12(r16)
 100522c:	2c000726 	beq	r5,r16,100524c <_malloc_r+0xf8>
 1005230:	80800117 	ldw	r2,4(r16)
 1005234:	00ffff04 	movi	r3,-4
 1005238:	10c8703a 	and	r4,r2,r3
 100523c:	2447c83a 	sub	r3,r4,r17
 1005240:	008003c4 	movi	r2,15
 1005244:	10fff70e 	bge	r2,r3,1005224 <_malloc_r+0xd0>
 1005248:	31bfffc4 	addi	r6,r6,-1
 100524c:	32400044 	addi	r9,r6,1
 1005250:	02804074 	movhi	r10,257
 1005254:	528a9e04 	addi	r10,r10,10872
 1005258:	54000217 	ldw	r16,8(r10)
 100525c:	8280a026 	beq	r16,r10,10054e0 <_malloc_r+0x38c>
 1005260:	80800117 	ldw	r2,4(r16)
 1005264:	00ffff04 	movi	r3,-4
 1005268:	10ca703a 	and	r5,r2,r3
 100526c:	2c4dc83a 	sub	r6,r5,r17
 1005270:	008003c4 	movi	r2,15
 1005274:	11808316 	blt	r2,r6,1005484 <_malloc_r+0x330>
 1005278:	52800315 	stw	r10,12(r10)
 100527c:	52800215 	stw	r10,8(r10)
 1005280:	30002916 	blt	r6,zero,1005328 <_malloc_r+0x1d4>
 1005284:	8147883a 	add	r3,r16,r5
 1005288:	18800117 	ldw	r2,4(r3)
 100528c:	9009883a 	mov	r4,r18
 1005290:	10800054 	ori	r2,r2,1
 1005294:	18800115 	stw	r2,4(r3)
 1005298:	100de080 	call	100de08 <__malloc_unlock>
 100529c:	80c00204 	addi	r3,r16,8
 10052a0:	003fc006 	br	10051a4 <_malloc_r+0x50>
 10052a4:	02c04074 	movhi	r11,257
 10052a8:	5aca9c04 	addi	r11,r11,10864
 10052ac:	8ac5883a 	add	r2,r17,r11
 10052b0:	14000317 	ldw	r16,12(r2)
 10052b4:	580f883a 	mov	r7,r11
 10052b8:	8806d0fa 	srli	r3,r17,3
 10052bc:	14006c26 	beq	r2,r16,1005470 <_malloc_r+0x31c>
 10052c0:	80c00117 	ldw	r3,4(r16)
 10052c4:	00bfff04 	movi	r2,-4
 10052c8:	81800317 	ldw	r6,12(r16)
 10052cc:	1886703a 	and	r3,r3,r2
 10052d0:	80c7883a 	add	r3,r16,r3
 10052d4:	18800117 	ldw	r2,4(r3)
 10052d8:	81400217 	ldw	r5,8(r16)
 10052dc:	9009883a 	mov	r4,r18
 10052e0:	10800054 	ori	r2,r2,1
 10052e4:	18800115 	stw	r2,4(r3)
 10052e8:	31400215 	stw	r5,8(r6)
 10052ec:	29800315 	stw	r6,12(r5)
 10052f0:	100de080 	call	100de08 <__malloc_unlock>
 10052f4:	80c00204 	addi	r3,r16,8
 10052f8:	003faa06 	br	10051a4 <_malloc_r+0x50>
 10052fc:	00800104 	movi	r2,4
 1005300:	10c0052e 	bgeu	r2,r3,1005318 <_malloc_r+0x1c4>
 1005304:	00800504 	movi	r2,20
 1005308:	10c07836 	bltu	r2,r3,10054ec <_malloc_r+0x398>
 100530c:	198016c4 	addi	r6,r3,91
 1005310:	300490fa 	slli	r2,r6,3
 1005314:	003fbc06 	br	1005208 <_malloc_r+0xb4>
 1005318:	8804d1ba 	srli	r2,r17,6
 100531c:	11800e04 	addi	r6,r2,56
 1005320:	300490fa 	slli	r2,r6,3
 1005324:	003fb806 	br	1005208 <_malloc_r+0xb4>
 1005328:	00807fc4 	movi	r2,511
 100532c:	1140bb36 	bltu	r2,r5,100561c <_malloc_r+0x4c8>
 1005330:	2806d0fa 	srli	r3,r5,3
 1005334:	573ffe04 	addi	fp,r10,-8
 1005338:	00800044 	movi	r2,1
 100533c:	180890fa 	slli	r4,r3,3
 1005340:	1807d0ba 	srai	r3,r3,2
 1005344:	e1c00117 	ldw	r7,4(fp)
 1005348:	5909883a 	add	r4,r11,r4
 100534c:	21400217 	ldw	r5,8(r4)
 1005350:	10c4983a 	sll	r2,r2,r3
 1005354:	81000315 	stw	r4,12(r16)
 1005358:	81400215 	stw	r5,8(r16)
 100535c:	388eb03a 	or	r7,r7,r2
 1005360:	2c000315 	stw	r16,12(r5)
 1005364:	24000215 	stw	r16,8(r4)
 1005368:	e1c00115 	stw	r7,4(fp)
 100536c:	4807883a 	mov	r3,r9
 1005370:	4800cd16 	blt	r9,zero,10056a8 <_malloc_r+0x554>
 1005374:	1807d0ba 	srai	r3,r3,2
 1005378:	00800044 	movi	r2,1
 100537c:	10c8983a 	sll	r4,r2,r3
 1005380:	39004436 	bltu	r7,r4,1005494 <_malloc_r+0x340>
 1005384:	21c4703a 	and	r2,r4,r7
 1005388:	10000a1e 	bne	r2,zero,10053b4 <_malloc_r+0x260>
 100538c:	2109883a 	add	r4,r4,r4
 1005390:	00bfff04 	movi	r2,-4
 1005394:	4884703a 	and	r2,r9,r2
 1005398:	3906703a 	and	r3,r7,r4
 100539c:	12400104 	addi	r9,r2,4
 10053a0:	1800041e 	bne	r3,zero,10053b4 <_malloc_r+0x260>
 10053a4:	2109883a 	add	r4,r4,r4
 10053a8:	3904703a 	and	r2,r7,r4
 10053ac:	4a400104 	addi	r9,r9,4
 10053b0:	103ffc26 	beq	r2,zero,10053a4 <_malloc_r+0x250>
 10053b4:	480490fa 	slli	r2,r9,3
 10053b8:	4819883a 	mov	r12,r9
 10053bc:	023fff04 	movi	r8,-4
 10053c0:	589b883a 	add	r13,r11,r2
 10053c4:	6807883a 	mov	r3,r13
 10053c8:	014003c4 	movi	r5,15
 10053cc:	1c000317 	ldw	r16,12(r3)
 10053d0:	1c00041e 	bne	r3,r16,10053e4 <_malloc_r+0x290>
 10053d4:	0000a706 	br	1005674 <_malloc_r+0x520>
 10053d8:	3000ab0e 	bge	r6,zero,1005688 <_malloc_r+0x534>
 10053dc:	84000317 	ldw	r16,12(r16)
 10053e0:	1c00a426 	beq	r3,r16,1005674 <_malloc_r+0x520>
 10053e4:	80800117 	ldw	r2,4(r16)
 10053e8:	1204703a 	and	r2,r2,r8
 10053ec:	144dc83a 	sub	r6,r2,r17
 10053f0:	29bff90e 	bge	r5,r6,10053d8 <_malloc_r+0x284>
 10053f4:	81000317 	ldw	r4,12(r16)
 10053f8:	80c00217 	ldw	r3,8(r16)
 10053fc:	89400054 	ori	r5,r17,1
 1005400:	8445883a 	add	r2,r16,r17
 1005404:	20c00215 	stw	r3,8(r4)
 1005408:	19000315 	stw	r4,12(r3)
 100540c:	81400115 	stw	r5,4(r16)
 1005410:	1187883a 	add	r3,r2,r6
 1005414:	31000054 	ori	r4,r6,1
 1005418:	50800315 	stw	r2,12(r10)
 100541c:	50800215 	stw	r2,8(r10)
 1005420:	19800015 	stw	r6,0(r3)
 1005424:	11000115 	stw	r4,4(r2)
 1005428:	12800215 	stw	r10,8(r2)
 100542c:	12800315 	stw	r10,12(r2)
 1005430:	9009883a 	mov	r4,r18
 1005434:	100de080 	call	100de08 <__malloc_unlock>
 1005438:	80c00204 	addi	r3,r16,8
 100543c:	003f5906 	br	10051a4 <_malloc_r+0x50>
 1005440:	8109883a 	add	r4,r16,r4
 1005444:	20800117 	ldw	r2,4(r4)
 1005448:	80c00217 	ldw	r3,8(r16)
 100544c:	81400317 	ldw	r5,12(r16)
 1005450:	10800054 	ori	r2,r2,1
 1005454:	20800115 	stw	r2,4(r4)
 1005458:	28c00215 	stw	r3,8(r5)
 100545c:	19400315 	stw	r5,12(r3)
 1005460:	9009883a 	mov	r4,r18
 1005464:	100de080 	call	100de08 <__malloc_unlock>
 1005468:	80c00204 	addi	r3,r16,8
 100546c:	003f4d06 	br	10051a4 <_malloc_r+0x50>
 1005470:	80800204 	addi	r2,r16,8
 1005474:	14000317 	ldw	r16,12(r2)
 1005478:	143f911e 	bne	r2,r16,10052c0 <_malloc_r+0x16c>
 100547c:	1a400084 	addi	r9,r3,2
 1005480:	003f7306 	br	1005250 <_malloc_r+0xfc>
 1005484:	88c00054 	ori	r3,r17,1
 1005488:	8445883a 	add	r2,r16,r17
 100548c:	80c00115 	stw	r3,4(r16)
 1005490:	003fdf06 	br	1005410 <_malloc_r+0x2bc>
 1005494:	e4000217 	ldw	r16,8(fp)
 1005498:	00bfff04 	movi	r2,-4
 100549c:	80c00117 	ldw	r3,4(r16)
 10054a0:	802d883a 	mov	r22,r16
 10054a4:	18aa703a 	and	r21,r3,r2
 10054a8:	ac401636 	bltu	r21,r17,1005504 <_malloc_r+0x3b0>
 10054ac:	ac49c83a 	sub	r4,r21,r17
 10054b0:	008003c4 	movi	r2,15
 10054b4:	1100130e 	bge	r2,r4,1005504 <_malloc_r+0x3b0>
 10054b8:	88800054 	ori	r2,r17,1
 10054bc:	8447883a 	add	r3,r16,r17
 10054c0:	80800115 	stw	r2,4(r16)
 10054c4:	20800054 	ori	r2,r4,1
 10054c8:	18800115 	stw	r2,4(r3)
 10054cc:	e0c00215 	stw	r3,8(fp)
 10054d0:	9009883a 	mov	r4,r18
 10054d4:	100de080 	call	100de08 <__malloc_unlock>
 10054d8:	80c00204 	addi	r3,r16,8
 10054dc:	003f3106 	br	10051a4 <_malloc_r+0x50>
 10054e0:	39c00117 	ldw	r7,4(r7)
 10054e4:	573ffe04 	addi	fp,r10,-8
 10054e8:	003fa006 	br	100536c <_malloc_r+0x218>
 10054ec:	00801504 	movi	r2,84
 10054f0:	10c06736 	bltu	r2,r3,1005690 <_malloc_r+0x53c>
 10054f4:	8804d33a 	srli	r2,r17,12
 10054f8:	11801b84 	addi	r6,r2,110
 10054fc:	300490fa 	slli	r2,r6,3
 1005500:	003f4106 	br	1005208 <_malloc_r+0xb4>
 1005504:	d0a6d917 	ldw	r2,-25756(gp)
 1005508:	d0e00117 	ldw	r3,-32764(gp)
 100550c:	053fffc4 	movi	r20,-1
 1005510:	10800404 	addi	r2,r2,16
 1005514:	88a7883a 	add	r19,r17,r2
 1005518:	1d000326 	beq	r3,r20,1005528 <_malloc_r+0x3d4>
 100551c:	98c3ffc4 	addi	r3,r19,4095
 1005520:	00bc0004 	movi	r2,-4096
 1005524:	18a6703a 	and	r19,r3,r2
 1005528:	9009883a 	mov	r4,r18
 100552c:	980b883a 	mov	r5,r19
 1005530:	10059c00 	call	10059c0 <_sbrk_r>
 1005534:	1009883a 	mov	r4,r2
 1005538:	15000426 	beq	r2,r20,100554c <_malloc_r+0x3f8>
 100553c:	854b883a 	add	r5,r16,r21
 1005540:	1029883a 	mov	r20,r2
 1005544:	11405a2e 	bgeu	r2,r5,10056b0 <_malloc_r+0x55c>
 1005548:	87000c26 	beq	r16,fp,100557c <_malloc_r+0x428>
 100554c:	e4000217 	ldw	r16,8(fp)
 1005550:	80c00117 	ldw	r3,4(r16)
 1005554:	00bfff04 	movi	r2,-4
 1005558:	1884703a 	and	r2,r3,r2
 100555c:	14400336 	bltu	r2,r17,100556c <_malloc_r+0x418>
 1005560:	1449c83a 	sub	r4,r2,r17
 1005564:	008003c4 	movi	r2,15
 1005568:	113fd316 	blt	r2,r4,10054b8 <_malloc_r+0x364>
 100556c:	9009883a 	mov	r4,r18
 1005570:	100de080 	call	100de08 <__malloc_unlock>
 1005574:	0007883a 	mov	r3,zero
 1005578:	003f0a06 	br	10051a4 <_malloc_r+0x50>
 100557c:	05c04074 	movhi	r23,257
 1005580:	bdd83b04 	addi	r23,r23,24812
 1005584:	b8800017 	ldw	r2,0(r23)
 1005588:	988d883a 	add	r6,r19,r2
 100558c:	b9800015 	stw	r6,0(r23)
 1005590:	d0e00117 	ldw	r3,-32764(gp)
 1005594:	00bfffc4 	movi	r2,-1
 1005598:	18808e26 	beq	r3,r2,10057d4 <_malloc_r+0x680>
 100559c:	2145c83a 	sub	r2,r4,r5
 10055a0:	3085883a 	add	r2,r6,r2
 10055a4:	b8800015 	stw	r2,0(r23)
 10055a8:	20c001cc 	andi	r3,r4,7
 10055ac:	18005f1e 	bne	r3,zero,100572c <_malloc_r+0x5d8>
 10055b0:	000b883a 	mov	r5,zero
 10055b4:	a4c5883a 	add	r2,r20,r19
 10055b8:	1083ffcc 	andi	r2,r2,4095
 10055bc:	00c40004 	movi	r3,4096
 10055c0:	1887c83a 	sub	r3,r3,r2
 10055c4:	28e7883a 	add	r19,r5,r3
 10055c8:	9009883a 	mov	r4,r18
 10055cc:	980b883a 	mov	r5,r19
 10055d0:	10059c00 	call	10059c0 <_sbrk_r>
 10055d4:	1007883a 	mov	r3,r2
 10055d8:	00bfffc4 	movi	r2,-1
 10055dc:	18807a26 	beq	r3,r2,10057c8 <_malloc_r+0x674>
 10055e0:	1d05c83a 	sub	r2,r3,r20
 10055e4:	9885883a 	add	r2,r19,r2
 10055e8:	10c00054 	ori	r3,r2,1
 10055ec:	b8800017 	ldw	r2,0(r23)
 10055f0:	a021883a 	mov	r16,r20
 10055f4:	a0c00115 	stw	r3,4(r20)
 10055f8:	9885883a 	add	r2,r19,r2
 10055fc:	b8800015 	stw	r2,0(r23)
 1005600:	e5000215 	stw	r20,8(fp)
 1005604:	b7003626 	beq	r22,fp,10056e0 <_malloc_r+0x58c>
 1005608:	018003c4 	movi	r6,15
 100560c:	35404b36 	bltu	r6,r21,100573c <_malloc_r+0x5e8>
 1005610:	00800044 	movi	r2,1
 1005614:	a0800115 	stw	r2,4(r20)
 1005618:	003fcd06 	br	1005550 <_malloc_r+0x3fc>
 100561c:	2808d27a 	srli	r4,r5,9
 1005620:	2000371e 	bne	r4,zero,1005700 <_malloc_r+0x5ac>
 1005624:	2808d0fa 	srli	r4,r5,3
 1005628:	200690fa 	slli	r3,r4,3
 100562c:	1ad1883a 	add	r8,r3,r11
 1005630:	41800217 	ldw	r6,8(r8)
 1005634:	41805b26 	beq	r8,r6,10057a4 <_malloc_r+0x650>
 1005638:	30800117 	ldw	r2,4(r6)
 100563c:	00ffff04 	movi	r3,-4
 1005640:	10c4703a 	and	r2,r2,r3
 1005644:	2880022e 	bgeu	r5,r2,1005650 <_malloc_r+0x4fc>
 1005648:	31800217 	ldw	r6,8(r6)
 100564c:	41bffa1e 	bne	r8,r6,1005638 <_malloc_r+0x4e4>
 1005650:	32000317 	ldw	r8,12(r6)
 1005654:	39c00117 	ldw	r7,4(r7)
 1005658:	82000315 	stw	r8,12(r16)
 100565c:	81800215 	stw	r6,8(r16)
 1005660:	07004074 	movhi	fp,257
 1005664:	e70a9c04 	addi	fp,fp,10864
 1005668:	34000315 	stw	r16,12(r6)
 100566c:	44000215 	stw	r16,8(r8)
 1005670:	003f3e06 	br	100536c <_malloc_r+0x218>
 1005674:	63000044 	addi	r12,r12,1
 1005678:	608000cc 	andi	r2,r12,3
 100567c:	10005d26 	beq	r2,zero,10057f4 <_malloc_r+0x6a0>
 1005680:	18c00204 	addi	r3,r3,8
 1005684:	003f5106 	br	10053cc <_malloc_r+0x278>
 1005688:	8089883a 	add	r4,r16,r2
 100568c:	003f6d06 	br	1005444 <_malloc_r+0x2f0>
 1005690:	00805504 	movi	r2,340
 1005694:	10c02036 	bltu	r2,r3,1005718 <_malloc_r+0x5c4>
 1005698:	8804d3fa 	srli	r2,r17,15
 100569c:	11801dc4 	addi	r6,r2,119
 10056a0:	300490fa 	slli	r2,r6,3
 10056a4:	003ed806 	br	1005208 <_malloc_r+0xb4>
 10056a8:	48c000c4 	addi	r3,r9,3
 10056ac:	003f3106 	br	1005374 <_malloc_r+0x220>
 10056b0:	05c04074 	movhi	r23,257
 10056b4:	bdd83b04 	addi	r23,r23,24812
 10056b8:	b8800017 	ldw	r2,0(r23)
 10056bc:	988d883a 	add	r6,r19,r2
 10056c0:	b9800015 	stw	r6,0(r23)
 10056c4:	293fb21e 	bne	r5,r4,1005590 <_malloc_r+0x43c>
 10056c8:	2083ffcc 	andi	r2,r4,4095
 10056cc:	103fb01e 	bne	r2,zero,1005590 <_malloc_r+0x43c>
 10056d0:	e4000217 	ldw	r16,8(fp)
 10056d4:	9d45883a 	add	r2,r19,r21
 10056d8:	10800054 	ori	r2,r2,1
 10056dc:	80800115 	stw	r2,4(r16)
 10056e0:	b8c00017 	ldw	r3,0(r23)
 10056e4:	d0a6da17 	ldw	r2,-25752(gp)
 10056e8:	10c0012e 	bgeu	r2,r3,10056f0 <_malloc_r+0x59c>
 10056ec:	d0e6da15 	stw	r3,-25752(gp)
 10056f0:	d0a6db17 	ldw	r2,-25748(gp)
 10056f4:	10ff962e 	bgeu	r2,r3,1005550 <_malloc_r+0x3fc>
 10056f8:	d0e6db15 	stw	r3,-25748(gp)
 10056fc:	003f9406 	br	1005550 <_malloc_r+0x3fc>
 1005700:	00800104 	movi	r2,4
 1005704:	11001e36 	bltu	r2,r4,1005780 <_malloc_r+0x62c>
 1005708:	2804d1ba 	srli	r2,r5,6
 100570c:	11000e04 	addi	r4,r2,56
 1005710:	200690fa 	slli	r3,r4,3
 1005714:	003fc506 	br	100562c <_malloc_r+0x4d8>
 1005718:	00815504 	movi	r2,1364
 100571c:	10c01d2e 	bgeu	r2,r3,1005794 <_malloc_r+0x640>
 1005720:	01801f84 	movi	r6,126
 1005724:	0080fc04 	movi	r2,1008
 1005728:	003eb706 	br	1005208 <_malloc_r+0xb4>
 100572c:	00800204 	movi	r2,8
 1005730:	10cbc83a 	sub	r5,r2,r3
 1005734:	2169883a 	add	r20,r4,r5
 1005738:	003f9e06 	br	10055b4 <_malloc_r+0x460>
 100573c:	00bffe04 	movi	r2,-8
 1005740:	a93ffd04 	addi	r4,r21,-12
 1005744:	2088703a 	and	r4,r4,r2
 1005748:	b10b883a 	add	r5,r22,r4
 100574c:	00c00144 	movi	r3,5
 1005750:	28c00215 	stw	r3,8(r5)
 1005754:	28c00115 	stw	r3,4(r5)
 1005758:	b0800117 	ldw	r2,4(r22)
 100575c:	1080004c 	andi	r2,r2,1
 1005760:	2084b03a 	or	r2,r4,r2
 1005764:	b0800115 	stw	r2,4(r22)
 1005768:	313fdd2e 	bgeu	r6,r4,10056e0 <_malloc_r+0x58c>
 100576c:	b1400204 	addi	r5,r22,8
 1005770:	9009883a 	mov	r4,r18
 1005774:	10099680 	call	1009968 <_free_r>
 1005778:	e4000217 	ldw	r16,8(fp)
 100577c:	003fd806 	br	10056e0 <_malloc_r+0x58c>
 1005780:	00800504 	movi	r2,20
 1005784:	11001536 	bltu	r2,r4,10057dc <_malloc_r+0x688>
 1005788:	210016c4 	addi	r4,r4,91
 100578c:	200690fa 	slli	r3,r4,3
 1005790:	003fa606 	br	100562c <_malloc_r+0x4d8>
 1005794:	8804d4ba 	srli	r2,r17,18
 1005798:	11801f04 	addi	r6,r2,124
 100579c:	300490fa 	slli	r2,r6,3
 10057a0:	003e9906 	br	1005208 <_malloc_r+0xb4>
 10057a4:	2009d0ba 	srai	r4,r4,2
 10057a8:	01404074 	movhi	r5,257
 10057ac:	294a9c04 	addi	r5,r5,10864
 10057b0:	00c00044 	movi	r3,1
 10057b4:	28800117 	ldw	r2,4(r5)
 10057b8:	1906983a 	sll	r3,r3,r4
 10057bc:	10c4b03a 	or	r2,r2,r3
 10057c0:	28800115 	stw	r2,4(r5)
 10057c4:	003fa306 	br	1005654 <_malloc_r+0x500>
 10057c8:	0027883a 	mov	r19,zero
 10057cc:	00c00044 	movi	r3,1
 10057d0:	003f8606 	br	10055ec <_malloc_r+0x498>
 10057d4:	d1200115 	stw	r4,-32764(gp)
 10057d8:	003f7306 	br	10055a8 <_malloc_r+0x454>
 10057dc:	00801504 	movi	r2,84
 10057e0:	11001936 	bltu	r2,r4,1005848 <_malloc_r+0x6f4>
 10057e4:	2804d33a 	srli	r2,r5,12
 10057e8:	11001b84 	addi	r4,r2,110
 10057ec:	200690fa 	slli	r3,r4,3
 10057f0:	003f8e06 	br	100562c <_malloc_r+0x4d8>
 10057f4:	480b883a 	mov	r5,r9
 10057f8:	6807883a 	mov	r3,r13
 10057fc:	288000cc 	andi	r2,r5,3
 1005800:	18fffe04 	addi	r3,r3,-8
 1005804:	297fffc4 	addi	r5,r5,-1
 1005808:	10001526 	beq	r2,zero,1005860 <_malloc_r+0x70c>
 100580c:	18800217 	ldw	r2,8(r3)
 1005810:	10fffa26 	beq	r2,r3,10057fc <_malloc_r+0x6a8>
 1005814:	2109883a 	add	r4,r4,r4
 1005818:	393f1e36 	bltu	r7,r4,1005494 <_malloc_r+0x340>
 100581c:	203f1d26 	beq	r4,zero,1005494 <_malloc_r+0x340>
 1005820:	21c4703a 	and	r2,r4,r7
 1005824:	10000226 	beq	r2,zero,1005830 <_malloc_r+0x6dc>
 1005828:	6013883a 	mov	r9,r12
 100582c:	003ee106 	br	10053b4 <_malloc_r+0x260>
 1005830:	2109883a 	add	r4,r4,r4
 1005834:	3904703a 	and	r2,r7,r4
 1005838:	63000104 	addi	r12,r12,4
 100583c:	103ffc26 	beq	r2,zero,1005830 <_malloc_r+0x6dc>
 1005840:	6013883a 	mov	r9,r12
 1005844:	003edb06 	br	10053b4 <_malloc_r+0x260>
 1005848:	00805504 	movi	r2,340
 100584c:	11000836 	bltu	r2,r4,1005870 <_malloc_r+0x71c>
 1005850:	2804d3fa 	srli	r2,r5,15
 1005854:	11001dc4 	addi	r4,r2,119
 1005858:	200690fa 	slli	r3,r4,3
 100585c:	003f7306 	br	100562c <_malloc_r+0x4d8>
 1005860:	0104303a 	nor	r2,zero,r4
 1005864:	388e703a 	and	r7,r7,r2
 1005868:	e1c00115 	stw	r7,4(fp)
 100586c:	003fe906 	br	1005814 <_malloc_r+0x6c0>
 1005870:	00815504 	movi	r2,1364
 1005874:	1100032e 	bgeu	r2,r4,1005884 <_malloc_r+0x730>
 1005878:	01001f84 	movi	r4,126
 100587c:	00c0fc04 	movi	r3,1008
 1005880:	003f6a06 	br	100562c <_malloc_r+0x4d8>
 1005884:	2804d4ba 	srli	r2,r5,18
 1005888:	11001f04 	addi	r4,r2,124
 100588c:	200690fa 	slli	r3,r4,3
 1005890:	003f6606 	br	100562c <_malloc_r+0x4d8>

01005894 <printf>:
 1005894:	defffb04 	addi	sp,sp,-20
 1005898:	dfc00115 	stw	ra,4(sp)
 100589c:	d9400215 	stw	r5,8(sp)
 10058a0:	d9800315 	stw	r6,12(sp)
 10058a4:	d9c00415 	stw	r7,16(sp)
 10058a8:	00804074 	movhi	r2,257
 10058ac:	10915704 	addi	r2,r2,17756
 10058b0:	10c00017 	ldw	r3,0(r2)
 10058b4:	200b883a 	mov	r5,r4
 10058b8:	d8800204 	addi	r2,sp,8
 10058bc:	19000217 	ldw	r4,8(r3)
 10058c0:	100d883a 	mov	r6,r2
 10058c4:	d8800015 	stw	r2,0(sp)
 10058c8:	10079c00 	call	10079c0 <__vfprintf_internal>
 10058cc:	dfc00117 	ldw	ra,4(sp)
 10058d0:	dec00504 	addi	sp,sp,20
 10058d4:	f800283a 	ret

010058d8 <_printf_r>:
 10058d8:	defffc04 	addi	sp,sp,-16
 10058dc:	dfc00115 	stw	ra,4(sp)
 10058e0:	d9800215 	stw	r6,8(sp)
 10058e4:	d9c00315 	stw	r7,12(sp)
 10058e8:	280d883a 	mov	r6,r5
 10058ec:	21400217 	ldw	r5,8(r4)
 10058f0:	d8c00204 	addi	r3,sp,8
 10058f4:	180f883a 	mov	r7,r3
 10058f8:	d8c00015 	stw	r3,0(sp)
 10058fc:	1005afc0 	call	1005afc <___vfprintf_internal_r>
 1005900:	dfc00117 	ldw	ra,4(sp)
 1005904:	dec00404 	addi	sp,sp,16
 1005908:	f800283a 	ret

0100590c <_puts_r>:
 100590c:	defff604 	addi	sp,sp,-40
 1005910:	dc400715 	stw	r17,28(sp)
 1005914:	2023883a 	mov	r17,r4
 1005918:	2809883a 	mov	r4,r5
 100591c:	dfc00915 	stw	ra,36(sp)
 1005920:	dcc00815 	stw	r19,32(sp)
 1005924:	2827883a 	mov	r19,r5
 1005928:	1005a300 	call	1005a30 <strlen>
 100592c:	89400217 	ldw	r5,8(r17)
 1005930:	00c04074 	movhi	r3,257
 1005934:	18c9f204 	addi	r3,r3,10184
 1005938:	01c00044 	movi	r7,1
 100593c:	12000044 	addi	r8,r2,1
 1005940:	d8c00515 	stw	r3,20(sp)
 1005944:	d9c00615 	stw	r7,24(sp)
 1005948:	d8c00304 	addi	r3,sp,12
 100594c:	01c00084 	movi	r7,2
 1005950:	8809883a 	mov	r4,r17
 1005954:	d80d883a 	mov	r6,sp
 1005958:	d8c00015 	stw	r3,0(sp)
 100595c:	dcc00315 	stw	r19,12(sp)
 1005960:	da000215 	stw	r8,8(sp)
 1005964:	d9c00115 	stw	r7,4(sp)
 1005968:	d8800415 	stw	r2,16(sp)
 100596c:	1009c7c0 	call	1009c7c <__sfvwrite_r>
 1005970:	00ffffc4 	movi	r3,-1
 1005974:	10000626 	beq	r2,zero,1005990 <_puts_r+0x84>
 1005978:	1805883a 	mov	r2,r3
 100597c:	dfc00917 	ldw	ra,36(sp)
 1005980:	dcc00817 	ldw	r19,32(sp)
 1005984:	dc400717 	ldw	r17,28(sp)
 1005988:	dec00a04 	addi	sp,sp,40
 100598c:	f800283a 	ret
 1005990:	00c00284 	movi	r3,10
 1005994:	1805883a 	mov	r2,r3
 1005998:	dfc00917 	ldw	ra,36(sp)
 100599c:	dcc00817 	ldw	r19,32(sp)
 10059a0:	dc400717 	ldw	r17,28(sp)
 10059a4:	dec00a04 	addi	sp,sp,40
 10059a8:	f800283a 	ret

010059ac <puts>:
 10059ac:	00804074 	movhi	r2,257
 10059b0:	10915704 	addi	r2,r2,17756
 10059b4:	200b883a 	mov	r5,r4
 10059b8:	11000017 	ldw	r4,0(r2)
 10059bc:	100590c1 	jmpi	100590c <_puts_r>

010059c0 <_sbrk_r>:
 10059c0:	defffd04 	addi	sp,sp,-12
 10059c4:	dc000015 	stw	r16,0(sp)
 10059c8:	04004074 	movhi	r16,257
 10059cc:	84183104 	addi	r16,r16,24772
 10059d0:	dc400115 	stw	r17,4(sp)
 10059d4:	80000015 	stw	zero,0(r16)
 10059d8:	2023883a 	mov	r17,r4
 10059dc:	2809883a 	mov	r4,r5
 10059e0:	dfc00215 	stw	ra,8(sp)
 10059e4:	100e0240 	call	100e024 <sbrk>
 10059e8:	1007883a 	mov	r3,r2
 10059ec:	00bfffc4 	movi	r2,-1
 10059f0:	18800626 	beq	r3,r2,1005a0c <_sbrk_r+0x4c>
 10059f4:	1805883a 	mov	r2,r3
 10059f8:	dfc00217 	ldw	ra,8(sp)
 10059fc:	dc400117 	ldw	r17,4(sp)
 1005a00:	dc000017 	ldw	r16,0(sp)
 1005a04:	dec00304 	addi	sp,sp,12
 1005a08:	f800283a 	ret
 1005a0c:	80800017 	ldw	r2,0(r16)
 1005a10:	103ff826 	beq	r2,zero,10059f4 <_sbrk_r+0x34>
 1005a14:	88800015 	stw	r2,0(r17)
 1005a18:	1805883a 	mov	r2,r3
 1005a1c:	dfc00217 	ldw	ra,8(sp)
 1005a20:	dc400117 	ldw	r17,4(sp)
 1005a24:	dc000017 	ldw	r16,0(sp)
 1005a28:	dec00304 	addi	sp,sp,12
 1005a2c:	f800283a 	ret

01005a30 <strlen>:
 1005a30:	208000cc 	andi	r2,r4,3
 1005a34:	2011883a 	mov	r8,r4
 1005a38:	1000161e 	bne	r2,zero,1005a94 <strlen+0x64>
 1005a3c:	20c00017 	ldw	r3,0(r4)
 1005a40:	017fbff4 	movhi	r5,65279
 1005a44:	297fbfc4 	addi	r5,r5,-257
 1005a48:	01e02074 	movhi	r7,32897
 1005a4c:	39e02004 	addi	r7,r7,-32640
 1005a50:	1945883a 	add	r2,r3,r5
 1005a54:	11c4703a 	and	r2,r2,r7
 1005a58:	00c6303a 	nor	r3,zero,r3
 1005a5c:	1886703a 	and	r3,r3,r2
 1005a60:	18000c1e 	bne	r3,zero,1005a94 <strlen+0x64>
 1005a64:	280d883a 	mov	r6,r5
 1005a68:	380b883a 	mov	r5,r7
 1005a6c:	21000104 	addi	r4,r4,4
 1005a70:	20800017 	ldw	r2,0(r4)
 1005a74:	1187883a 	add	r3,r2,r6
 1005a78:	1946703a 	and	r3,r3,r5
 1005a7c:	0084303a 	nor	r2,zero,r2
 1005a80:	10c4703a 	and	r2,r2,r3
 1005a84:	103ff926 	beq	r2,zero,1005a6c <strlen+0x3c>
 1005a88:	20800007 	ldb	r2,0(r4)
 1005a8c:	10000326 	beq	r2,zero,1005a9c <strlen+0x6c>
 1005a90:	21000044 	addi	r4,r4,1
 1005a94:	20800007 	ldb	r2,0(r4)
 1005a98:	103ffd1e 	bne	r2,zero,1005a90 <strlen+0x60>
 1005a9c:	2205c83a 	sub	r2,r4,r8
 1005aa0:	f800283a 	ret

01005aa4 <__sprint_r>:
 1005aa4:	30800217 	ldw	r2,8(r6)
 1005aa8:	defffe04 	addi	sp,sp,-8
 1005aac:	dc000015 	stw	r16,0(sp)
 1005ab0:	dfc00115 	stw	ra,4(sp)
 1005ab4:	3021883a 	mov	r16,r6
 1005ab8:	0007883a 	mov	r3,zero
 1005abc:	1000061e 	bne	r2,zero,1005ad8 <__sprint_r+0x34>
 1005ac0:	1805883a 	mov	r2,r3
 1005ac4:	30000115 	stw	zero,4(r6)
 1005ac8:	dfc00117 	ldw	ra,4(sp)
 1005acc:	dc000017 	ldw	r16,0(sp)
 1005ad0:	dec00204 	addi	sp,sp,8
 1005ad4:	f800283a 	ret
 1005ad8:	1009c7c0 	call	1009c7c <__sfvwrite_r>
 1005adc:	1007883a 	mov	r3,r2
 1005ae0:	1805883a 	mov	r2,r3
 1005ae4:	80000115 	stw	zero,4(r16)
 1005ae8:	80000215 	stw	zero,8(r16)
 1005aec:	dfc00117 	ldw	ra,4(sp)
 1005af0:	dc000017 	ldw	r16,0(sp)
 1005af4:	dec00204 	addi	sp,sp,8
 1005af8:	f800283a 	ret

01005afc <___vfprintf_internal_r>:
 1005afc:	defea404 	addi	sp,sp,-1392
 1005b00:	dd815815 	stw	r22,1376(sp)
 1005b04:	dc015215 	stw	r16,1352(sp)
 1005b08:	d9c15115 	stw	r7,1348(sp)
 1005b0c:	dfc15b15 	stw	ra,1388(sp)
 1005b10:	df015a15 	stw	fp,1384(sp)
 1005b14:	ddc15915 	stw	r23,1380(sp)
 1005b18:	dd415715 	stw	r21,1372(sp)
 1005b1c:	dd015615 	stw	r20,1368(sp)
 1005b20:	dcc15515 	stw	r19,1364(sp)
 1005b24:	dc815415 	stw	r18,1360(sp)
 1005b28:	dc415315 	stw	r17,1356(sp)
 1005b2c:	282d883a 	mov	r22,r5
 1005b30:	3021883a 	mov	r16,r6
 1005b34:	d9014f15 	stw	r4,1340(sp)
 1005b38:	100a2a00 	call	100a2a0 <_localeconv_r>
 1005b3c:	10800017 	ldw	r2,0(r2)
 1005b40:	d9c15117 	ldw	r7,1348(sp)
 1005b44:	d8814915 	stw	r2,1316(sp)
 1005b48:	d8814f17 	ldw	r2,1340(sp)
 1005b4c:	10000226 	beq	r2,zero,1005b58 <___vfprintf_internal_r+0x5c>
 1005b50:	10800e17 	ldw	r2,56(r2)
 1005b54:	10020d26 	beq	r2,zero,100638c <___vfprintf_internal_r+0x890>
 1005b58:	b080030b 	ldhu	r2,12(r22)
 1005b5c:	1080020c 	andi	r2,r2,8
 1005b60:	10020e26 	beq	r2,zero,100639c <___vfprintf_internal_r+0x8a0>
 1005b64:	b0800417 	ldw	r2,16(r22)
 1005b68:	10020c26 	beq	r2,zero,100639c <___vfprintf_internal_r+0x8a0>
 1005b6c:	b200030b 	ldhu	r8,12(r22)
 1005b70:	00800284 	movi	r2,10
 1005b74:	40c0068c 	andi	r3,r8,26
 1005b78:	18802f1e 	bne	r3,r2,1005c38 <___vfprintf_internal_r+0x13c>
 1005b7c:	b080038f 	ldh	r2,14(r22)
 1005b80:	10002d16 	blt	r2,zero,1005c38 <___vfprintf_internal_r+0x13c>
 1005b84:	b240038b 	ldhu	r9,14(r22)
 1005b88:	b2800717 	ldw	r10,28(r22)
 1005b8c:	b2c00917 	ldw	r11,36(r22)
 1005b90:	d9014f17 	ldw	r4,1340(sp)
 1005b94:	dc402904 	addi	r17,sp,164
 1005b98:	d8804004 	addi	r2,sp,256
 1005b9c:	00c10004 	movi	r3,1024
 1005ba0:	423fff4c 	andi	r8,r8,65533
 1005ba4:	800d883a 	mov	r6,r16
 1005ba8:	880b883a 	mov	r5,r17
 1005bac:	da002c0d 	sth	r8,176(sp)
 1005bb0:	da402c8d 	sth	r9,178(sp)
 1005bb4:	da803015 	stw	r10,192(sp)
 1005bb8:	dac03215 	stw	r11,200(sp)
 1005bbc:	d8802d15 	stw	r2,180(sp)
 1005bc0:	d8c02e15 	stw	r3,184(sp)
 1005bc4:	d8802915 	stw	r2,164(sp)
 1005bc8:	d8c02b15 	stw	r3,172(sp)
 1005bcc:	d8002f15 	stw	zero,188(sp)
 1005bd0:	1005afc0 	call	1005afc <___vfprintf_internal_r>
 1005bd4:	d8814b15 	stw	r2,1324(sp)
 1005bd8:	10000416 	blt	r2,zero,1005bec <___vfprintf_internal_r+0xf0>
 1005bdc:	d9014f17 	ldw	r4,1340(sp)
 1005be0:	880b883a 	mov	r5,r17
 1005be4:	10093180 	call	1009318 <_fflush_r>
 1005be8:	1002321e 	bne	r2,zero,10064b4 <___vfprintf_internal_r+0x9b8>
 1005bec:	d8802c0b 	ldhu	r2,176(sp)
 1005bf0:	1080100c 	andi	r2,r2,64
 1005bf4:	10000326 	beq	r2,zero,1005c04 <___vfprintf_internal_r+0x108>
 1005bf8:	b080030b 	ldhu	r2,12(r22)
 1005bfc:	10801014 	ori	r2,r2,64
 1005c00:	b080030d 	sth	r2,12(r22)
 1005c04:	d8814b17 	ldw	r2,1324(sp)
 1005c08:	dfc15b17 	ldw	ra,1388(sp)
 1005c0c:	df015a17 	ldw	fp,1384(sp)
 1005c10:	ddc15917 	ldw	r23,1380(sp)
 1005c14:	dd815817 	ldw	r22,1376(sp)
 1005c18:	dd415717 	ldw	r21,1372(sp)
 1005c1c:	dd015617 	ldw	r20,1368(sp)
 1005c20:	dcc15517 	ldw	r19,1364(sp)
 1005c24:	dc815417 	ldw	r18,1360(sp)
 1005c28:	dc415317 	ldw	r17,1356(sp)
 1005c2c:	dc015217 	ldw	r16,1352(sp)
 1005c30:	dec15c04 	addi	sp,sp,1392
 1005c34:	f800283a 	ret
 1005c38:	0005883a 	mov	r2,zero
 1005c3c:	0007883a 	mov	r3,zero
 1005c40:	dd401904 	addi	r21,sp,100
 1005c44:	d8814215 	stw	r2,1288(sp)
 1005c48:	802f883a 	mov	r23,r16
 1005c4c:	d8c14315 	stw	r3,1292(sp)
 1005c50:	d8014b15 	stw	zero,1324(sp)
 1005c54:	d8014815 	stw	zero,1312(sp)
 1005c58:	d8014415 	stw	zero,1296(sp)
 1005c5c:	d8014715 	stw	zero,1308(sp)
 1005c60:	dd400c15 	stw	r21,48(sp)
 1005c64:	d8000e15 	stw	zero,56(sp)
 1005c68:	d8000d15 	stw	zero,52(sp)
 1005c6c:	b8800007 	ldb	r2,0(r23)
 1005c70:	10001926 	beq	r2,zero,1005cd8 <___vfprintf_internal_r+0x1dc>
 1005c74:	00c00944 	movi	r3,37
 1005c78:	10c01726 	beq	r2,r3,1005cd8 <___vfprintf_internal_r+0x1dc>
 1005c7c:	b821883a 	mov	r16,r23
 1005c80:	00000106 	br	1005c88 <___vfprintf_internal_r+0x18c>
 1005c84:	10c00326 	beq	r2,r3,1005c94 <___vfprintf_internal_r+0x198>
 1005c88:	84000044 	addi	r16,r16,1
 1005c8c:	80800007 	ldb	r2,0(r16)
 1005c90:	103ffc1e 	bne	r2,zero,1005c84 <___vfprintf_internal_r+0x188>
 1005c94:	85e7c83a 	sub	r19,r16,r23
 1005c98:	98000e26 	beq	r19,zero,1005cd4 <___vfprintf_internal_r+0x1d8>
 1005c9c:	dc800e17 	ldw	r18,56(sp)
 1005ca0:	dc400d17 	ldw	r17,52(sp)
 1005ca4:	008001c4 	movi	r2,7
 1005ca8:	94e5883a 	add	r18,r18,r19
 1005cac:	8c400044 	addi	r17,r17,1
 1005cb0:	adc00015 	stw	r23,0(r21)
 1005cb4:	dc800e15 	stw	r18,56(sp)
 1005cb8:	acc00115 	stw	r19,4(r21)
 1005cbc:	dc400d15 	stw	r17,52(sp)
 1005cc0:	14428b16 	blt	r2,r17,10066f0 <___vfprintf_internal_r+0xbf4>
 1005cc4:	ad400204 	addi	r21,r21,8
 1005cc8:	d9014b17 	ldw	r4,1324(sp)
 1005ccc:	24c9883a 	add	r4,r4,r19
 1005cd0:	d9014b15 	stw	r4,1324(sp)
 1005cd4:	802f883a 	mov	r23,r16
 1005cd8:	b8800007 	ldb	r2,0(r23)
 1005cdc:	10013c26 	beq	r2,zero,10061d0 <___vfprintf_internal_r+0x6d4>
 1005ce0:	bdc00044 	addi	r23,r23,1
 1005ce4:	d8000405 	stb	zero,16(sp)
 1005ce8:	b8c00007 	ldb	r3,0(r23)
 1005cec:	04ffffc4 	movi	r19,-1
 1005cf0:	d8014c15 	stw	zero,1328(sp)
 1005cf4:	d8014a15 	stw	zero,1320(sp)
 1005cf8:	d8c14d15 	stw	r3,1332(sp)
 1005cfc:	bdc00044 	addi	r23,r23,1
 1005d00:	d9414d17 	ldw	r5,1332(sp)
 1005d04:	00801604 	movi	r2,88
 1005d08:	28fff804 	addi	r3,r5,-32
 1005d0c:	10c06036 	bltu	r2,r3,1005e90 <___vfprintf_internal_r+0x394>
 1005d10:	18c5883a 	add	r2,r3,r3
 1005d14:	1085883a 	add	r2,r2,r2
 1005d18:	00c04034 	movhi	r3,256
 1005d1c:	18d74b04 	addi	r3,r3,23852
 1005d20:	10c5883a 	add	r2,r2,r3
 1005d24:	11000017 	ldw	r4,0(r2)
 1005d28:	2000683a 	jmp	r4
 1005d2c:	01006ca0 	cmpeqi	r4,zero,434
 1005d30:	01005e90 	cmplti	r4,zero,378
 1005d34:	01005e90 	cmplti	r4,zero,378
 1005d38:	01006c8c 	andi	r4,zero,434
 1005d3c:	01005e90 	cmplti	r4,zero,378
 1005d40:	01005e90 	cmplti	r4,zero,378
 1005d44:	01005e90 	cmplti	r4,zero,378
 1005d48:	01005e90 	cmplti	r4,zero,378
 1005d4c:	01005e90 	cmplti	r4,zero,378
 1005d50:	01005e90 	cmplti	r4,zero,378
 1005d54:	01006a6c 	andhi	r4,zero,425
 1005d58:	01006c7c 	xorhi	r4,zero,433
 1005d5c:	01005e90 	cmplti	r4,zero,378
 1005d60:	01006a84 	movi	r4,426
 1005d64:	01006d24 	muli	r4,zero,436
 1005d68:	01005e90 	cmplti	r4,zero,378
 1005d6c:	01006d10 	cmplti	r4,zero,436
 1005d70:	01006ccc 	andi	r4,zero,435
 1005d74:	01006ccc 	andi	r4,zero,435
 1005d78:	01006ccc 	andi	r4,zero,435
 1005d7c:	01006ccc 	andi	r4,zero,435
 1005d80:	01006ccc 	andi	r4,zero,435
 1005d84:	01006ccc 	andi	r4,zero,435
 1005d88:	01006ccc 	andi	r4,zero,435
 1005d8c:	01006ccc 	andi	r4,zero,435
 1005d90:	01006ccc 	andi	r4,zero,435
 1005d94:	01005e90 	cmplti	r4,zero,378
 1005d98:	01005e90 	cmplti	r4,zero,378
 1005d9c:	01005e90 	cmplti	r4,zero,378
 1005da0:	01005e90 	cmplti	r4,zero,378
 1005da4:	01005e90 	cmplti	r4,zero,378
 1005da8:	01005e90 	cmplti	r4,zero,378
 1005dac:	01005e90 	cmplti	r4,zero,378
 1005db0:	01005e90 	cmplti	r4,zero,378
 1005db4:	01005e90 	cmplti	r4,zero,378
 1005db8:	01005e90 	cmplti	r4,zero,378
 1005dbc:	010064e8 	cmpgeui	r4,zero,403
 1005dc0:	01006b54 	movui	r4,429
 1005dc4:	01005e90 	cmplti	r4,zero,378
 1005dc8:	01006b54 	movui	r4,429
 1005dcc:	01005e90 	cmplti	r4,zero,378
 1005dd0:	01005e90 	cmplti	r4,zero,378
 1005dd4:	01005e90 	cmplti	r4,zero,378
 1005dd8:	01005e90 	cmplti	r4,zero,378
 1005ddc:	01006cb8 	rdprs	r4,zero,434
 1005de0:	01005e90 	cmplti	r4,zero,378
 1005de4:	01005e90 	cmplti	r4,zero,378
 1005de8:	0100659c 	xori	r4,zero,406
 1005dec:	01005e90 	cmplti	r4,zero,378
 1005df0:	01005e90 	cmplti	r4,zero,378
 1005df4:	01005e90 	cmplti	r4,zero,378
 1005df8:	01005e90 	cmplti	r4,zero,378
 1005dfc:	01005e90 	cmplti	r4,zero,378
 1005e00:	010065e8 	cmpgeui	r4,zero,407
 1005e04:	01005e90 	cmplti	r4,zero,378
 1005e08:	01005e90 	cmplti	r4,zero,378
 1005e0c:	01006c08 	cmpgei	r4,zero,432
 1005e10:	01005e90 	cmplti	r4,zero,378
 1005e14:	01005e90 	cmplti	r4,zero,378
 1005e18:	01005e90 	cmplti	r4,zero,378
 1005e1c:	01005e90 	cmplti	r4,zero,378
 1005e20:	01005e90 	cmplti	r4,zero,378
 1005e24:	01005e90 	cmplti	r4,zero,378
 1005e28:	01005e90 	cmplti	r4,zero,378
 1005e2c:	01005e90 	cmplti	r4,zero,378
 1005e30:	01005e90 	cmplti	r4,zero,378
 1005e34:	01005e90 	cmplti	r4,zero,378
 1005e38:	01006bdc 	xori	r4,zero,431
 1005e3c:	010064f4 	movhi	r4,403
 1005e40:	01006b54 	movui	r4,429
 1005e44:	01006b54 	movui	r4,429
 1005e48:	01006b54 	movui	r4,429
 1005e4c:	01006b40 	call	1006b4 <__alt_mem_onchip_memory2_0+0x1006b4>
 1005e50:	010064f4 	movhi	r4,403
 1005e54:	01005e90 	cmplti	r4,zero,378
 1005e58:	01005e90 	cmplti	r4,zero,378
 1005e5c:	01006ac8 	cmpgei	r4,zero,427
 1005e60:	01005e90 	cmplti	r4,zero,378
 1005e64:	01006a98 	cmpnei	r4,zero,426
 1005e68:	010065a8 	cmpgeui	r4,zero,406
 1005e6c:	01006af8 	rdprs	r4,zero,427
 1005e70:	01006ae4 	muli	r4,zero,427
 1005e74:	01005e90 	cmplti	r4,zero,378
 1005e78:	01006d8c 	andi	r4,zero,438
 1005e7c:	01005e90 	cmplti	r4,zero,378
 1005e80:	010065f4 	movhi	r4,407
 1005e84:	01005e90 	cmplti	r4,zero,378
 1005e88:	01005e90 	cmplti	r4,zero,378
 1005e8c:	01006c6c 	andhi	r4,zero,433
 1005e90:	d9014d17 	ldw	r4,1332(sp)
 1005e94:	2000ce26 	beq	r4,zero,10061d0 <___vfprintf_internal_r+0x6d4>
 1005e98:	01400044 	movi	r5,1
 1005e9c:	d9800f04 	addi	r6,sp,60
 1005ea0:	d9c14015 	stw	r7,1280(sp)
 1005ea4:	d9414515 	stw	r5,1300(sp)
 1005ea8:	d9814115 	stw	r6,1284(sp)
 1005eac:	280f883a 	mov	r7,r5
 1005eb0:	d9000f05 	stb	r4,60(sp)
 1005eb4:	d8000405 	stb	zero,16(sp)
 1005eb8:	d8014615 	stw	zero,1304(sp)
 1005ebc:	d8c14c17 	ldw	r3,1328(sp)
 1005ec0:	1880008c 	andi	r2,r3,2
 1005ec4:	1005003a 	cmpeq	r2,r2,zero
 1005ec8:	d8815015 	stw	r2,1344(sp)
 1005ecc:	1000031e 	bne	r2,zero,1005edc <___vfprintf_internal_r+0x3e0>
 1005ed0:	d9014517 	ldw	r4,1300(sp)
 1005ed4:	21000084 	addi	r4,r4,2
 1005ed8:	d9014515 	stw	r4,1300(sp)
 1005edc:	d9414c17 	ldw	r5,1328(sp)
 1005ee0:	2940210c 	andi	r5,r5,132
 1005ee4:	d9414e15 	stw	r5,1336(sp)
 1005ee8:	28002d1e 	bne	r5,zero,1005fa0 <___vfprintf_internal_r+0x4a4>
 1005eec:	d9814a17 	ldw	r6,1320(sp)
 1005ef0:	d8814517 	ldw	r2,1300(sp)
 1005ef4:	30a1c83a 	sub	r16,r6,r2
 1005ef8:	0400290e 	bge	zero,r16,1005fa0 <___vfprintf_internal_r+0x4a4>
 1005efc:	00800404 	movi	r2,16
 1005f00:	14045e0e 	bge	r2,r16,100707c <___vfprintf_internal_r+0x1580>
 1005f04:	dc800e17 	ldw	r18,56(sp)
 1005f08:	dc400d17 	ldw	r17,52(sp)
 1005f0c:	1027883a 	mov	r19,r2
 1005f10:	07004074 	movhi	fp,257
 1005f14:	e70a0e84 	addi	fp,fp,10298
 1005f18:	050001c4 	movi	r20,7
 1005f1c:	00000306 	br	1005f2c <___vfprintf_internal_r+0x430>
 1005f20:	843ffc04 	addi	r16,r16,-16
 1005f24:	ad400204 	addi	r21,r21,8
 1005f28:	9c00130e 	bge	r19,r16,1005f78 <___vfprintf_internal_r+0x47c>
 1005f2c:	94800404 	addi	r18,r18,16
 1005f30:	8c400044 	addi	r17,r17,1
 1005f34:	af000015 	stw	fp,0(r21)
 1005f38:	acc00115 	stw	r19,4(r21)
 1005f3c:	dc800e15 	stw	r18,56(sp)
 1005f40:	dc400d15 	stw	r17,52(sp)
 1005f44:	a47ff60e 	bge	r20,r17,1005f20 <___vfprintf_internal_r+0x424>
 1005f48:	d9014f17 	ldw	r4,1340(sp)
 1005f4c:	b00b883a 	mov	r5,r22
 1005f50:	d9800c04 	addi	r6,sp,48
 1005f54:	d9c15115 	stw	r7,1348(sp)
 1005f58:	1005aa40 	call	1005aa4 <__sprint_r>
 1005f5c:	d9c15117 	ldw	r7,1348(sp)
 1005f60:	10009e1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1005f64:	843ffc04 	addi	r16,r16,-16
 1005f68:	dc800e17 	ldw	r18,56(sp)
 1005f6c:	dc400d17 	ldw	r17,52(sp)
 1005f70:	dd401904 	addi	r21,sp,100
 1005f74:	9c3fed16 	blt	r19,r16,1005f2c <___vfprintf_internal_r+0x430>
 1005f78:	9425883a 	add	r18,r18,r16
 1005f7c:	8c400044 	addi	r17,r17,1
 1005f80:	008001c4 	movi	r2,7
 1005f84:	af000015 	stw	fp,0(r21)
 1005f88:	ac000115 	stw	r16,4(r21)
 1005f8c:	dc800e15 	stw	r18,56(sp)
 1005f90:	dc400d15 	stw	r17,52(sp)
 1005f94:	1441f516 	blt	r2,r17,100676c <___vfprintf_internal_r+0xc70>
 1005f98:	ad400204 	addi	r21,r21,8
 1005f9c:	00000206 	br	1005fa8 <___vfprintf_internal_r+0x4ac>
 1005fa0:	dc800e17 	ldw	r18,56(sp)
 1005fa4:	dc400d17 	ldw	r17,52(sp)
 1005fa8:	d8800407 	ldb	r2,16(sp)
 1005fac:	10000b26 	beq	r2,zero,1005fdc <___vfprintf_internal_r+0x4e0>
 1005fb0:	00800044 	movi	r2,1
 1005fb4:	94800044 	addi	r18,r18,1
 1005fb8:	8c400044 	addi	r17,r17,1
 1005fbc:	a8800115 	stw	r2,4(r21)
 1005fc0:	d8c00404 	addi	r3,sp,16
 1005fc4:	008001c4 	movi	r2,7
 1005fc8:	a8c00015 	stw	r3,0(r21)
 1005fcc:	dc800e15 	stw	r18,56(sp)
 1005fd0:	dc400d15 	stw	r17,52(sp)
 1005fd4:	1441da16 	blt	r2,r17,1006740 <___vfprintf_internal_r+0xc44>
 1005fd8:	ad400204 	addi	r21,r21,8
 1005fdc:	d9015017 	ldw	r4,1344(sp)
 1005fe0:	20000b1e 	bne	r4,zero,1006010 <___vfprintf_internal_r+0x514>
 1005fe4:	d8800444 	addi	r2,sp,17
 1005fe8:	94800084 	addi	r18,r18,2
 1005fec:	8c400044 	addi	r17,r17,1
 1005ff0:	a8800015 	stw	r2,0(r21)
 1005ff4:	00c00084 	movi	r3,2
 1005ff8:	008001c4 	movi	r2,7
 1005ffc:	a8c00115 	stw	r3,4(r21)
 1006000:	dc800e15 	stw	r18,56(sp)
 1006004:	dc400d15 	stw	r17,52(sp)
 1006008:	1441c216 	blt	r2,r17,1006714 <___vfprintf_internal_r+0xc18>
 100600c:	ad400204 	addi	r21,r21,8
 1006010:	d9414e17 	ldw	r5,1336(sp)
 1006014:	00802004 	movi	r2,128
 1006018:	2880b126 	beq	r5,r2,10062e0 <___vfprintf_internal_r+0x7e4>
 100601c:	d8c14617 	ldw	r3,1304(sp)
 1006020:	19e1c83a 	sub	r16,r3,r7
 1006024:	0400260e 	bge	zero,r16,10060c0 <___vfprintf_internal_r+0x5c4>
 1006028:	00800404 	movi	r2,16
 100602c:	1403cf0e 	bge	r2,r16,1006f6c <___vfprintf_internal_r+0x1470>
 1006030:	1027883a 	mov	r19,r2
 1006034:	07004074 	movhi	fp,257
 1006038:	e70a0a84 	addi	fp,fp,10282
 100603c:	050001c4 	movi	r20,7
 1006040:	00000306 	br	1006050 <___vfprintf_internal_r+0x554>
 1006044:	843ffc04 	addi	r16,r16,-16
 1006048:	ad400204 	addi	r21,r21,8
 100604c:	9c00130e 	bge	r19,r16,100609c <___vfprintf_internal_r+0x5a0>
 1006050:	94800404 	addi	r18,r18,16
 1006054:	8c400044 	addi	r17,r17,1
 1006058:	af000015 	stw	fp,0(r21)
 100605c:	acc00115 	stw	r19,4(r21)
 1006060:	dc800e15 	stw	r18,56(sp)
 1006064:	dc400d15 	stw	r17,52(sp)
 1006068:	a47ff60e 	bge	r20,r17,1006044 <___vfprintf_internal_r+0x548>
 100606c:	d9014f17 	ldw	r4,1340(sp)
 1006070:	b00b883a 	mov	r5,r22
 1006074:	d9800c04 	addi	r6,sp,48
 1006078:	d9c15115 	stw	r7,1348(sp)
 100607c:	1005aa40 	call	1005aa4 <__sprint_r>
 1006080:	d9c15117 	ldw	r7,1348(sp)
 1006084:	1000551e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006088:	843ffc04 	addi	r16,r16,-16
 100608c:	dc800e17 	ldw	r18,56(sp)
 1006090:	dc400d17 	ldw	r17,52(sp)
 1006094:	dd401904 	addi	r21,sp,100
 1006098:	9c3fed16 	blt	r19,r16,1006050 <___vfprintf_internal_r+0x554>
 100609c:	9425883a 	add	r18,r18,r16
 10060a0:	8c400044 	addi	r17,r17,1
 10060a4:	008001c4 	movi	r2,7
 10060a8:	af000015 	stw	fp,0(r21)
 10060ac:	ac000115 	stw	r16,4(r21)
 10060b0:	dc800e15 	stw	r18,56(sp)
 10060b4:	dc400d15 	stw	r17,52(sp)
 10060b8:	14418216 	blt	r2,r17,10066c4 <___vfprintf_internal_r+0xbc8>
 10060bc:	ad400204 	addi	r21,r21,8
 10060c0:	d9014c17 	ldw	r4,1328(sp)
 10060c4:	2080400c 	andi	r2,r4,256
 10060c8:	10004a1e 	bne	r2,zero,10061f4 <___vfprintf_internal_r+0x6f8>
 10060cc:	d9414117 	ldw	r5,1284(sp)
 10060d0:	91e5883a 	add	r18,r18,r7
 10060d4:	8c400044 	addi	r17,r17,1
 10060d8:	008001c4 	movi	r2,7
 10060dc:	a9400015 	stw	r5,0(r21)
 10060e0:	a9c00115 	stw	r7,4(r21)
 10060e4:	dc800e15 	stw	r18,56(sp)
 10060e8:	dc400d15 	stw	r17,52(sp)
 10060ec:	14416716 	blt	r2,r17,100668c <___vfprintf_internal_r+0xb90>
 10060f0:	a8c00204 	addi	r3,r21,8
 10060f4:	d9814c17 	ldw	r6,1328(sp)
 10060f8:	3080010c 	andi	r2,r6,4
 10060fc:	10002826 	beq	r2,zero,10061a0 <___vfprintf_internal_r+0x6a4>
 1006100:	d8814a17 	ldw	r2,1320(sp)
 1006104:	d9014517 	ldw	r4,1300(sp)
 1006108:	1121c83a 	sub	r16,r2,r4
 100610c:	0400240e 	bge	zero,r16,10061a0 <___vfprintf_internal_r+0x6a4>
 1006110:	00800404 	movi	r2,16
 1006114:	1404550e 	bge	r2,r16,100726c <___vfprintf_internal_r+0x1770>
 1006118:	dc400d17 	ldw	r17,52(sp)
 100611c:	1027883a 	mov	r19,r2
 1006120:	07004074 	movhi	fp,257
 1006124:	e70a0e84 	addi	fp,fp,10298
 1006128:	050001c4 	movi	r20,7
 100612c:	00000306 	br	100613c <___vfprintf_internal_r+0x640>
 1006130:	843ffc04 	addi	r16,r16,-16
 1006134:	18c00204 	addi	r3,r3,8
 1006138:	9c00110e 	bge	r19,r16,1006180 <___vfprintf_internal_r+0x684>
 100613c:	94800404 	addi	r18,r18,16
 1006140:	8c400044 	addi	r17,r17,1
 1006144:	1f000015 	stw	fp,0(r3)
 1006148:	1cc00115 	stw	r19,4(r3)
 100614c:	dc800e15 	stw	r18,56(sp)
 1006150:	dc400d15 	stw	r17,52(sp)
 1006154:	a47ff60e 	bge	r20,r17,1006130 <___vfprintf_internal_r+0x634>
 1006158:	d9014f17 	ldw	r4,1340(sp)
 100615c:	b00b883a 	mov	r5,r22
 1006160:	d9800c04 	addi	r6,sp,48
 1006164:	1005aa40 	call	1005aa4 <__sprint_r>
 1006168:	10001c1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 100616c:	843ffc04 	addi	r16,r16,-16
 1006170:	dc800e17 	ldw	r18,56(sp)
 1006174:	dc400d17 	ldw	r17,52(sp)
 1006178:	d8c01904 	addi	r3,sp,100
 100617c:	9c3fef16 	blt	r19,r16,100613c <___vfprintf_internal_r+0x640>
 1006180:	9425883a 	add	r18,r18,r16
 1006184:	8c400044 	addi	r17,r17,1
 1006188:	008001c4 	movi	r2,7
 100618c:	1f000015 	stw	fp,0(r3)
 1006190:	1c000115 	stw	r16,4(r3)
 1006194:	dc800e15 	stw	r18,56(sp)
 1006198:	dc400d15 	stw	r17,52(sp)
 100619c:	1440cb16 	blt	r2,r17,10064cc <___vfprintf_internal_r+0x9d0>
 10061a0:	d8814a17 	ldw	r2,1320(sp)
 10061a4:	d9414517 	ldw	r5,1300(sp)
 10061a8:	1140010e 	bge	r2,r5,10061b0 <___vfprintf_internal_r+0x6b4>
 10061ac:	2805883a 	mov	r2,r5
 10061b0:	d9814b17 	ldw	r6,1324(sp)
 10061b4:	308d883a 	add	r6,r6,r2
 10061b8:	d9814b15 	stw	r6,1324(sp)
 10061bc:	90013b1e 	bne	r18,zero,10066ac <___vfprintf_internal_r+0xbb0>
 10061c0:	d9c14017 	ldw	r7,1280(sp)
 10061c4:	dd401904 	addi	r21,sp,100
 10061c8:	d8000d15 	stw	zero,52(sp)
 10061cc:	003ea706 	br	1005c6c <___vfprintf_internal_r+0x170>
 10061d0:	d8800e17 	ldw	r2,56(sp)
 10061d4:	1005451e 	bne	r2,zero,10076ec <___vfprintf_internal_r+0x1bf0>
 10061d8:	d8000d15 	stw	zero,52(sp)
 10061dc:	b080030b 	ldhu	r2,12(r22)
 10061e0:	1080100c 	andi	r2,r2,64
 10061e4:	103e8726 	beq	r2,zero,1005c04 <___vfprintf_internal_r+0x108>
 10061e8:	00bfffc4 	movi	r2,-1
 10061ec:	d8814b15 	stw	r2,1324(sp)
 10061f0:	003e8406 	br	1005c04 <___vfprintf_internal_r+0x108>
 10061f4:	d9814d17 	ldw	r6,1332(sp)
 10061f8:	00801944 	movi	r2,101
 10061fc:	11806e16 	blt	r2,r6,10063b8 <___vfprintf_internal_r+0x8bc>
 1006200:	d9414717 	ldw	r5,1308(sp)
 1006204:	00c00044 	movi	r3,1
 1006208:	1943490e 	bge	r3,r5,1006f30 <___vfprintf_internal_r+0x1434>
 100620c:	d8814117 	ldw	r2,1284(sp)
 1006210:	94800044 	addi	r18,r18,1
 1006214:	8c400044 	addi	r17,r17,1
 1006218:	a8800015 	stw	r2,0(r21)
 100621c:	008001c4 	movi	r2,7
 1006220:	a8c00115 	stw	r3,4(r21)
 1006224:	dc800e15 	stw	r18,56(sp)
 1006228:	dc400d15 	stw	r17,52(sp)
 100622c:	1441ca16 	blt	r2,r17,1006958 <___vfprintf_internal_r+0xe5c>
 1006230:	a8c00204 	addi	r3,r21,8
 1006234:	d9014917 	ldw	r4,1316(sp)
 1006238:	00800044 	movi	r2,1
 100623c:	94800044 	addi	r18,r18,1
 1006240:	8c400044 	addi	r17,r17,1
 1006244:	18800115 	stw	r2,4(r3)
 1006248:	008001c4 	movi	r2,7
 100624c:	19000015 	stw	r4,0(r3)
 1006250:	dc800e15 	stw	r18,56(sp)
 1006254:	dc400d15 	stw	r17,52(sp)
 1006258:	1441b616 	blt	r2,r17,1006934 <___vfprintf_internal_r+0xe38>
 100625c:	1cc00204 	addi	r19,r3,8
 1006260:	d9014217 	ldw	r4,1288(sp)
 1006264:	d9414317 	ldw	r5,1292(sp)
 1006268:	000d883a 	mov	r6,zero
 100626c:	000f883a 	mov	r7,zero
 1006270:	100d4b00 	call	100d4b0 <__nedf2>
 1006274:	10017426 	beq	r2,zero,1006848 <___vfprintf_internal_r+0xd4c>
 1006278:	d9414717 	ldw	r5,1308(sp)
 100627c:	d9814117 	ldw	r6,1284(sp)
 1006280:	8c400044 	addi	r17,r17,1
 1006284:	2c85883a 	add	r2,r5,r18
 1006288:	14bfffc4 	addi	r18,r2,-1
 100628c:	28bfffc4 	addi	r2,r5,-1
 1006290:	30c00044 	addi	r3,r6,1
 1006294:	98800115 	stw	r2,4(r19)
 1006298:	008001c4 	movi	r2,7
 100629c:	98c00015 	stw	r3,0(r19)
 10062a0:	dc800e15 	stw	r18,56(sp)
 10062a4:	dc400d15 	stw	r17,52(sp)
 10062a8:	14418e16 	blt	r2,r17,10068e4 <___vfprintf_internal_r+0xde8>
 10062ac:	9cc00204 	addi	r19,r19,8
 10062b0:	d9414817 	ldw	r5,1312(sp)
 10062b4:	d8800804 	addi	r2,sp,32
 10062b8:	8c400044 	addi	r17,r17,1
 10062bc:	9165883a 	add	r18,r18,r5
 10062c0:	98800015 	stw	r2,0(r19)
 10062c4:	008001c4 	movi	r2,7
 10062c8:	99400115 	stw	r5,4(r19)
 10062cc:	dc800e15 	stw	r18,56(sp)
 10062d0:	dc400d15 	stw	r17,52(sp)
 10062d4:	1440ed16 	blt	r2,r17,100668c <___vfprintf_internal_r+0xb90>
 10062d8:	98c00204 	addi	r3,r19,8
 10062dc:	003f8506 	br	10060f4 <___vfprintf_internal_r+0x5f8>
 10062e0:	d9814a17 	ldw	r6,1320(sp)
 10062e4:	d8814517 	ldw	r2,1300(sp)
 10062e8:	30a1c83a 	sub	r16,r6,r2
 10062ec:	043f4b0e 	bge	zero,r16,100601c <___vfprintf_internal_r+0x520>
 10062f0:	00800404 	movi	r2,16
 10062f4:	14043a0e 	bge	r2,r16,10073e0 <___vfprintf_internal_r+0x18e4>
 10062f8:	1027883a 	mov	r19,r2
 10062fc:	07004074 	movhi	fp,257
 1006300:	e70a0a84 	addi	fp,fp,10282
 1006304:	050001c4 	movi	r20,7
 1006308:	00000306 	br	1006318 <___vfprintf_internal_r+0x81c>
 100630c:	843ffc04 	addi	r16,r16,-16
 1006310:	ad400204 	addi	r21,r21,8
 1006314:	9c00130e 	bge	r19,r16,1006364 <___vfprintf_internal_r+0x868>
 1006318:	94800404 	addi	r18,r18,16
 100631c:	8c400044 	addi	r17,r17,1
 1006320:	af000015 	stw	fp,0(r21)
 1006324:	acc00115 	stw	r19,4(r21)
 1006328:	dc800e15 	stw	r18,56(sp)
 100632c:	dc400d15 	stw	r17,52(sp)
 1006330:	a47ff60e 	bge	r20,r17,100630c <___vfprintf_internal_r+0x810>
 1006334:	d9014f17 	ldw	r4,1340(sp)
 1006338:	b00b883a 	mov	r5,r22
 100633c:	d9800c04 	addi	r6,sp,48
 1006340:	d9c15115 	stw	r7,1348(sp)
 1006344:	1005aa40 	call	1005aa4 <__sprint_r>
 1006348:	d9c15117 	ldw	r7,1348(sp)
 100634c:	103fa31e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006350:	843ffc04 	addi	r16,r16,-16
 1006354:	dc800e17 	ldw	r18,56(sp)
 1006358:	dc400d17 	ldw	r17,52(sp)
 100635c:	dd401904 	addi	r21,sp,100
 1006360:	9c3fed16 	blt	r19,r16,1006318 <___vfprintf_internal_r+0x81c>
 1006364:	9425883a 	add	r18,r18,r16
 1006368:	8c400044 	addi	r17,r17,1
 100636c:	008001c4 	movi	r2,7
 1006370:	af000015 	stw	fp,0(r21)
 1006374:	ac000115 	stw	r16,4(r21)
 1006378:	dc800e15 	stw	r18,56(sp)
 100637c:	dc400d15 	stw	r17,52(sp)
 1006380:	14416116 	blt	r2,r17,1006908 <___vfprintf_internal_r+0xe0c>
 1006384:	ad400204 	addi	r21,r21,8
 1006388:	003f2406 	br	100601c <___vfprintf_internal_r+0x520>
 100638c:	d9014f17 	ldw	r4,1340(sp)
 1006390:	10095b00 	call	10095b0 <__sinit>
 1006394:	d9c15117 	ldw	r7,1348(sp)
 1006398:	003def06 	br	1005b58 <___vfprintf_internal_r+0x5c>
 100639c:	d9014f17 	ldw	r4,1340(sp)
 10063a0:	b00b883a 	mov	r5,r22
 10063a4:	d9c15115 	stw	r7,1348(sp)
 10063a8:	10079e40 	call	10079e4 <__swsetup_r>
 10063ac:	d9c15117 	ldw	r7,1348(sp)
 10063b0:	103dee26 	beq	r2,zero,1005b6c <___vfprintf_internal_r+0x70>
 10063b4:	003f8c06 	br	10061e8 <___vfprintf_internal_r+0x6ec>
 10063b8:	d9014217 	ldw	r4,1288(sp)
 10063bc:	d9414317 	ldw	r5,1292(sp)
 10063c0:	000d883a 	mov	r6,zero
 10063c4:	000f883a 	mov	r7,zero
 10063c8:	10042800 	call	1004280 <__eqdf2>
 10063cc:	1000f21e 	bne	r2,zero,1006798 <___vfprintf_internal_r+0xc9c>
 10063d0:	00804074 	movhi	r2,257
 10063d4:	108a0a04 	addi	r2,r2,10280
 10063d8:	94800044 	addi	r18,r18,1
 10063dc:	8c400044 	addi	r17,r17,1
 10063e0:	a8800015 	stw	r2,0(r21)
 10063e4:	00c00044 	movi	r3,1
 10063e8:	008001c4 	movi	r2,7
 10063ec:	a8c00115 	stw	r3,4(r21)
 10063f0:	dc800e15 	stw	r18,56(sp)
 10063f4:	dc400d15 	stw	r17,52(sp)
 10063f8:	14430016 	blt	r2,r17,1006ffc <___vfprintf_internal_r+0x1500>
 10063fc:	a8c00204 	addi	r3,r21,8
 1006400:	d8800517 	ldw	r2,20(sp)
 1006404:	d9014717 	ldw	r4,1308(sp)
 1006408:	11015c0e 	bge	r2,r4,100697c <___vfprintf_internal_r+0xe80>
 100640c:	dc400d17 	ldw	r17,52(sp)
 1006410:	d9814917 	ldw	r6,1316(sp)
 1006414:	00800044 	movi	r2,1
 1006418:	94800044 	addi	r18,r18,1
 100641c:	8c400044 	addi	r17,r17,1
 1006420:	18800115 	stw	r2,4(r3)
 1006424:	008001c4 	movi	r2,7
 1006428:	19800015 	stw	r6,0(r3)
 100642c:	dc800e15 	stw	r18,56(sp)
 1006430:	dc400d15 	stw	r17,52(sp)
 1006434:	14431616 	blt	r2,r17,1007090 <___vfprintf_internal_r+0x1594>
 1006438:	18c00204 	addi	r3,r3,8
 100643c:	d8814717 	ldw	r2,1308(sp)
 1006440:	143fffc4 	addi	r16,r2,-1
 1006444:	043f2b0e 	bge	zero,r16,10060f4 <___vfprintf_internal_r+0x5f8>
 1006448:	00800404 	movi	r2,16
 100644c:	1402a80e 	bge	r2,r16,1006ef0 <___vfprintf_internal_r+0x13f4>
 1006450:	dc400d17 	ldw	r17,52(sp)
 1006454:	1027883a 	mov	r19,r2
 1006458:	07004074 	movhi	fp,257
 100645c:	e70a0a84 	addi	fp,fp,10282
 1006460:	050001c4 	movi	r20,7
 1006464:	00000306 	br	1006474 <___vfprintf_internal_r+0x978>
 1006468:	18c00204 	addi	r3,r3,8
 100646c:	843ffc04 	addi	r16,r16,-16
 1006470:	9c02a20e 	bge	r19,r16,1006efc <___vfprintf_internal_r+0x1400>
 1006474:	94800404 	addi	r18,r18,16
 1006478:	8c400044 	addi	r17,r17,1
 100647c:	1f000015 	stw	fp,0(r3)
 1006480:	1cc00115 	stw	r19,4(r3)
 1006484:	dc800e15 	stw	r18,56(sp)
 1006488:	dc400d15 	stw	r17,52(sp)
 100648c:	a47ff60e 	bge	r20,r17,1006468 <___vfprintf_internal_r+0x96c>
 1006490:	d9014f17 	ldw	r4,1340(sp)
 1006494:	b00b883a 	mov	r5,r22
 1006498:	d9800c04 	addi	r6,sp,48
 100649c:	1005aa40 	call	1005aa4 <__sprint_r>
 10064a0:	103f4e1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10064a4:	dc800e17 	ldw	r18,56(sp)
 10064a8:	dc400d17 	ldw	r17,52(sp)
 10064ac:	d8c01904 	addi	r3,sp,100
 10064b0:	003fee06 	br	100646c <___vfprintf_internal_r+0x970>
 10064b4:	d8802c0b 	ldhu	r2,176(sp)
 10064b8:	00ffffc4 	movi	r3,-1
 10064bc:	d8c14b15 	stw	r3,1324(sp)
 10064c0:	1080100c 	andi	r2,r2,64
 10064c4:	103dcc1e 	bne	r2,zero,1005bf8 <___vfprintf_internal_r+0xfc>
 10064c8:	003dce06 	br	1005c04 <___vfprintf_internal_r+0x108>
 10064cc:	d9014f17 	ldw	r4,1340(sp)
 10064d0:	b00b883a 	mov	r5,r22
 10064d4:	d9800c04 	addi	r6,sp,48
 10064d8:	1005aa40 	call	1005aa4 <__sprint_r>
 10064dc:	103f3f1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10064e0:	dc800e17 	ldw	r18,56(sp)
 10064e4:	003f2e06 	br	10061a0 <___vfprintf_internal_r+0x6a4>
 10064e8:	d9414c17 	ldw	r5,1328(sp)
 10064ec:	29400414 	ori	r5,r5,16
 10064f0:	d9414c15 	stw	r5,1328(sp)
 10064f4:	d9814c17 	ldw	r6,1328(sp)
 10064f8:	3080080c 	andi	r2,r6,32
 10064fc:	10014f1e 	bne	r2,zero,1006a3c <___vfprintf_internal_r+0xf40>
 1006500:	d8c14c17 	ldw	r3,1328(sp)
 1006504:	1880040c 	andi	r2,r3,16
 1006508:	1002f01e 	bne	r2,zero,10070cc <___vfprintf_internal_r+0x15d0>
 100650c:	d9014c17 	ldw	r4,1328(sp)
 1006510:	2080100c 	andi	r2,r4,64
 1006514:	1002ed26 	beq	r2,zero,10070cc <___vfprintf_internal_r+0x15d0>
 1006518:	3880000f 	ldh	r2,0(r7)
 100651c:	39c00104 	addi	r7,r7,4
 1006520:	d9c14015 	stw	r7,1280(sp)
 1006524:	1023d7fa 	srai	r17,r2,31
 1006528:	1021883a 	mov	r16,r2
 100652c:	88037816 	blt	r17,zero,1007310 <___vfprintf_internal_r+0x1814>
 1006530:	01000044 	movi	r4,1
 1006534:	98000416 	blt	r19,zero,1006548 <___vfprintf_internal_r+0xa4c>
 1006538:	d8c14c17 	ldw	r3,1328(sp)
 100653c:	00bfdfc4 	movi	r2,-129
 1006540:	1886703a 	and	r3,r3,r2
 1006544:	d8c14c15 	stw	r3,1328(sp)
 1006548:	8444b03a 	or	r2,r16,r17
 100654c:	10022c1e 	bne	r2,zero,1006e00 <___vfprintf_internal_r+0x1304>
 1006550:	98022b1e 	bne	r19,zero,1006e00 <___vfprintf_internal_r+0x1304>
 1006554:	20803fcc 	andi	r2,r4,255
 1006558:	1002a126 	beq	r2,zero,1006fe0 <___vfprintf_internal_r+0x14e4>
 100655c:	d8c01904 	addi	r3,sp,100
 1006560:	dd000f04 	addi	r20,sp,60
 1006564:	d8c14115 	stw	r3,1284(sp)
 1006568:	d8c14117 	ldw	r3,1284(sp)
 100656c:	dcc14515 	stw	r19,1300(sp)
 1006570:	a0c5c83a 	sub	r2,r20,r3
 1006574:	11c00a04 	addi	r7,r2,40
 1006578:	99c0010e 	bge	r19,r7,1006580 <___vfprintf_internal_r+0xa84>
 100657c:	d9c14515 	stw	r7,1300(sp)
 1006580:	dcc14615 	stw	r19,1304(sp)
 1006584:	d8800407 	ldb	r2,16(sp)
 1006588:	103e4c26 	beq	r2,zero,1005ebc <___vfprintf_internal_r+0x3c0>
 100658c:	d8814517 	ldw	r2,1300(sp)
 1006590:	10800044 	addi	r2,r2,1
 1006594:	d8814515 	stw	r2,1300(sp)
 1006598:	003e4806 	br	1005ebc <___vfprintf_internal_r+0x3c0>
 100659c:	d9814c17 	ldw	r6,1328(sp)
 10065a0:	31800414 	ori	r6,r6,16
 10065a4:	d9814c15 	stw	r6,1328(sp)
 10065a8:	d8c14c17 	ldw	r3,1328(sp)
 10065ac:	1880080c 	andi	r2,r3,32
 10065b0:	1001271e 	bne	r2,zero,1006a50 <___vfprintf_internal_r+0xf54>
 10065b4:	d9414c17 	ldw	r5,1328(sp)
 10065b8:	2880040c 	andi	r2,r5,16
 10065bc:	1002bc1e 	bne	r2,zero,10070b0 <___vfprintf_internal_r+0x15b4>
 10065c0:	d9814c17 	ldw	r6,1328(sp)
 10065c4:	3080100c 	andi	r2,r6,64
 10065c8:	1002b926 	beq	r2,zero,10070b0 <___vfprintf_internal_r+0x15b4>
 10065cc:	3c00000b 	ldhu	r16,0(r7)
 10065d0:	0009883a 	mov	r4,zero
 10065d4:	39c00104 	addi	r7,r7,4
 10065d8:	0023883a 	mov	r17,zero
 10065dc:	d9c14015 	stw	r7,1280(sp)
 10065e0:	d8000405 	stb	zero,16(sp)
 10065e4:	003fd306 	br	1006534 <___vfprintf_internal_r+0xa38>
 10065e8:	d9014c17 	ldw	r4,1328(sp)
 10065ec:	21000414 	ori	r4,r4,16
 10065f0:	d9014c15 	stw	r4,1328(sp)
 10065f4:	d9414c17 	ldw	r5,1328(sp)
 10065f8:	2880080c 	andi	r2,r5,32
 10065fc:	1001081e 	bne	r2,zero,1006a20 <___vfprintf_internal_r+0xf24>
 1006600:	d8c14c17 	ldw	r3,1328(sp)
 1006604:	1880040c 	andi	r2,r3,16
 1006608:	1002b61e 	bne	r2,zero,10070e4 <___vfprintf_internal_r+0x15e8>
 100660c:	d9014c17 	ldw	r4,1328(sp)
 1006610:	2080100c 	andi	r2,r4,64
 1006614:	1002b326 	beq	r2,zero,10070e4 <___vfprintf_internal_r+0x15e8>
 1006618:	3c00000b 	ldhu	r16,0(r7)
 100661c:	01000044 	movi	r4,1
 1006620:	39c00104 	addi	r7,r7,4
 1006624:	0023883a 	mov	r17,zero
 1006628:	d9c14015 	stw	r7,1280(sp)
 100662c:	d8000405 	stb	zero,16(sp)
 1006630:	003fc006 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006634:	d9014f17 	ldw	r4,1340(sp)
 1006638:	b00b883a 	mov	r5,r22
 100663c:	d9800c04 	addi	r6,sp,48
 1006640:	1005aa40 	call	1005aa4 <__sprint_r>
 1006644:	103ee51e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006648:	dc800e17 	ldw	r18,56(sp)
 100664c:	d8c01904 	addi	r3,sp,100
 1006650:	d9814c17 	ldw	r6,1328(sp)
 1006654:	3080004c 	andi	r2,r6,1
 1006658:	1005003a 	cmpeq	r2,r2,zero
 100665c:	103ea51e 	bne	r2,zero,10060f4 <___vfprintf_internal_r+0x5f8>
 1006660:	00800044 	movi	r2,1
 1006664:	dc400d17 	ldw	r17,52(sp)
 1006668:	18800115 	stw	r2,4(r3)
 100666c:	d8814917 	ldw	r2,1316(sp)
 1006670:	94800044 	addi	r18,r18,1
 1006674:	8c400044 	addi	r17,r17,1
 1006678:	18800015 	stw	r2,0(r3)
 100667c:	008001c4 	movi	r2,7
 1006680:	dc800e15 	stw	r18,56(sp)
 1006684:	dc400d15 	stw	r17,52(sp)
 1006688:	1442240e 	bge	r2,r17,1006f1c <___vfprintf_internal_r+0x1420>
 100668c:	d9014f17 	ldw	r4,1340(sp)
 1006690:	b00b883a 	mov	r5,r22
 1006694:	d9800c04 	addi	r6,sp,48
 1006698:	1005aa40 	call	1005aa4 <__sprint_r>
 100669c:	103ecf1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10066a0:	dc800e17 	ldw	r18,56(sp)
 10066a4:	d8c01904 	addi	r3,sp,100
 10066a8:	003e9206 	br	10060f4 <___vfprintf_internal_r+0x5f8>
 10066ac:	d9014f17 	ldw	r4,1340(sp)
 10066b0:	b00b883a 	mov	r5,r22
 10066b4:	d9800c04 	addi	r6,sp,48
 10066b8:	1005aa40 	call	1005aa4 <__sprint_r>
 10066bc:	103ec026 	beq	r2,zero,10061c0 <___vfprintf_internal_r+0x6c4>
 10066c0:	003ec606 	br	10061dc <___vfprintf_internal_r+0x6e0>
 10066c4:	d9014f17 	ldw	r4,1340(sp)
 10066c8:	b00b883a 	mov	r5,r22
 10066cc:	d9800c04 	addi	r6,sp,48
 10066d0:	d9c15115 	stw	r7,1348(sp)
 10066d4:	1005aa40 	call	1005aa4 <__sprint_r>
 10066d8:	d9c15117 	ldw	r7,1348(sp)
 10066dc:	103ebf1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10066e0:	dc800e17 	ldw	r18,56(sp)
 10066e4:	dc400d17 	ldw	r17,52(sp)
 10066e8:	dd401904 	addi	r21,sp,100
 10066ec:	003e7406 	br	10060c0 <___vfprintf_internal_r+0x5c4>
 10066f0:	d9014f17 	ldw	r4,1340(sp)
 10066f4:	b00b883a 	mov	r5,r22
 10066f8:	d9800c04 	addi	r6,sp,48
 10066fc:	d9c15115 	stw	r7,1348(sp)
 1006700:	1005aa40 	call	1005aa4 <__sprint_r>
 1006704:	d9c15117 	ldw	r7,1348(sp)
 1006708:	103eb41e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 100670c:	dd401904 	addi	r21,sp,100
 1006710:	003d6d06 	br	1005cc8 <___vfprintf_internal_r+0x1cc>
 1006714:	d9014f17 	ldw	r4,1340(sp)
 1006718:	b00b883a 	mov	r5,r22
 100671c:	d9800c04 	addi	r6,sp,48
 1006720:	d9c15115 	stw	r7,1348(sp)
 1006724:	1005aa40 	call	1005aa4 <__sprint_r>
 1006728:	d9c15117 	ldw	r7,1348(sp)
 100672c:	103eab1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006730:	dc800e17 	ldw	r18,56(sp)
 1006734:	dc400d17 	ldw	r17,52(sp)
 1006738:	dd401904 	addi	r21,sp,100
 100673c:	003e3406 	br	1006010 <___vfprintf_internal_r+0x514>
 1006740:	d9014f17 	ldw	r4,1340(sp)
 1006744:	b00b883a 	mov	r5,r22
 1006748:	d9800c04 	addi	r6,sp,48
 100674c:	d9c15115 	stw	r7,1348(sp)
 1006750:	1005aa40 	call	1005aa4 <__sprint_r>
 1006754:	d9c15117 	ldw	r7,1348(sp)
 1006758:	103ea01e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 100675c:	dc800e17 	ldw	r18,56(sp)
 1006760:	dc400d17 	ldw	r17,52(sp)
 1006764:	dd401904 	addi	r21,sp,100
 1006768:	003e1c06 	br	1005fdc <___vfprintf_internal_r+0x4e0>
 100676c:	d9014f17 	ldw	r4,1340(sp)
 1006770:	b00b883a 	mov	r5,r22
 1006774:	d9800c04 	addi	r6,sp,48
 1006778:	d9c15115 	stw	r7,1348(sp)
 100677c:	1005aa40 	call	1005aa4 <__sprint_r>
 1006780:	d9c15117 	ldw	r7,1348(sp)
 1006784:	103e951e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006788:	dc800e17 	ldw	r18,56(sp)
 100678c:	dc400d17 	ldw	r17,52(sp)
 1006790:	dd401904 	addi	r21,sp,100
 1006794:	003e0406 	br	1005fa8 <___vfprintf_internal_r+0x4ac>
 1006798:	d9000517 	ldw	r4,20(sp)
 100679c:	0102580e 	bge	zero,r4,1007100 <___vfprintf_internal_r+0x1604>
 10067a0:	d9814717 	ldw	r6,1308(sp)
 10067a4:	21807a16 	blt	r4,r6,1006990 <___vfprintf_internal_r+0xe94>
 10067a8:	d8814117 	ldw	r2,1284(sp)
 10067ac:	91a5883a 	add	r18,r18,r6
 10067b0:	8c400044 	addi	r17,r17,1
 10067b4:	a8800015 	stw	r2,0(r21)
 10067b8:	008001c4 	movi	r2,7
 10067bc:	a9800115 	stw	r6,4(r21)
 10067c0:	dc800e15 	stw	r18,56(sp)
 10067c4:	dc400d15 	stw	r17,52(sp)
 10067c8:	1442fc16 	blt	r2,r17,10073bc <___vfprintf_internal_r+0x18c0>
 10067cc:	a8c00204 	addi	r3,r21,8
 10067d0:	d9414717 	ldw	r5,1308(sp)
 10067d4:	2161c83a 	sub	r16,r4,r5
 10067d8:	043f9d0e 	bge	zero,r16,1006650 <___vfprintf_internal_r+0xb54>
 10067dc:	00800404 	movi	r2,16
 10067e0:	1402190e 	bge	r2,r16,1007048 <___vfprintf_internal_r+0x154c>
 10067e4:	dc400d17 	ldw	r17,52(sp)
 10067e8:	1027883a 	mov	r19,r2
 10067ec:	07004074 	movhi	fp,257
 10067f0:	e70a0a84 	addi	fp,fp,10282
 10067f4:	050001c4 	movi	r20,7
 10067f8:	00000306 	br	1006808 <___vfprintf_internal_r+0xd0c>
 10067fc:	18c00204 	addi	r3,r3,8
 1006800:	843ffc04 	addi	r16,r16,-16
 1006804:	9c02130e 	bge	r19,r16,1007054 <___vfprintf_internal_r+0x1558>
 1006808:	94800404 	addi	r18,r18,16
 100680c:	8c400044 	addi	r17,r17,1
 1006810:	1f000015 	stw	fp,0(r3)
 1006814:	1cc00115 	stw	r19,4(r3)
 1006818:	dc800e15 	stw	r18,56(sp)
 100681c:	dc400d15 	stw	r17,52(sp)
 1006820:	a47ff60e 	bge	r20,r17,10067fc <___vfprintf_internal_r+0xd00>
 1006824:	d9014f17 	ldw	r4,1340(sp)
 1006828:	b00b883a 	mov	r5,r22
 100682c:	d9800c04 	addi	r6,sp,48
 1006830:	1005aa40 	call	1005aa4 <__sprint_r>
 1006834:	103e691e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006838:	dc800e17 	ldw	r18,56(sp)
 100683c:	dc400d17 	ldw	r17,52(sp)
 1006840:	d8c01904 	addi	r3,sp,100
 1006844:	003fee06 	br	1006800 <___vfprintf_internal_r+0xd04>
 1006848:	d8814717 	ldw	r2,1308(sp)
 100684c:	143fffc4 	addi	r16,r2,-1
 1006850:	043e970e 	bge	zero,r16,10062b0 <___vfprintf_internal_r+0x7b4>
 1006854:	00800404 	movi	r2,16
 1006858:	1400180e 	bge	r2,r16,10068bc <___vfprintf_internal_r+0xdc0>
 100685c:	1029883a 	mov	r20,r2
 1006860:	07004074 	movhi	fp,257
 1006864:	e70a0a84 	addi	fp,fp,10282
 1006868:	054001c4 	movi	r21,7
 100686c:	00000306 	br	100687c <___vfprintf_internal_r+0xd80>
 1006870:	9cc00204 	addi	r19,r19,8
 1006874:	843ffc04 	addi	r16,r16,-16
 1006878:	a400120e 	bge	r20,r16,10068c4 <___vfprintf_internal_r+0xdc8>
 100687c:	94800404 	addi	r18,r18,16
 1006880:	8c400044 	addi	r17,r17,1
 1006884:	9f000015 	stw	fp,0(r19)
 1006888:	9d000115 	stw	r20,4(r19)
 100688c:	dc800e15 	stw	r18,56(sp)
 1006890:	dc400d15 	stw	r17,52(sp)
 1006894:	ac7ff60e 	bge	r21,r17,1006870 <___vfprintf_internal_r+0xd74>
 1006898:	d9014f17 	ldw	r4,1340(sp)
 100689c:	b00b883a 	mov	r5,r22
 10068a0:	d9800c04 	addi	r6,sp,48
 10068a4:	1005aa40 	call	1005aa4 <__sprint_r>
 10068a8:	103e4c1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10068ac:	dc800e17 	ldw	r18,56(sp)
 10068b0:	dc400d17 	ldw	r17,52(sp)
 10068b4:	dcc01904 	addi	r19,sp,100
 10068b8:	003fee06 	br	1006874 <___vfprintf_internal_r+0xd78>
 10068bc:	07004074 	movhi	fp,257
 10068c0:	e70a0a84 	addi	fp,fp,10282
 10068c4:	9425883a 	add	r18,r18,r16
 10068c8:	8c400044 	addi	r17,r17,1
 10068cc:	008001c4 	movi	r2,7
 10068d0:	9f000015 	stw	fp,0(r19)
 10068d4:	9c000115 	stw	r16,4(r19)
 10068d8:	dc800e15 	stw	r18,56(sp)
 10068dc:	dc400d15 	stw	r17,52(sp)
 10068e0:	147e720e 	bge	r2,r17,10062ac <___vfprintf_internal_r+0x7b0>
 10068e4:	d9014f17 	ldw	r4,1340(sp)
 10068e8:	b00b883a 	mov	r5,r22
 10068ec:	d9800c04 	addi	r6,sp,48
 10068f0:	1005aa40 	call	1005aa4 <__sprint_r>
 10068f4:	103e391e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10068f8:	dc800e17 	ldw	r18,56(sp)
 10068fc:	dc400d17 	ldw	r17,52(sp)
 1006900:	dcc01904 	addi	r19,sp,100
 1006904:	003e6a06 	br	10062b0 <___vfprintf_internal_r+0x7b4>
 1006908:	d9014f17 	ldw	r4,1340(sp)
 100690c:	b00b883a 	mov	r5,r22
 1006910:	d9800c04 	addi	r6,sp,48
 1006914:	d9c15115 	stw	r7,1348(sp)
 1006918:	1005aa40 	call	1005aa4 <__sprint_r>
 100691c:	d9c15117 	ldw	r7,1348(sp)
 1006920:	103e2e1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006924:	dc800e17 	ldw	r18,56(sp)
 1006928:	dc400d17 	ldw	r17,52(sp)
 100692c:	dd401904 	addi	r21,sp,100
 1006930:	003dba06 	br	100601c <___vfprintf_internal_r+0x520>
 1006934:	d9014f17 	ldw	r4,1340(sp)
 1006938:	b00b883a 	mov	r5,r22
 100693c:	d9800c04 	addi	r6,sp,48
 1006940:	1005aa40 	call	1005aa4 <__sprint_r>
 1006944:	103e251e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1006948:	dc800e17 	ldw	r18,56(sp)
 100694c:	dc400d17 	ldw	r17,52(sp)
 1006950:	dcc01904 	addi	r19,sp,100
 1006954:	003e4206 	br	1006260 <___vfprintf_internal_r+0x764>
 1006958:	d9014f17 	ldw	r4,1340(sp)
 100695c:	b00b883a 	mov	r5,r22
 1006960:	d9800c04 	addi	r6,sp,48
 1006964:	1005aa40 	call	1005aa4 <__sprint_r>
 1006968:	103e1c1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 100696c:	dc800e17 	ldw	r18,56(sp)
 1006970:	dc400d17 	ldw	r17,52(sp)
 1006974:	d8c01904 	addi	r3,sp,100
 1006978:	003e2e06 	br	1006234 <___vfprintf_internal_r+0x738>
 100697c:	d9414c17 	ldw	r5,1328(sp)
 1006980:	2880004c 	andi	r2,r5,1
 1006984:	1005003a 	cmpeq	r2,r2,zero
 1006988:	103dda1e 	bne	r2,zero,10060f4 <___vfprintf_internal_r+0x5f8>
 100698c:	003e9f06 	br	100640c <___vfprintf_internal_r+0x910>
 1006990:	d8c14117 	ldw	r3,1284(sp)
 1006994:	9125883a 	add	r18,r18,r4
 1006998:	8c400044 	addi	r17,r17,1
 100699c:	008001c4 	movi	r2,7
 10069a0:	a8c00015 	stw	r3,0(r21)
 10069a4:	a9000115 	stw	r4,4(r21)
 10069a8:	dc800e15 	stw	r18,56(sp)
 10069ac:	dc400d15 	stw	r17,52(sp)
 10069b0:	14426c16 	blt	r2,r17,1007364 <___vfprintf_internal_r+0x1868>
 10069b4:	a8c00204 	addi	r3,r21,8
 10069b8:	d9414917 	ldw	r5,1316(sp)
 10069bc:	00800044 	movi	r2,1
 10069c0:	94800044 	addi	r18,r18,1
 10069c4:	8c400044 	addi	r17,r17,1
 10069c8:	18800115 	stw	r2,4(r3)
 10069cc:	008001c4 	movi	r2,7
 10069d0:	19400015 	stw	r5,0(r3)
 10069d4:	dc800e15 	stw	r18,56(sp)
 10069d8:	dc400d15 	stw	r17,52(sp)
 10069dc:	2021883a 	mov	r16,r4
 10069e0:	14425616 	blt	r2,r17,100733c <___vfprintf_internal_r+0x1840>
 10069e4:	19400204 	addi	r5,r3,8
 10069e8:	d9814717 	ldw	r6,1308(sp)
 10069ec:	8c400044 	addi	r17,r17,1
 10069f0:	dc400d15 	stw	r17,52(sp)
 10069f4:	3107c83a 	sub	r3,r6,r4
 10069f8:	d9014117 	ldw	r4,1284(sp)
 10069fc:	90e5883a 	add	r18,r18,r3
 1006a00:	28c00115 	stw	r3,4(r5)
 1006a04:	8105883a 	add	r2,r16,r4
 1006a08:	28800015 	stw	r2,0(r5)
 1006a0c:	008001c4 	movi	r2,7
 1006a10:	dc800e15 	stw	r18,56(sp)
 1006a14:	147f1d16 	blt	r2,r17,100668c <___vfprintf_internal_r+0xb90>
 1006a18:	28c00204 	addi	r3,r5,8
 1006a1c:	003db506 	br	10060f4 <___vfprintf_internal_r+0x5f8>
 1006a20:	3c000017 	ldw	r16,0(r7)
 1006a24:	3c400117 	ldw	r17,4(r7)
 1006a28:	39800204 	addi	r6,r7,8
 1006a2c:	01000044 	movi	r4,1
 1006a30:	d9814015 	stw	r6,1280(sp)
 1006a34:	d8000405 	stb	zero,16(sp)
 1006a38:	003ebe06 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006a3c:	3c000017 	ldw	r16,0(r7)
 1006a40:	3c400117 	ldw	r17,4(r7)
 1006a44:	38800204 	addi	r2,r7,8
 1006a48:	d8814015 	stw	r2,1280(sp)
 1006a4c:	003eb706 	br	100652c <___vfprintf_internal_r+0xa30>
 1006a50:	3c000017 	ldw	r16,0(r7)
 1006a54:	3c400117 	ldw	r17,4(r7)
 1006a58:	39000204 	addi	r4,r7,8
 1006a5c:	d9014015 	stw	r4,1280(sp)
 1006a60:	0009883a 	mov	r4,zero
 1006a64:	d8000405 	stb	zero,16(sp)
 1006a68:	003eb206 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006a6c:	38c00017 	ldw	r3,0(r7)
 1006a70:	39c00104 	addi	r7,r7,4
 1006a74:	d8c14a15 	stw	r3,1320(sp)
 1006a78:	1800d70e 	bge	r3,zero,1006dd8 <___vfprintf_internal_r+0x12dc>
 1006a7c:	00c7c83a 	sub	r3,zero,r3
 1006a80:	d8c14a15 	stw	r3,1320(sp)
 1006a84:	d9014c17 	ldw	r4,1328(sp)
 1006a88:	b8c00007 	ldb	r3,0(r23)
 1006a8c:	21000114 	ori	r4,r4,4
 1006a90:	d9014c15 	stw	r4,1328(sp)
 1006a94:	003c9806 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006a98:	d9814c17 	ldw	r6,1328(sp)
 1006a9c:	3080080c 	andi	r2,r6,32
 1006aa0:	1001f626 	beq	r2,zero,100727c <___vfprintf_internal_r+0x1780>
 1006aa4:	d9014b17 	ldw	r4,1324(sp)
 1006aa8:	38800017 	ldw	r2,0(r7)
 1006aac:	39c00104 	addi	r7,r7,4
 1006ab0:	d9c14015 	stw	r7,1280(sp)
 1006ab4:	2007d7fa 	srai	r3,r4,31
 1006ab8:	d9c14017 	ldw	r7,1280(sp)
 1006abc:	11000015 	stw	r4,0(r2)
 1006ac0:	10c00115 	stw	r3,4(r2)
 1006ac4:	003c6906 	br	1005c6c <___vfprintf_internal_r+0x170>
 1006ac8:	b8c00007 	ldb	r3,0(r23)
 1006acc:	00801b04 	movi	r2,108
 1006ad0:	18825526 	beq	r3,r2,1007428 <___vfprintf_internal_r+0x192c>
 1006ad4:	d9414c17 	ldw	r5,1328(sp)
 1006ad8:	29400414 	ori	r5,r5,16
 1006adc:	d9414c15 	stw	r5,1328(sp)
 1006ae0:	003c8506 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006ae4:	d9814c17 	ldw	r6,1328(sp)
 1006ae8:	b8c00007 	ldb	r3,0(r23)
 1006aec:	31800814 	ori	r6,r6,32
 1006af0:	d9814c15 	stw	r6,1328(sp)
 1006af4:	003c8006 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006af8:	d8814c17 	ldw	r2,1328(sp)
 1006afc:	3c000017 	ldw	r16,0(r7)
 1006b00:	00c01e04 	movi	r3,120
 1006b04:	10800094 	ori	r2,r2,2
 1006b08:	d8814c15 	stw	r2,1328(sp)
 1006b0c:	39c00104 	addi	r7,r7,4
 1006b10:	01404074 	movhi	r5,257
 1006b14:	2949f304 	addi	r5,r5,10188
 1006b18:	00800c04 	movi	r2,48
 1006b1c:	0023883a 	mov	r17,zero
 1006b20:	01000084 	movi	r4,2
 1006b24:	d9c14015 	stw	r7,1280(sp)
 1006b28:	d8c14d15 	stw	r3,1332(sp)
 1006b2c:	d9414415 	stw	r5,1296(sp)
 1006b30:	d8800445 	stb	r2,17(sp)
 1006b34:	d8c00485 	stb	r3,18(sp)
 1006b38:	d8000405 	stb	zero,16(sp)
 1006b3c:	003e7d06 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006b40:	d8814c17 	ldw	r2,1328(sp)
 1006b44:	b8c00007 	ldb	r3,0(r23)
 1006b48:	10801014 	ori	r2,r2,64
 1006b4c:	d8814c15 	stw	r2,1328(sp)
 1006b50:	003c6906 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006b54:	d9414c17 	ldw	r5,1328(sp)
 1006b58:	2880020c 	andi	r2,r5,8
 1006b5c:	1001e526 	beq	r2,zero,10072f4 <___vfprintf_internal_r+0x17f8>
 1006b60:	39800017 	ldw	r6,0(r7)
 1006b64:	38800204 	addi	r2,r7,8
 1006b68:	d8814015 	stw	r2,1280(sp)
 1006b6c:	d9814215 	stw	r6,1288(sp)
 1006b70:	39c00117 	ldw	r7,4(r7)
 1006b74:	d9c14315 	stw	r7,1292(sp)
 1006b78:	d9014217 	ldw	r4,1288(sp)
 1006b7c:	d9414317 	ldw	r5,1292(sp)
 1006b80:	100be6c0 	call	100be6c <__isinfd>
 1006b84:	10021d26 	beq	r2,zero,10073fc <___vfprintf_internal_r+0x1900>
 1006b88:	d9014217 	ldw	r4,1288(sp)
 1006b8c:	d9414317 	ldw	r5,1292(sp)
 1006b90:	000d883a 	mov	r6,zero
 1006b94:	000f883a 	mov	r7,zero
 1006b98:	100d5380 	call	100d538 <__ltdf2>
 1006b9c:	1002d016 	blt	r2,zero,10076e0 <___vfprintf_internal_r+0x1be4>
 1006ba0:	d9414d17 	ldw	r5,1332(sp)
 1006ba4:	008011c4 	movi	r2,71
 1006ba8:	11421016 	blt	r2,r5,10073ec <___vfprintf_internal_r+0x18f0>
 1006bac:	01804074 	movhi	r6,257
 1006bb0:	3189f804 	addi	r6,r6,10208
 1006bb4:	d9814115 	stw	r6,1284(sp)
 1006bb8:	d9014c17 	ldw	r4,1328(sp)
 1006bbc:	00c000c4 	movi	r3,3
 1006bc0:	00bfdfc4 	movi	r2,-129
 1006bc4:	2088703a 	and	r4,r4,r2
 1006bc8:	180f883a 	mov	r7,r3
 1006bcc:	d8c14515 	stw	r3,1300(sp)
 1006bd0:	d9014c15 	stw	r4,1328(sp)
 1006bd4:	d8014615 	stw	zero,1304(sp)
 1006bd8:	003e6a06 	br	1006584 <___vfprintf_internal_r+0xa88>
 1006bdc:	38800017 	ldw	r2,0(r7)
 1006be0:	00c00044 	movi	r3,1
 1006be4:	39c00104 	addi	r7,r7,4
 1006be8:	d9c14015 	stw	r7,1280(sp)
 1006bec:	d9000f04 	addi	r4,sp,60
 1006bf0:	180f883a 	mov	r7,r3
 1006bf4:	d8c14515 	stw	r3,1300(sp)
 1006bf8:	d9014115 	stw	r4,1284(sp)
 1006bfc:	d8800f05 	stb	r2,60(sp)
 1006c00:	d8000405 	stb	zero,16(sp)
 1006c04:	003cac06 	br	1005eb8 <___vfprintf_internal_r+0x3bc>
 1006c08:	01404074 	movhi	r5,257
 1006c0c:	2949fe04 	addi	r5,r5,10232
 1006c10:	d9414415 	stw	r5,1296(sp)
 1006c14:	d9814c17 	ldw	r6,1328(sp)
 1006c18:	3080080c 	andi	r2,r6,32
 1006c1c:	1000ff26 	beq	r2,zero,100701c <___vfprintf_internal_r+0x1520>
 1006c20:	3c000017 	ldw	r16,0(r7)
 1006c24:	3c400117 	ldw	r17,4(r7)
 1006c28:	38800204 	addi	r2,r7,8
 1006c2c:	d8814015 	stw	r2,1280(sp)
 1006c30:	d9414c17 	ldw	r5,1328(sp)
 1006c34:	2880004c 	andi	r2,r5,1
 1006c38:	1005003a 	cmpeq	r2,r2,zero
 1006c3c:	1000b91e 	bne	r2,zero,1006f24 <___vfprintf_internal_r+0x1428>
 1006c40:	8444b03a 	or	r2,r16,r17
 1006c44:	1000b726 	beq	r2,zero,1006f24 <___vfprintf_internal_r+0x1428>
 1006c48:	d9814d17 	ldw	r6,1332(sp)
 1006c4c:	29400094 	ori	r5,r5,2
 1006c50:	00800c04 	movi	r2,48
 1006c54:	01000084 	movi	r4,2
 1006c58:	d9414c15 	stw	r5,1328(sp)
 1006c5c:	d8800445 	stb	r2,17(sp)
 1006c60:	d9800485 	stb	r6,18(sp)
 1006c64:	d8000405 	stb	zero,16(sp)
 1006c68:	003e3206 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006c6c:	01804074 	movhi	r6,257
 1006c70:	3189f304 	addi	r6,r6,10188
 1006c74:	d9814415 	stw	r6,1296(sp)
 1006c78:	003fe606 	br	1006c14 <___vfprintf_internal_r+0x1118>
 1006c7c:	00800ac4 	movi	r2,43
 1006c80:	d8800405 	stb	r2,16(sp)
 1006c84:	b8c00007 	ldb	r3,0(r23)
 1006c88:	003c1b06 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006c8c:	d8814c17 	ldw	r2,1328(sp)
 1006c90:	b8c00007 	ldb	r3,0(r23)
 1006c94:	10800054 	ori	r2,r2,1
 1006c98:	d8814c15 	stw	r2,1328(sp)
 1006c9c:	003c1606 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006ca0:	d8800407 	ldb	r2,16(sp)
 1006ca4:	10004c1e 	bne	r2,zero,1006dd8 <___vfprintf_internal_r+0x12dc>
 1006ca8:	00800804 	movi	r2,32
 1006cac:	d8800405 	stb	r2,16(sp)
 1006cb0:	b8c00007 	ldb	r3,0(r23)
 1006cb4:	003c1006 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006cb8:	d9814c17 	ldw	r6,1328(sp)
 1006cbc:	b8c00007 	ldb	r3,0(r23)
 1006cc0:	31800214 	ori	r6,r6,8
 1006cc4:	d9814c15 	stw	r6,1328(sp)
 1006cc8:	003c0b06 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006ccc:	0009883a 	mov	r4,zero
 1006cd0:	04000244 	movi	r16,9
 1006cd4:	01400284 	movi	r5,10
 1006cd8:	d9c15115 	stw	r7,1348(sp)
 1006cdc:	100476c0 	call	100476c <__mulsi3>
 1006ce0:	b9000007 	ldb	r4,0(r23)
 1006ce4:	d8c14d17 	ldw	r3,1332(sp)
 1006ce8:	bdc00044 	addi	r23,r23,1
 1006cec:	d9014d15 	stw	r4,1332(sp)
 1006cf0:	d9414d17 	ldw	r5,1332(sp)
 1006cf4:	1885883a 	add	r2,r3,r2
 1006cf8:	113ff404 	addi	r4,r2,-48
 1006cfc:	28bff404 	addi	r2,r5,-48
 1006d00:	d9c15117 	ldw	r7,1348(sp)
 1006d04:	80bff32e 	bgeu	r16,r2,1006cd4 <___vfprintf_internal_r+0x11d8>
 1006d08:	d9014a15 	stw	r4,1320(sp)
 1006d0c:	003bfc06 	br	1005d00 <___vfprintf_internal_r+0x204>
 1006d10:	d8814c17 	ldw	r2,1328(sp)
 1006d14:	b8c00007 	ldb	r3,0(r23)
 1006d18:	10802014 	ori	r2,r2,128
 1006d1c:	d8814c15 	stw	r2,1328(sp)
 1006d20:	003bf506 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006d24:	b8c00007 	ldb	r3,0(r23)
 1006d28:	00800a84 	movi	r2,42
 1006d2c:	bdc00044 	addi	r23,r23,1
 1006d30:	18831826 	beq	r3,r2,1007994 <___vfprintf_internal_r+0x1e98>
 1006d34:	d8c14d15 	stw	r3,1332(sp)
 1006d38:	18bff404 	addi	r2,r3,-48
 1006d3c:	00c00244 	movi	r3,9
 1006d40:	18827b36 	bltu	r3,r2,1007730 <___vfprintf_internal_r+0x1c34>
 1006d44:	1821883a 	mov	r16,r3
 1006d48:	0009883a 	mov	r4,zero
 1006d4c:	01400284 	movi	r5,10
 1006d50:	d9c15115 	stw	r7,1348(sp)
 1006d54:	100476c0 	call	100476c <__mulsi3>
 1006d58:	d9414d17 	ldw	r5,1332(sp)
 1006d5c:	b9800007 	ldb	r6,0(r23)
 1006d60:	d9c15117 	ldw	r7,1348(sp)
 1006d64:	1145883a 	add	r2,r2,r5
 1006d68:	113ff404 	addi	r4,r2,-48
 1006d6c:	30bff404 	addi	r2,r6,-48
 1006d70:	d9814d15 	stw	r6,1332(sp)
 1006d74:	bdc00044 	addi	r23,r23,1
 1006d78:	80bff42e 	bgeu	r16,r2,1006d4c <___vfprintf_internal_r+0x1250>
 1006d7c:	2027883a 	mov	r19,r4
 1006d80:	203bdf0e 	bge	r4,zero,1005d00 <___vfprintf_internal_r+0x204>
 1006d84:	04ffffc4 	movi	r19,-1
 1006d88:	003bdd06 	br	1005d00 <___vfprintf_internal_r+0x204>
 1006d8c:	d8000405 	stb	zero,16(sp)
 1006d90:	39800017 	ldw	r6,0(r7)
 1006d94:	39c00104 	addi	r7,r7,4
 1006d98:	d9c14015 	stw	r7,1280(sp)
 1006d9c:	d9814115 	stw	r6,1284(sp)
 1006da0:	3001c926 	beq	r6,zero,10074c8 <___vfprintf_internal_r+0x19cc>
 1006da4:	98000e16 	blt	r19,zero,1006de0 <___vfprintf_internal_r+0x12e4>
 1006da8:	d9014117 	ldw	r4,1284(sp)
 1006dac:	000b883a 	mov	r5,zero
 1006db0:	980d883a 	mov	r6,r19
 1006db4:	100a4f00 	call	100a4f0 <memchr>
 1006db8:	10025926 	beq	r2,zero,1007720 <___vfprintf_internal_r+0x1c24>
 1006dbc:	d8c14117 	ldw	r3,1284(sp)
 1006dc0:	10cfc83a 	sub	r7,r2,r3
 1006dc4:	99c19e16 	blt	r19,r7,1007440 <___vfprintf_internal_r+0x1944>
 1006dc8:	d9c14515 	stw	r7,1300(sp)
 1006dcc:	38000916 	blt	r7,zero,1006df4 <___vfprintf_internal_r+0x12f8>
 1006dd0:	d8014615 	stw	zero,1304(sp)
 1006dd4:	003deb06 	br	1006584 <___vfprintf_internal_r+0xa88>
 1006dd8:	b8c00007 	ldb	r3,0(r23)
 1006ddc:	003bc606 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1006de0:	d9014117 	ldw	r4,1284(sp)
 1006de4:	1005a300 	call	1005a30 <strlen>
 1006de8:	d8814515 	stw	r2,1300(sp)
 1006dec:	100f883a 	mov	r7,r2
 1006df0:	103ff70e 	bge	r2,zero,1006dd0 <___vfprintf_internal_r+0x12d4>
 1006df4:	d8014515 	stw	zero,1300(sp)
 1006df8:	d8014615 	stw	zero,1304(sp)
 1006dfc:	003de106 	br	1006584 <___vfprintf_internal_r+0xa88>
 1006e00:	20c03fcc 	andi	r3,r4,255
 1006e04:	00800044 	movi	r2,1
 1006e08:	18802d26 	beq	r3,r2,1006ec0 <___vfprintf_internal_r+0x13c4>
 1006e0c:	18800e36 	bltu	r3,r2,1006e48 <___vfprintf_internal_r+0x134c>
 1006e10:	00800084 	movi	r2,2
 1006e14:	1880fa26 	beq	r3,r2,1007200 <___vfprintf_internal_r+0x1704>
 1006e18:	01004074 	movhi	r4,257
 1006e1c:	210a0304 	addi	r4,r4,10252
 1006e20:	1005a300 	call	1005a30 <strlen>
 1006e24:	100f883a 	mov	r7,r2
 1006e28:	dcc14515 	stw	r19,1300(sp)
 1006e2c:	9880010e 	bge	r19,r2,1006e34 <___vfprintf_internal_r+0x1338>
 1006e30:	d8814515 	stw	r2,1300(sp)
 1006e34:	00804074 	movhi	r2,257
 1006e38:	108a0304 	addi	r2,r2,10252
 1006e3c:	dcc14615 	stw	r19,1304(sp)
 1006e40:	d8814115 	stw	r2,1284(sp)
 1006e44:	003dcf06 	br	1006584 <___vfprintf_internal_r+0xa88>
 1006e48:	d9401904 	addi	r5,sp,100
 1006e4c:	dd000f04 	addi	r20,sp,60
 1006e50:	d9414115 	stw	r5,1284(sp)
 1006e54:	880a977a 	slli	r5,r17,29
 1006e58:	d9814117 	ldw	r6,1284(sp)
 1006e5c:	8004d0fa 	srli	r2,r16,3
 1006e60:	8806d0fa 	srli	r3,r17,3
 1006e64:	810001cc 	andi	r4,r16,7
 1006e68:	2884b03a 	or	r2,r5,r2
 1006e6c:	31bfffc4 	addi	r6,r6,-1
 1006e70:	21000c04 	addi	r4,r4,48
 1006e74:	d9814115 	stw	r6,1284(sp)
 1006e78:	10cab03a 	or	r5,r2,r3
 1006e7c:	31000005 	stb	r4,0(r6)
 1006e80:	1021883a 	mov	r16,r2
 1006e84:	1823883a 	mov	r17,r3
 1006e88:	283ff21e 	bne	r5,zero,1006e54 <___vfprintf_internal_r+0x1358>
 1006e8c:	d8c14c17 	ldw	r3,1328(sp)
 1006e90:	1880004c 	andi	r2,r3,1
 1006e94:	1005003a 	cmpeq	r2,r2,zero
 1006e98:	103db31e 	bne	r2,zero,1006568 <___vfprintf_internal_r+0xa6c>
 1006e9c:	20803fcc 	andi	r2,r4,255
 1006ea0:	1080201c 	xori	r2,r2,128
 1006ea4:	10bfe004 	addi	r2,r2,-128
 1006ea8:	00c00c04 	movi	r3,48
 1006eac:	10fdae26 	beq	r2,r3,1006568 <___vfprintf_internal_r+0xa6c>
 1006eb0:	31bfffc4 	addi	r6,r6,-1
 1006eb4:	d9814115 	stw	r6,1284(sp)
 1006eb8:	30c00005 	stb	r3,0(r6)
 1006ebc:	003daa06 	br	1006568 <___vfprintf_internal_r+0xa6c>
 1006ec0:	88800068 	cmpgeui	r2,r17,1
 1006ec4:	10002c1e 	bne	r2,zero,1006f78 <___vfprintf_internal_r+0x147c>
 1006ec8:	8800021e 	bne	r17,zero,1006ed4 <___vfprintf_internal_r+0x13d8>
 1006ecc:	00800244 	movi	r2,9
 1006ed0:	14002936 	bltu	r2,r16,1006f78 <___vfprintf_internal_r+0x147c>
 1006ed4:	d90018c4 	addi	r4,sp,99
 1006ed8:	dd000f04 	addi	r20,sp,60
 1006edc:	d9014115 	stw	r4,1284(sp)
 1006ee0:	d9014117 	ldw	r4,1284(sp)
 1006ee4:	80800c04 	addi	r2,r16,48
 1006ee8:	20800005 	stb	r2,0(r4)
 1006eec:	003d9e06 	br	1006568 <___vfprintf_internal_r+0xa6c>
 1006ef0:	dc400d17 	ldw	r17,52(sp)
 1006ef4:	07004074 	movhi	fp,257
 1006ef8:	e70a0a84 	addi	fp,fp,10282
 1006efc:	9425883a 	add	r18,r18,r16
 1006f00:	8c400044 	addi	r17,r17,1
 1006f04:	008001c4 	movi	r2,7
 1006f08:	1f000015 	stw	fp,0(r3)
 1006f0c:	1c000115 	stw	r16,4(r3)
 1006f10:	dc800e15 	stw	r18,56(sp)
 1006f14:	dc400d15 	stw	r17,52(sp)
 1006f18:	147ddc16 	blt	r2,r17,100668c <___vfprintf_internal_r+0xb90>
 1006f1c:	18c00204 	addi	r3,r3,8
 1006f20:	003c7406 	br	10060f4 <___vfprintf_internal_r+0x5f8>
 1006f24:	01000084 	movi	r4,2
 1006f28:	d8000405 	stb	zero,16(sp)
 1006f2c:	003d8106 	br	1006534 <___vfprintf_internal_r+0xa38>
 1006f30:	d9814c17 	ldw	r6,1328(sp)
 1006f34:	30c4703a 	and	r2,r6,r3
 1006f38:	1005003a 	cmpeq	r2,r2,zero
 1006f3c:	103cb326 	beq	r2,zero,100620c <___vfprintf_internal_r+0x710>
 1006f40:	d9014117 	ldw	r4,1284(sp)
 1006f44:	94800044 	addi	r18,r18,1
 1006f48:	8c400044 	addi	r17,r17,1
 1006f4c:	008001c4 	movi	r2,7
 1006f50:	a9000015 	stw	r4,0(r21)
 1006f54:	a8c00115 	stw	r3,4(r21)
 1006f58:	dc800e15 	stw	r18,56(sp)
 1006f5c:	dc400d15 	stw	r17,52(sp)
 1006f60:	147e6016 	blt	r2,r17,10068e4 <___vfprintf_internal_r+0xde8>
 1006f64:	acc00204 	addi	r19,r21,8
 1006f68:	003cd106 	br	10062b0 <___vfprintf_internal_r+0x7b4>
 1006f6c:	07004074 	movhi	fp,257
 1006f70:	e70a0a84 	addi	fp,fp,10282
 1006f74:	003c4906 	br	100609c <___vfprintf_internal_r+0x5a0>
 1006f78:	dd000f04 	addi	r20,sp,60
 1006f7c:	dc801904 	addi	r18,sp,100
 1006f80:	8009883a 	mov	r4,r16
 1006f84:	880b883a 	mov	r5,r17
 1006f88:	01800284 	movi	r6,10
 1006f8c:	000f883a 	mov	r7,zero
 1006f90:	100cbf80 	call	100cbf8 <__umoddi3>
 1006f94:	12000c04 	addi	r8,r2,48
 1006f98:	94bfffc4 	addi	r18,r18,-1
 1006f9c:	8009883a 	mov	r4,r16
 1006fa0:	880b883a 	mov	r5,r17
 1006fa4:	01800284 	movi	r6,10
 1006fa8:	000f883a 	mov	r7,zero
 1006fac:	92000005 	stb	r8,0(r18)
 1006fb0:	100c58c0 	call	100c58c <__udivdi3>
 1006fb4:	1009883a 	mov	r4,r2
 1006fb8:	1021883a 	mov	r16,r2
 1006fbc:	18800068 	cmpgeui	r2,r3,1
 1006fc0:	1823883a 	mov	r17,r3
 1006fc4:	103fee1e 	bne	r2,zero,1006f80 <___vfprintf_internal_r+0x1484>
 1006fc8:	1800021e 	bne	r3,zero,1006fd4 <___vfprintf_internal_r+0x14d8>
 1006fcc:	00800244 	movi	r2,9
 1006fd0:	113feb36 	bltu	r2,r4,1006f80 <___vfprintf_internal_r+0x1484>
 1006fd4:	94bfffc4 	addi	r18,r18,-1
 1006fd8:	dc814115 	stw	r18,1284(sp)
 1006fdc:	003fc006 	br	1006ee0 <___vfprintf_internal_r+0x13e4>
 1006fe0:	d9014c17 	ldw	r4,1328(sp)
 1006fe4:	2080004c 	andi	r2,r4,1
 1006fe8:	10009a1e 	bne	r2,zero,1007254 <___vfprintf_internal_r+0x1758>
 1006fec:	d9401904 	addi	r5,sp,100
 1006ff0:	dd000f04 	addi	r20,sp,60
 1006ff4:	d9414115 	stw	r5,1284(sp)
 1006ff8:	003d5b06 	br	1006568 <___vfprintf_internal_r+0xa6c>
 1006ffc:	d9014f17 	ldw	r4,1340(sp)
 1007000:	b00b883a 	mov	r5,r22
 1007004:	d9800c04 	addi	r6,sp,48
 1007008:	1005aa40 	call	1005aa4 <__sprint_r>
 100700c:	103c731e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1007010:	dc800e17 	ldw	r18,56(sp)
 1007014:	d8c01904 	addi	r3,sp,100
 1007018:	003cf906 	br	1006400 <___vfprintf_internal_r+0x904>
 100701c:	d8c14c17 	ldw	r3,1328(sp)
 1007020:	1880040c 	andi	r2,r3,16
 1007024:	1000711e 	bne	r2,zero,10071ec <___vfprintf_internal_r+0x16f0>
 1007028:	d9014c17 	ldw	r4,1328(sp)
 100702c:	2080100c 	andi	r2,r4,64
 1007030:	10006e26 	beq	r2,zero,10071ec <___vfprintf_internal_r+0x16f0>
 1007034:	3c00000b 	ldhu	r16,0(r7)
 1007038:	0023883a 	mov	r17,zero
 100703c:	39c00104 	addi	r7,r7,4
 1007040:	d9c14015 	stw	r7,1280(sp)
 1007044:	003efa06 	br	1006c30 <___vfprintf_internal_r+0x1134>
 1007048:	dc400d17 	ldw	r17,52(sp)
 100704c:	07004074 	movhi	fp,257
 1007050:	e70a0a84 	addi	fp,fp,10282
 1007054:	9425883a 	add	r18,r18,r16
 1007058:	8c400044 	addi	r17,r17,1
 100705c:	008001c4 	movi	r2,7
 1007060:	1f000015 	stw	fp,0(r3)
 1007064:	1c000115 	stw	r16,4(r3)
 1007068:	dc800e15 	stw	r18,56(sp)
 100706c:	dc400d15 	stw	r17,52(sp)
 1007070:	147d7016 	blt	r2,r17,1006634 <___vfprintf_internal_r+0xb38>
 1007074:	18c00204 	addi	r3,r3,8
 1007078:	003d7506 	br	1006650 <___vfprintf_internal_r+0xb54>
 100707c:	dc800e17 	ldw	r18,56(sp)
 1007080:	dc400d17 	ldw	r17,52(sp)
 1007084:	07004074 	movhi	fp,257
 1007088:	e70a0e84 	addi	fp,fp,10298
 100708c:	003bba06 	br	1005f78 <___vfprintf_internal_r+0x47c>
 1007090:	d9014f17 	ldw	r4,1340(sp)
 1007094:	b00b883a 	mov	r5,r22
 1007098:	d9800c04 	addi	r6,sp,48
 100709c:	1005aa40 	call	1005aa4 <__sprint_r>
 10070a0:	103c4e1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10070a4:	dc800e17 	ldw	r18,56(sp)
 10070a8:	d8c01904 	addi	r3,sp,100
 10070ac:	003ce306 	br	100643c <___vfprintf_internal_r+0x940>
 10070b0:	3c000017 	ldw	r16,0(r7)
 10070b4:	0009883a 	mov	r4,zero
 10070b8:	39c00104 	addi	r7,r7,4
 10070bc:	0023883a 	mov	r17,zero
 10070c0:	d9c14015 	stw	r7,1280(sp)
 10070c4:	d8000405 	stb	zero,16(sp)
 10070c8:	003d1a06 	br	1006534 <___vfprintf_internal_r+0xa38>
 10070cc:	38800017 	ldw	r2,0(r7)
 10070d0:	39c00104 	addi	r7,r7,4
 10070d4:	d9c14015 	stw	r7,1280(sp)
 10070d8:	1023d7fa 	srai	r17,r2,31
 10070dc:	1021883a 	mov	r16,r2
 10070e0:	003d1206 	br	100652c <___vfprintf_internal_r+0xa30>
 10070e4:	3c000017 	ldw	r16,0(r7)
 10070e8:	01000044 	movi	r4,1
 10070ec:	39c00104 	addi	r7,r7,4
 10070f0:	0023883a 	mov	r17,zero
 10070f4:	d9c14015 	stw	r7,1280(sp)
 10070f8:	d8000405 	stb	zero,16(sp)
 10070fc:	003d0d06 	br	1006534 <___vfprintf_internal_r+0xa38>
 1007100:	00804074 	movhi	r2,257
 1007104:	108a0a04 	addi	r2,r2,10280
 1007108:	94800044 	addi	r18,r18,1
 100710c:	8c400044 	addi	r17,r17,1
 1007110:	a8800015 	stw	r2,0(r21)
 1007114:	00c00044 	movi	r3,1
 1007118:	008001c4 	movi	r2,7
 100711c:	a8c00115 	stw	r3,4(r21)
 1007120:	dc800e15 	stw	r18,56(sp)
 1007124:	dc400d15 	stw	r17,52(sp)
 1007128:	1440ca16 	blt	r2,r17,1007454 <___vfprintf_internal_r+0x1958>
 100712c:	a8c00204 	addi	r3,r21,8
 1007130:	2000061e 	bne	r4,zero,100714c <___vfprintf_internal_r+0x1650>
 1007134:	d9414717 	ldw	r5,1308(sp)
 1007138:	2800041e 	bne	r5,zero,100714c <___vfprintf_internal_r+0x1650>
 100713c:	d9814c17 	ldw	r6,1328(sp)
 1007140:	3080004c 	andi	r2,r6,1
 1007144:	1005003a 	cmpeq	r2,r2,zero
 1007148:	103bea1e 	bne	r2,zero,10060f4 <___vfprintf_internal_r+0x5f8>
 100714c:	00800044 	movi	r2,1
 1007150:	dc400d17 	ldw	r17,52(sp)
 1007154:	18800115 	stw	r2,4(r3)
 1007158:	d8814917 	ldw	r2,1316(sp)
 100715c:	94800044 	addi	r18,r18,1
 1007160:	8c400044 	addi	r17,r17,1
 1007164:	18800015 	stw	r2,0(r3)
 1007168:	008001c4 	movi	r2,7
 100716c:	dc800e15 	stw	r18,56(sp)
 1007170:	dc400d15 	stw	r17,52(sp)
 1007174:	1440ca16 	blt	r2,r17,10074a0 <___vfprintf_internal_r+0x19a4>
 1007178:	18c00204 	addi	r3,r3,8
 100717c:	0121c83a 	sub	r16,zero,r4
 1007180:	0400500e 	bge	zero,r16,10072c4 <___vfprintf_internal_r+0x17c8>
 1007184:	00800404 	movi	r2,16
 1007188:	1400800e 	bge	r2,r16,100738c <___vfprintf_internal_r+0x1890>
 100718c:	1027883a 	mov	r19,r2
 1007190:	07004074 	movhi	fp,257
 1007194:	e70a0a84 	addi	fp,fp,10282
 1007198:	050001c4 	movi	r20,7
 100719c:	00000306 	br	10071ac <___vfprintf_internal_r+0x16b0>
 10071a0:	18c00204 	addi	r3,r3,8
 10071a4:	843ffc04 	addi	r16,r16,-16
 10071a8:	9c007a0e 	bge	r19,r16,1007394 <___vfprintf_internal_r+0x1898>
 10071ac:	94800404 	addi	r18,r18,16
 10071b0:	8c400044 	addi	r17,r17,1
 10071b4:	1f000015 	stw	fp,0(r3)
 10071b8:	1cc00115 	stw	r19,4(r3)
 10071bc:	dc800e15 	stw	r18,56(sp)
 10071c0:	dc400d15 	stw	r17,52(sp)
 10071c4:	a47ff60e 	bge	r20,r17,10071a0 <___vfprintf_internal_r+0x16a4>
 10071c8:	d9014f17 	ldw	r4,1340(sp)
 10071cc:	b00b883a 	mov	r5,r22
 10071d0:	d9800c04 	addi	r6,sp,48
 10071d4:	1005aa40 	call	1005aa4 <__sprint_r>
 10071d8:	103c001e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10071dc:	dc800e17 	ldw	r18,56(sp)
 10071e0:	dc400d17 	ldw	r17,52(sp)
 10071e4:	d8c01904 	addi	r3,sp,100
 10071e8:	003fee06 	br	10071a4 <___vfprintf_internal_r+0x16a8>
 10071ec:	3c000017 	ldw	r16,0(r7)
 10071f0:	0023883a 	mov	r17,zero
 10071f4:	39c00104 	addi	r7,r7,4
 10071f8:	d9c14015 	stw	r7,1280(sp)
 10071fc:	003e8c06 	br	1006c30 <___vfprintf_internal_r+0x1134>
 1007200:	d9401904 	addi	r5,sp,100
 1007204:	dd000f04 	addi	r20,sp,60
 1007208:	d9414115 	stw	r5,1284(sp)
 100720c:	d9814417 	ldw	r6,1296(sp)
 1007210:	880a973a 	slli	r5,r17,28
 1007214:	8004d13a 	srli	r2,r16,4
 1007218:	810003cc 	andi	r4,r16,15
 100721c:	3109883a 	add	r4,r6,r4
 1007220:	2884b03a 	or	r2,r5,r2
 1007224:	21400003 	ldbu	r5,0(r4)
 1007228:	d9014117 	ldw	r4,1284(sp)
 100722c:	8806d13a 	srli	r3,r17,4
 1007230:	1021883a 	mov	r16,r2
 1007234:	213fffc4 	addi	r4,r4,-1
 1007238:	d9014115 	stw	r4,1284(sp)
 100723c:	d9814117 	ldw	r6,1284(sp)
 1007240:	10c8b03a 	or	r4,r2,r3
 1007244:	1823883a 	mov	r17,r3
 1007248:	31400005 	stb	r5,0(r6)
 100724c:	203fef1e 	bne	r4,zero,100720c <___vfprintf_internal_r+0x1710>
 1007250:	003cc506 	br	1006568 <___vfprintf_internal_r+0xa6c>
 1007254:	00800c04 	movi	r2,48
 1007258:	d98018c4 	addi	r6,sp,99
 100725c:	dd000f04 	addi	r20,sp,60
 1007260:	d88018c5 	stb	r2,99(sp)
 1007264:	d9814115 	stw	r6,1284(sp)
 1007268:	003cbf06 	br	1006568 <___vfprintf_internal_r+0xa6c>
 100726c:	dc400d17 	ldw	r17,52(sp)
 1007270:	07004074 	movhi	fp,257
 1007274:	e70a0e84 	addi	fp,fp,10298
 1007278:	003bc106 	br	1006180 <___vfprintf_internal_r+0x684>
 100727c:	d9414c17 	ldw	r5,1328(sp)
 1007280:	2880040c 	andi	r2,r5,16
 1007284:	10007c26 	beq	r2,zero,1007478 <___vfprintf_internal_r+0x197c>
 1007288:	38800017 	ldw	r2,0(r7)
 100728c:	39c00104 	addi	r7,r7,4
 1007290:	d9c14015 	stw	r7,1280(sp)
 1007294:	d9814b17 	ldw	r6,1324(sp)
 1007298:	d9c14017 	ldw	r7,1280(sp)
 100729c:	11800015 	stw	r6,0(r2)
 10072a0:	003a7206 	br	1005c6c <___vfprintf_internal_r+0x170>
 10072a4:	d9014f17 	ldw	r4,1340(sp)
 10072a8:	b00b883a 	mov	r5,r22
 10072ac:	d9800c04 	addi	r6,sp,48
 10072b0:	1005aa40 	call	1005aa4 <__sprint_r>
 10072b4:	103bc91e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10072b8:	dc800e17 	ldw	r18,56(sp)
 10072bc:	dc400d17 	ldw	r17,52(sp)
 10072c0:	d8c01904 	addi	r3,sp,100
 10072c4:	d9014717 	ldw	r4,1308(sp)
 10072c8:	d9414117 	ldw	r5,1284(sp)
 10072cc:	8c400044 	addi	r17,r17,1
 10072d0:	9125883a 	add	r18,r18,r4
 10072d4:	008001c4 	movi	r2,7
 10072d8:	19400015 	stw	r5,0(r3)
 10072dc:	19000115 	stw	r4,4(r3)
 10072e0:	dc800e15 	stw	r18,56(sp)
 10072e4:	dc400d15 	stw	r17,52(sp)
 10072e8:	147ce816 	blt	r2,r17,100668c <___vfprintf_internal_r+0xb90>
 10072ec:	18c00204 	addi	r3,r3,8
 10072f0:	003b8006 	br	10060f4 <___vfprintf_internal_r+0x5f8>
 10072f4:	38c00017 	ldw	r3,0(r7)
 10072f8:	39000204 	addi	r4,r7,8
 10072fc:	d9014015 	stw	r4,1280(sp)
 1007300:	d8c14215 	stw	r3,1288(sp)
 1007304:	39c00117 	ldw	r7,4(r7)
 1007308:	d9c14315 	stw	r7,1292(sp)
 100730c:	003e1a06 	br	1006b78 <___vfprintf_internal_r+0x107c>
 1007310:	0005883a 	mov	r2,zero
 1007314:	1409c83a 	sub	r4,r2,r16
 1007318:	1105803a 	cmpltu	r2,r2,r4
 100731c:	044bc83a 	sub	r5,zero,r17
 1007320:	2885c83a 	sub	r2,r5,r2
 1007324:	2021883a 	mov	r16,r4
 1007328:	1023883a 	mov	r17,r2
 100732c:	01000044 	movi	r4,1
 1007330:	00800b44 	movi	r2,45
 1007334:	d8800405 	stb	r2,16(sp)
 1007338:	003c7e06 	br	1006534 <___vfprintf_internal_r+0xa38>
 100733c:	d9014f17 	ldw	r4,1340(sp)
 1007340:	b00b883a 	mov	r5,r22
 1007344:	d9800c04 	addi	r6,sp,48
 1007348:	1005aa40 	call	1005aa4 <__sprint_r>
 100734c:	103ba31e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1007350:	dc800e17 	ldw	r18,56(sp)
 1007354:	dc400d17 	ldw	r17,52(sp)
 1007358:	d9000517 	ldw	r4,20(sp)
 100735c:	d9401904 	addi	r5,sp,100
 1007360:	003da106 	br	10069e8 <___vfprintf_internal_r+0xeec>
 1007364:	d9014f17 	ldw	r4,1340(sp)
 1007368:	b00b883a 	mov	r5,r22
 100736c:	d9800c04 	addi	r6,sp,48
 1007370:	1005aa40 	call	1005aa4 <__sprint_r>
 1007374:	103b991e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1007378:	dc800e17 	ldw	r18,56(sp)
 100737c:	dc400d17 	ldw	r17,52(sp)
 1007380:	d9000517 	ldw	r4,20(sp)
 1007384:	d8c01904 	addi	r3,sp,100
 1007388:	003d8b06 	br	10069b8 <___vfprintf_internal_r+0xebc>
 100738c:	07004074 	movhi	fp,257
 1007390:	e70a0a84 	addi	fp,fp,10282
 1007394:	9425883a 	add	r18,r18,r16
 1007398:	8c400044 	addi	r17,r17,1
 100739c:	008001c4 	movi	r2,7
 10073a0:	1f000015 	stw	fp,0(r3)
 10073a4:	1c000115 	stw	r16,4(r3)
 10073a8:	dc800e15 	stw	r18,56(sp)
 10073ac:	dc400d15 	stw	r17,52(sp)
 10073b0:	147fbc16 	blt	r2,r17,10072a4 <___vfprintf_internal_r+0x17a8>
 10073b4:	18c00204 	addi	r3,r3,8
 10073b8:	003fc206 	br	10072c4 <___vfprintf_internal_r+0x17c8>
 10073bc:	d9014f17 	ldw	r4,1340(sp)
 10073c0:	b00b883a 	mov	r5,r22
 10073c4:	d9800c04 	addi	r6,sp,48
 10073c8:	1005aa40 	call	1005aa4 <__sprint_r>
 10073cc:	103b831e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10073d0:	dc800e17 	ldw	r18,56(sp)
 10073d4:	d9000517 	ldw	r4,20(sp)
 10073d8:	d8c01904 	addi	r3,sp,100
 10073dc:	003cfc06 	br	10067d0 <___vfprintf_internal_r+0xcd4>
 10073e0:	07004074 	movhi	fp,257
 10073e4:	e70a0a84 	addi	fp,fp,10282
 10073e8:	003bde06 	br	1006364 <___vfprintf_internal_r+0x868>
 10073ec:	00804074 	movhi	r2,257
 10073f0:	1089f904 	addi	r2,r2,10212
 10073f4:	d8814115 	stw	r2,1284(sp)
 10073f8:	003def06 	br	1006bb8 <___vfprintf_internal_r+0x10bc>
 10073fc:	d9014217 	ldw	r4,1288(sp)
 1007400:	d9414317 	ldw	r5,1292(sp)
 1007404:	100beac0 	call	100beac <__isnand>
 1007408:	10003926 	beq	r2,zero,10074f0 <___vfprintf_internal_r+0x19f4>
 100740c:	d9414d17 	ldw	r5,1332(sp)
 1007410:	008011c4 	movi	r2,71
 1007414:	1140ce16 	blt	r2,r5,1007750 <___vfprintf_internal_r+0x1c54>
 1007418:	01804074 	movhi	r6,257
 100741c:	3189fa04 	addi	r6,r6,10216
 1007420:	d9814115 	stw	r6,1284(sp)
 1007424:	003de406 	br	1006bb8 <___vfprintf_internal_r+0x10bc>
 1007428:	d9014c17 	ldw	r4,1328(sp)
 100742c:	bdc00044 	addi	r23,r23,1
 1007430:	b8c00007 	ldb	r3,0(r23)
 1007434:	21000814 	ori	r4,r4,32
 1007438:	d9014c15 	stw	r4,1328(sp)
 100743c:	003a2e06 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 1007440:	dcc14515 	stw	r19,1300(sp)
 1007444:	98011016 	blt	r19,zero,1007888 <___vfprintf_internal_r+0x1d8c>
 1007448:	980f883a 	mov	r7,r19
 100744c:	d8014615 	stw	zero,1304(sp)
 1007450:	003c4c06 	br	1006584 <___vfprintf_internal_r+0xa88>
 1007454:	d9014f17 	ldw	r4,1340(sp)
 1007458:	b00b883a 	mov	r5,r22
 100745c:	d9800c04 	addi	r6,sp,48
 1007460:	1005aa40 	call	1005aa4 <__sprint_r>
 1007464:	103b5d1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1007468:	dc800e17 	ldw	r18,56(sp)
 100746c:	d9000517 	ldw	r4,20(sp)
 1007470:	d8c01904 	addi	r3,sp,100
 1007474:	003f2e06 	br	1007130 <___vfprintf_internal_r+0x1634>
 1007478:	d8c14c17 	ldw	r3,1328(sp)
 100747c:	1880100c 	andi	r2,r3,64
 1007480:	1000a026 	beq	r2,zero,1007704 <___vfprintf_internal_r+0x1c08>
 1007484:	38800017 	ldw	r2,0(r7)
 1007488:	39c00104 	addi	r7,r7,4
 100748c:	d9c14015 	stw	r7,1280(sp)
 1007490:	d9014b17 	ldw	r4,1324(sp)
 1007494:	d9c14017 	ldw	r7,1280(sp)
 1007498:	1100000d 	sth	r4,0(r2)
 100749c:	0039f306 	br	1005c6c <___vfprintf_internal_r+0x170>
 10074a0:	d9014f17 	ldw	r4,1340(sp)
 10074a4:	b00b883a 	mov	r5,r22
 10074a8:	d9800c04 	addi	r6,sp,48
 10074ac:	1005aa40 	call	1005aa4 <__sprint_r>
 10074b0:	103b4a1e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 10074b4:	dc800e17 	ldw	r18,56(sp)
 10074b8:	dc400d17 	ldw	r17,52(sp)
 10074bc:	d9000517 	ldw	r4,20(sp)
 10074c0:	d8c01904 	addi	r3,sp,100
 10074c4:	003f2d06 	br	100717c <___vfprintf_internal_r+0x1680>
 10074c8:	00800184 	movi	r2,6
 10074cc:	14c09a36 	bltu	r2,r19,1007738 <___vfprintf_internal_r+0x1c3c>
 10074d0:	dcc14515 	stw	r19,1300(sp)
 10074d4:	9800010e 	bge	r19,zero,10074dc <___vfprintf_internal_r+0x19e0>
 10074d8:	d8014515 	stw	zero,1300(sp)
 10074dc:	00804074 	movhi	r2,257
 10074e0:	1089fc04 	addi	r2,r2,10224
 10074e4:	980f883a 	mov	r7,r19
 10074e8:	d8814115 	stw	r2,1284(sp)
 10074ec:	003a7206 	br	1005eb8 <___vfprintf_internal_r+0x3bc>
 10074f0:	00bfffc4 	movi	r2,-1
 10074f4:	9880e226 	beq	r19,r2,1007880 <___vfprintf_internal_r+0x1d84>
 10074f8:	d9414d17 	ldw	r5,1332(sp)
 10074fc:	008019c4 	movi	r2,103
 1007500:	2880dc26 	beq	r5,r2,1007874 <___vfprintf_internal_r+0x1d78>
 1007504:	008011c4 	movi	r2,71
 1007508:	2880da26 	beq	r5,r2,1007874 <___vfprintf_internal_r+0x1d78>
 100750c:	d9414c17 	ldw	r5,1328(sp)
 1007510:	d9014317 	ldw	r4,1292(sp)
 1007514:	d9814217 	ldw	r6,1288(sp)
 1007518:	29404014 	ori	r5,r5,256
 100751c:	d9414c15 	stw	r5,1328(sp)
 1007520:	2000cc16 	blt	r4,zero,1007854 <___vfprintf_internal_r+0x1d58>
 1007524:	3021883a 	mov	r16,r6
 1007528:	2023883a 	mov	r17,r4
 100752c:	0039883a 	mov	fp,zero
 1007530:	d9414d17 	ldw	r5,1332(sp)
 1007534:	00801984 	movi	r2,102
 1007538:	2880b726 	beq	r5,r2,1007818 <___vfprintf_internal_r+0x1d1c>
 100753c:	00801184 	movi	r2,70
 1007540:	2880b526 	beq	r5,r2,1007818 <___vfprintf_internal_r+0x1d1c>
 1007544:	00801944 	movi	r2,101
 1007548:	2880c826 	beq	r5,r2,100786c <___vfprintf_internal_r+0x1d70>
 100754c:	00801144 	movi	r2,69
 1007550:	2880c626 	beq	r5,r2,100786c <___vfprintf_internal_r+0x1d70>
 1007554:	9829883a 	mov	r20,r19
 1007558:	d9014f17 	ldw	r4,1340(sp)
 100755c:	d8800504 	addi	r2,sp,20
 1007560:	880d883a 	mov	r6,r17
 1007564:	d8800115 	stw	r2,4(sp)
 1007568:	d8c00604 	addi	r3,sp,24
 100756c:	d8800704 	addi	r2,sp,28
 1007570:	800b883a 	mov	r5,r16
 1007574:	01c00084 	movi	r7,2
 1007578:	d8c00215 	stw	r3,8(sp)
 100757c:	d8800315 	stw	r2,12(sp)
 1007580:	dd000015 	stw	r20,0(sp)
 1007584:	1007d640 	call	1007d64 <_dtoa_r>
 1007588:	d9814d17 	ldw	r6,1332(sp)
 100758c:	d8814115 	stw	r2,1284(sp)
 1007590:	008019c4 	movi	r2,103
 1007594:	30809526 	beq	r6,r2,10077ec <___vfprintf_internal_r+0x1cf0>
 1007598:	d8c14d17 	ldw	r3,1332(sp)
 100759c:	008011c4 	movi	r2,71
 10075a0:	18809226 	beq	r3,r2,10077ec <___vfprintf_internal_r+0x1cf0>
 10075a4:	d9414117 	ldw	r5,1284(sp)
 10075a8:	d9814d17 	ldw	r6,1332(sp)
 10075ac:	00801984 	movi	r2,102
 10075b0:	2d25883a 	add	r18,r5,r20
 10075b4:	30808626 	beq	r6,r2,10077d0 <___vfprintf_internal_r+0x1cd4>
 10075b8:	00801184 	movi	r2,70
 10075bc:	30808426 	beq	r6,r2,10077d0 <___vfprintf_internal_r+0x1cd4>
 10075c0:	000d883a 	mov	r6,zero
 10075c4:	000f883a 	mov	r7,zero
 10075c8:	880b883a 	mov	r5,r17
 10075cc:	8009883a 	mov	r4,r16
 10075d0:	10042800 	call	1004280 <__eqdf2>
 10075d4:	1000751e 	bne	r2,zero,10077ac <___vfprintf_internal_r+0x1cb0>
 10075d8:	9005883a 	mov	r2,r18
 10075dc:	dc800715 	stw	r18,28(sp)
 10075e0:	d9014117 	ldw	r4,1284(sp)
 10075e4:	d9414d17 	ldw	r5,1332(sp)
 10075e8:	00c019c4 	movi	r3,103
 10075ec:	1125c83a 	sub	r18,r2,r4
 10075f0:	28c06826 	beq	r5,r3,1007794 <___vfprintf_internal_r+0x1c98>
 10075f4:	008011c4 	movi	r2,71
 10075f8:	28806626 	beq	r5,r2,1007794 <___vfprintf_internal_r+0x1c98>
 10075fc:	d9000517 	ldw	r4,20(sp)
 1007600:	d8c14d17 	ldw	r3,1332(sp)
 1007604:	00801944 	movi	r2,101
 1007608:	10c05516 	blt	r2,r3,1007760 <___vfprintf_internal_r+0x1c64>
 100760c:	213fffc4 	addi	r4,r4,-1
 1007610:	d9000515 	stw	r4,20(sp)
 1007614:	d8c00805 	stb	r3,32(sp)
 1007618:	2021883a 	mov	r16,r4
 100761c:	2000c116 	blt	r4,zero,1007924 <___vfprintf_internal_r+0x1e28>
 1007620:	00800ac4 	movi	r2,43
 1007624:	d8800845 	stb	r2,33(sp)
 1007628:	00800244 	movi	r2,9
 100762c:	1400af0e 	bge	r2,r16,10078ec <___vfprintf_internal_r+0x1df0>
 1007630:	1027883a 	mov	r19,r2
 1007634:	dc400b84 	addi	r17,sp,46
 1007638:	8009883a 	mov	r4,r16
 100763c:	01400284 	movi	r5,10
 1007640:	10046fc0 	call	10046fc <__modsi3>
 1007644:	10800c04 	addi	r2,r2,48
 1007648:	8c7fffc4 	addi	r17,r17,-1
 100764c:	8009883a 	mov	r4,r16
 1007650:	01400284 	movi	r5,10
 1007654:	88800005 	stb	r2,0(r17)
 1007658:	100469c0 	call	100469c <__divsi3>
 100765c:	1021883a 	mov	r16,r2
 1007660:	98bff516 	blt	r19,r2,1007638 <___vfprintf_internal_r+0x1b3c>
 1007664:	10c00c04 	addi	r3,r2,48
 1007668:	d88009c4 	addi	r2,sp,39
 100766c:	108001c4 	addi	r2,r2,7
 1007670:	897fffc4 	addi	r5,r17,-1
 1007674:	88ffffc5 	stb	r3,-1(r17)
 1007678:	2880a72e 	bgeu	r5,r2,1007918 <___vfprintf_internal_r+0x1e1c>
 100767c:	1009883a 	mov	r4,r2
 1007680:	d9800804 	addi	r6,sp,32
 1007684:	d8c00884 	addi	r3,sp,34
 1007688:	28800003 	ldbu	r2,0(r5)
 100768c:	29400044 	addi	r5,r5,1
 1007690:	18800005 	stb	r2,0(r3)
 1007694:	18c00044 	addi	r3,r3,1
 1007698:	293ffb36 	bltu	r5,r4,1007688 <___vfprintf_internal_r+0x1b8c>
 100769c:	1987c83a 	sub	r3,r3,r6
 10076a0:	00800044 	movi	r2,1
 10076a4:	d8c14815 	stw	r3,1312(sp)
 10076a8:	90cf883a 	add	r7,r18,r3
 10076ac:	1480960e 	bge	r2,r18,1007908 <___vfprintf_internal_r+0x1e0c>
 10076b0:	39c00044 	addi	r7,r7,1
 10076b4:	d9c14515 	stw	r7,1300(sp)
 10076b8:	38003416 	blt	r7,zero,100778c <___vfprintf_internal_r+0x1c90>
 10076bc:	e0803fcc 	andi	r2,fp,255
 10076c0:	1080201c 	xori	r2,r2,128
 10076c4:	10bfe004 	addi	r2,r2,-128
 10076c8:	10004e26 	beq	r2,zero,1007804 <___vfprintf_internal_r+0x1d08>
 10076cc:	00800b44 	movi	r2,45
 10076d0:	dc814715 	stw	r18,1308(sp)
 10076d4:	d8014615 	stw	zero,1304(sp)
 10076d8:	d8800405 	stb	r2,16(sp)
 10076dc:	003bab06 	br	100658c <___vfprintf_internal_r+0xa90>
 10076e0:	00800b44 	movi	r2,45
 10076e4:	d8800405 	stb	r2,16(sp)
 10076e8:	003d2d06 	br	1006ba0 <___vfprintf_internal_r+0x10a4>
 10076ec:	d9014f17 	ldw	r4,1340(sp)
 10076f0:	b00b883a 	mov	r5,r22
 10076f4:	d9800c04 	addi	r6,sp,48
 10076f8:	1005aa40 	call	1005aa4 <__sprint_r>
 10076fc:	103ab71e 	bne	r2,zero,10061dc <___vfprintf_internal_r+0x6e0>
 1007700:	003ab506 	br	10061d8 <___vfprintf_internal_r+0x6dc>
 1007704:	38800017 	ldw	r2,0(r7)
 1007708:	39c00104 	addi	r7,r7,4
 100770c:	d9c14015 	stw	r7,1280(sp)
 1007710:	d9414b17 	ldw	r5,1324(sp)
 1007714:	d9c14017 	ldw	r7,1280(sp)
 1007718:	11400015 	stw	r5,0(r2)
 100771c:	00395306 	br	1005c6c <___vfprintf_internal_r+0x170>
 1007720:	980f883a 	mov	r7,r19
 1007724:	dcc14515 	stw	r19,1300(sp)
 1007728:	d8014615 	stw	zero,1304(sp)
 100772c:	003b9506 	br	1006584 <___vfprintf_internal_r+0xa88>
 1007730:	0027883a 	mov	r19,zero
 1007734:	00397206 	br	1005d00 <___vfprintf_internal_r+0x204>
 1007738:	00c04074 	movhi	r3,257
 100773c:	18c9fc04 	addi	r3,r3,10224
 1007740:	100f883a 	mov	r7,r2
 1007744:	d8814515 	stw	r2,1300(sp)
 1007748:	d8c14115 	stw	r3,1284(sp)
 100774c:	0039da06 	br	1005eb8 <___vfprintf_internal_r+0x3bc>
 1007750:	00804074 	movhi	r2,257
 1007754:	1089fb04 	addi	r2,r2,10220
 1007758:	d8814115 	stw	r2,1284(sp)
 100775c:	003d1606 	br	1006bb8 <___vfprintf_internal_r+0x10bc>
 1007760:	d9414d17 	ldw	r5,1332(sp)
 1007764:	00801984 	movi	r2,102
 1007768:	28804926 	beq	r5,r2,1007890 <___vfprintf_internal_r+0x1d94>
 100776c:	200f883a 	mov	r7,r4
 1007770:	24805716 	blt	r4,r18,10078d0 <___vfprintf_internal_r+0x1dd4>
 1007774:	d9414c17 	ldw	r5,1328(sp)
 1007778:	2880004c 	andi	r2,r5,1
 100777c:	10000126 	beq	r2,zero,1007784 <___vfprintf_internal_r+0x1c88>
 1007780:	21c00044 	addi	r7,r4,1
 1007784:	d9c14515 	stw	r7,1300(sp)
 1007788:	383fcc0e 	bge	r7,zero,10076bc <___vfprintf_internal_r+0x1bc0>
 100778c:	d8014515 	stw	zero,1300(sp)
 1007790:	003fca06 	br	10076bc <___vfprintf_internal_r+0x1bc0>
 1007794:	d9000517 	ldw	r4,20(sp)
 1007798:	00bfff04 	movi	r2,-4
 100779c:	1100480e 	bge	r2,r4,10078c0 <___vfprintf_internal_r+0x1dc4>
 10077a0:	99004716 	blt	r19,r4,10078c0 <___vfprintf_internal_r+0x1dc4>
 10077a4:	d8c14d15 	stw	r3,1332(sp)
 10077a8:	003ff006 	br	100776c <___vfprintf_internal_r+0x1c70>
 10077ac:	d8800717 	ldw	r2,28(sp)
 10077b0:	14bf8b2e 	bgeu	r2,r18,10075e0 <___vfprintf_internal_r+0x1ae4>
 10077b4:	9007883a 	mov	r3,r18
 10077b8:	01000c04 	movi	r4,48
 10077bc:	11000005 	stb	r4,0(r2)
 10077c0:	10800044 	addi	r2,r2,1
 10077c4:	d8800715 	stw	r2,28(sp)
 10077c8:	18bffc1e 	bne	r3,r2,10077bc <___vfprintf_internal_r+0x1cc0>
 10077cc:	003f8406 	br	10075e0 <___vfprintf_internal_r+0x1ae4>
 10077d0:	d8814117 	ldw	r2,1284(sp)
 10077d4:	10c00007 	ldb	r3,0(r2)
 10077d8:	00800c04 	movi	r2,48
 10077dc:	18805b26 	beq	r3,r2,100794c <___vfprintf_internal_r+0x1e50>
 10077e0:	d9000517 	ldw	r4,20(sp)
 10077e4:	9125883a 	add	r18,r18,r4
 10077e8:	003f7506 	br	10075c0 <___vfprintf_internal_r+0x1ac4>
 10077ec:	d9014c17 	ldw	r4,1328(sp)
 10077f0:	2080004c 	andi	r2,r4,1
 10077f4:	1005003a 	cmpeq	r2,r2,zero
 10077f8:	103f6a26 	beq	r2,zero,10075a4 <___vfprintf_internal_r+0x1aa8>
 10077fc:	d8800717 	ldw	r2,28(sp)
 1007800:	003f7706 	br	10075e0 <___vfprintf_internal_r+0x1ae4>
 1007804:	d9c14515 	stw	r7,1300(sp)
 1007808:	38004d16 	blt	r7,zero,1007940 <___vfprintf_internal_r+0x1e44>
 100780c:	dc814715 	stw	r18,1308(sp)
 1007810:	d8014615 	stw	zero,1304(sp)
 1007814:	003b5b06 	br	1006584 <___vfprintf_internal_r+0xa88>
 1007818:	d9014f17 	ldw	r4,1340(sp)
 100781c:	d8800504 	addi	r2,sp,20
 1007820:	d8800115 	stw	r2,4(sp)
 1007824:	d8c00604 	addi	r3,sp,24
 1007828:	d8800704 	addi	r2,sp,28
 100782c:	800b883a 	mov	r5,r16
 1007830:	880d883a 	mov	r6,r17
 1007834:	01c000c4 	movi	r7,3
 1007838:	d8c00215 	stw	r3,8(sp)
 100783c:	d8800315 	stw	r2,12(sp)
 1007840:	dcc00015 	stw	r19,0(sp)
 1007844:	9829883a 	mov	r20,r19
 1007848:	1007d640 	call	1007d64 <_dtoa_r>
 100784c:	d8814115 	stw	r2,1284(sp)
 1007850:	003f5106 	br	1007598 <___vfprintf_internal_r+0x1a9c>
 1007854:	d8c14217 	ldw	r3,1288(sp)
 1007858:	d9014317 	ldw	r4,1292(sp)
 100785c:	07000b44 	movi	fp,45
 1007860:	1821883a 	mov	r16,r3
 1007864:	2460003c 	xorhi	r17,r4,32768
 1007868:	003f3106 	br	1007530 <___vfprintf_internal_r+0x1a34>
 100786c:	9d000044 	addi	r20,r19,1
 1007870:	003f3906 	br	1007558 <___vfprintf_internal_r+0x1a5c>
 1007874:	983f251e 	bne	r19,zero,100750c <___vfprintf_internal_r+0x1a10>
 1007878:	04c00044 	movi	r19,1
 100787c:	003f2306 	br	100750c <___vfprintf_internal_r+0x1a10>
 1007880:	04c00184 	movi	r19,6
 1007884:	003f2106 	br	100750c <___vfprintf_internal_r+0x1a10>
 1007888:	d8014515 	stw	zero,1300(sp)
 100788c:	003eee06 	br	1007448 <___vfprintf_internal_r+0x194c>
 1007890:	200f883a 	mov	r7,r4
 1007894:	0100370e 	bge	zero,r4,1007974 <___vfprintf_internal_r+0x1e78>
 1007898:	9800031e 	bne	r19,zero,10078a8 <___vfprintf_internal_r+0x1dac>
 100789c:	d9814c17 	ldw	r6,1328(sp)
 10078a0:	3080004c 	andi	r2,r6,1
 10078a4:	103fb726 	beq	r2,zero,1007784 <___vfprintf_internal_r+0x1c88>
 10078a8:	20800044 	addi	r2,r4,1
 10078ac:	98a7883a 	add	r19,r19,r2
 10078b0:	dcc14515 	stw	r19,1300(sp)
 10078b4:	980f883a 	mov	r7,r19
 10078b8:	983f800e 	bge	r19,zero,10076bc <___vfprintf_internal_r+0x1bc0>
 10078bc:	003fb306 	br	100778c <___vfprintf_internal_r+0x1c90>
 10078c0:	d9814d17 	ldw	r6,1332(sp)
 10078c4:	31bfff84 	addi	r6,r6,-2
 10078c8:	d9814d15 	stw	r6,1332(sp)
 10078cc:	003f4c06 	br	1007600 <___vfprintf_internal_r+0x1b04>
 10078d0:	0100180e 	bge	zero,r4,1007934 <___vfprintf_internal_r+0x1e38>
 10078d4:	00800044 	movi	r2,1
 10078d8:	1485883a 	add	r2,r2,r18
 10078dc:	d8814515 	stw	r2,1300(sp)
 10078e0:	100f883a 	mov	r7,r2
 10078e4:	103f750e 	bge	r2,zero,10076bc <___vfprintf_internal_r+0x1bc0>
 10078e8:	003fa806 	br	100778c <___vfprintf_internal_r+0x1c90>
 10078ec:	80c00c04 	addi	r3,r16,48
 10078f0:	00800c04 	movi	r2,48
 10078f4:	d8c008c5 	stb	r3,35(sp)
 10078f8:	d9800804 	addi	r6,sp,32
 10078fc:	d8c00904 	addi	r3,sp,36
 1007900:	d8800885 	stb	r2,34(sp)
 1007904:	003f6506 	br	100769c <___vfprintf_internal_r+0x1ba0>
 1007908:	d9014c17 	ldw	r4,1328(sp)
 100790c:	2084703a 	and	r2,r4,r2
 1007910:	103f9c26 	beq	r2,zero,1007784 <___vfprintf_internal_r+0x1c88>
 1007914:	003f6606 	br	10076b0 <___vfprintf_internal_r+0x1bb4>
 1007918:	d9800804 	addi	r6,sp,32
 100791c:	d8c00884 	addi	r3,sp,34
 1007920:	003f5e06 	br	100769c <___vfprintf_internal_r+0x1ba0>
 1007924:	00800b44 	movi	r2,45
 1007928:	0121c83a 	sub	r16,zero,r4
 100792c:	d8800845 	stb	r2,33(sp)
 1007930:	003f3d06 	br	1007628 <___vfprintf_internal_r+0x1b2c>
 1007934:	00800084 	movi	r2,2
 1007938:	1105c83a 	sub	r2,r2,r4
 100793c:	003fe606 	br	10078d8 <___vfprintf_internal_r+0x1ddc>
 1007940:	d8014515 	stw	zero,1300(sp)
 1007944:	dc814715 	stw	r18,1308(sp)
 1007948:	003fb106 	br	1007810 <___vfprintf_internal_r+0x1d14>
 100794c:	000d883a 	mov	r6,zero
 1007950:	000f883a 	mov	r7,zero
 1007954:	8009883a 	mov	r4,r16
 1007958:	880b883a 	mov	r5,r17
 100795c:	100d4b00 	call	100d4b0 <__nedf2>
 1007960:	103f9f26 	beq	r2,zero,10077e0 <___vfprintf_internal_r+0x1ce4>
 1007964:	00800044 	movi	r2,1
 1007968:	1509c83a 	sub	r4,r2,r20
 100796c:	d9000515 	stw	r4,20(sp)
 1007970:	003f9b06 	br	10077e0 <___vfprintf_internal_r+0x1ce4>
 1007974:	98000d1e 	bne	r19,zero,10079ac <___vfprintf_internal_r+0x1eb0>
 1007978:	d8c14c17 	ldw	r3,1328(sp)
 100797c:	1880004c 	andi	r2,r3,1
 1007980:	10000a1e 	bne	r2,zero,10079ac <___vfprintf_internal_r+0x1eb0>
 1007984:	01000044 	movi	r4,1
 1007988:	200f883a 	mov	r7,r4
 100798c:	d9014515 	stw	r4,1300(sp)
 1007990:	003f4a06 	br	10076bc <___vfprintf_internal_r+0x1bc0>
 1007994:	3cc00017 	ldw	r19,0(r7)
 1007998:	39c00104 	addi	r7,r7,4
 100799c:	983d0e0e 	bge	r19,zero,1006dd8 <___vfprintf_internal_r+0x12dc>
 10079a0:	b8c00007 	ldb	r3,0(r23)
 10079a4:	04ffffc4 	movi	r19,-1
 10079a8:	0038d306 	br	1005cf8 <___vfprintf_internal_r+0x1fc>
 10079ac:	9cc00084 	addi	r19,r19,2
 10079b0:	dcc14515 	stw	r19,1300(sp)
 10079b4:	980f883a 	mov	r7,r19
 10079b8:	983f400e 	bge	r19,zero,10076bc <___vfprintf_internal_r+0x1bc0>
 10079bc:	003f7306 	br	100778c <___vfprintf_internal_r+0x1c90>

010079c0 <__vfprintf_internal>:
 10079c0:	00804074 	movhi	r2,257
 10079c4:	10915704 	addi	r2,r2,17756
 10079c8:	2013883a 	mov	r9,r4
 10079cc:	11000017 	ldw	r4,0(r2)
 10079d0:	2805883a 	mov	r2,r5
 10079d4:	300f883a 	mov	r7,r6
 10079d8:	480b883a 	mov	r5,r9
 10079dc:	100d883a 	mov	r6,r2
 10079e0:	1005afc1 	jmpi	1005afc <___vfprintf_internal_r>

010079e4 <__swsetup_r>:
 10079e4:	00804074 	movhi	r2,257
 10079e8:	10915704 	addi	r2,r2,17756
 10079ec:	10c00017 	ldw	r3,0(r2)
 10079f0:	defffd04 	addi	sp,sp,-12
 10079f4:	dc400115 	stw	r17,4(sp)
 10079f8:	dc000015 	stw	r16,0(sp)
 10079fc:	dfc00215 	stw	ra,8(sp)
 1007a00:	2023883a 	mov	r17,r4
 1007a04:	2821883a 	mov	r16,r5
 1007a08:	18000226 	beq	r3,zero,1007a14 <__swsetup_r+0x30>
 1007a0c:	18800e17 	ldw	r2,56(r3)
 1007a10:	10001f26 	beq	r2,zero,1007a90 <__swsetup_r+0xac>
 1007a14:	8100030b 	ldhu	r4,12(r16)
 1007a18:	2080020c 	andi	r2,r4,8
 1007a1c:	10002826 	beq	r2,zero,1007ac0 <__swsetup_r+0xdc>
 1007a20:	81400417 	ldw	r5,16(r16)
 1007a24:	28001d26 	beq	r5,zero,1007a9c <__swsetup_r+0xb8>
 1007a28:	2080004c 	andi	r2,r4,1
 1007a2c:	1005003a 	cmpeq	r2,r2,zero
 1007a30:	10000b26 	beq	r2,zero,1007a60 <__swsetup_r+0x7c>
 1007a34:	2080008c 	andi	r2,r4,2
 1007a38:	10001226 	beq	r2,zero,1007a84 <__swsetup_r+0xa0>
 1007a3c:	0005883a 	mov	r2,zero
 1007a40:	80800215 	stw	r2,8(r16)
 1007a44:	28000b26 	beq	r5,zero,1007a74 <__swsetup_r+0x90>
 1007a48:	0005883a 	mov	r2,zero
 1007a4c:	dfc00217 	ldw	ra,8(sp)
 1007a50:	dc400117 	ldw	r17,4(sp)
 1007a54:	dc000017 	ldw	r16,0(sp)
 1007a58:	dec00304 	addi	sp,sp,12
 1007a5c:	f800283a 	ret
 1007a60:	80800517 	ldw	r2,20(r16)
 1007a64:	80000215 	stw	zero,8(r16)
 1007a68:	0085c83a 	sub	r2,zero,r2
 1007a6c:	80800615 	stw	r2,24(r16)
 1007a70:	283ff51e 	bne	r5,zero,1007a48 <__swsetup_r+0x64>
 1007a74:	2080200c 	andi	r2,r4,128
 1007a78:	103ff326 	beq	r2,zero,1007a48 <__swsetup_r+0x64>
 1007a7c:	00bfffc4 	movi	r2,-1
 1007a80:	003ff206 	br	1007a4c <__swsetup_r+0x68>
 1007a84:	80800517 	ldw	r2,20(r16)
 1007a88:	80800215 	stw	r2,8(r16)
 1007a8c:	003fed06 	br	1007a44 <__swsetup_r+0x60>
 1007a90:	1809883a 	mov	r4,r3
 1007a94:	10095b00 	call	10095b0 <__sinit>
 1007a98:	003fde06 	br	1007a14 <__swsetup_r+0x30>
 1007a9c:	20c0a00c 	andi	r3,r4,640
 1007aa0:	00808004 	movi	r2,512
 1007aa4:	18bfe026 	beq	r3,r2,1007a28 <__swsetup_r+0x44>
 1007aa8:	8809883a 	mov	r4,r17
 1007aac:	800b883a 	mov	r5,r16
 1007ab0:	100a35c0 	call	100a35c <__smakebuf_r>
 1007ab4:	8100030b 	ldhu	r4,12(r16)
 1007ab8:	81400417 	ldw	r5,16(r16)
 1007abc:	003fda06 	br	1007a28 <__swsetup_r+0x44>
 1007ac0:	2080040c 	andi	r2,r4,16
 1007ac4:	103fed26 	beq	r2,zero,1007a7c <__swsetup_r+0x98>
 1007ac8:	2080010c 	andi	r2,r4,4
 1007acc:	10001226 	beq	r2,zero,1007b18 <__swsetup_r+0x134>
 1007ad0:	81400c17 	ldw	r5,48(r16)
 1007ad4:	28000526 	beq	r5,zero,1007aec <__swsetup_r+0x108>
 1007ad8:	80801004 	addi	r2,r16,64
 1007adc:	28800226 	beq	r5,r2,1007ae8 <__swsetup_r+0x104>
 1007ae0:	8809883a 	mov	r4,r17
 1007ae4:	10099680 	call	1009968 <_free_r>
 1007ae8:	80000c15 	stw	zero,48(r16)
 1007aec:	8080030b 	ldhu	r2,12(r16)
 1007af0:	81400417 	ldw	r5,16(r16)
 1007af4:	80000115 	stw	zero,4(r16)
 1007af8:	10bff6cc 	andi	r2,r2,65499
 1007afc:	8080030d 	sth	r2,12(r16)
 1007b00:	81400015 	stw	r5,0(r16)
 1007b04:	8080030b 	ldhu	r2,12(r16)
 1007b08:	10800214 	ori	r2,r2,8
 1007b0c:	113fffcc 	andi	r4,r2,65535
 1007b10:	8080030d 	sth	r2,12(r16)
 1007b14:	003fc306 	br	1007a24 <__swsetup_r+0x40>
 1007b18:	81400417 	ldw	r5,16(r16)
 1007b1c:	003ff906 	br	1007b04 <__swsetup_r+0x120>

01007b20 <quorem>:
 1007b20:	28c00417 	ldw	r3,16(r5)
 1007b24:	20800417 	ldw	r2,16(r4)
 1007b28:	defff104 	addi	sp,sp,-60
 1007b2c:	dfc00e15 	stw	ra,56(sp)
 1007b30:	df000d15 	stw	fp,52(sp)
 1007b34:	ddc00c15 	stw	r23,48(sp)
 1007b38:	dd800b15 	stw	r22,44(sp)
 1007b3c:	dd400a15 	stw	r21,40(sp)
 1007b40:	dd000915 	stw	r20,36(sp)
 1007b44:	dcc00815 	stw	r19,32(sp)
 1007b48:	dc800715 	stw	r18,28(sp)
 1007b4c:	dc400615 	stw	r17,24(sp)
 1007b50:	dc000515 	stw	r16,20(sp)
 1007b54:	d9000315 	stw	r4,12(sp)
 1007b58:	d9400415 	stw	r5,16(sp)
 1007b5c:	10c07f16 	blt	r2,r3,1007d5c <quorem+0x23c>
 1007b60:	1d3fffc4 	addi	r20,r3,-1
 1007b64:	d8c00417 	ldw	r3,16(sp)
 1007b68:	d9000317 	ldw	r4,12(sp)
 1007b6c:	a505883a 	add	r2,r20,r20
 1007b70:	1085883a 	add	r2,r2,r2
 1007b74:	1cc00504 	addi	r19,r3,20
 1007b78:	25c00504 	addi	r23,r4,20
 1007b7c:	98ad883a 	add	r22,r19,r2
 1007b80:	15c7883a 	add	r3,r2,r23
 1007b84:	b1400017 	ldw	r5,0(r22)
 1007b88:	19000017 	ldw	r4,0(r3)
 1007b8c:	d8c00015 	stw	r3,0(sp)
 1007b90:	29400044 	addi	r5,r5,1
 1007b94:	d9000215 	stw	r4,8(sp)
 1007b98:	100475c0 	call	100475c <__udivsi3>
 1007b9c:	1039883a 	mov	fp,r2
 1007ba0:	10003d1e 	bne	r2,zero,1007c98 <quorem+0x178>
 1007ba4:	d9400417 	ldw	r5,16(sp)
 1007ba8:	d9000317 	ldw	r4,12(sp)
 1007bac:	100a9480 	call	100a948 <__mcmp>
 1007bb0:	10002c16 	blt	r2,zero,1007c64 <quorem+0x144>
 1007bb4:	e7000044 	addi	fp,fp,1
 1007bb8:	b80f883a 	mov	r7,r23
 1007bbc:	0011883a 	mov	r8,zero
 1007bc0:	0009883a 	mov	r4,zero
 1007bc4:	99400017 	ldw	r5,0(r19)
 1007bc8:	38c00017 	ldw	r3,0(r7)
 1007bcc:	9cc00104 	addi	r19,r19,4
 1007bd0:	28bfffcc 	andi	r2,r5,65535
 1007bd4:	2085883a 	add	r2,r4,r2
 1007bd8:	11bfffcc 	andi	r6,r2,65535
 1007bdc:	193fffcc 	andi	r4,r3,65535
 1007be0:	1004d43a 	srli	r2,r2,16
 1007be4:	280ad43a 	srli	r5,r5,16
 1007be8:	2189c83a 	sub	r4,r4,r6
 1007bec:	2209883a 	add	r4,r4,r8
 1007bf0:	1806d43a 	srli	r3,r3,16
 1007bf4:	288b883a 	add	r5,r5,r2
 1007bf8:	200dd43a 	srai	r6,r4,16
 1007bfc:	28bfffcc 	andi	r2,r5,65535
 1007c00:	1887c83a 	sub	r3,r3,r2
 1007c04:	1987883a 	add	r3,r3,r6
 1007c08:	3900000d 	sth	r4,0(r7)
 1007c0c:	38c0008d 	sth	r3,2(r7)
 1007c10:	2808d43a 	srli	r4,r5,16
 1007c14:	39c00104 	addi	r7,r7,4
 1007c18:	1811d43a 	srai	r8,r3,16
 1007c1c:	b4ffe92e 	bgeu	r22,r19,1007bc4 <quorem+0xa4>
 1007c20:	a505883a 	add	r2,r20,r20
 1007c24:	1085883a 	add	r2,r2,r2
 1007c28:	b885883a 	add	r2,r23,r2
 1007c2c:	10c00017 	ldw	r3,0(r2)
 1007c30:	18000c1e 	bne	r3,zero,1007c64 <quorem+0x144>
 1007c34:	113fff04 	addi	r4,r2,-4
 1007c38:	b900082e 	bgeu	r23,r4,1007c5c <quorem+0x13c>
 1007c3c:	10bfff17 	ldw	r2,-4(r2)
 1007c40:	10000326 	beq	r2,zero,1007c50 <quorem+0x130>
 1007c44:	00000506 	br	1007c5c <quorem+0x13c>
 1007c48:	20800017 	ldw	r2,0(r4)
 1007c4c:	1000031e 	bne	r2,zero,1007c5c <quorem+0x13c>
 1007c50:	213fff04 	addi	r4,r4,-4
 1007c54:	a53fffc4 	addi	r20,r20,-1
 1007c58:	b93ffb36 	bltu	r23,r4,1007c48 <quorem+0x128>
 1007c5c:	d9000317 	ldw	r4,12(sp)
 1007c60:	25000415 	stw	r20,16(r4)
 1007c64:	e005883a 	mov	r2,fp
 1007c68:	dfc00e17 	ldw	ra,56(sp)
 1007c6c:	df000d17 	ldw	fp,52(sp)
 1007c70:	ddc00c17 	ldw	r23,48(sp)
 1007c74:	dd800b17 	ldw	r22,44(sp)
 1007c78:	dd400a17 	ldw	r21,40(sp)
 1007c7c:	dd000917 	ldw	r20,36(sp)
 1007c80:	dcc00817 	ldw	r19,32(sp)
 1007c84:	dc800717 	ldw	r18,28(sp)
 1007c88:	dc400617 	ldw	r17,24(sp)
 1007c8c:	dc000517 	ldw	r16,20(sp)
 1007c90:	dec00f04 	addi	sp,sp,60
 1007c94:	f800283a 	ret
 1007c98:	b823883a 	mov	r17,r23
 1007c9c:	9825883a 	mov	r18,r19
 1007ca0:	d8000115 	stw	zero,4(sp)
 1007ca4:	002b883a 	mov	r21,zero
 1007ca8:	94000017 	ldw	r16,0(r18)
 1007cac:	e009883a 	mov	r4,fp
 1007cb0:	94800104 	addi	r18,r18,4
 1007cb4:	817fffcc 	andi	r5,r16,65535
 1007cb8:	100476c0 	call	100476c <__mulsi3>
 1007cbc:	800ad43a 	srli	r5,r16,16
 1007cc0:	e009883a 	mov	r4,fp
 1007cc4:	a8a1883a 	add	r16,r21,r2
 1007cc8:	100476c0 	call	100476c <__mulsi3>
 1007ccc:	89000017 	ldw	r4,0(r17)
 1007cd0:	80ffffcc 	andi	r3,r16,65535
 1007cd4:	8020d43a 	srli	r16,r16,16
 1007cd8:	217fffcc 	andi	r5,r4,65535
 1007cdc:	28cbc83a 	sub	r5,r5,r3
 1007ce0:	d8c00117 	ldw	r3,4(sp)
 1007ce4:	2008d43a 	srli	r4,r4,16
 1007ce8:	1405883a 	add	r2,r2,r16
 1007cec:	28cb883a 	add	r5,r5,r3
 1007cf0:	280dd43a 	srai	r6,r5,16
 1007cf4:	10ffffcc 	andi	r3,r2,65535
 1007cf8:	20c9c83a 	sub	r4,r4,r3
 1007cfc:	2189883a 	add	r4,r4,r6
 1007d00:	8900008d 	sth	r4,2(r17)
 1007d04:	2009d43a 	srai	r4,r4,16
 1007d08:	8940000d 	sth	r5,0(r17)
 1007d0c:	102ad43a 	srli	r21,r2,16
 1007d10:	8c400104 	addi	r17,r17,4
 1007d14:	d9000115 	stw	r4,4(sp)
 1007d18:	b4bfe32e 	bgeu	r22,r18,1007ca8 <quorem+0x188>
 1007d1c:	d9000217 	ldw	r4,8(sp)
 1007d20:	203fa01e 	bne	r4,zero,1007ba4 <quorem+0x84>
 1007d24:	d8800017 	ldw	r2,0(sp)
 1007d28:	10ffff04 	addi	r3,r2,-4
 1007d2c:	b8c0082e 	bgeu	r23,r3,1007d50 <quorem+0x230>
 1007d30:	10bfff17 	ldw	r2,-4(r2)
 1007d34:	10000326 	beq	r2,zero,1007d44 <quorem+0x224>
 1007d38:	00000506 	br	1007d50 <quorem+0x230>
 1007d3c:	18800017 	ldw	r2,0(r3)
 1007d40:	1000031e 	bne	r2,zero,1007d50 <quorem+0x230>
 1007d44:	18ffff04 	addi	r3,r3,-4
 1007d48:	a53fffc4 	addi	r20,r20,-1
 1007d4c:	b8fffb36 	bltu	r23,r3,1007d3c <quorem+0x21c>
 1007d50:	d8c00317 	ldw	r3,12(sp)
 1007d54:	1d000415 	stw	r20,16(r3)
 1007d58:	003f9206 	br	1007ba4 <quorem+0x84>
 1007d5c:	0005883a 	mov	r2,zero
 1007d60:	003fc106 	br	1007c68 <quorem+0x148>

01007d64 <_dtoa_r>:
 1007d64:	22001017 	ldw	r8,64(r4)
 1007d68:	deffda04 	addi	sp,sp,-152
 1007d6c:	dd402115 	stw	r21,132(sp)
 1007d70:	dd002015 	stw	r20,128(sp)
 1007d74:	dc801e15 	stw	r18,120(sp)
 1007d78:	dc401d15 	stw	r17,116(sp)
 1007d7c:	dfc02515 	stw	ra,148(sp)
 1007d80:	df002415 	stw	fp,144(sp)
 1007d84:	ddc02315 	stw	r23,140(sp)
 1007d88:	dd802215 	stw	r22,136(sp)
 1007d8c:	dcc01f15 	stw	r19,124(sp)
 1007d90:	dc001c15 	stw	r16,112(sp)
 1007d94:	d9001615 	stw	r4,88(sp)
 1007d98:	3023883a 	mov	r17,r6
 1007d9c:	2829883a 	mov	r20,r5
 1007da0:	d9c01715 	stw	r7,92(sp)
 1007da4:	dc802817 	ldw	r18,160(sp)
 1007da8:	302b883a 	mov	r21,r6
 1007dac:	40000a26 	beq	r8,zero,1007dd8 <_dtoa_r+0x74>
 1007db0:	20801117 	ldw	r2,68(r4)
 1007db4:	400b883a 	mov	r5,r8
 1007db8:	40800115 	stw	r2,4(r8)
 1007dbc:	20c01117 	ldw	r3,68(r4)
 1007dc0:	00800044 	movi	r2,1
 1007dc4:	10c4983a 	sll	r2,r2,r3
 1007dc8:	40800215 	stw	r2,8(r8)
 1007dcc:	100a7ec0 	call	100a7ec <_Bfree>
 1007dd0:	d8c01617 	ldw	r3,88(sp)
 1007dd4:	18001015 	stw	zero,64(r3)
 1007dd8:	8800a316 	blt	r17,zero,1008068 <_dtoa_r+0x304>
 1007ddc:	90000015 	stw	zero,0(r18)
 1007de0:	a8dffc2c 	andhi	r3,r21,32752
 1007de4:	009ffc34 	movhi	r2,32752
 1007de8:	18809126 	beq	r3,r2,1008030 <_dtoa_r+0x2cc>
 1007dec:	000d883a 	mov	r6,zero
 1007df0:	000f883a 	mov	r7,zero
 1007df4:	a009883a 	mov	r4,r20
 1007df8:	a80b883a 	mov	r5,r21
 1007dfc:	dd001215 	stw	r20,72(sp)
 1007e00:	dd401315 	stw	r21,76(sp)
 1007e04:	100d4b00 	call	100d4b0 <__nedf2>
 1007e08:	1000171e 	bne	r2,zero,1007e68 <_dtoa_r+0x104>
 1007e0c:	d9802717 	ldw	r6,156(sp)
 1007e10:	00800044 	movi	r2,1
 1007e14:	30800015 	stw	r2,0(r6)
 1007e18:	d8802917 	ldw	r2,164(sp)
 1007e1c:	10029b26 	beq	r2,zero,100888c <_dtoa_r+0xb28>
 1007e20:	d9002917 	ldw	r4,164(sp)
 1007e24:	00804074 	movhi	r2,257
 1007e28:	108a0a44 	addi	r2,r2,10281
 1007e2c:	10ffffc4 	addi	r3,r2,-1
 1007e30:	20800015 	stw	r2,0(r4)
 1007e34:	1805883a 	mov	r2,r3
 1007e38:	dfc02517 	ldw	ra,148(sp)
 1007e3c:	df002417 	ldw	fp,144(sp)
 1007e40:	ddc02317 	ldw	r23,140(sp)
 1007e44:	dd802217 	ldw	r22,136(sp)
 1007e48:	dd402117 	ldw	r21,132(sp)
 1007e4c:	dd002017 	ldw	r20,128(sp)
 1007e50:	dcc01f17 	ldw	r19,124(sp)
 1007e54:	dc801e17 	ldw	r18,120(sp)
 1007e58:	dc401d17 	ldw	r17,116(sp)
 1007e5c:	dc001c17 	ldw	r16,112(sp)
 1007e60:	dec02604 	addi	sp,sp,152
 1007e64:	f800283a 	ret
 1007e68:	d9001617 	ldw	r4,88(sp)
 1007e6c:	d9401217 	ldw	r5,72(sp)
 1007e70:	d8800104 	addi	r2,sp,4
 1007e74:	a80d883a 	mov	r6,r21
 1007e78:	d9c00204 	addi	r7,sp,8
 1007e7c:	d8800015 	stw	r2,0(sp)
 1007e80:	100ae280 	call	100ae28 <__d2b>
 1007e84:	d8800715 	stw	r2,28(sp)
 1007e88:	a804d53a 	srli	r2,r21,20
 1007e8c:	1101ffcc 	andi	r4,r2,2047
 1007e90:	20008626 	beq	r4,zero,10080ac <_dtoa_r+0x348>
 1007e94:	d8c01217 	ldw	r3,72(sp)
 1007e98:	00800434 	movhi	r2,16
 1007e9c:	10bfffc4 	addi	r2,r2,-1
 1007ea0:	ddc00117 	ldw	r23,4(sp)
 1007ea4:	a884703a 	and	r2,r21,r2
 1007ea8:	1811883a 	mov	r8,r3
 1007eac:	124ffc34 	orhi	r9,r2,16368
 1007eb0:	25bf0044 	addi	r22,r4,-1023
 1007eb4:	d8000815 	stw	zero,32(sp)
 1007eb8:	0005883a 	mov	r2,zero
 1007ebc:	00cffe34 	movhi	r3,16376
 1007ec0:	480b883a 	mov	r5,r9
 1007ec4:	4009883a 	mov	r4,r8
 1007ec8:	180f883a 	mov	r7,r3
 1007ecc:	100d883a 	mov	r6,r2
 1007ed0:	1003dc80 	call	1003dc8 <__subdf3>
 1007ed4:	0218dbf4 	movhi	r8,25455
 1007ed8:	4210d844 	addi	r8,r8,17249
 1007edc:	024ff4f4 	movhi	r9,16339
 1007ee0:	4a61e9c4 	addi	r9,r9,-30809
 1007ee4:	480f883a 	mov	r7,r9
 1007ee8:	400d883a 	mov	r6,r8
 1007eec:	180b883a 	mov	r5,r3
 1007ef0:	1009883a 	mov	r4,r2
 1007ef4:	1003ebc0 	call	1003ebc <__muldf3>
 1007ef8:	0222d874 	movhi	r8,35681
 1007efc:	42322cc4 	addi	r8,r8,-14157
 1007f00:	024ff1f4 	movhi	r9,16327
 1007f04:	4a628a04 	addi	r9,r9,-30168
 1007f08:	480f883a 	mov	r7,r9
 1007f0c:	400d883a 	mov	r6,r8
 1007f10:	180b883a 	mov	r5,r3
 1007f14:	1009883a 	mov	r4,r2
 1007f18:	1003e480 	call	1003e48 <__adddf3>
 1007f1c:	b009883a 	mov	r4,r22
 1007f20:	1021883a 	mov	r16,r2
 1007f24:	1823883a 	mov	r17,r3
 1007f28:	10044180 	call	1004418 <__floatsidf>
 1007f2c:	021427f4 	movhi	r8,20639
 1007f30:	421e7ec4 	addi	r8,r8,31227
 1007f34:	024ff4f4 	movhi	r9,16339
 1007f38:	4a5104c4 	addi	r9,r9,17427
 1007f3c:	480f883a 	mov	r7,r9
 1007f40:	400d883a 	mov	r6,r8
 1007f44:	180b883a 	mov	r5,r3
 1007f48:	1009883a 	mov	r4,r2
 1007f4c:	1003ebc0 	call	1003ebc <__muldf3>
 1007f50:	180f883a 	mov	r7,r3
 1007f54:	880b883a 	mov	r5,r17
 1007f58:	100d883a 	mov	r6,r2
 1007f5c:	8009883a 	mov	r4,r16
 1007f60:	1003e480 	call	1003e48 <__adddf3>
 1007f64:	1009883a 	mov	r4,r2
 1007f68:	180b883a 	mov	r5,r3
 1007f6c:	1021883a 	mov	r16,r2
 1007f70:	1823883a 	mov	r17,r3
 1007f74:	10045100 	call	1004510 <__fixdfsi>
 1007f78:	000d883a 	mov	r6,zero
 1007f7c:	000f883a 	mov	r7,zero
 1007f80:	8009883a 	mov	r4,r16
 1007f84:	880b883a 	mov	r5,r17
 1007f88:	d8800d15 	stw	r2,52(sp)
 1007f8c:	100d5380 	call	100d538 <__ltdf2>
 1007f90:	10031716 	blt	r2,zero,1008bf0 <_dtoa_r+0xe8c>
 1007f94:	d8c00d17 	ldw	r3,52(sp)
 1007f98:	00800584 	movi	r2,22
 1007f9c:	10c1482e 	bgeu	r2,r3,10084c0 <_dtoa_r+0x75c>
 1007fa0:	01000044 	movi	r4,1
 1007fa4:	d9000c15 	stw	r4,48(sp)
 1007fa8:	bd85c83a 	sub	r2,r23,r22
 1007fac:	11bfffc4 	addi	r6,r2,-1
 1007fb0:	30030b16 	blt	r6,zero,1008be0 <_dtoa_r+0xe7c>
 1007fb4:	d9800a15 	stw	r6,40(sp)
 1007fb8:	d8001115 	stw	zero,68(sp)
 1007fbc:	d8c00d17 	ldw	r3,52(sp)
 1007fc0:	1802ff16 	blt	r3,zero,1008bc0 <_dtoa_r+0xe5c>
 1007fc4:	d9000a17 	ldw	r4,40(sp)
 1007fc8:	d8c00915 	stw	r3,36(sp)
 1007fcc:	d8001015 	stw	zero,64(sp)
 1007fd0:	20c9883a 	add	r4,r4,r3
 1007fd4:	d9000a15 	stw	r4,40(sp)
 1007fd8:	d9001717 	ldw	r4,92(sp)
 1007fdc:	00800244 	movi	r2,9
 1007fe0:	11004636 	bltu	r2,r4,10080fc <_dtoa_r+0x398>
 1007fe4:	00800144 	movi	r2,5
 1007fe8:	11020416 	blt	r2,r4,10087fc <_dtoa_r+0xa98>
 1007fec:	04400044 	movi	r17,1
 1007ff0:	d8c01717 	ldw	r3,92(sp)
 1007ff4:	00800144 	movi	r2,5
 1007ff8:	10c1ed36 	bltu	r2,r3,10087b0 <_dtoa_r+0xa4c>
 1007ffc:	18c5883a 	add	r2,r3,r3
 1008000:	1085883a 	add	r2,r2,r2
 1008004:	00c04074 	movhi	r3,257
 1008008:	18e00604 	addi	r3,r3,-32744
 100800c:	10c5883a 	add	r2,r2,r3
 1008010:	11000017 	ldw	r4,0(r2)
 1008014:	2000683a 	jmp	r4
 1008018:	01008104 	movi	r4,516
 100801c:	01008104 	movi	r4,516
 1008020:	01008b04 	movi	r4,556
 1008024:	01008adc 	xori	r4,zero,555
 1008028:	01008b20 	cmpeqi	r4,zero,556
 100802c:	01008b2c 	andhi	r4,zero,556
 1008030:	d9002717 	ldw	r4,156(sp)
 1008034:	0089c3c4 	movi	r2,9999
 1008038:	20800015 	stw	r2,0(r4)
 100803c:	a0001026 	beq	r20,zero,1008080 <_dtoa_r+0x31c>
 1008040:	00c04074 	movhi	r3,257
 1008044:	18ca1604 	addi	r3,r3,10328
 1008048:	d9802917 	ldw	r6,164(sp)
 100804c:	303f7926 	beq	r6,zero,1007e34 <_dtoa_r+0xd0>
 1008050:	188000c7 	ldb	r2,3(r3)
 1008054:	190000c4 	addi	r4,r3,3
 1008058:	1000101e 	bne	r2,zero,100809c <_dtoa_r+0x338>
 100805c:	d8802917 	ldw	r2,164(sp)
 1008060:	11000015 	stw	r4,0(r2)
 1008064:	003f7306 	br	1007e34 <_dtoa_r+0xd0>
 1008068:	00a00034 	movhi	r2,32768
 100806c:	10bfffc4 	addi	r2,r2,-1
 1008070:	00c00044 	movi	r3,1
 1008074:	88aa703a 	and	r21,r17,r2
 1008078:	90c00015 	stw	r3,0(r18)
 100807c:	003f5806 	br	1007de0 <_dtoa_r+0x7c>
 1008080:	00800434 	movhi	r2,16
 1008084:	10bfffc4 	addi	r2,r2,-1
 1008088:	a884703a 	and	r2,r21,r2
 100808c:	103fec1e 	bne	r2,zero,1008040 <_dtoa_r+0x2dc>
 1008090:	00c04074 	movhi	r3,257
 1008094:	18ca1304 	addi	r3,r3,10316
 1008098:	003feb06 	br	1008048 <_dtoa_r+0x2e4>
 100809c:	d8802917 	ldw	r2,164(sp)
 10080a0:	19000204 	addi	r4,r3,8
 10080a4:	11000015 	stw	r4,0(r2)
 10080a8:	003f6206 	br	1007e34 <_dtoa_r+0xd0>
 10080ac:	ddc00117 	ldw	r23,4(sp)
 10080b0:	d8800217 	ldw	r2,8(sp)
 10080b4:	01000804 	movi	r4,32
 10080b8:	b8c10c84 	addi	r3,r23,1074
 10080bc:	18a3883a 	add	r17,r3,r2
 10080c0:	2441b80e 	bge	r4,r17,10087a4 <_dtoa_r+0xa40>
 10080c4:	00c01004 	movi	r3,64
 10080c8:	1c47c83a 	sub	r3,r3,r17
 10080cc:	88bff804 	addi	r2,r17,-32
 10080d0:	a8c6983a 	sll	r3,r21,r3
 10080d4:	a084d83a 	srl	r2,r20,r2
 10080d8:	1888b03a 	or	r4,r3,r2
 10080dc:	100d5c00 	call	100d5c0 <__floatunsidf>
 10080e0:	1011883a 	mov	r8,r2
 10080e4:	00bf8434 	movhi	r2,65040
 10080e8:	01000044 	movi	r4,1
 10080ec:	10d3883a 	add	r9,r2,r3
 10080f0:	8dbef344 	addi	r22,r17,-1075
 10080f4:	d9000815 	stw	r4,32(sp)
 10080f8:	003f6f06 	br	1007eb8 <_dtoa_r+0x154>
 10080fc:	d8001715 	stw	zero,92(sp)
 1008100:	04400044 	movi	r17,1
 1008104:	00bfffc4 	movi	r2,-1
 1008108:	00c00044 	movi	r3,1
 100810c:	d8800e15 	stw	r2,56(sp)
 1008110:	d8002615 	stw	zero,152(sp)
 1008114:	d8800f15 	stw	r2,60(sp)
 1008118:	d8c00b15 	stw	r3,44(sp)
 100811c:	1021883a 	mov	r16,r2
 1008120:	d8801617 	ldw	r2,88(sp)
 1008124:	10001115 	stw	zero,68(r2)
 1008128:	d8801617 	ldw	r2,88(sp)
 100812c:	11401117 	ldw	r5,68(r2)
 1008130:	1009883a 	mov	r4,r2
 1008134:	100ad6c0 	call	100ad6c <_Balloc>
 1008138:	d8c01617 	ldw	r3,88(sp)
 100813c:	d8800515 	stw	r2,20(sp)
 1008140:	18801015 	stw	r2,64(r3)
 1008144:	00800384 	movi	r2,14
 1008148:	14006836 	bltu	r2,r16,10082ec <_dtoa_r+0x588>
 100814c:	8805003a 	cmpeq	r2,r17,zero
 1008150:	1000661e 	bne	r2,zero,10082ec <_dtoa_r+0x588>
 1008154:	d9000d17 	ldw	r4,52(sp)
 1008158:	0102300e 	bge	zero,r4,1008a1c <_dtoa_r+0xcb8>
 100815c:	208003cc 	andi	r2,r4,15
 1008160:	100490fa 	slli	r2,r2,3
 1008164:	2025d13a 	srai	r18,r4,4
 1008168:	00c04074 	movhi	r3,257
 100816c:	18ca2804 	addi	r3,r3,10400
 1008170:	10c5883a 	add	r2,r2,r3
 1008174:	90c0040c 	andi	r3,r18,16
 1008178:	14000017 	ldw	r16,0(r2)
 100817c:	14400117 	ldw	r17,4(r2)
 1008180:	18036a1e 	bne	r3,zero,1008f2c <_dtoa_r+0x11c8>
 1008184:	05800084 	movi	r22,2
 1008188:	90001026 	beq	r18,zero,10081cc <_dtoa_r+0x468>
 100818c:	04c04074 	movhi	r19,257
 1008190:	9cca5a04 	addi	r19,r19,10600
 1008194:	9080004c 	andi	r2,r18,1
 1008198:	1005003a 	cmpeq	r2,r2,zero
 100819c:	1000081e 	bne	r2,zero,10081c0 <_dtoa_r+0x45c>
 10081a0:	99800017 	ldw	r6,0(r19)
 10081a4:	99c00117 	ldw	r7,4(r19)
 10081a8:	880b883a 	mov	r5,r17
 10081ac:	8009883a 	mov	r4,r16
 10081b0:	1003ebc0 	call	1003ebc <__muldf3>
 10081b4:	1021883a 	mov	r16,r2
 10081b8:	b5800044 	addi	r22,r22,1
 10081bc:	1823883a 	mov	r17,r3
 10081c0:	9025d07a 	srai	r18,r18,1
 10081c4:	9cc00204 	addi	r19,r19,8
 10081c8:	903ff21e 	bne	r18,zero,1008194 <_dtoa_r+0x430>
 10081cc:	a80b883a 	mov	r5,r21
 10081d0:	a009883a 	mov	r4,r20
 10081d4:	880f883a 	mov	r7,r17
 10081d8:	800d883a 	mov	r6,r16
 10081dc:	100d2580 	call	100d258 <__divdf3>
 10081e0:	1029883a 	mov	r20,r2
 10081e4:	182b883a 	mov	r21,r3
 10081e8:	d8c00c17 	ldw	r3,48(sp)
 10081ec:	1805003a 	cmpeq	r2,r3,zero
 10081f0:	1000081e 	bne	r2,zero,1008214 <_dtoa_r+0x4b0>
 10081f4:	0005883a 	mov	r2,zero
 10081f8:	00cffc34 	movhi	r3,16368
 10081fc:	180f883a 	mov	r7,r3
 1008200:	a009883a 	mov	r4,r20
 1008204:	a80b883a 	mov	r5,r21
 1008208:	100d883a 	mov	r6,r2
 100820c:	100d5380 	call	100d538 <__ltdf2>
 1008210:	1003fe16 	blt	r2,zero,100920c <_dtoa_r+0x14a8>
 1008214:	b009883a 	mov	r4,r22
 1008218:	10044180 	call	1004418 <__floatsidf>
 100821c:	180b883a 	mov	r5,r3
 1008220:	1009883a 	mov	r4,r2
 1008224:	a00d883a 	mov	r6,r20
 1008228:	a80f883a 	mov	r7,r21
 100822c:	1003ebc0 	call	1003ebc <__muldf3>
 1008230:	0011883a 	mov	r8,zero
 1008234:	02500734 	movhi	r9,16412
 1008238:	1009883a 	mov	r4,r2
 100823c:	180b883a 	mov	r5,r3
 1008240:	480f883a 	mov	r7,r9
 1008244:	400d883a 	mov	r6,r8
 1008248:	1003e480 	call	1003e48 <__adddf3>
 100824c:	d9000f17 	ldw	r4,60(sp)
 1008250:	102d883a 	mov	r22,r2
 1008254:	00bf3034 	movhi	r2,64704
 1008258:	18b9883a 	add	fp,r3,r2
 100825c:	e02f883a 	mov	r23,fp
 1008260:	20028f1e 	bne	r4,zero,1008ca0 <_dtoa_r+0xf3c>
 1008264:	0005883a 	mov	r2,zero
 1008268:	00d00534 	movhi	r3,16404
 100826c:	a009883a 	mov	r4,r20
 1008270:	a80b883a 	mov	r5,r21
 1008274:	180f883a 	mov	r7,r3
 1008278:	100d883a 	mov	r6,r2
 100827c:	1003dc80 	call	1003dc8 <__subdf3>
 1008280:	1009883a 	mov	r4,r2
 1008284:	e00f883a 	mov	r7,fp
 1008288:	180b883a 	mov	r5,r3
 100828c:	b00d883a 	mov	r6,r22
 1008290:	1025883a 	mov	r18,r2
 1008294:	1827883a 	mov	r19,r3
 1008298:	10043080 	call	1004308 <__gtdf2>
 100829c:	00834f16 	blt	zero,r2,1008fdc <_dtoa_r+0x1278>
 10082a0:	e0e0003c 	xorhi	r3,fp,32768
 10082a4:	9009883a 	mov	r4,r18
 10082a8:	980b883a 	mov	r5,r19
 10082ac:	180f883a 	mov	r7,r3
 10082b0:	b00d883a 	mov	r6,r22
 10082b4:	100d5380 	call	100d538 <__ltdf2>
 10082b8:	1000080e 	bge	r2,zero,10082dc <_dtoa_r+0x578>
 10082bc:	0027883a 	mov	r19,zero
 10082c0:	0025883a 	mov	r18,zero
 10082c4:	d8802617 	ldw	r2,152(sp)
 10082c8:	df000517 	ldw	fp,20(sp)
 10082cc:	d8000615 	stw	zero,24(sp)
 10082d0:	0084303a 	nor	r2,zero,r2
 10082d4:	d8800d15 	stw	r2,52(sp)
 10082d8:	00019b06 	br	1008948 <_dtoa_r+0xbe4>
 10082dc:	d9801217 	ldw	r6,72(sp)
 10082e0:	d8801317 	ldw	r2,76(sp)
 10082e4:	3029883a 	mov	r20,r6
 10082e8:	102b883a 	mov	r21,r2
 10082ec:	d8c00217 	ldw	r3,8(sp)
 10082f0:	18008516 	blt	r3,zero,1008508 <_dtoa_r+0x7a4>
 10082f4:	d9000d17 	ldw	r4,52(sp)
 10082f8:	00800384 	movi	r2,14
 10082fc:	11008216 	blt	r2,r4,1008508 <_dtoa_r+0x7a4>
 1008300:	200490fa 	slli	r2,r4,3
 1008304:	d9802617 	ldw	r6,152(sp)
 1008308:	00c04074 	movhi	r3,257
 100830c:	18ca2804 	addi	r3,r3,10400
 1008310:	10c5883a 	add	r2,r2,r3
 1008314:	14800017 	ldw	r18,0(r2)
 1008318:	14c00117 	ldw	r19,4(r2)
 100831c:	30031e16 	blt	r6,zero,1008f98 <_dtoa_r+0x1234>
 1008320:	d9000517 	ldw	r4,20(sp)
 1008324:	d8c00f17 	ldw	r3,60(sp)
 1008328:	a823883a 	mov	r17,r21
 100832c:	a021883a 	mov	r16,r20
 1008330:	192b883a 	add	r21,r3,r4
 1008334:	2039883a 	mov	fp,r4
 1008338:	00000f06 	br	1008378 <_dtoa_r+0x614>
 100833c:	0005883a 	mov	r2,zero
 1008340:	00d00934 	movhi	r3,16420
 1008344:	5009883a 	mov	r4,r10
 1008348:	580b883a 	mov	r5,r11
 100834c:	180f883a 	mov	r7,r3
 1008350:	100d883a 	mov	r6,r2
 1008354:	1003ebc0 	call	1003ebc <__muldf3>
 1008358:	180b883a 	mov	r5,r3
 100835c:	000d883a 	mov	r6,zero
 1008360:	000f883a 	mov	r7,zero
 1008364:	1009883a 	mov	r4,r2
 1008368:	1021883a 	mov	r16,r2
 100836c:	1823883a 	mov	r17,r3
 1008370:	100d4b00 	call	100d4b0 <__nedf2>
 1008374:	10004526 	beq	r2,zero,100848c <_dtoa_r+0x728>
 1008378:	900d883a 	mov	r6,r18
 100837c:	980f883a 	mov	r7,r19
 1008380:	8009883a 	mov	r4,r16
 1008384:	880b883a 	mov	r5,r17
 1008388:	100d2580 	call	100d258 <__divdf3>
 100838c:	180b883a 	mov	r5,r3
 1008390:	1009883a 	mov	r4,r2
 1008394:	10045100 	call	1004510 <__fixdfsi>
 1008398:	1009883a 	mov	r4,r2
 100839c:	1029883a 	mov	r20,r2
 10083a0:	10044180 	call	1004418 <__floatsidf>
 10083a4:	180f883a 	mov	r7,r3
 10083a8:	9009883a 	mov	r4,r18
 10083ac:	980b883a 	mov	r5,r19
 10083b0:	100d883a 	mov	r6,r2
 10083b4:	1003ebc0 	call	1003ebc <__muldf3>
 10083b8:	180f883a 	mov	r7,r3
 10083bc:	880b883a 	mov	r5,r17
 10083c0:	8009883a 	mov	r4,r16
 10083c4:	100d883a 	mov	r6,r2
 10083c8:	1003dc80 	call	1003dc8 <__subdf3>
 10083cc:	1015883a 	mov	r10,r2
 10083d0:	a0800c04 	addi	r2,r20,48
 10083d4:	e0800005 	stb	r2,0(fp)
 10083d8:	e7000044 	addi	fp,fp,1
 10083dc:	1817883a 	mov	r11,r3
 10083e0:	e57fd61e 	bne	fp,r21,100833c <_dtoa_r+0x5d8>
 10083e4:	500d883a 	mov	r6,r10
 10083e8:	180f883a 	mov	r7,r3
 10083ec:	5009883a 	mov	r4,r10
 10083f0:	180b883a 	mov	r5,r3
 10083f4:	1003e480 	call	1003e48 <__adddf3>
 10083f8:	100d883a 	mov	r6,r2
 10083fc:	9009883a 	mov	r4,r18
 1008400:	980b883a 	mov	r5,r19
 1008404:	180f883a 	mov	r7,r3
 1008408:	1021883a 	mov	r16,r2
 100840c:	1823883a 	mov	r17,r3
 1008410:	100d5380 	call	100d538 <__ltdf2>
 1008414:	10000816 	blt	r2,zero,1008438 <_dtoa_r+0x6d4>
 1008418:	980b883a 	mov	r5,r19
 100841c:	800d883a 	mov	r6,r16
 1008420:	880f883a 	mov	r7,r17
 1008424:	9009883a 	mov	r4,r18
 1008428:	10042800 	call	1004280 <__eqdf2>
 100842c:	1000171e 	bne	r2,zero,100848c <_dtoa_r+0x728>
 1008430:	a080004c 	andi	r2,r20,1
 1008434:	10001526 	beq	r2,zero,100848c <_dtoa_r+0x728>
 1008438:	d8800d17 	ldw	r2,52(sp)
 100843c:	d8800415 	stw	r2,16(sp)
 1008440:	e009883a 	mov	r4,fp
 1008444:	213fffc4 	addi	r4,r4,-1
 1008448:	20c00007 	ldb	r3,0(r4)
 100844c:	00800e44 	movi	r2,57
 1008450:	1880081e 	bne	r3,r2,1008474 <_dtoa_r+0x710>
 1008454:	d8800517 	ldw	r2,20(sp)
 1008458:	113ffa1e 	bne	r2,r4,1008444 <_dtoa_r+0x6e0>
 100845c:	d8c00417 	ldw	r3,16(sp)
 1008460:	d9800517 	ldw	r6,20(sp)
 1008464:	00800c04 	movi	r2,48
 1008468:	18c00044 	addi	r3,r3,1
 100846c:	d8c00415 	stw	r3,16(sp)
 1008470:	30800005 	stb	r2,0(r6)
 1008474:	20800003 	ldbu	r2,0(r4)
 1008478:	d8c00417 	ldw	r3,16(sp)
 100847c:	27000044 	addi	fp,r4,1
 1008480:	10800044 	addi	r2,r2,1
 1008484:	d8c00d15 	stw	r3,52(sp)
 1008488:	20800005 	stb	r2,0(r4)
 100848c:	d9001617 	ldw	r4,88(sp)
 1008490:	d9400717 	ldw	r5,28(sp)
 1008494:	100a7ec0 	call	100a7ec <_Bfree>
 1008498:	e0000005 	stb	zero,0(fp)
 100849c:	d9800d17 	ldw	r6,52(sp)
 10084a0:	d8c02717 	ldw	r3,156(sp)
 10084a4:	d9002917 	ldw	r4,164(sp)
 10084a8:	30800044 	addi	r2,r6,1
 10084ac:	18800015 	stw	r2,0(r3)
 10084b0:	20029c26 	beq	r4,zero,1008f24 <_dtoa_r+0x11c0>
 10084b4:	d8c00517 	ldw	r3,20(sp)
 10084b8:	27000015 	stw	fp,0(r4)
 10084bc:	003e5d06 	br	1007e34 <_dtoa_r+0xd0>
 10084c0:	d9800d17 	ldw	r6,52(sp)
 10084c4:	00c04074 	movhi	r3,257
 10084c8:	18ca2804 	addi	r3,r3,10400
 10084cc:	d9001217 	ldw	r4,72(sp)
 10084d0:	300490fa 	slli	r2,r6,3
 10084d4:	d9401317 	ldw	r5,76(sp)
 10084d8:	10c5883a 	add	r2,r2,r3
 10084dc:	12000017 	ldw	r8,0(r2)
 10084e0:	12400117 	ldw	r9,4(r2)
 10084e4:	400d883a 	mov	r6,r8
 10084e8:	480f883a 	mov	r7,r9
 10084ec:	100d5380 	call	100d538 <__ltdf2>
 10084f0:	1000030e 	bge	r2,zero,1008500 <_dtoa_r+0x79c>
 10084f4:	d8800d17 	ldw	r2,52(sp)
 10084f8:	10bfffc4 	addi	r2,r2,-1
 10084fc:	d8800d15 	stw	r2,52(sp)
 1008500:	d8000c15 	stw	zero,48(sp)
 1008504:	003ea806 	br	1007fa8 <_dtoa_r+0x244>
 1008508:	d9000b17 	ldw	r4,44(sp)
 100850c:	202cc03a 	cmpne	r22,r4,zero
 1008510:	b000c71e 	bne	r22,zero,1008830 <_dtoa_r+0xacc>
 1008514:	dc001117 	ldw	r16,68(sp)
 1008518:	dc801017 	ldw	r18,64(sp)
 100851c:	0027883a 	mov	r19,zero
 1008520:	04000b0e 	bge	zero,r16,1008550 <_dtoa_r+0x7ec>
 1008524:	d8c00a17 	ldw	r3,40(sp)
 1008528:	00c0090e 	bge	zero,r3,1008550 <_dtoa_r+0x7ec>
 100852c:	8005883a 	mov	r2,r16
 1008530:	1c011316 	blt	r3,r16,1008980 <_dtoa_r+0xc1c>
 1008534:	d9000a17 	ldw	r4,40(sp)
 1008538:	d9801117 	ldw	r6,68(sp)
 100853c:	80a1c83a 	sub	r16,r16,r2
 1008540:	2089c83a 	sub	r4,r4,r2
 1008544:	308dc83a 	sub	r6,r6,r2
 1008548:	d9000a15 	stw	r4,40(sp)
 100854c:	d9801115 	stw	r6,68(sp)
 1008550:	d8801017 	ldw	r2,64(sp)
 1008554:	0080150e 	bge	zero,r2,10085ac <_dtoa_r+0x848>
 1008558:	d8c00b17 	ldw	r3,44(sp)
 100855c:	1805003a 	cmpeq	r2,r3,zero
 1008560:	1001c91e 	bne	r2,zero,1008c88 <_dtoa_r+0xf24>
 1008564:	04800e0e 	bge	zero,r18,10085a0 <_dtoa_r+0x83c>
 1008568:	d9001617 	ldw	r4,88(sp)
 100856c:	980b883a 	mov	r5,r19
 1008570:	900d883a 	mov	r6,r18
 1008574:	100b6380 	call	100b638 <__pow5mult>
 1008578:	d9001617 	ldw	r4,88(sp)
 100857c:	d9800717 	ldw	r6,28(sp)
 1008580:	100b883a 	mov	r5,r2
 1008584:	1027883a 	mov	r19,r2
 1008588:	100b27c0 	call	100b27c <__multiply>
 100858c:	d9001617 	ldw	r4,88(sp)
 1008590:	d9400717 	ldw	r5,28(sp)
 1008594:	1023883a 	mov	r17,r2
 1008598:	100a7ec0 	call	100a7ec <_Bfree>
 100859c:	dc400715 	stw	r17,28(sp)
 10085a0:	d9001017 	ldw	r4,64(sp)
 10085a4:	248dc83a 	sub	r6,r4,r18
 10085a8:	30010e1e 	bne	r6,zero,10089e4 <_dtoa_r+0xc80>
 10085ac:	d9001617 	ldw	r4,88(sp)
 10085b0:	04400044 	movi	r17,1
 10085b4:	880b883a 	mov	r5,r17
 10085b8:	100b4d00 	call	100b4d0 <__i2b>
 10085bc:	d9800917 	ldw	r6,36(sp)
 10085c0:	1025883a 	mov	r18,r2
 10085c4:	0180040e 	bge	zero,r6,10085d8 <_dtoa_r+0x874>
 10085c8:	d9001617 	ldw	r4,88(sp)
 10085cc:	100b883a 	mov	r5,r2
 10085d0:	100b6380 	call	100b638 <__pow5mult>
 10085d4:	1025883a 	mov	r18,r2
 10085d8:	d8801717 	ldw	r2,92(sp)
 10085dc:	8880f30e 	bge	r17,r2,10089ac <_dtoa_r+0xc48>
 10085e0:	0023883a 	mov	r17,zero
 10085e4:	d9800917 	ldw	r6,36(sp)
 10085e8:	30019e1e 	bne	r6,zero,1008c64 <_dtoa_r+0xf00>
 10085ec:	00c00044 	movi	r3,1
 10085f0:	d9000a17 	ldw	r4,40(sp)
 10085f4:	20c5883a 	add	r2,r4,r3
 10085f8:	10c007cc 	andi	r3,r2,31
 10085fc:	1800841e 	bne	r3,zero,1008810 <_dtoa_r+0xaac>
 1008600:	00800704 	movi	r2,28
 1008604:	d9000a17 	ldw	r4,40(sp)
 1008608:	d9801117 	ldw	r6,68(sp)
 100860c:	80a1883a 	add	r16,r16,r2
 1008610:	2089883a 	add	r4,r4,r2
 1008614:	308d883a 	add	r6,r6,r2
 1008618:	d9000a15 	stw	r4,40(sp)
 100861c:	d9801115 	stw	r6,68(sp)
 1008620:	d8801117 	ldw	r2,68(sp)
 1008624:	0080050e 	bge	zero,r2,100863c <_dtoa_r+0x8d8>
 1008628:	d9400717 	ldw	r5,28(sp)
 100862c:	d9001617 	ldw	r4,88(sp)
 1008630:	100d883a 	mov	r6,r2
 1008634:	100b1300 	call	100b130 <__lshift>
 1008638:	d8800715 	stw	r2,28(sp)
 100863c:	d8c00a17 	ldw	r3,40(sp)
 1008640:	00c0050e 	bge	zero,r3,1008658 <_dtoa_r+0x8f4>
 1008644:	d9001617 	ldw	r4,88(sp)
 1008648:	900b883a 	mov	r5,r18
 100864c:	180d883a 	mov	r6,r3
 1008650:	100b1300 	call	100b130 <__lshift>
 1008654:	1025883a 	mov	r18,r2
 1008658:	d9000c17 	ldw	r4,48(sp)
 100865c:	2005003a 	cmpeq	r2,r4,zero
 1008660:	10016f26 	beq	r2,zero,1008c20 <_dtoa_r+0xebc>
 1008664:	d9000f17 	ldw	r4,60(sp)
 1008668:	0102170e 	bge	zero,r4,1008ec8 <_dtoa_r+0x1164>
 100866c:	d9800b17 	ldw	r6,44(sp)
 1008670:	3005003a 	cmpeq	r2,r6,zero
 1008674:	1000881e 	bne	r2,zero,1008898 <_dtoa_r+0xb34>
 1008678:	0400050e 	bge	zero,r16,1008690 <_dtoa_r+0x92c>
 100867c:	d9001617 	ldw	r4,88(sp)
 1008680:	980b883a 	mov	r5,r19
 1008684:	800d883a 	mov	r6,r16
 1008688:	100b1300 	call	100b130 <__lshift>
 100868c:	1027883a 	mov	r19,r2
 1008690:	8804c03a 	cmpne	r2,r17,zero
 1008694:	1002541e 	bne	r2,zero,1008fe8 <_dtoa_r+0x1284>
 1008698:	980b883a 	mov	r5,r19
 100869c:	dd800517 	ldw	r22,20(sp)
 10086a0:	dcc00615 	stw	r19,24(sp)
 10086a4:	a700004c 	andi	fp,r20,1
 10086a8:	2827883a 	mov	r19,r5
 10086ac:	d9000717 	ldw	r4,28(sp)
 10086b0:	900b883a 	mov	r5,r18
 10086b4:	1007b200 	call	1007b20 <quorem>
 10086b8:	d9000717 	ldw	r4,28(sp)
 10086bc:	d9400617 	ldw	r5,24(sp)
 10086c0:	1023883a 	mov	r17,r2
 10086c4:	8dc00c04 	addi	r23,r17,48
 10086c8:	100a9480 	call	100a948 <__mcmp>
 10086cc:	d9001617 	ldw	r4,88(sp)
 10086d0:	900b883a 	mov	r5,r18
 10086d4:	980d883a 	mov	r6,r19
 10086d8:	1029883a 	mov	r20,r2
 10086dc:	100afa40 	call	100afa4 <__mdiff>
 10086e0:	102b883a 	mov	r21,r2
 10086e4:	10800317 	ldw	r2,12(r2)
 10086e8:	1001281e 	bne	r2,zero,1008b8c <_dtoa_r+0xe28>
 10086ec:	d9000717 	ldw	r4,28(sp)
 10086f0:	a80b883a 	mov	r5,r21
 10086f4:	100a9480 	call	100a948 <__mcmp>
 10086f8:	d9001617 	ldw	r4,88(sp)
 10086fc:	1021883a 	mov	r16,r2
 1008700:	a80b883a 	mov	r5,r21
 1008704:	100a7ec0 	call	100a7ec <_Bfree>
 1008708:	8000041e 	bne	r16,zero,100871c <_dtoa_r+0x9b8>
 100870c:	d8801717 	ldw	r2,92(sp)
 1008710:	1000021e 	bne	r2,zero,100871c <_dtoa_r+0x9b8>
 1008714:	e004c03a 	cmpne	r2,fp,zero
 1008718:	10011726 	beq	r2,zero,1008b78 <_dtoa_r+0xe14>
 100871c:	a0010616 	blt	r20,zero,1008b38 <_dtoa_r+0xdd4>
 1008720:	a000041e 	bne	r20,zero,1008734 <_dtoa_r+0x9d0>
 1008724:	d8c01717 	ldw	r3,92(sp)
 1008728:	1800021e 	bne	r3,zero,1008734 <_dtoa_r+0x9d0>
 100872c:	e004c03a 	cmpne	r2,fp,zero
 1008730:	10010126 	beq	r2,zero,1008b38 <_dtoa_r+0xdd4>
 1008734:	04023d16 	blt	zero,r16,100902c <_dtoa_r+0x12c8>
 1008738:	b5c00005 	stb	r23,0(r22)
 100873c:	d9800517 	ldw	r6,20(sp)
 1008740:	d9000f17 	ldw	r4,60(sp)
 1008744:	b5800044 	addi	r22,r22,1
 1008748:	3105883a 	add	r2,r6,r4
 100874c:	b0806526 	beq	r22,r2,10088e4 <_dtoa_r+0xb80>
 1008750:	d9400717 	ldw	r5,28(sp)
 1008754:	d9001617 	ldw	r4,88(sp)
 1008758:	01800284 	movi	r6,10
 100875c:	000f883a 	mov	r7,zero
 1008760:	100b50c0 	call	100b50c <__multadd>
 1008764:	d8800715 	stw	r2,28(sp)
 1008768:	d8800617 	ldw	r2,24(sp)
 100876c:	14c10c26 	beq	r2,r19,1008ba0 <_dtoa_r+0xe3c>
 1008770:	d9400617 	ldw	r5,24(sp)
 1008774:	d9001617 	ldw	r4,88(sp)
 1008778:	01800284 	movi	r6,10
 100877c:	000f883a 	mov	r7,zero
 1008780:	100b50c0 	call	100b50c <__multadd>
 1008784:	d9001617 	ldw	r4,88(sp)
 1008788:	980b883a 	mov	r5,r19
 100878c:	01800284 	movi	r6,10
 1008790:	000f883a 	mov	r7,zero
 1008794:	d8800615 	stw	r2,24(sp)
 1008798:	100b50c0 	call	100b50c <__multadd>
 100879c:	1027883a 	mov	r19,r2
 10087a0:	003fc206 	br	10086ac <_dtoa_r+0x948>
 10087a4:	2445c83a 	sub	r2,r4,r17
 10087a8:	a088983a 	sll	r4,r20,r2
 10087ac:	003e4b06 	br	10080dc <_dtoa_r+0x378>
 10087b0:	01bfffc4 	movi	r6,-1
 10087b4:	00800044 	movi	r2,1
 10087b8:	d9800e15 	stw	r6,56(sp)
 10087bc:	d9800f15 	stw	r6,60(sp)
 10087c0:	d8800b15 	stw	r2,44(sp)
 10087c4:	d8c01617 	ldw	r3,88(sp)
 10087c8:	008005c4 	movi	r2,23
 10087cc:	18001115 	stw	zero,68(r3)
 10087d0:	1580082e 	bgeu	r2,r22,10087f4 <_dtoa_r+0xa90>
 10087d4:	00c00104 	movi	r3,4
 10087d8:	0009883a 	mov	r4,zero
 10087dc:	18c7883a 	add	r3,r3,r3
 10087e0:	18800504 	addi	r2,r3,20
 10087e4:	21000044 	addi	r4,r4,1
 10087e8:	b0bffc2e 	bgeu	r22,r2,10087dc <_dtoa_r+0xa78>
 10087ec:	d9801617 	ldw	r6,88(sp)
 10087f0:	31001115 	stw	r4,68(r6)
 10087f4:	dc000f17 	ldw	r16,60(sp)
 10087f8:	003e4b06 	br	1008128 <_dtoa_r+0x3c4>
 10087fc:	d9801717 	ldw	r6,92(sp)
 1008800:	0023883a 	mov	r17,zero
 1008804:	31bfff04 	addi	r6,r6,-4
 1008808:	d9801715 	stw	r6,92(sp)
 100880c:	003df806 	br	1007ff0 <_dtoa_r+0x28c>
 1008810:	00800804 	movi	r2,32
 1008814:	10c9c83a 	sub	r4,r2,r3
 1008818:	00c00104 	movi	r3,4
 100881c:	19005a16 	blt	r3,r4,1008988 <_dtoa_r+0xc24>
 1008820:	008000c4 	movi	r2,3
 1008824:	113f7e16 	blt	r2,r4,1008620 <_dtoa_r+0x8bc>
 1008828:	20800704 	addi	r2,r4,28
 100882c:	003f7506 	br	1008604 <_dtoa_r+0x8a0>
 1008830:	d9801717 	ldw	r6,92(sp)
 1008834:	00800044 	movi	r2,1
 1008838:	1180a10e 	bge	r2,r6,1008ac0 <_dtoa_r+0xd5c>
 100883c:	d9800f17 	ldw	r6,60(sp)
 1008840:	d8c01017 	ldw	r3,64(sp)
 1008844:	30bfffc4 	addi	r2,r6,-1
 1008848:	1881c616 	blt	r3,r2,1008f64 <_dtoa_r+0x1200>
 100884c:	18a5c83a 	sub	r18,r3,r2
 1008850:	d8800f17 	ldw	r2,60(sp)
 1008854:	10026216 	blt	r2,zero,10091e0 <_dtoa_r+0x147c>
 1008858:	dc001117 	ldw	r16,68(sp)
 100885c:	1007883a 	mov	r3,r2
 1008860:	d9800a17 	ldw	r6,40(sp)
 1008864:	d8801117 	ldw	r2,68(sp)
 1008868:	d9001617 	ldw	r4,88(sp)
 100886c:	30cd883a 	add	r6,r6,r3
 1008870:	10c5883a 	add	r2,r2,r3
 1008874:	01400044 	movi	r5,1
 1008878:	d9800a15 	stw	r6,40(sp)
 100887c:	d8801115 	stw	r2,68(sp)
 1008880:	100b4d00 	call	100b4d0 <__i2b>
 1008884:	1027883a 	mov	r19,r2
 1008888:	003f2506 	br	1008520 <_dtoa_r+0x7bc>
 100888c:	00c04074 	movhi	r3,257
 1008890:	18ca0a04 	addi	r3,r3,10280
 1008894:	003d6706 	br	1007e34 <_dtoa_r+0xd0>
 1008898:	dd800517 	ldw	r22,20(sp)
 100889c:	04000044 	movi	r16,1
 10088a0:	00000706 	br	10088c0 <_dtoa_r+0xb5c>
 10088a4:	d9400717 	ldw	r5,28(sp)
 10088a8:	d9001617 	ldw	r4,88(sp)
 10088ac:	01800284 	movi	r6,10
 10088b0:	000f883a 	mov	r7,zero
 10088b4:	100b50c0 	call	100b50c <__multadd>
 10088b8:	d8800715 	stw	r2,28(sp)
 10088bc:	84000044 	addi	r16,r16,1
 10088c0:	d9000717 	ldw	r4,28(sp)
 10088c4:	900b883a 	mov	r5,r18
 10088c8:	1007b200 	call	1007b20 <quorem>
 10088cc:	15c00c04 	addi	r23,r2,48
 10088d0:	b5c00005 	stb	r23,0(r22)
 10088d4:	d8c00f17 	ldw	r3,60(sp)
 10088d8:	b5800044 	addi	r22,r22,1
 10088dc:	80fff116 	blt	r16,r3,10088a4 <_dtoa_r+0xb40>
 10088e0:	d8000615 	stw	zero,24(sp)
 10088e4:	d9400717 	ldw	r5,28(sp)
 10088e8:	d9001617 	ldw	r4,88(sp)
 10088ec:	01800044 	movi	r6,1
 10088f0:	100b1300 	call	100b130 <__lshift>
 10088f4:	1009883a 	mov	r4,r2
 10088f8:	900b883a 	mov	r5,r18
 10088fc:	d8800715 	stw	r2,28(sp)
 1008900:	100a9480 	call	100a948 <__mcmp>
 1008904:	00803c0e 	bge	zero,r2,10089f8 <_dtoa_r+0xc94>
 1008908:	b009883a 	mov	r4,r22
 100890c:	213fffc4 	addi	r4,r4,-1
 1008910:	21400003 	ldbu	r5,0(r4)
 1008914:	00800e44 	movi	r2,57
 1008918:	28c03fcc 	andi	r3,r5,255
 100891c:	18c0201c 	xori	r3,r3,128
 1008920:	18ffe004 	addi	r3,r3,-128
 1008924:	1881981e 	bne	r3,r2,1008f88 <_dtoa_r+0x1224>
 1008928:	d9800517 	ldw	r6,20(sp)
 100892c:	21bff71e 	bne	r4,r6,100890c <_dtoa_r+0xba8>
 1008930:	d8800d17 	ldw	r2,52(sp)
 1008934:	37000044 	addi	fp,r6,1
 1008938:	10800044 	addi	r2,r2,1
 100893c:	d8800d15 	stw	r2,52(sp)
 1008940:	00800c44 	movi	r2,49
 1008944:	30800005 	stb	r2,0(r6)
 1008948:	d9001617 	ldw	r4,88(sp)
 100894c:	900b883a 	mov	r5,r18
 1008950:	100a7ec0 	call	100a7ec <_Bfree>
 1008954:	983ecd26 	beq	r19,zero,100848c <_dtoa_r+0x728>
 1008958:	d8c00617 	ldw	r3,24(sp)
 100895c:	18000426 	beq	r3,zero,1008970 <_dtoa_r+0xc0c>
 1008960:	1cc00326 	beq	r3,r19,1008970 <_dtoa_r+0xc0c>
 1008964:	d9001617 	ldw	r4,88(sp)
 1008968:	180b883a 	mov	r5,r3
 100896c:	100a7ec0 	call	100a7ec <_Bfree>
 1008970:	d9001617 	ldw	r4,88(sp)
 1008974:	980b883a 	mov	r5,r19
 1008978:	100a7ec0 	call	100a7ec <_Bfree>
 100897c:	003ec306 	br	100848c <_dtoa_r+0x728>
 1008980:	1805883a 	mov	r2,r3
 1008984:	003eeb06 	br	1008534 <_dtoa_r+0x7d0>
 1008988:	d9800a17 	ldw	r6,40(sp)
 100898c:	d8c01117 	ldw	r3,68(sp)
 1008990:	20bfff04 	addi	r2,r4,-4
 1008994:	308d883a 	add	r6,r6,r2
 1008998:	1887883a 	add	r3,r3,r2
 100899c:	80a1883a 	add	r16,r16,r2
 10089a0:	d9800a15 	stw	r6,40(sp)
 10089a4:	d8c01115 	stw	r3,68(sp)
 10089a8:	003f1d06 	br	1008620 <_dtoa_r+0x8bc>
 10089ac:	a03f0c1e 	bne	r20,zero,10085e0 <_dtoa_r+0x87c>
 10089b0:	00800434 	movhi	r2,16
 10089b4:	10bfffc4 	addi	r2,r2,-1
 10089b8:	a884703a 	and	r2,r21,r2
 10089bc:	103f081e 	bne	r2,zero,10085e0 <_dtoa_r+0x87c>
 10089c0:	a89ffc2c 	andhi	r2,r21,32752
 10089c4:	103f0626 	beq	r2,zero,10085e0 <_dtoa_r+0x87c>
 10089c8:	d8c01117 	ldw	r3,68(sp)
 10089cc:	d9000a17 	ldw	r4,40(sp)
 10089d0:	18c00044 	addi	r3,r3,1
 10089d4:	21000044 	addi	r4,r4,1
 10089d8:	d8c01115 	stw	r3,68(sp)
 10089dc:	d9000a15 	stw	r4,40(sp)
 10089e0:	003f0006 	br	10085e4 <_dtoa_r+0x880>
 10089e4:	d9400717 	ldw	r5,28(sp)
 10089e8:	d9001617 	ldw	r4,88(sp)
 10089ec:	100b6380 	call	100b638 <__pow5mult>
 10089f0:	d8800715 	stw	r2,28(sp)
 10089f4:	003eed06 	br	10085ac <_dtoa_r+0x848>
 10089f8:	1000021e 	bne	r2,zero,1008a04 <_dtoa_r+0xca0>
 10089fc:	b880004c 	andi	r2,r23,1
 1008a00:	103fc11e 	bne	r2,zero,1008908 <_dtoa_r+0xba4>
 1008a04:	b5bfffc4 	addi	r22,r22,-1
 1008a08:	b0c00007 	ldb	r3,0(r22)
 1008a0c:	00800c04 	movi	r2,48
 1008a10:	18bffc26 	beq	r3,r2,1008a04 <_dtoa_r+0xca0>
 1008a14:	b7000044 	addi	fp,r22,1
 1008a18:	003fcb06 	br	1008948 <_dtoa_r+0xbe4>
 1008a1c:	d9800d17 	ldw	r6,52(sp)
 1008a20:	018fc83a 	sub	r7,zero,r6
 1008a24:	3801f726 	beq	r7,zero,1009204 <_dtoa_r+0x14a0>
 1008a28:	398003cc 	andi	r6,r7,15
 1008a2c:	300c90fa 	slli	r6,r6,3
 1008a30:	01404074 	movhi	r5,257
 1008a34:	294a2804 	addi	r5,r5,10400
 1008a38:	d9001217 	ldw	r4,72(sp)
 1008a3c:	314d883a 	add	r6,r6,r5
 1008a40:	30c00117 	ldw	r3,4(r6)
 1008a44:	30800017 	ldw	r2,0(r6)
 1008a48:	d9401317 	ldw	r5,76(sp)
 1008a4c:	3821d13a 	srai	r16,r7,4
 1008a50:	100d883a 	mov	r6,r2
 1008a54:	180f883a 	mov	r7,r3
 1008a58:	1003ebc0 	call	1003ebc <__muldf3>
 1008a5c:	1011883a 	mov	r8,r2
 1008a60:	1813883a 	mov	r9,r3
 1008a64:	1029883a 	mov	r20,r2
 1008a68:	182b883a 	mov	r21,r3
 1008a6c:	8001e526 	beq	r16,zero,1009204 <_dtoa_r+0x14a0>
 1008a70:	05800084 	movi	r22,2
 1008a74:	04404074 	movhi	r17,257
 1008a78:	8c4a5a04 	addi	r17,r17,10600
 1008a7c:	8080004c 	andi	r2,r16,1
 1008a80:	1005003a 	cmpeq	r2,r2,zero
 1008a84:	1000081e 	bne	r2,zero,1008aa8 <_dtoa_r+0xd44>
 1008a88:	89800017 	ldw	r6,0(r17)
 1008a8c:	89c00117 	ldw	r7,4(r17)
 1008a90:	480b883a 	mov	r5,r9
 1008a94:	4009883a 	mov	r4,r8
 1008a98:	1003ebc0 	call	1003ebc <__muldf3>
 1008a9c:	1011883a 	mov	r8,r2
 1008aa0:	b5800044 	addi	r22,r22,1
 1008aa4:	1813883a 	mov	r9,r3
 1008aa8:	8021d07a 	srai	r16,r16,1
 1008aac:	8c400204 	addi	r17,r17,8
 1008ab0:	803ff21e 	bne	r16,zero,1008a7c <_dtoa_r+0xd18>
 1008ab4:	4029883a 	mov	r20,r8
 1008ab8:	482b883a 	mov	r21,r9
 1008abc:	003dca06 	br	10081e8 <_dtoa_r+0x484>
 1008ac0:	d9000817 	ldw	r4,32(sp)
 1008ac4:	2005003a 	cmpeq	r2,r4,zero
 1008ac8:	1001f61e 	bne	r2,zero,10092a4 <_dtoa_r+0x1540>
 1008acc:	dc001117 	ldw	r16,68(sp)
 1008ad0:	dc801017 	ldw	r18,64(sp)
 1008ad4:	18c10cc4 	addi	r3,r3,1075
 1008ad8:	003f6106 	br	1008860 <_dtoa_r+0xafc>
 1008adc:	d8000b15 	stw	zero,44(sp)
 1008ae0:	d9802617 	ldw	r6,152(sp)
 1008ae4:	d8c00d17 	ldw	r3,52(sp)
 1008ae8:	30800044 	addi	r2,r6,1
 1008aec:	18ad883a 	add	r22,r3,r2
 1008af0:	b13fffc4 	addi	r4,r22,-1
 1008af4:	d9000e15 	stw	r4,56(sp)
 1008af8:	0581f60e 	bge	zero,r22,10092d4 <_dtoa_r+0x1570>
 1008afc:	dd800f15 	stw	r22,60(sp)
 1008b00:	003f3006 	br	10087c4 <_dtoa_r+0xa60>
 1008b04:	d8000b15 	stw	zero,44(sp)
 1008b08:	d9002617 	ldw	r4,152(sp)
 1008b0c:	0101eb0e 	bge	zero,r4,10092bc <_dtoa_r+0x1558>
 1008b10:	202d883a 	mov	r22,r4
 1008b14:	d9000e15 	stw	r4,56(sp)
 1008b18:	d9000f15 	stw	r4,60(sp)
 1008b1c:	003f2906 	br	10087c4 <_dtoa_r+0xa60>
 1008b20:	01800044 	movi	r6,1
 1008b24:	d9800b15 	stw	r6,44(sp)
 1008b28:	003ff706 	br	1008b08 <_dtoa_r+0xda4>
 1008b2c:	01000044 	movi	r4,1
 1008b30:	d9000b15 	stw	r4,44(sp)
 1008b34:	003fea06 	br	1008ae0 <_dtoa_r+0xd7c>
 1008b38:	04000c0e 	bge	zero,r16,1008b6c <_dtoa_r+0xe08>
 1008b3c:	d9400717 	ldw	r5,28(sp)
 1008b40:	d9001617 	ldw	r4,88(sp)
 1008b44:	01800044 	movi	r6,1
 1008b48:	100b1300 	call	100b130 <__lshift>
 1008b4c:	1009883a 	mov	r4,r2
 1008b50:	900b883a 	mov	r5,r18
 1008b54:	d8800715 	stw	r2,28(sp)
 1008b58:	100a9480 	call	100a948 <__mcmp>
 1008b5c:	0081e00e 	bge	zero,r2,10092e0 <_dtoa_r+0x157c>
 1008b60:	bdc00044 	addi	r23,r23,1
 1008b64:	00800e84 	movi	r2,58
 1008b68:	b881a226 	beq	r23,r2,10091f4 <_dtoa_r+0x1490>
 1008b6c:	b7000044 	addi	fp,r22,1
 1008b70:	b5c00005 	stb	r23,0(r22)
 1008b74:	003f7406 	br	1008948 <_dtoa_r+0xbe4>
 1008b78:	00800e44 	movi	r2,57
 1008b7c:	b8819d26 	beq	r23,r2,10091f4 <_dtoa_r+0x1490>
 1008b80:	053ffa0e 	bge	zero,r20,1008b6c <_dtoa_r+0xe08>
 1008b84:	8dc00c44 	addi	r23,r17,49
 1008b88:	003ff806 	br	1008b6c <_dtoa_r+0xe08>
 1008b8c:	d9001617 	ldw	r4,88(sp)
 1008b90:	a80b883a 	mov	r5,r21
 1008b94:	04000044 	movi	r16,1
 1008b98:	100a7ec0 	call	100a7ec <_Bfree>
 1008b9c:	003edf06 	br	100871c <_dtoa_r+0x9b8>
 1008ba0:	d9001617 	ldw	r4,88(sp)
 1008ba4:	980b883a 	mov	r5,r19
 1008ba8:	01800284 	movi	r6,10
 1008bac:	000f883a 	mov	r7,zero
 1008bb0:	100b50c0 	call	100b50c <__multadd>
 1008bb4:	1027883a 	mov	r19,r2
 1008bb8:	d8800615 	stw	r2,24(sp)
 1008bbc:	003ebb06 	br	10086ac <_dtoa_r+0x948>
 1008bc0:	d9801117 	ldw	r6,68(sp)
 1008bc4:	d8800d17 	ldw	r2,52(sp)
 1008bc8:	d8000915 	stw	zero,36(sp)
 1008bcc:	308dc83a 	sub	r6,r6,r2
 1008bd0:	0087c83a 	sub	r3,zero,r2
 1008bd4:	d9801115 	stw	r6,68(sp)
 1008bd8:	d8c01015 	stw	r3,64(sp)
 1008bdc:	003cfe06 	br	1007fd8 <_dtoa_r+0x274>
 1008be0:	018dc83a 	sub	r6,zero,r6
 1008be4:	d9801115 	stw	r6,68(sp)
 1008be8:	d8000a15 	stw	zero,40(sp)
 1008bec:	003cf306 	br	1007fbc <_dtoa_r+0x258>
 1008bf0:	d9000d17 	ldw	r4,52(sp)
 1008bf4:	10044180 	call	1004418 <__floatsidf>
 1008bf8:	880b883a 	mov	r5,r17
 1008bfc:	8009883a 	mov	r4,r16
 1008c00:	180f883a 	mov	r7,r3
 1008c04:	100d883a 	mov	r6,r2
 1008c08:	100d4b00 	call	100d4b0 <__nedf2>
 1008c0c:	103ce126 	beq	r2,zero,1007f94 <_dtoa_r+0x230>
 1008c10:	d9800d17 	ldw	r6,52(sp)
 1008c14:	31bfffc4 	addi	r6,r6,-1
 1008c18:	d9800d15 	stw	r6,52(sp)
 1008c1c:	003cdd06 	br	1007f94 <_dtoa_r+0x230>
 1008c20:	d9000717 	ldw	r4,28(sp)
 1008c24:	900b883a 	mov	r5,r18
 1008c28:	100a9480 	call	100a948 <__mcmp>
 1008c2c:	103e8d0e 	bge	r2,zero,1008664 <_dtoa_r+0x900>
 1008c30:	d9400717 	ldw	r5,28(sp)
 1008c34:	d9001617 	ldw	r4,88(sp)
 1008c38:	01800284 	movi	r6,10
 1008c3c:	000f883a 	mov	r7,zero
 1008c40:	100b50c0 	call	100b50c <__multadd>
 1008c44:	d9800d17 	ldw	r6,52(sp)
 1008c48:	d8800715 	stw	r2,28(sp)
 1008c4c:	31bfffc4 	addi	r6,r6,-1
 1008c50:	d9800d15 	stw	r6,52(sp)
 1008c54:	b001a71e 	bne	r22,zero,10092f4 <_dtoa_r+0x1590>
 1008c58:	d8800e17 	ldw	r2,56(sp)
 1008c5c:	d8800f15 	stw	r2,60(sp)
 1008c60:	003e8006 	br	1008664 <_dtoa_r+0x900>
 1008c64:	90800417 	ldw	r2,16(r18)
 1008c68:	1085883a 	add	r2,r2,r2
 1008c6c:	1085883a 	add	r2,r2,r2
 1008c70:	1485883a 	add	r2,r2,r18
 1008c74:	11000417 	ldw	r4,16(r2)
 1008c78:	100a8140 	call	100a814 <__hi0bits>
 1008c7c:	00c00804 	movi	r3,32
 1008c80:	1887c83a 	sub	r3,r3,r2
 1008c84:	003e5a06 	br	10085f0 <_dtoa_r+0x88c>
 1008c88:	d9400717 	ldw	r5,28(sp)
 1008c8c:	d9801017 	ldw	r6,64(sp)
 1008c90:	d9001617 	ldw	r4,88(sp)
 1008c94:	100b6380 	call	100b638 <__pow5mult>
 1008c98:	d8800715 	stw	r2,28(sp)
 1008c9c:	003e4306 	br	10085ac <_dtoa_r+0x848>
 1008ca0:	d9800f17 	ldw	r6,60(sp)
 1008ca4:	d8800d17 	ldw	r2,52(sp)
 1008ca8:	d9800315 	stw	r6,12(sp)
 1008cac:	d8800415 	stw	r2,16(sp)
 1008cb0:	d8c00b17 	ldw	r3,44(sp)
 1008cb4:	1805003a 	cmpeq	r2,r3,zero
 1008cb8:	1000e21e 	bne	r2,zero,1009044 <_dtoa_r+0x12e0>
 1008cbc:	d9000317 	ldw	r4,12(sp)
 1008cc0:	0005883a 	mov	r2,zero
 1008cc4:	00cff834 	movhi	r3,16352
 1008cc8:	200c90fa 	slli	r6,r4,3
 1008ccc:	01004074 	movhi	r4,257
 1008cd0:	210a2804 	addi	r4,r4,10400
 1008cd4:	180b883a 	mov	r5,r3
 1008cd8:	310d883a 	add	r6,r6,r4
 1008cdc:	327fff17 	ldw	r9,-4(r6)
 1008ce0:	323ffe17 	ldw	r8,-8(r6)
 1008ce4:	1009883a 	mov	r4,r2
 1008ce8:	480f883a 	mov	r7,r9
 1008cec:	400d883a 	mov	r6,r8
 1008cf0:	100d2580 	call	100d258 <__divdf3>
 1008cf4:	180b883a 	mov	r5,r3
 1008cf8:	b00d883a 	mov	r6,r22
 1008cfc:	b80f883a 	mov	r7,r23
 1008d00:	1009883a 	mov	r4,r2
 1008d04:	1003dc80 	call	1003dc8 <__subdf3>
 1008d08:	a80b883a 	mov	r5,r21
 1008d0c:	a009883a 	mov	r4,r20
 1008d10:	d8c01915 	stw	r3,100(sp)
 1008d14:	d8801815 	stw	r2,96(sp)
 1008d18:	10045100 	call	1004510 <__fixdfsi>
 1008d1c:	1009883a 	mov	r4,r2
 1008d20:	1027883a 	mov	r19,r2
 1008d24:	10044180 	call	1004418 <__floatsidf>
 1008d28:	a80b883a 	mov	r5,r21
 1008d2c:	a009883a 	mov	r4,r20
 1008d30:	180f883a 	mov	r7,r3
 1008d34:	100d883a 	mov	r6,r2
 1008d38:	1003dc80 	call	1003dc8 <__subdf3>
 1008d3c:	d9801817 	ldw	r6,96(sp)
 1008d40:	1823883a 	mov	r17,r3
 1008d44:	d8801415 	stw	r2,80(sp)
 1008d48:	302d883a 	mov	r22,r6
 1008d4c:	d9800517 	ldw	r6,20(sp)
 1008d50:	9cc00c04 	addi	r19,r19,48
 1008d54:	dc401515 	stw	r17,84(sp)
 1008d58:	d8c01917 	ldw	r3,100(sp)
 1008d5c:	34c00005 	stb	r19,0(r6)
 1008d60:	d8800517 	ldw	r2,20(sp)
 1008d64:	d9401917 	ldw	r5,100(sp)
 1008d68:	d9801417 	ldw	r6,80(sp)
 1008d6c:	b009883a 	mov	r4,r22
 1008d70:	880f883a 	mov	r7,r17
 1008d74:	182f883a 	mov	r23,r3
 1008d78:	17000044 	addi	fp,r2,1
 1008d7c:	10043080 	call	1004308 <__gtdf2>
 1008d80:	00804e16 	blt	zero,r2,1008ebc <_dtoa_r+0x1158>
 1008d84:	d9801417 	ldw	r6,80(sp)
 1008d88:	0005883a 	mov	r2,zero
 1008d8c:	00cffc34 	movhi	r3,16368
 1008d90:	180b883a 	mov	r5,r3
 1008d94:	880f883a 	mov	r7,r17
 1008d98:	1009883a 	mov	r4,r2
 1008d9c:	1003dc80 	call	1003dc8 <__subdf3>
 1008da0:	d9401917 	ldw	r5,100(sp)
 1008da4:	180f883a 	mov	r7,r3
 1008da8:	b009883a 	mov	r4,r22
 1008dac:	100d883a 	mov	r6,r2
 1008db0:	10043080 	call	1004308 <__gtdf2>
 1008db4:	00bda216 	blt	zero,r2,1008440 <_dtoa_r+0x6dc>
 1008db8:	d8c00317 	ldw	r3,12(sp)
 1008dbc:	00800044 	movi	r2,1
 1008dc0:	10c01216 	blt	r2,r3,1008e0c <_dtoa_r+0x10a8>
 1008dc4:	003d4506 	br	10082dc <_dtoa_r+0x578>
 1008dc8:	d9801417 	ldw	r6,80(sp)
 1008dcc:	0005883a 	mov	r2,zero
 1008dd0:	00cffc34 	movhi	r3,16368
 1008dd4:	180b883a 	mov	r5,r3
 1008dd8:	880f883a 	mov	r7,r17
 1008ddc:	1009883a 	mov	r4,r2
 1008de0:	1003dc80 	call	1003dc8 <__subdf3>
 1008de4:	d9c01b17 	ldw	r7,108(sp)
 1008de8:	180b883a 	mov	r5,r3
 1008dec:	1009883a 	mov	r4,r2
 1008df0:	b00d883a 	mov	r6,r22
 1008df4:	100d5380 	call	100d538 <__ltdf2>
 1008df8:	103d9116 	blt	r2,zero,1008440 <_dtoa_r+0x6dc>
 1008dfc:	d9800517 	ldw	r6,20(sp)
 1008e00:	d9000317 	ldw	r4,12(sp)
 1008e04:	3105883a 	add	r2,r6,r4
 1008e08:	e0bd3426 	beq	fp,r2,10082dc <_dtoa_r+0x578>
 1008e0c:	04500934 	movhi	r17,16420
 1008e10:	0021883a 	mov	r16,zero
 1008e14:	b80b883a 	mov	r5,r23
 1008e18:	b009883a 	mov	r4,r22
 1008e1c:	800d883a 	mov	r6,r16
 1008e20:	880f883a 	mov	r7,r17
 1008e24:	1003ebc0 	call	1003ebc <__muldf3>
 1008e28:	d9401517 	ldw	r5,84(sp)
 1008e2c:	d9001417 	ldw	r4,80(sp)
 1008e30:	880f883a 	mov	r7,r17
 1008e34:	000d883a 	mov	r6,zero
 1008e38:	d8801a15 	stw	r2,104(sp)
 1008e3c:	d8c01b15 	stw	r3,108(sp)
 1008e40:	1003ebc0 	call	1003ebc <__muldf3>
 1008e44:	180b883a 	mov	r5,r3
 1008e48:	1009883a 	mov	r4,r2
 1008e4c:	1823883a 	mov	r17,r3
 1008e50:	1021883a 	mov	r16,r2
 1008e54:	10045100 	call	1004510 <__fixdfsi>
 1008e58:	1009883a 	mov	r4,r2
 1008e5c:	102b883a 	mov	r21,r2
 1008e60:	10044180 	call	1004418 <__floatsidf>
 1008e64:	880b883a 	mov	r5,r17
 1008e68:	8009883a 	mov	r4,r16
 1008e6c:	180f883a 	mov	r7,r3
 1008e70:	100d883a 	mov	r6,r2
 1008e74:	1003dc80 	call	1003dc8 <__subdf3>
 1008e78:	1021883a 	mov	r16,r2
 1008e7c:	d9001b17 	ldw	r4,108(sp)
 1008e80:	1823883a 	mov	r17,r3
 1008e84:	dc001415 	stw	r16,80(sp)
 1008e88:	ad400c04 	addi	r21,r21,48
 1008e8c:	dc401515 	stw	r17,84(sp)
 1008e90:	d8801a17 	ldw	r2,104(sp)
 1008e94:	e5400005 	stb	r21,0(fp)
 1008e98:	202f883a 	mov	r23,r4
 1008e9c:	d9c01b17 	ldw	r7,108(sp)
 1008ea0:	d9001417 	ldw	r4,80(sp)
 1008ea4:	880b883a 	mov	r5,r17
 1008ea8:	100d883a 	mov	r6,r2
 1008eac:	102d883a 	mov	r22,r2
 1008eb0:	e7000044 	addi	fp,fp,1
 1008eb4:	100d5380 	call	100d538 <__ltdf2>
 1008eb8:	103fc30e 	bge	r2,zero,1008dc8 <_dtoa_r+0x1064>
 1008ebc:	d9000417 	ldw	r4,16(sp)
 1008ec0:	d9000d15 	stw	r4,52(sp)
 1008ec4:	003d7106 	br	100848c <_dtoa_r+0x728>
 1008ec8:	d9801717 	ldw	r6,92(sp)
 1008ecc:	00800084 	movi	r2,2
 1008ed0:	11bde60e 	bge	r2,r6,100866c <_dtoa_r+0x908>
 1008ed4:	203cfb1e 	bne	r4,zero,10082c4 <_dtoa_r+0x560>
 1008ed8:	d9001617 	ldw	r4,88(sp)
 1008edc:	900b883a 	mov	r5,r18
 1008ee0:	01800144 	movi	r6,5
 1008ee4:	000f883a 	mov	r7,zero
 1008ee8:	100b50c0 	call	100b50c <__multadd>
 1008eec:	d9000717 	ldw	r4,28(sp)
 1008ef0:	100b883a 	mov	r5,r2
 1008ef4:	1025883a 	mov	r18,r2
 1008ef8:	100a9480 	call	100a948 <__mcmp>
 1008efc:	00bcf10e 	bge	zero,r2,10082c4 <_dtoa_r+0x560>
 1008f00:	d8c00d17 	ldw	r3,52(sp)
 1008f04:	d9000517 	ldw	r4,20(sp)
 1008f08:	d8000615 	stw	zero,24(sp)
 1008f0c:	18c00044 	addi	r3,r3,1
 1008f10:	d8c00d15 	stw	r3,52(sp)
 1008f14:	00800c44 	movi	r2,49
 1008f18:	27000044 	addi	fp,r4,1
 1008f1c:	20800005 	stb	r2,0(r4)
 1008f20:	003e8906 	br	1008948 <_dtoa_r+0xbe4>
 1008f24:	d8c00517 	ldw	r3,20(sp)
 1008f28:	003bc206 	br	1007e34 <_dtoa_r+0xd0>
 1008f2c:	01804074 	movhi	r6,257
 1008f30:	318a5a04 	addi	r6,r6,10600
 1008f34:	30c00917 	ldw	r3,36(r6)
 1008f38:	30800817 	ldw	r2,32(r6)
 1008f3c:	d9001217 	ldw	r4,72(sp)
 1008f40:	d9401317 	ldw	r5,76(sp)
 1008f44:	180f883a 	mov	r7,r3
 1008f48:	100d883a 	mov	r6,r2
 1008f4c:	100d2580 	call	100d258 <__divdf3>
 1008f50:	948003cc 	andi	r18,r18,15
 1008f54:	058000c4 	movi	r22,3
 1008f58:	1029883a 	mov	r20,r2
 1008f5c:	182b883a 	mov	r21,r3
 1008f60:	003c8906 	br	1008188 <_dtoa_r+0x424>
 1008f64:	d9001017 	ldw	r4,64(sp)
 1008f68:	d9800917 	ldw	r6,36(sp)
 1008f6c:	0025883a 	mov	r18,zero
 1008f70:	1105c83a 	sub	r2,r2,r4
 1008f74:	2089883a 	add	r4,r4,r2
 1008f78:	308d883a 	add	r6,r6,r2
 1008f7c:	d9001015 	stw	r4,64(sp)
 1008f80:	d9800915 	stw	r6,36(sp)
 1008f84:	003e3206 	br	1008850 <_dtoa_r+0xaec>
 1008f88:	28800044 	addi	r2,r5,1
 1008f8c:	27000044 	addi	fp,r4,1
 1008f90:	20800005 	stb	r2,0(r4)
 1008f94:	003e6c06 	br	1008948 <_dtoa_r+0xbe4>
 1008f98:	d8800f17 	ldw	r2,60(sp)
 1008f9c:	00bce016 	blt	zero,r2,1008320 <_dtoa_r+0x5bc>
 1008fa0:	d9800f17 	ldw	r6,60(sp)
 1008fa4:	303cc51e 	bne	r6,zero,10082bc <_dtoa_r+0x558>
 1008fa8:	0005883a 	mov	r2,zero
 1008fac:	00d00534 	movhi	r3,16404
 1008fb0:	980b883a 	mov	r5,r19
 1008fb4:	180f883a 	mov	r7,r3
 1008fb8:	9009883a 	mov	r4,r18
 1008fbc:	100d883a 	mov	r6,r2
 1008fc0:	1003ebc0 	call	1003ebc <__muldf3>
 1008fc4:	180b883a 	mov	r5,r3
 1008fc8:	a80f883a 	mov	r7,r21
 1008fcc:	1009883a 	mov	r4,r2
 1008fd0:	a00d883a 	mov	r6,r20
 1008fd4:	10043900 	call	1004390 <__gedf2>
 1008fd8:	103cb80e 	bge	r2,zero,10082bc <_dtoa_r+0x558>
 1008fdc:	0027883a 	mov	r19,zero
 1008fe0:	0025883a 	mov	r18,zero
 1008fe4:	003fc606 	br	1008f00 <_dtoa_r+0x119c>
 1008fe8:	99400117 	ldw	r5,4(r19)
 1008fec:	d9001617 	ldw	r4,88(sp)
 1008ff0:	100ad6c0 	call	100ad6c <_Balloc>
 1008ff4:	99800417 	ldw	r6,16(r19)
 1008ff8:	11000304 	addi	r4,r2,12
 1008ffc:	99400304 	addi	r5,r19,12
 1009000:	318d883a 	add	r6,r6,r6
 1009004:	318d883a 	add	r6,r6,r6
 1009008:	31800204 	addi	r6,r6,8
 100900c:	1023883a 	mov	r17,r2
 1009010:	100a5d40 	call	100a5d4 <memcpy>
 1009014:	d9001617 	ldw	r4,88(sp)
 1009018:	880b883a 	mov	r5,r17
 100901c:	01800044 	movi	r6,1
 1009020:	100b1300 	call	100b130 <__lshift>
 1009024:	100b883a 	mov	r5,r2
 1009028:	003d9c06 	br	100869c <_dtoa_r+0x938>
 100902c:	00800e44 	movi	r2,57
 1009030:	b8807026 	beq	r23,r2,10091f4 <_dtoa_r+0x1490>
 1009034:	b8800044 	addi	r2,r23,1
 1009038:	b7000044 	addi	fp,r22,1
 100903c:	b0800005 	stb	r2,0(r22)
 1009040:	003e4106 	br	1008948 <_dtoa_r+0xbe4>
 1009044:	d8800317 	ldw	r2,12(sp)
 1009048:	01804074 	movhi	r6,257
 100904c:	318a2804 	addi	r6,r6,10400
 1009050:	b009883a 	mov	r4,r22
 1009054:	100e90fa 	slli	r7,r2,3
 1009058:	b80b883a 	mov	r5,r23
 100905c:	398f883a 	add	r7,r7,r6
 1009060:	38bffe17 	ldw	r2,-8(r7)
 1009064:	d9800517 	ldw	r6,20(sp)
 1009068:	38ffff17 	ldw	r3,-4(r7)
 100906c:	37000044 	addi	fp,r6,1
 1009070:	180f883a 	mov	r7,r3
 1009074:	100d883a 	mov	r6,r2
 1009078:	1003ebc0 	call	1003ebc <__muldf3>
 100907c:	a80b883a 	mov	r5,r21
 1009080:	a009883a 	mov	r4,r20
 1009084:	182f883a 	mov	r23,r3
 1009088:	102d883a 	mov	r22,r2
 100908c:	10045100 	call	1004510 <__fixdfsi>
 1009090:	1009883a 	mov	r4,r2
 1009094:	1027883a 	mov	r19,r2
 1009098:	10044180 	call	1004418 <__floatsidf>
 100909c:	a80b883a 	mov	r5,r21
 10090a0:	a009883a 	mov	r4,r20
 10090a4:	180f883a 	mov	r7,r3
 10090a8:	100d883a 	mov	r6,r2
 10090ac:	1003dc80 	call	1003dc8 <__subdf3>
 10090b0:	180b883a 	mov	r5,r3
 10090b4:	d8c00517 	ldw	r3,20(sp)
 10090b8:	9cc00c04 	addi	r19,r19,48
 10090bc:	1009883a 	mov	r4,r2
 10090c0:	1cc00005 	stb	r19,0(r3)
 10090c4:	2021883a 	mov	r16,r4
 10090c8:	d9000317 	ldw	r4,12(sp)
 10090cc:	00800044 	movi	r2,1
 10090d0:	2823883a 	mov	r17,r5
 10090d4:	20802226 	beq	r4,r2,1009160 <_dtoa_r+0x13fc>
 10090d8:	1029883a 	mov	r20,r2
 10090dc:	0005883a 	mov	r2,zero
 10090e0:	00d00934 	movhi	r3,16420
 10090e4:	180f883a 	mov	r7,r3
 10090e8:	100d883a 	mov	r6,r2
 10090ec:	880b883a 	mov	r5,r17
 10090f0:	8009883a 	mov	r4,r16
 10090f4:	1003ebc0 	call	1003ebc <__muldf3>
 10090f8:	180b883a 	mov	r5,r3
 10090fc:	1009883a 	mov	r4,r2
 1009100:	1823883a 	mov	r17,r3
 1009104:	1021883a 	mov	r16,r2
 1009108:	10045100 	call	1004510 <__fixdfsi>
 100910c:	1009883a 	mov	r4,r2
 1009110:	102b883a 	mov	r21,r2
 1009114:	10044180 	call	1004418 <__floatsidf>
 1009118:	880b883a 	mov	r5,r17
 100911c:	8009883a 	mov	r4,r16
 1009120:	180f883a 	mov	r7,r3
 1009124:	100d883a 	mov	r6,r2
 1009128:	1003dc80 	call	1003dc8 <__subdf3>
 100912c:	180b883a 	mov	r5,r3
 1009130:	d8c00517 	ldw	r3,20(sp)
 1009134:	1009883a 	mov	r4,r2
 1009138:	ad400c04 	addi	r21,r21,48
 100913c:	1d05883a 	add	r2,r3,r20
 1009140:	15400005 	stb	r21,0(r2)
 1009144:	2021883a 	mov	r16,r4
 1009148:	d9000317 	ldw	r4,12(sp)
 100914c:	a5000044 	addi	r20,r20,1
 1009150:	2823883a 	mov	r17,r5
 1009154:	a13fe11e 	bne	r20,r4,10090dc <_dtoa_r+0x1378>
 1009158:	e505883a 	add	r2,fp,r20
 100915c:	173fffc4 	addi	fp,r2,-1
 1009160:	0025883a 	mov	r18,zero
 1009164:	04cff834 	movhi	r19,16352
 1009168:	b009883a 	mov	r4,r22
 100916c:	b80b883a 	mov	r5,r23
 1009170:	900d883a 	mov	r6,r18
 1009174:	980f883a 	mov	r7,r19
 1009178:	1003e480 	call	1003e48 <__adddf3>
 100917c:	180b883a 	mov	r5,r3
 1009180:	1009883a 	mov	r4,r2
 1009184:	800d883a 	mov	r6,r16
 1009188:	880f883a 	mov	r7,r17
 100918c:	100d5380 	call	100d538 <__ltdf2>
 1009190:	103cab16 	blt	r2,zero,1008440 <_dtoa_r+0x6dc>
 1009194:	0009883a 	mov	r4,zero
 1009198:	980b883a 	mov	r5,r19
 100919c:	b80f883a 	mov	r7,r23
 10091a0:	b00d883a 	mov	r6,r22
 10091a4:	1003dc80 	call	1003dc8 <__subdf3>
 10091a8:	180b883a 	mov	r5,r3
 10091ac:	880f883a 	mov	r7,r17
 10091b0:	1009883a 	mov	r4,r2
 10091b4:	800d883a 	mov	r6,r16
 10091b8:	10043080 	call	1004308 <__gtdf2>
 10091bc:	00bc470e 	bge	zero,r2,10082dc <_dtoa_r+0x578>
 10091c0:	00c00c04 	movi	r3,48
 10091c4:	e73fffc4 	addi	fp,fp,-1
 10091c8:	e0800007 	ldb	r2,0(fp)
 10091cc:	10fffd26 	beq	r2,r3,10091c4 <_dtoa_r+0x1460>
 10091d0:	d9800417 	ldw	r6,16(sp)
 10091d4:	e7000044 	addi	fp,fp,1
 10091d8:	d9800d15 	stw	r6,52(sp)
 10091dc:	003cab06 	br	100848c <_dtoa_r+0x728>
 10091e0:	d8c00f17 	ldw	r3,60(sp)
 10091e4:	d9001117 	ldw	r4,68(sp)
 10091e8:	20e1c83a 	sub	r16,r4,r3
 10091ec:	0007883a 	mov	r3,zero
 10091f0:	003d9b06 	br	1008860 <_dtoa_r+0xafc>
 10091f4:	00800e44 	movi	r2,57
 10091f8:	b0800005 	stb	r2,0(r22)
 10091fc:	b5800044 	addi	r22,r22,1
 1009200:	003dc106 	br	1008908 <_dtoa_r+0xba4>
 1009204:	05800084 	movi	r22,2
 1009208:	003bf706 	br	10081e8 <_dtoa_r+0x484>
 100920c:	d9000f17 	ldw	r4,60(sp)
 1009210:	013c000e 	bge	zero,r4,1008214 <_dtoa_r+0x4b0>
 1009214:	d9800e17 	ldw	r6,56(sp)
 1009218:	01bc300e 	bge	zero,r6,10082dc <_dtoa_r+0x578>
 100921c:	0005883a 	mov	r2,zero
 1009220:	00d00934 	movhi	r3,16420
 1009224:	a80b883a 	mov	r5,r21
 1009228:	180f883a 	mov	r7,r3
 100922c:	a009883a 	mov	r4,r20
 1009230:	100d883a 	mov	r6,r2
 1009234:	1003ebc0 	call	1003ebc <__muldf3>
 1009238:	b1000044 	addi	r4,r22,1
 100923c:	1021883a 	mov	r16,r2
 1009240:	1823883a 	mov	r17,r3
 1009244:	10044180 	call	1004418 <__floatsidf>
 1009248:	880b883a 	mov	r5,r17
 100924c:	8009883a 	mov	r4,r16
 1009250:	180f883a 	mov	r7,r3
 1009254:	100d883a 	mov	r6,r2
 1009258:	1003ebc0 	call	1003ebc <__muldf3>
 100925c:	0011883a 	mov	r8,zero
 1009260:	02500734 	movhi	r9,16412
 1009264:	180b883a 	mov	r5,r3
 1009268:	480f883a 	mov	r7,r9
 100926c:	1009883a 	mov	r4,r2
 1009270:	400d883a 	mov	r6,r8
 1009274:	1003e480 	call	1003e48 <__adddf3>
 1009278:	102d883a 	mov	r22,r2
 100927c:	00bf3034 	movhi	r2,64704
 1009280:	10ef883a 	add	r23,r2,r3
 1009284:	d8800d17 	ldw	r2,52(sp)
 1009288:	d8c00e17 	ldw	r3,56(sp)
 100928c:	8029883a 	mov	r20,r16
 1009290:	10bfffc4 	addi	r2,r2,-1
 1009294:	882b883a 	mov	r21,r17
 1009298:	d8800415 	stw	r2,16(sp)
 100929c:	d8c00315 	stw	r3,12(sp)
 10092a0:	003e8306 	br	1008cb0 <_dtoa_r+0xf4c>
 10092a4:	d8800117 	ldw	r2,4(sp)
 10092a8:	dc001117 	ldw	r16,68(sp)
 10092ac:	dc801017 	ldw	r18,64(sp)
 10092b0:	00c00d84 	movi	r3,54
 10092b4:	1887c83a 	sub	r3,r3,r2
 10092b8:	003d6906 	br	1008860 <_dtoa_r+0xafc>
 10092bc:	01800044 	movi	r6,1
 10092c0:	3021883a 	mov	r16,r6
 10092c4:	d9800f15 	stw	r6,60(sp)
 10092c8:	d9802615 	stw	r6,152(sp)
 10092cc:	d9800e15 	stw	r6,56(sp)
 10092d0:	003b9306 	br	1008120 <_dtoa_r+0x3bc>
 10092d4:	b021883a 	mov	r16,r22
 10092d8:	dd800f15 	stw	r22,60(sp)
 10092dc:	003b9006 	br	1008120 <_dtoa_r+0x3bc>
 10092e0:	103e221e 	bne	r2,zero,1008b6c <_dtoa_r+0xe08>
 10092e4:	b880004c 	andi	r2,r23,1
 10092e8:	1005003a 	cmpeq	r2,r2,zero
 10092ec:	103e1f1e 	bne	r2,zero,1008b6c <_dtoa_r+0xe08>
 10092f0:	003e1b06 	br	1008b60 <_dtoa_r+0xdfc>
 10092f4:	d9001617 	ldw	r4,88(sp)
 10092f8:	980b883a 	mov	r5,r19
 10092fc:	01800284 	movi	r6,10
 1009300:	000f883a 	mov	r7,zero
 1009304:	100b50c0 	call	100b50c <__multadd>
 1009308:	d8c00e17 	ldw	r3,56(sp)
 100930c:	1027883a 	mov	r19,r2
 1009310:	d8c00f15 	stw	r3,60(sp)
 1009314:	003cd306 	br	1008664 <_dtoa_r+0x900>

01009318 <_fflush_r>:
 1009318:	defffb04 	addi	sp,sp,-20
 100931c:	dcc00315 	stw	r19,12(sp)
 1009320:	dc800215 	stw	r18,8(sp)
 1009324:	dfc00415 	stw	ra,16(sp)
 1009328:	dc400115 	stw	r17,4(sp)
 100932c:	dc000015 	stw	r16,0(sp)
 1009330:	2027883a 	mov	r19,r4
 1009334:	2825883a 	mov	r18,r5
 1009338:	20000226 	beq	r4,zero,1009344 <_fflush_r+0x2c>
 100933c:	20800e17 	ldw	r2,56(r4)
 1009340:	10005626 	beq	r2,zero,100949c <_fflush_r+0x184>
 1009344:	9100030b 	ldhu	r4,12(r18)
 1009348:	20ffffcc 	andi	r3,r4,65535
 100934c:	18e0001c 	xori	r3,r3,32768
 1009350:	18e00004 	addi	r3,r3,-32768
 1009354:	1880020c 	andi	r2,r3,8
 1009358:	1000261e 	bne	r2,zero,10093f4 <_fflush_r+0xdc>
 100935c:	90c00117 	ldw	r3,4(r18)
 1009360:	20820014 	ori	r2,r4,2048
 1009364:	9080030d 	sth	r2,12(r18)
 1009368:	1009883a 	mov	r4,r2
 100936c:	00c0400e 	bge	zero,r3,1009470 <_fflush_r+0x158>
 1009370:	92000a17 	ldw	r8,40(r18)
 1009374:	40004026 	beq	r8,zero,1009478 <_fflush_r+0x160>
 1009378:	2084000c 	andi	r2,r4,4096
 100937c:	10005326 	beq	r2,zero,10094cc <_fflush_r+0x1b4>
 1009380:	94001417 	ldw	r16,80(r18)
 1009384:	9080030b 	ldhu	r2,12(r18)
 1009388:	1080010c 	andi	r2,r2,4
 100938c:	1000481e 	bne	r2,zero,10094b0 <_fflush_r+0x198>
 1009390:	91400717 	ldw	r5,28(r18)
 1009394:	9809883a 	mov	r4,r19
 1009398:	800d883a 	mov	r6,r16
 100939c:	000f883a 	mov	r7,zero
 10093a0:	403ee83a 	callr	r8
 10093a4:	8080261e 	bne	r16,r2,1009440 <_fflush_r+0x128>
 10093a8:	9080030b 	ldhu	r2,12(r18)
 10093ac:	91000417 	ldw	r4,16(r18)
 10093b0:	90000115 	stw	zero,4(r18)
 10093b4:	10bdffcc 	andi	r2,r2,63487
 10093b8:	10ffffcc 	andi	r3,r2,65535
 10093bc:	18c4000c 	andi	r3,r3,4096
 10093c0:	9080030d 	sth	r2,12(r18)
 10093c4:	91000015 	stw	r4,0(r18)
 10093c8:	18002b26 	beq	r3,zero,1009478 <_fflush_r+0x160>
 10093cc:	0007883a 	mov	r3,zero
 10093d0:	1805883a 	mov	r2,r3
 10093d4:	94001415 	stw	r16,80(r18)
 10093d8:	dfc00417 	ldw	ra,16(sp)
 10093dc:	dcc00317 	ldw	r19,12(sp)
 10093e0:	dc800217 	ldw	r18,8(sp)
 10093e4:	dc400117 	ldw	r17,4(sp)
 10093e8:	dc000017 	ldw	r16,0(sp)
 10093ec:	dec00504 	addi	sp,sp,20
 10093f0:	f800283a 	ret
 10093f4:	94400417 	ldw	r17,16(r18)
 10093f8:	88001f26 	beq	r17,zero,1009478 <_fflush_r+0x160>
 10093fc:	90800017 	ldw	r2,0(r18)
 1009400:	18c000cc 	andi	r3,r3,3
 1009404:	94400015 	stw	r17,0(r18)
 1009408:	1461c83a 	sub	r16,r2,r17
 100940c:	18002526 	beq	r3,zero,10094a4 <_fflush_r+0x18c>
 1009410:	0005883a 	mov	r2,zero
 1009414:	90800215 	stw	r2,8(r18)
 1009418:	0400170e 	bge	zero,r16,1009478 <_fflush_r+0x160>
 100941c:	90c00917 	ldw	r3,36(r18)
 1009420:	91400717 	ldw	r5,28(r18)
 1009424:	880d883a 	mov	r6,r17
 1009428:	800f883a 	mov	r7,r16
 100942c:	9809883a 	mov	r4,r19
 1009430:	183ee83a 	callr	r3
 1009434:	88a3883a 	add	r17,r17,r2
 1009438:	80a1c83a 	sub	r16,r16,r2
 100943c:	00bff616 	blt	zero,r2,1009418 <_fflush_r+0x100>
 1009440:	9080030b 	ldhu	r2,12(r18)
 1009444:	00ffffc4 	movi	r3,-1
 1009448:	10801014 	ori	r2,r2,64
 100944c:	9080030d 	sth	r2,12(r18)
 1009450:	1805883a 	mov	r2,r3
 1009454:	dfc00417 	ldw	ra,16(sp)
 1009458:	dcc00317 	ldw	r19,12(sp)
 100945c:	dc800217 	ldw	r18,8(sp)
 1009460:	dc400117 	ldw	r17,4(sp)
 1009464:	dc000017 	ldw	r16,0(sp)
 1009468:	dec00504 	addi	sp,sp,20
 100946c:	f800283a 	ret
 1009470:	90800f17 	ldw	r2,60(r18)
 1009474:	00bfbe16 	blt	zero,r2,1009370 <_fflush_r+0x58>
 1009478:	0007883a 	mov	r3,zero
 100947c:	1805883a 	mov	r2,r3
 1009480:	dfc00417 	ldw	ra,16(sp)
 1009484:	dcc00317 	ldw	r19,12(sp)
 1009488:	dc800217 	ldw	r18,8(sp)
 100948c:	dc400117 	ldw	r17,4(sp)
 1009490:	dc000017 	ldw	r16,0(sp)
 1009494:	dec00504 	addi	sp,sp,20
 1009498:	f800283a 	ret
 100949c:	10095b00 	call	10095b0 <__sinit>
 10094a0:	003fa806 	br	1009344 <_fflush_r+0x2c>
 10094a4:	90800517 	ldw	r2,20(r18)
 10094a8:	90800215 	stw	r2,8(r18)
 10094ac:	003fda06 	br	1009418 <_fflush_r+0x100>
 10094b0:	90800117 	ldw	r2,4(r18)
 10094b4:	90c00c17 	ldw	r3,48(r18)
 10094b8:	80a1c83a 	sub	r16,r16,r2
 10094bc:	183fb426 	beq	r3,zero,1009390 <_fflush_r+0x78>
 10094c0:	90800f17 	ldw	r2,60(r18)
 10094c4:	80a1c83a 	sub	r16,r16,r2
 10094c8:	003fb106 	br	1009390 <_fflush_r+0x78>
 10094cc:	91400717 	ldw	r5,28(r18)
 10094d0:	9809883a 	mov	r4,r19
 10094d4:	000d883a 	mov	r6,zero
 10094d8:	01c00044 	movi	r7,1
 10094dc:	403ee83a 	callr	r8
 10094e0:	1021883a 	mov	r16,r2
 10094e4:	00bfffc4 	movi	r2,-1
 10094e8:	80800226 	beq	r16,r2,10094f4 <_fflush_r+0x1dc>
 10094ec:	92000a17 	ldw	r8,40(r18)
 10094f0:	003fa406 	br	1009384 <_fflush_r+0x6c>
 10094f4:	98c00017 	ldw	r3,0(r19)
 10094f8:	00800744 	movi	r2,29
 10094fc:	18bfde26 	beq	r3,r2,1009478 <_fflush_r+0x160>
 1009500:	9080030b 	ldhu	r2,12(r18)
 1009504:	8007883a 	mov	r3,r16
 1009508:	10801014 	ori	r2,r2,64
 100950c:	9080030d 	sth	r2,12(r18)
 1009510:	003fcf06 	br	1009450 <_fflush_r+0x138>

01009514 <fflush>:
 1009514:	01404074 	movhi	r5,257
 1009518:	2964c604 	addi	r5,r5,-27880
 100951c:	2007883a 	mov	r3,r4
 1009520:	20000526 	beq	r4,zero,1009538 <fflush+0x24>
 1009524:	00804074 	movhi	r2,257
 1009528:	10915704 	addi	r2,r2,17756
 100952c:	11000017 	ldw	r4,0(r2)
 1009530:	180b883a 	mov	r5,r3
 1009534:	10093181 	jmpi	1009318 <_fflush_r>
 1009538:	00804074 	movhi	r2,257
 100953c:	10915804 	addi	r2,r2,17760
 1009540:	11000017 	ldw	r4,0(r2)
 1009544:	100a1181 	jmpi	100a118 <_fwalk_reent>

01009548 <std>:
 1009548:	00804074 	movhi	r2,257
 100954c:	10afb704 	addi	r2,r2,-16676
 1009550:	20800b15 	stw	r2,44(r4)
 1009554:	00804074 	movhi	r2,257
 1009558:	10aff204 	addi	r2,r2,-16440
 100955c:	20800815 	stw	r2,32(r4)
 1009560:	00c04074 	movhi	r3,257
 1009564:	18efd304 	addi	r3,r3,-16564
 1009568:	00804074 	movhi	r2,257
 100956c:	10afb904 	addi	r2,r2,-16668
 1009570:	2140030d 	sth	r5,12(r4)
 1009574:	2180038d 	sth	r6,14(r4)
 1009578:	20c00915 	stw	r3,36(r4)
 100957c:	20800a15 	stw	r2,40(r4)
 1009580:	20000015 	stw	zero,0(r4)
 1009584:	20000115 	stw	zero,4(r4)
 1009588:	20000215 	stw	zero,8(r4)
 100958c:	20000415 	stw	zero,16(r4)
 1009590:	20000515 	stw	zero,20(r4)
 1009594:	20000615 	stw	zero,24(r4)
 1009598:	21000715 	stw	r4,28(r4)
 100959c:	f800283a 	ret

010095a0 <__sfp_lock_acquire>:
 10095a0:	f800283a 	ret

010095a4 <__sfp_lock_release>:
 10095a4:	f800283a 	ret

010095a8 <__sinit_lock_acquire>:
 10095a8:	f800283a 	ret

010095ac <__sinit_lock_release>:
 10095ac:	f800283a 	ret

010095b0 <__sinit>:
 10095b0:	20800e17 	ldw	r2,56(r4)
 10095b4:	defffd04 	addi	sp,sp,-12
 10095b8:	dc400115 	stw	r17,4(sp)
 10095bc:	dc000015 	stw	r16,0(sp)
 10095c0:	dfc00215 	stw	ra,8(sp)
 10095c4:	04400044 	movi	r17,1
 10095c8:	01400104 	movi	r5,4
 10095cc:	000d883a 	mov	r6,zero
 10095d0:	2021883a 	mov	r16,r4
 10095d4:	2200bb04 	addi	r8,r4,748
 10095d8:	200f883a 	mov	r7,r4
 10095dc:	10000526 	beq	r2,zero,10095f4 <__sinit+0x44>
 10095e0:	dfc00217 	ldw	ra,8(sp)
 10095e4:	dc400117 	ldw	r17,4(sp)
 10095e8:	dc000017 	ldw	r16,0(sp)
 10095ec:	dec00304 	addi	sp,sp,12
 10095f0:	f800283a 	ret
 10095f4:	21000117 	ldw	r4,4(r4)
 10095f8:	00804074 	movhi	r2,257
 10095fc:	10a5a504 	addi	r2,r2,-26988
 1009600:	00c000c4 	movi	r3,3
 1009604:	80800f15 	stw	r2,60(r16)
 1009608:	80c0b915 	stw	r3,740(r16)
 100960c:	8200ba15 	stw	r8,744(r16)
 1009610:	84400e15 	stw	r17,56(r16)
 1009614:	8000b815 	stw	zero,736(r16)
 1009618:	10095480 	call	1009548 <std>
 100961c:	81000217 	ldw	r4,8(r16)
 1009620:	880d883a 	mov	r6,r17
 1009624:	800f883a 	mov	r7,r16
 1009628:	01400284 	movi	r5,10
 100962c:	10095480 	call	1009548 <std>
 1009630:	81000317 	ldw	r4,12(r16)
 1009634:	800f883a 	mov	r7,r16
 1009638:	01400484 	movi	r5,18
 100963c:	01800084 	movi	r6,2
 1009640:	dfc00217 	ldw	ra,8(sp)
 1009644:	dc400117 	ldw	r17,4(sp)
 1009648:	dc000017 	ldw	r16,0(sp)
 100964c:	dec00304 	addi	sp,sp,12
 1009650:	10095481 	jmpi	1009548 <std>

01009654 <__fp_lock>:
 1009654:	0005883a 	mov	r2,zero
 1009658:	f800283a 	ret

0100965c <__fp_unlock>:
 100965c:	0005883a 	mov	r2,zero
 1009660:	f800283a 	ret

01009664 <__fp_unlock_all>:
 1009664:	00804074 	movhi	r2,257
 1009668:	10915704 	addi	r2,r2,17756
 100966c:	11000017 	ldw	r4,0(r2)
 1009670:	01404074 	movhi	r5,257
 1009674:	29659704 	addi	r5,r5,-27044
 1009678:	100a1e01 	jmpi	100a1e0 <_fwalk>

0100967c <__fp_lock_all>:
 100967c:	00804074 	movhi	r2,257
 1009680:	10915704 	addi	r2,r2,17756
 1009684:	11000017 	ldw	r4,0(r2)
 1009688:	01404074 	movhi	r5,257
 100968c:	29659504 	addi	r5,r5,-27052
 1009690:	100a1e01 	jmpi	100a1e0 <_fwalk>

01009694 <_cleanup_r>:
 1009694:	01404074 	movhi	r5,257
 1009698:	2970e904 	addi	r5,r5,-15452
 100969c:	100a1e01 	jmpi	100a1e0 <_fwalk>

010096a0 <_cleanup>:
 10096a0:	00804074 	movhi	r2,257
 10096a4:	10915804 	addi	r2,r2,17760
 10096a8:	11000017 	ldw	r4,0(r2)
 10096ac:	10096941 	jmpi	1009694 <_cleanup_r>

010096b0 <__sfmoreglue>:
 10096b0:	defffc04 	addi	sp,sp,-16
 10096b4:	dc000015 	stw	r16,0(sp)
 10096b8:	2821883a 	mov	r16,r5
 10096bc:	dc400115 	stw	r17,4(sp)
 10096c0:	01401704 	movi	r5,92
 10096c4:	2023883a 	mov	r17,r4
 10096c8:	8009883a 	mov	r4,r16
 10096cc:	dfc00315 	stw	ra,12(sp)
 10096d0:	dcc00215 	stw	r19,8(sp)
 10096d4:	100476c0 	call	100476c <__mulsi3>
 10096d8:	11400304 	addi	r5,r2,12
 10096dc:	8809883a 	mov	r4,r17
 10096e0:	1027883a 	mov	r19,r2
 10096e4:	10051540 	call	1005154 <_malloc_r>
 10096e8:	10c00304 	addi	r3,r2,12
 10096ec:	1023883a 	mov	r17,r2
 10096f0:	1809883a 	mov	r4,r3
 10096f4:	980d883a 	mov	r6,r19
 10096f8:	000b883a 	mov	r5,zero
 10096fc:	10000b26 	beq	r2,zero,100972c <__sfmoreglue+0x7c>
 1009700:	14000115 	stw	r16,4(r2)
 1009704:	10c00215 	stw	r3,8(r2)
 1009708:	10000015 	stw	zero,0(r2)
 100970c:	100a7540 	call	100a754 <memset>
 1009710:	8805883a 	mov	r2,r17
 1009714:	dfc00317 	ldw	ra,12(sp)
 1009718:	dcc00217 	ldw	r19,8(sp)
 100971c:	dc400117 	ldw	r17,4(sp)
 1009720:	dc000017 	ldw	r16,0(sp)
 1009724:	dec00404 	addi	sp,sp,16
 1009728:	f800283a 	ret
 100972c:	0023883a 	mov	r17,zero
 1009730:	8805883a 	mov	r2,r17
 1009734:	dfc00317 	ldw	ra,12(sp)
 1009738:	dcc00217 	ldw	r19,8(sp)
 100973c:	dc400117 	ldw	r17,4(sp)
 1009740:	dc000017 	ldw	r16,0(sp)
 1009744:	dec00404 	addi	sp,sp,16
 1009748:	f800283a 	ret

0100974c <__sfp>:
 100974c:	defffd04 	addi	sp,sp,-12
 1009750:	00804074 	movhi	r2,257
 1009754:	10915804 	addi	r2,r2,17760
 1009758:	dc000015 	stw	r16,0(sp)
 100975c:	14000017 	ldw	r16,0(r2)
 1009760:	dc400115 	stw	r17,4(sp)
 1009764:	dfc00215 	stw	ra,8(sp)
 1009768:	80800e17 	ldw	r2,56(r16)
 100976c:	2023883a 	mov	r17,r4
 1009770:	10002626 	beq	r2,zero,100980c <__sfp+0xc0>
 1009774:	8400b804 	addi	r16,r16,736
 1009778:	80800117 	ldw	r2,4(r16)
 100977c:	81000217 	ldw	r4,8(r16)
 1009780:	10ffffc4 	addi	r3,r2,-1
 1009784:	18000916 	blt	r3,zero,10097ac <__sfp+0x60>
 1009788:	2080030f 	ldh	r2,12(r4)
 100978c:	10000b26 	beq	r2,zero,10097bc <__sfp+0x70>
 1009790:	017fffc4 	movi	r5,-1
 1009794:	00000206 	br	10097a0 <__sfp+0x54>
 1009798:	2080030f 	ldh	r2,12(r4)
 100979c:	10000726 	beq	r2,zero,10097bc <__sfp+0x70>
 10097a0:	18ffffc4 	addi	r3,r3,-1
 10097a4:	21001704 	addi	r4,r4,92
 10097a8:	197ffb1e 	bne	r3,r5,1009798 <__sfp+0x4c>
 10097ac:	80800017 	ldw	r2,0(r16)
 10097b0:	10001926 	beq	r2,zero,1009818 <__sfp+0xcc>
 10097b4:	1021883a 	mov	r16,r2
 10097b8:	003fef06 	br	1009778 <__sfp+0x2c>
 10097bc:	00bfffc4 	movi	r2,-1
 10097c0:	00c00044 	movi	r3,1
 10097c4:	2080038d 	sth	r2,14(r4)
 10097c8:	20c0030d 	sth	r3,12(r4)
 10097cc:	20000015 	stw	zero,0(r4)
 10097d0:	20000215 	stw	zero,8(r4)
 10097d4:	20000115 	stw	zero,4(r4)
 10097d8:	20000415 	stw	zero,16(r4)
 10097dc:	20000515 	stw	zero,20(r4)
 10097e0:	20000615 	stw	zero,24(r4)
 10097e4:	20000c15 	stw	zero,48(r4)
 10097e8:	20000d15 	stw	zero,52(r4)
 10097ec:	20001115 	stw	zero,68(r4)
 10097f0:	20001215 	stw	zero,72(r4)
 10097f4:	2005883a 	mov	r2,r4
 10097f8:	dfc00217 	ldw	ra,8(sp)
 10097fc:	dc400117 	ldw	r17,4(sp)
 1009800:	dc000017 	ldw	r16,0(sp)
 1009804:	dec00304 	addi	sp,sp,12
 1009808:	f800283a 	ret
 100980c:	8009883a 	mov	r4,r16
 1009810:	10095b00 	call	10095b0 <__sinit>
 1009814:	003fd706 	br	1009774 <__sfp+0x28>
 1009818:	8809883a 	mov	r4,r17
 100981c:	01400104 	movi	r5,4
 1009820:	10096b00 	call	10096b0 <__sfmoreglue>
 1009824:	80800015 	stw	r2,0(r16)
 1009828:	103fe21e 	bne	r2,zero,10097b4 <__sfp+0x68>
 100982c:	00800304 	movi	r2,12
 1009830:	0009883a 	mov	r4,zero
 1009834:	88800015 	stw	r2,0(r17)
 1009838:	003fee06 	br	10097f4 <__sfp+0xa8>

0100983c <_malloc_trim_r>:
 100983c:	defffb04 	addi	sp,sp,-20
 1009840:	dcc00315 	stw	r19,12(sp)
 1009844:	04c04074 	movhi	r19,257
 1009848:	9cca9c04 	addi	r19,r19,10864
 100984c:	dc800215 	stw	r18,8(sp)
 1009850:	dc400115 	stw	r17,4(sp)
 1009854:	dc000015 	stw	r16,0(sp)
 1009858:	2823883a 	mov	r17,r5
 100985c:	2025883a 	mov	r18,r4
 1009860:	dfc00415 	stw	ra,16(sp)
 1009864:	100dde80 	call	100dde8 <__malloc_lock>
 1009868:	98800217 	ldw	r2,8(r19)
 100986c:	9009883a 	mov	r4,r18
 1009870:	000b883a 	mov	r5,zero
 1009874:	10c00117 	ldw	r3,4(r2)
 1009878:	00bfff04 	movi	r2,-4
 100987c:	18a0703a 	and	r16,r3,r2
 1009880:	8463c83a 	sub	r17,r16,r17
 1009884:	8c43fbc4 	addi	r17,r17,4079
 1009888:	8822d33a 	srli	r17,r17,12
 100988c:	0083ffc4 	movi	r2,4095
 1009890:	8c7fffc4 	addi	r17,r17,-1
 1009894:	8822933a 	slli	r17,r17,12
 1009898:	1440060e 	bge	r2,r17,10098b4 <_malloc_trim_r+0x78>
 100989c:	10059c00 	call	10059c0 <_sbrk_r>
 10098a0:	98c00217 	ldw	r3,8(r19)
 10098a4:	9009883a 	mov	r4,r18
 10098a8:	044bc83a 	sub	r5,zero,r17
 10098ac:	80c7883a 	add	r3,r16,r3
 10098b0:	10c00926 	beq	r2,r3,10098d8 <_malloc_trim_r+0x9c>
 10098b4:	100de080 	call	100de08 <__malloc_unlock>
 10098b8:	0005883a 	mov	r2,zero
 10098bc:	dfc00417 	ldw	ra,16(sp)
 10098c0:	dcc00317 	ldw	r19,12(sp)
 10098c4:	dc800217 	ldw	r18,8(sp)
 10098c8:	dc400117 	ldw	r17,4(sp)
 10098cc:	dc000017 	ldw	r16,0(sp)
 10098d0:	dec00504 	addi	sp,sp,20
 10098d4:	f800283a 	ret
 10098d8:	9009883a 	mov	r4,r18
 10098dc:	10059c00 	call	10059c0 <_sbrk_r>
 10098e0:	844dc83a 	sub	r6,r16,r17
 10098e4:	00ffffc4 	movi	r3,-1
 10098e8:	9009883a 	mov	r4,r18
 10098ec:	000b883a 	mov	r5,zero
 10098f0:	01c04074 	movhi	r7,257
 10098f4:	39d83b04 	addi	r7,r7,24812
 10098f8:	31800054 	ori	r6,r6,1
 10098fc:	10c00926 	beq	r2,r3,1009924 <_malloc_trim_r+0xe8>
 1009900:	38800017 	ldw	r2,0(r7)
 1009904:	98c00217 	ldw	r3,8(r19)
 1009908:	9009883a 	mov	r4,r18
 100990c:	1445c83a 	sub	r2,r2,r17
 1009910:	38800015 	stw	r2,0(r7)
 1009914:	19800115 	stw	r6,4(r3)
 1009918:	100de080 	call	100de08 <__malloc_unlock>
 100991c:	00800044 	movi	r2,1
 1009920:	003fe606 	br	10098bc <_malloc_trim_r+0x80>
 1009924:	10059c00 	call	10059c0 <_sbrk_r>
 1009928:	99800217 	ldw	r6,8(r19)
 100992c:	100f883a 	mov	r7,r2
 1009930:	9009883a 	mov	r4,r18
 1009934:	1187c83a 	sub	r3,r2,r6
 1009938:	008003c4 	movi	r2,15
 100993c:	19400054 	ori	r5,r3,1
 1009940:	10ffdc0e 	bge	r2,r3,10098b4 <_malloc_trim_r+0x78>
 1009944:	00804074 	movhi	r2,257
 1009948:	10915604 	addi	r2,r2,17752
 100994c:	10c00017 	ldw	r3,0(r2)
 1009950:	00804074 	movhi	r2,257
 1009954:	10983b04 	addi	r2,r2,24812
 1009958:	31400115 	stw	r5,4(r6)
 100995c:	38c7c83a 	sub	r3,r7,r3
 1009960:	10c00015 	stw	r3,0(r2)
 1009964:	003fd306 	br	10098b4 <_malloc_trim_r+0x78>

01009968 <_free_r>:
 1009968:	defffd04 	addi	sp,sp,-12
 100996c:	dc400115 	stw	r17,4(sp)
 1009970:	dc000015 	stw	r16,0(sp)
 1009974:	dfc00215 	stw	ra,8(sp)
 1009978:	2821883a 	mov	r16,r5
 100997c:	2023883a 	mov	r17,r4
 1009980:	28005a26 	beq	r5,zero,1009aec <_free_r+0x184>
 1009984:	100dde80 	call	100dde8 <__malloc_lock>
 1009988:	823ffe04 	addi	r8,r16,-8
 100998c:	41400117 	ldw	r5,4(r8)
 1009990:	00bfff84 	movi	r2,-2
 1009994:	02804074 	movhi	r10,257
 1009998:	528a9c04 	addi	r10,r10,10864
 100999c:	288e703a 	and	r7,r5,r2
 10099a0:	41cd883a 	add	r6,r8,r7
 10099a4:	30c00117 	ldw	r3,4(r6)
 10099a8:	51000217 	ldw	r4,8(r10)
 10099ac:	00bfff04 	movi	r2,-4
 10099b0:	1892703a 	and	r9,r3,r2
 10099b4:	5017883a 	mov	r11,r10
 10099b8:	31006726 	beq	r6,r4,1009b58 <_free_r+0x1f0>
 10099bc:	2880004c 	andi	r2,r5,1
 10099c0:	1005003a 	cmpeq	r2,r2,zero
 10099c4:	32400115 	stw	r9,4(r6)
 10099c8:	10001a1e 	bne	r2,zero,1009a34 <_free_r+0xcc>
 10099cc:	000b883a 	mov	r5,zero
 10099d0:	3247883a 	add	r3,r6,r9
 10099d4:	18800117 	ldw	r2,4(r3)
 10099d8:	1080004c 	andi	r2,r2,1
 10099dc:	1000231e 	bne	r2,zero,1009a6c <_free_r+0x104>
 10099e0:	280ac03a 	cmpne	r5,r5,zero
 10099e4:	3a4f883a 	add	r7,r7,r9
 10099e8:	2800451e 	bne	r5,zero,1009b00 <_free_r+0x198>
 10099ec:	31000217 	ldw	r4,8(r6)
 10099f0:	00804074 	movhi	r2,257
 10099f4:	108a9e04 	addi	r2,r2,10872
 10099f8:	20807b26 	beq	r4,r2,1009be8 <_free_r+0x280>
 10099fc:	30800317 	ldw	r2,12(r6)
 1009a00:	3a07883a 	add	r3,r7,r8
 1009a04:	19c00015 	stw	r7,0(r3)
 1009a08:	11000215 	stw	r4,8(r2)
 1009a0c:	20800315 	stw	r2,12(r4)
 1009a10:	38800054 	ori	r2,r7,1
 1009a14:	40800115 	stw	r2,4(r8)
 1009a18:	28001a26 	beq	r5,zero,1009a84 <_free_r+0x11c>
 1009a1c:	8809883a 	mov	r4,r17
 1009a20:	dfc00217 	ldw	ra,8(sp)
 1009a24:	dc400117 	ldw	r17,4(sp)
 1009a28:	dc000017 	ldw	r16,0(sp)
 1009a2c:	dec00304 	addi	sp,sp,12
 1009a30:	100de081 	jmpi	100de08 <__malloc_unlock>
 1009a34:	80bffe17 	ldw	r2,-8(r16)
 1009a38:	50c00204 	addi	r3,r10,8
 1009a3c:	4091c83a 	sub	r8,r8,r2
 1009a40:	41000217 	ldw	r4,8(r8)
 1009a44:	388f883a 	add	r7,r7,r2
 1009a48:	20c06126 	beq	r4,r3,1009bd0 <_free_r+0x268>
 1009a4c:	40800317 	ldw	r2,12(r8)
 1009a50:	3247883a 	add	r3,r6,r9
 1009a54:	000b883a 	mov	r5,zero
 1009a58:	11000215 	stw	r4,8(r2)
 1009a5c:	20800315 	stw	r2,12(r4)
 1009a60:	18800117 	ldw	r2,4(r3)
 1009a64:	1080004c 	andi	r2,r2,1
 1009a68:	103fdd26 	beq	r2,zero,10099e0 <_free_r+0x78>
 1009a6c:	38800054 	ori	r2,r7,1
 1009a70:	3a07883a 	add	r3,r7,r8
 1009a74:	280ac03a 	cmpne	r5,r5,zero
 1009a78:	40800115 	stw	r2,4(r8)
 1009a7c:	19c00015 	stw	r7,0(r3)
 1009a80:	283fe61e 	bne	r5,zero,1009a1c <_free_r+0xb4>
 1009a84:	00807fc4 	movi	r2,511
 1009a88:	11c01f2e 	bgeu	r2,r7,1009b08 <_free_r+0x1a0>
 1009a8c:	3806d27a 	srli	r3,r7,9
 1009a90:	1800481e 	bne	r3,zero,1009bb4 <_free_r+0x24c>
 1009a94:	3804d0fa 	srli	r2,r7,3
 1009a98:	100690fa 	slli	r3,r2,3
 1009a9c:	1acd883a 	add	r6,r3,r11
 1009aa0:	31400217 	ldw	r5,8(r6)
 1009aa4:	31405926 	beq	r6,r5,1009c0c <_free_r+0x2a4>
 1009aa8:	28800117 	ldw	r2,4(r5)
 1009aac:	00ffff04 	movi	r3,-4
 1009ab0:	10c4703a 	and	r2,r2,r3
 1009ab4:	3880022e 	bgeu	r7,r2,1009ac0 <_free_r+0x158>
 1009ab8:	29400217 	ldw	r5,8(r5)
 1009abc:	317ffa1e 	bne	r6,r5,1009aa8 <_free_r+0x140>
 1009ac0:	29800317 	ldw	r6,12(r5)
 1009ac4:	41800315 	stw	r6,12(r8)
 1009ac8:	41400215 	stw	r5,8(r8)
 1009acc:	8809883a 	mov	r4,r17
 1009ad0:	2a000315 	stw	r8,12(r5)
 1009ad4:	32000215 	stw	r8,8(r6)
 1009ad8:	dfc00217 	ldw	ra,8(sp)
 1009adc:	dc400117 	ldw	r17,4(sp)
 1009ae0:	dc000017 	ldw	r16,0(sp)
 1009ae4:	dec00304 	addi	sp,sp,12
 1009ae8:	100de081 	jmpi	100de08 <__malloc_unlock>
 1009aec:	dfc00217 	ldw	ra,8(sp)
 1009af0:	dc400117 	ldw	r17,4(sp)
 1009af4:	dc000017 	ldw	r16,0(sp)
 1009af8:	dec00304 	addi	sp,sp,12
 1009afc:	f800283a 	ret
 1009b00:	31000217 	ldw	r4,8(r6)
 1009b04:	003fbd06 	br	10099fc <_free_r+0x94>
 1009b08:	3806d0fa 	srli	r3,r7,3
 1009b0c:	00800044 	movi	r2,1
 1009b10:	51400117 	ldw	r5,4(r10)
 1009b14:	180890fa 	slli	r4,r3,3
 1009b18:	1807d0ba 	srai	r3,r3,2
 1009b1c:	22c9883a 	add	r4,r4,r11
 1009b20:	21800217 	ldw	r6,8(r4)
 1009b24:	10c4983a 	sll	r2,r2,r3
 1009b28:	41000315 	stw	r4,12(r8)
 1009b2c:	41800215 	stw	r6,8(r8)
 1009b30:	288ab03a 	or	r5,r5,r2
 1009b34:	22000215 	stw	r8,8(r4)
 1009b38:	8809883a 	mov	r4,r17
 1009b3c:	51400115 	stw	r5,4(r10)
 1009b40:	32000315 	stw	r8,12(r6)
 1009b44:	dfc00217 	ldw	ra,8(sp)
 1009b48:	dc400117 	ldw	r17,4(sp)
 1009b4c:	dc000017 	ldw	r16,0(sp)
 1009b50:	dec00304 	addi	sp,sp,12
 1009b54:	100de081 	jmpi	100de08 <__malloc_unlock>
 1009b58:	2880004c 	andi	r2,r5,1
 1009b5c:	3a4d883a 	add	r6,r7,r9
 1009b60:	1000071e 	bne	r2,zero,1009b80 <_free_r+0x218>
 1009b64:	80bffe17 	ldw	r2,-8(r16)
 1009b68:	4091c83a 	sub	r8,r8,r2
 1009b6c:	41000317 	ldw	r4,12(r8)
 1009b70:	40c00217 	ldw	r3,8(r8)
 1009b74:	308d883a 	add	r6,r6,r2
 1009b78:	20c00215 	stw	r3,8(r4)
 1009b7c:	19000315 	stw	r4,12(r3)
 1009b80:	00804074 	movhi	r2,257
 1009b84:	10915504 	addi	r2,r2,17748
 1009b88:	11000017 	ldw	r4,0(r2)
 1009b8c:	30c00054 	ori	r3,r6,1
 1009b90:	52000215 	stw	r8,8(r10)
 1009b94:	40c00115 	stw	r3,4(r8)
 1009b98:	313fa036 	bltu	r6,r4,1009a1c <_free_r+0xb4>
 1009b9c:	00804074 	movhi	r2,257
 1009ba0:	10982e04 	addi	r2,r2,24760
 1009ba4:	11400017 	ldw	r5,0(r2)
 1009ba8:	8809883a 	mov	r4,r17
 1009bac:	100983c0 	call	100983c <_malloc_trim_r>
 1009bb0:	003f9a06 	br	1009a1c <_free_r+0xb4>
 1009bb4:	00800104 	movi	r2,4
 1009bb8:	10c0072e 	bgeu	r2,r3,1009bd8 <_free_r+0x270>
 1009bbc:	00800504 	movi	r2,20
 1009bc0:	10c01936 	bltu	r2,r3,1009c28 <_free_r+0x2c0>
 1009bc4:	188016c4 	addi	r2,r3,91
 1009bc8:	100690fa 	slli	r3,r2,3
 1009bcc:	003fb306 	br	1009a9c <_free_r+0x134>
 1009bd0:	01400044 	movi	r5,1
 1009bd4:	003f7e06 	br	10099d0 <_free_r+0x68>
 1009bd8:	3804d1ba 	srli	r2,r7,6
 1009bdc:	10800e04 	addi	r2,r2,56
 1009be0:	100690fa 	slli	r3,r2,3
 1009be4:	003fad06 	br	1009a9c <_free_r+0x134>
 1009be8:	22000315 	stw	r8,12(r4)
 1009bec:	22000215 	stw	r8,8(r4)
 1009bf0:	3a05883a 	add	r2,r7,r8
 1009bf4:	38c00054 	ori	r3,r7,1
 1009bf8:	11c00015 	stw	r7,0(r2)
 1009bfc:	41000215 	stw	r4,8(r8)
 1009c00:	40c00115 	stw	r3,4(r8)
 1009c04:	41000315 	stw	r4,12(r8)
 1009c08:	003f8406 	br	1009a1c <_free_r+0xb4>
 1009c0c:	1005d0ba 	srai	r2,r2,2
 1009c10:	00c00044 	movi	r3,1
 1009c14:	51000117 	ldw	r4,4(r10)
 1009c18:	1886983a 	sll	r3,r3,r2
 1009c1c:	20c8b03a 	or	r4,r4,r3
 1009c20:	51000115 	stw	r4,4(r10)
 1009c24:	003fa706 	br	1009ac4 <_free_r+0x15c>
 1009c28:	00801504 	movi	r2,84
 1009c2c:	10c00436 	bltu	r2,r3,1009c40 <_free_r+0x2d8>
 1009c30:	3804d33a 	srli	r2,r7,12
 1009c34:	10801b84 	addi	r2,r2,110
 1009c38:	100690fa 	slli	r3,r2,3
 1009c3c:	003f9706 	br	1009a9c <_free_r+0x134>
 1009c40:	00805504 	movi	r2,340
 1009c44:	10c00436 	bltu	r2,r3,1009c58 <_free_r+0x2f0>
 1009c48:	3804d3fa 	srli	r2,r7,15
 1009c4c:	10801dc4 	addi	r2,r2,119
 1009c50:	100690fa 	slli	r3,r2,3
 1009c54:	003f9106 	br	1009a9c <_free_r+0x134>
 1009c58:	00815504 	movi	r2,1364
 1009c5c:	10c0032e 	bgeu	r2,r3,1009c6c <_free_r+0x304>
 1009c60:	00801f84 	movi	r2,126
 1009c64:	00c0fc04 	movi	r3,1008
 1009c68:	003f8c06 	br	1009a9c <_free_r+0x134>
 1009c6c:	3804d4ba 	srli	r2,r7,18
 1009c70:	10801f04 	addi	r2,r2,124
 1009c74:	100690fa 	slli	r3,r2,3
 1009c78:	003f8806 	br	1009a9c <_free_r+0x134>

01009c7c <__sfvwrite_r>:
 1009c7c:	30800217 	ldw	r2,8(r6)
 1009c80:	defff504 	addi	sp,sp,-44
 1009c84:	df000915 	stw	fp,36(sp)
 1009c88:	dd800715 	stw	r22,28(sp)
 1009c8c:	dc800315 	stw	r18,12(sp)
 1009c90:	dfc00a15 	stw	ra,40(sp)
 1009c94:	ddc00815 	stw	r23,32(sp)
 1009c98:	dd400615 	stw	r21,24(sp)
 1009c9c:	dd000515 	stw	r20,20(sp)
 1009ca0:	dcc00415 	stw	r19,16(sp)
 1009ca4:	dc400215 	stw	r17,8(sp)
 1009ca8:	dc000115 	stw	r16,4(sp)
 1009cac:	302d883a 	mov	r22,r6
 1009cb0:	2039883a 	mov	fp,r4
 1009cb4:	2825883a 	mov	r18,r5
 1009cb8:	10001c26 	beq	r2,zero,1009d2c <__sfvwrite_r+0xb0>
 1009cbc:	29c0030b 	ldhu	r7,12(r5)
 1009cc0:	3880020c 	andi	r2,r7,8
 1009cc4:	10002726 	beq	r2,zero,1009d64 <__sfvwrite_r+0xe8>
 1009cc8:	28800417 	ldw	r2,16(r5)
 1009ccc:	10002526 	beq	r2,zero,1009d64 <__sfvwrite_r+0xe8>
 1009cd0:	3880008c 	andi	r2,r7,2
 1009cd4:	b5400017 	ldw	r21,0(r22)
 1009cd8:	10002826 	beq	r2,zero,1009d7c <__sfvwrite_r+0x100>
 1009cdc:	0021883a 	mov	r16,zero
 1009ce0:	0023883a 	mov	r17,zero
 1009ce4:	880d883a 	mov	r6,r17
 1009ce8:	e009883a 	mov	r4,fp
 1009cec:	00810004 	movi	r2,1024
 1009cf0:	80006e26 	beq	r16,zero,1009eac <__sfvwrite_r+0x230>
 1009cf4:	800f883a 	mov	r7,r16
 1009cf8:	91400717 	ldw	r5,28(r18)
 1009cfc:	1400012e 	bgeu	r2,r16,1009d04 <__sfvwrite_r+0x88>
 1009d00:	100f883a 	mov	r7,r2
 1009d04:	90c00917 	ldw	r3,36(r18)
 1009d08:	183ee83a 	callr	r3
 1009d0c:	1007883a 	mov	r3,r2
 1009d10:	80a1c83a 	sub	r16,r16,r2
 1009d14:	88a3883a 	add	r17,r17,r2
 1009d18:	00806d0e 	bge	zero,r2,1009ed0 <__sfvwrite_r+0x254>
 1009d1c:	b0800217 	ldw	r2,8(r22)
 1009d20:	10c5c83a 	sub	r2,r2,r3
 1009d24:	b0800215 	stw	r2,8(r22)
 1009d28:	103fee1e 	bne	r2,zero,1009ce4 <__sfvwrite_r+0x68>
 1009d2c:	0009883a 	mov	r4,zero
 1009d30:	2005883a 	mov	r2,r4
 1009d34:	dfc00a17 	ldw	ra,40(sp)
 1009d38:	df000917 	ldw	fp,36(sp)
 1009d3c:	ddc00817 	ldw	r23,32(sp)
 1009d40:	dd800717 	ldw	r22,28(sp)
 1009d44:	dd400617 	ldw	r21,24(sp)
 1009d48:	dd000517 	ldw	r20,20(sp)
 1009d4c:	dcc00417 	ldw	r19,16(sp)
 1009d50:	dc800317 	ldw	r18,12(sp)
 1009d54:	dc400217 	ldw	r17,8(sp)
 1009d58:	dc000117 	ldw	r16,4(sp)
 1009d5c:	dec00b04 	addi	sp,sp,44
 1009d60:	f800283a 	ret
 1009d64:	10079e40 	call	10079e4 <__swsetup_r>
 1009d68:	1000e41e 	bne	r2,zero,100a0fc <__sfvwrite_r+0x480>
 1009d6c:	91c0030b 	ldhu	r7,12(r18)
 1009d70:	b5400017 	ldw	r21,0(r22)
 1009d74:	3880008c 	andi	r2,r7,2
 1009d78:	103fd81e 	bne	r2,zero,1009cdc <__sfvwrite_r+0x60>
 1009d7c:	3880004c 	andi	r2,r7,1
 1009d80:	1005003a 	cmpeq	r2,r2,zero
 1009d84:	10005726 	beq	r2,zero,1009ee4 <__sfvwrite_r+0x268>
 1009d88:	0029883a 	mov	r20,zero
 1009d8c:	002f883a 	mov	r23,zero
 1009d90:	a0004226 	beq	r20,zero,1009e9c <__sfvwrite_r+0x220>
 1009d94:	3880800c 	andi	r2,r7,512
 1009d98:	94000217 	ldw	r16,8(r18)
 1009d9c:	10008b26 	beq	r2,zero,1009fcc <__sfvwrite_r+0x350>
 1009da0:	800d883a 	mov	r6,r16
 1009da4:	a400a536 	bltu	r20,r16,100a03c <__sfvwrite_r+0x3c0>
 1009da8:	3881200c 	andi	r2,r7,1152
 1009dac:	10002726 	beq	r2,zero,1009e4c <__sfvwrite_r+0x1d0>
 1009db0:	90800517 	ldw	r2,20(r18)
 1009db4:	92000417 	ldw	r8,16(r18)
 1009db8:	91400017 	ldw	r5,0(r18)
 1009dbc:	1087883a 	add	r3,r2,r2
 1009dc0:	1887883a 	add	r3,r3,r2
 1009dc4:	1808d7fa 	srli	r4,r3,31
 1009dc8:	2a21c83a 	sub	r16,r5,r8
 1009dcc:	80800044 	addi	r2,r16,1
 1009dd0:	20c9883a 	add	r4,r4,r3
 1009dd4:	2027d07a 	srai	r19,r4,1
 1009dd8:	a085883a 	add	r2,r20,r2
 1009ddc:	980d883a 	mov	r6,r19
 1009de0:	9880022e 	bgeu	r19,r2,1009dec <__sfvwrite_r+0x170>
 1009de4:	1027883a 	mov	r19,r2
 1009de8:	100d883a 	mov	r6,r2
 1009dec:	3881000c 	andi	r2,r7,1024
 1009df0:	1000b826 	beq	r2,zero,100a0d4 <__sfvwrite_r+0x458>
 1009df4:	300b883a 	mov	r5,r6
 1009df8:	e009883a 	mov	r4,fp
 1009dfc:	10051540 	call	1005154 <_malloc_r>
 1009e00:	10003126 	beq	r2,zero,1009ec8 <__sfvwrite_r+0x24c>
 1009e04:	91400417 	ldw	r5,16(r18)
 1009e08:	1009883a 	mov	r4,r2
 1009e0c:	800d883a 	mov	r6,r16
 1009e10:	1023883a 	mov	r17,r2
 1009e14:	100a5d40 	call	100a5d4 <memcpy>
 1009e18:	90c0030b 	ldhu	r3,12(r18)
 1009e1c:	00beffc4 	movi	r2,-1025
 1009e20:	1886703a 	and	r3,r3,r2
 1009e24:	18c02014 	ori	r3,r3,128
 1009e28:	90c0030d 	sth	r3,12(r18)
 1009e2c:	9c07c83a 	sub	r3,r19,r16
 1009e30:	8c05883a 	add	r2,r17,r16
 1009e34:	a00d883a 	mov	r6,r20
 1009e38:	a021883a 	mov	r16,r20
 1009e3c:	90800015 	stw	r2,0(r18)
 1009e40:	90c00215 	stw	r3,8(r18)
 1009e44:	94400415 	stw	r17,16(r18)
 1009e48:	94c00515 	stw	r19,20(r18)
 1009e4c:	91000017 	ldw	r4,0(r18)
 1009e50:	b80b883a 	mov	r5,r23
 1009e54:	a023883a 	mov	r17,r20
 1009e58:	100a6740 	call	100a674 <memmove>
 1009e5c:	90c00217 	ldw	r3,8(r18)
 1009e60:	90800017 	ldw	r2,0(r18)
 1009e64:	a027883a 	mov	r19,r20
 1009e68:	1c07c83a 	sub	r3,r3,r16
 1009e6c:	1405883a 	add	r2,r2,r16
 1009e70:	90c00215 	stw	r3,8(r18)
 1009e74:	a021883a 	mov	r16,r20
 1009e78:	90800015 	stw	r2,0(r18)
 1009e7c:	b0800217 	ldw	r2,8(r22)
 1009e80:	1405c83a 	sub	r2,r2,r16
 1009e84:	b0800215 	stw	r2,8(r22)
 1009e88:	103fa826 	beq	r2,zero,1009d2c <__sfvwrite_r+0xb0>
 1009e8c:	a469c83a 	sub	r20,r20,r17
 1009e90:	91c0030b 	ldhu	r7,12(r18)
 1009e94:	bcef883a 	add	r23,r23,r19
 1009e98:	a03fbe1e 	bne	r20,zero,1009d94 <__sfvwrite_r+0x118>
 1009e9c:	adc00017 	ldw	r23,0(r21)
 1009ea0:	ad000117 	ldw	r20,4(r21)
 1009ea4:	ad400204 	addi	r21,r21,8
 1009ea8:	003fb906 	br	1009d90 <__sfvwrite_r+0x114>
 1009eac:	ac400017 	ldw	r17,0(r21)
 1009eb0:	ac000117 	ldw	r16,4(r21)
 1009eb4:	ad400204 	addi	r21,r21,8
 1009eb8:	003f8a06 	br	1009ce4 <__sfvwrite_r+0x68>
 1009ebc:	91400417 	ldw	r5,16(r18)
 1009ec0:	e009883a 	mov	r4,fp
 1009ec4:	10099680 	call	1009968 <_free_r>
 1009ec8:	00800304 	movi	r2,12
 1009ecc:	e0800015 	stw	r2,0(fp)
 1009ed0:	9080030b 	ldhu	r2,12(r18)
 1009ed4:	013fffc4 	movi	r4,-1
 1009ed8:	10801014 	ori	r2,r2,64
 1009edc:	9080030d 	sth	r2,12(r18)
 1009ee0:	003f9306 	br	1009d30 <__sfvwrite_r+0xb4>
 1009ee4:	0027883a 	mov	r19,zero
 1009ee8:	002f883a 	mov	r23,zero
 1009eec:	d8000015 	stw	zero,0(sp)
 1009ef0:	0029883a 	mov	r20,zero
 1009ef4:	98001e26 	beq	r19,zero,1009f70 <__sfvwrite_r+0x2f4>
 1009ef8:	d8c00017 	ldw	r3,0(sp)
 1009efc:	1804c03a 	cmpne	r2,r3,zero
 1009f00:	10005e26 	beq	r2,zero,100a07c <__sfvwrite_r+0x400>
 1009f04:	9821883a 	mov	r16,r19
 1009f08:	a4c0012e 	bgeu	r20,r19,1009f10 <__sfvwrite_r+0x294>
 1009f0c:	a021883a 	mov	r16,r20
 1009f10:	91000017 	ldw	r4,0(r18)
 1009f14:	90800417 	ldw	r2,16(r18)
 1009f18:	91800217 	ldw	r6,8(r18)
 1009f1c:	91c00517 	ldw	r7,20(r18)
 1009f20:	1100022e 	bgeu	r2,r4,1009f2c <__sfvwrite_r+0x2b0>
 1009f24:	31e3883a 	add	r17,r6,r7
 1009f28:	8c001616 	blt	r17,r16,1009f84 <__sfvwrite_r+0x308>
 1009f2c:	81c03816 	blt	r16,r7,100a010 <__sfvwrite_r+0x394>
 1009f30:	90c00917 	ldw	r3,36(r18)
 1009f34:	91400717 	ldw	r5,28(r18)
 1009f38:	e009883a 	mov	r4,fp
 1009f3c:	b80d883a 	mov	r6,r23
 1009f40:	183ee83a 	callr	r3
 1009f44:	1023883a 	mov	r17,r2
 1009f48:	00bfe10e 	bge	zero,r2,1009ed0 <__sfvwrite_r+0x254>
 1009f4c:	a469c83a 	sub	r20,r20,r17
 1009f50:	a0001826 	beq	r20,zero,1009fb4 <__sfvwrite_r+0x338>
 1009f54:	b0800217 	ldw	r2,8(r22)
 1009f58:	1445c83a 	sub	r2,r2,r17
 1009f5c:	b0800215 	stw	r2,8(r22)
 1009f60:	103f7226 	beq	r2,zero,1009d2c <__sfvwrite_r+0xb0>
 1009f64:	9c67c83a 	sub	r19,r19,r17
 1009f68:	bc6f883a 	add	r23,r23,r17
 1009f6c:	983fe21e 	bne	r19,zero,1009ef8 <__sfvwrite_r+0x27c>
 1009f70:	adc00017 	ldw	r23,0(r21)
 1009f74:	acc00117 	ldw	r19,4(r21)
 1009f78:	ad400204 	addi	r21,r21,8
 1009f7c:	d8000015 	stw	zero,0(sp)
 1009f80:	003fdc06 	br	1009ef4 <__sfvwrite_r+0x278>
 1009f84:	b80b883a 	mov	r5,r23
 1009f88:	880d883a 	mov	r6,r17
 1009f8c:	100a6740 	call	100a674 <memmove>
 1009f90:	90c00017 	ldw	r3,0(r18)
 1009f94:	e009883a 	mov	r4,fp
 1009f98:	900b883a 	mov	r5,r18
 1009f9c:	1c47883a 	add	r3,r3,r17
 1009fa0:	90c00015 	stw	r3,0(r18)
 1009fa4:	10093180 	call	1009318 <_fflush_r>
 1009fa8:	103fc91e 	bne	r2,zero,1009ed0 <__sfvwrite_r+0x254>
 1009fac:	a469c83a 	sub	r20,r20,r17
 1009fb0:	a03fe81e 	bne	r20,zero,1009f54 <__sfvwrite_r+0x2d8>
 1009fb4:	e009883a 	mov	r4,fp
 1009fb8:	900b883a 	mov	r5,r18
 1009fbc:	10093180 	call	1009318 <_fflush_r>
 1009fc0:	103fc31e 	bne	r2,zero,1009ed0 <__sfvwrite_r+0x254>
 1009fc4:	d8000015 	stw	zero,0(sp)
 1009fc8:	003fe206 	br	1009f54 <__sfvwrite_r+0x2d8>
 1009fcc:	91000017 	ldw	r4,0(r18)
 1009fd0:	90800417 	ldw	r2,16(r18)
 1009fd4:	1100022e 	bgeu	r2,r4,1009fe0 <__sfvwrite_r+0x364>
 1009fd8:	8023883a 	mov	r17,r16
 1009fdc:	85003136 	bltu	r16,r20,100a0a4 <__sfvwrite_r+0x428>
 1009fe0:	91c00517 	ldw	r7,20(r18)
 1009fe4:	a1c01836 	bltu	r20,r7,100a048 <__sfvwrite_r+0x3cc>
 1009fe8:	90c00917 	ldw	r3,36(r18)
 1009fec:	91400717 	ldw	r5,28(r18)
 1009ff0:	e009883a 	mov	r4,fp
 1009ff4:	b80d883a 	mov	r6,r23
 1009ff8:	183ee83a 	callr	r3
 1009ffc:	1021883a 	mov	r16,r2
 100a000:	00bfb30e 	bge	zero,r2,1009ed0 <__sfvwrite_r+0x254>
 100a004:	1023883a 	mov	r17,r2
 100a008:	1027883a 	mov	r19,r2
 100a00c:	003f9b06 	br	1009e7c <__sfvwrite_r+0x200>
 100a010:	b80b883a 	mov	r5,r23
 100a014:	800d883a 	mov	r6,r16
 100a018:	100a6740 	call	100a674 <memmove>
 100a01c:	90c00217 	ldw	r3,8(r18)
 100a020:	90800017 	ldw	r2,0(r18)
 100a024:	8023883a 	mov	r17,r16
 100a028:	1c07c83a 	sub	r3,r3,r16
 100a02c:	1405883a 	add	r2,r2,r16
 100a030:	90c00215 	stw	r3,8(r18)
 100a034:	90800015 	stw	r2,0(r18)
 100a038:	003fc406 	br	1009f4c <__sfvwrite_r+0x2d0>
 100a03c:	a00d883a 	mov	r6,r20
 100a040:	a021883a 	mov	r16,r20
 100a044:	003f8106 	br	1009e4c <__sfvwrite_r+0x1d0>
 100a048:	b80b883a 	mov	r5,r23
 100a04c:	a00d883a 	mov	r6,r20
 100a050:	100a6740 	call	100a674 <memmove>
 100a054:	90c00217 	ldw	r3,8(r18)
 100a058:	90800017 	ldw	r2,0(r18)
 100a05c:	a021883a 	mov	r16,r20
 100a060:	1d07c83a 	sub	r3,r3,r20
 100a064:	1505883a 	add	r2,r2,r20
 100a068:	a023883a 	mov	r17,r20
 100a06c:	a027883a 	mov	r19,r20
 100a070:	90c00215 	stw	r3,8(r18)
 100a074:	90800015 	stw	r2,0(r18)
 100a078:	003f8006 	br	1009e7c <__sfvwrite_r+0x200>
 100a07c:	b809883a 	mov	r4,r23
 100a080:	01400284 	movi	r5,10
 100a084:	980d883a 	mov	r6,r19
 100a088:	100a4f00 	call	100a4f0 <memchr>
 100a08c:	10001726 	beq	r2,zero,100a0ec <__sfvwrite_r+0x470>
 100a090:	15c5c83a 	sub	r2,r2,r23
 100a094:	15000044 	addi	r20,r2,1
 100a098:	00800044 	movi	r2,1
 100a09c:	d8800015 	stw	r2,0(sp)
 100a0a0:	003f9806 	br	1009f04 <__sfvwrite_r+0x288>
 100a0a4:	b80b883a 	mov	r5,r23
 100a0a8:	800d883a 	mov	r6,r16
 100a0ac:	100a6740 	call	100a674 <memmove>
 100a0b0:	90c00017 	ldw	r3,0(r18)
 100a0b4:	e009883a 	mov	r4,fp
 100a0b8:	900b883a 	mov	r5,r18
 100a0bc:	1c07883a 	add	r3,r3,r16
 100a0c0:	90c00015 	stw	r3,0(r18)
 100a0c4:	8027883a 	mov	r19,r16
 100a0c8:	10093180 	call	1009318 <_fflush_r>
 100a0cc:	103f6b26 	beq	r2,zero,1009e7c <__sfvwrite_r+0x200>
 100a0d0:	003f7f06 	br	1009ed0 <__sfvwrite_r+0x254>
 100a0d4:	400b883a 	mov	r5,r8
 100a0d8:	e009883a 	mov	r4,fp
 100a0dc:	100b8780 	call	100b878 <_realloc_r>
 100a0e0:	103f7626 	beq	r2,zero,1009ebc <__sfvwrite_r+0x240>
 100a0e4:	1023883a 	mov	r17,r2
 100a0e8:	003f5006 	br	1009e2c <__sfvwrite_r+0x1b0>
 100a0ec:	00c00044 	movi	r3,1
 100a0f0:	9d000044 	addi	r20,r19,1
 100a0f4:	d8c00015 	stw	r3,0(sp)
 100a0f8:	003f8206 	br	1009f04 <__sfvwrite_r+0x288>
 100a0fc:	9080030b 	ldhu	r2,12(r18)
 100a100:	00c00244 	movi	r3,9
 100a104:	013fffc4 	movi	r4,-1
 100a108:	10801014 	ori	r2,r2,64
 100a10c:	9080030d 	sth	r2,12(r18)
 100a110:	e0c00015 	stw	r3,0(fp)
 100a114:	003f0606 	br	1009d30 <__sfvwrite_r+0xb4>

0100a118 <_fwalk_reent>:
 100a118:	defff704 	addi	sp,sp,-36
 100a11c:	dcc00315 	stw	r19,12(sp)
 100a120:	24c0b804 	addi	r19,r4,736
 100a124:	dd800615 	stw	r22,24(sp)
 100a128:	dd400515 	stw	r21,20(sp)
 100a12c:	dfc00815 	stw	ra,32(sp)
 100a130:	ddc00715 	stw	r23,28(sp)
 100a134:	dd000415 	stw	r20,16(sp)
 100a138:	dc800215 	stw	r18,8(sp)
 100a13c:	dc400115 	stw	r17,4(sp)
 100a140:	dc000015 	stw	r16,0(sp)
 100a144:	202b883a 	mov	r21,r4
 100a148:	282d883a 	mov	r22,r5
 100a14c:	10095a00 	call	10095a0 <__sfp_lock_acquire>
 100a150:	98002126 	beq	r19,zero,100a1d8 <_fwalk_reent+0xc0>
 100a154:	002f883a 	mov	r23,zero
 100a158:	9c800117 	ldw	r18,4(r19)
 100a15c:	9c000217 	ldw	r16,8(r19)
 100a160:	90bfffc4 	addi	r2,r18,-1
 100a164:	10000d16 	blt	r2,zero,100a19c <_fwalk_reent+0x84>
 100a168:	0023883a 	mov	r17,zero
 100a16c:	053fffc4 	movi	r20,-1
 100a170:	8080030f 	ldh	r2,12(r16)
 100a174:	8c400044 	addi	r17,r17,1
 100a178:	10000626 	beq	r2,zero,100a194 <_fwalk_reent+0x7c>
 100a17c:	8080038f 	ldh	r2,14(r16)
 100a180:	800b883a 	mov	r5,r16
 100a184:	a809883a 	mov	r4,r21
 100a188:	15000226 	beq	r2,r20,100a194 <_fwalk_reent+0x7c>
 100a18c:	b03ee83a 	callr	r22
 100a190:	b8aeb03a 	or	r23,r23,r2
 100a194:	84001704 	addi	r16,r16,92
 100a198:	947ff51e 	bne	r18,r17,100a170 <_fwalk_reent+0x58>
 100a19c:	9cc00017 	ldw	r19,0(r19)
 100a1a0:	983fed1e 	bne	r19,zero,100a158 <_fwalk_reent+0x40>
 100a1a4:	10095a40 	call	10095a4 <__sfp_lock_release>
 100a1a8:	b805883a 	mov	r2,r23
 100a1ac:	dfc00817 	ldw	ra,32(sp)
 100a1b0:	ddc00717 	ldw	r23,28(sp)
 100a1b4:	dd800617 	ldw	r22,24(sp)
 100a1b8:	dd400517 	ldw	r21,20(sp)
 100a1bc:	dd000417 	ldw	r20,16(sp)
 100a1c0:	dcc00317 	ldw	r19,12(sp)
 100a1c4:	dc800217 	ldw	r18,8(sp)
 100a1c8:	dc400117 	ldw	r17,4(sp)
 100a1cc:	dc000017 	ldw	r16,0(sp)
 100a1d0:	dec00904 	addi	sp,sp,36
 100a1d4:	f800283a 	ret
 100a1d8:	002f883a 	mov	r23,zero
 100a1dc:	003ff106 	br	100a1a4 <_fwalk_reent+0x8c>

0100a1e0 <_fwalk>:
 100a1e0:	defff804 	addi	sp,sp,-32
 100a1e4:	dcc00315 	stw	r19,12(sp)
 100a1e8:	24c0b804 	addi	r19,r4,736
 100a1ec:	dd400515 	stw	r21,20(sp)
 100a1f0:	dfc00715 	stw	ra,28(sp)
 100a1f4:	dd800615 	stw	r22,24(sp)
 100a1f8:	dd000415 	stw	r20,16(sp)
 100a1fc:	dc800215 	stw	r18,8(sp)
 100a200:	dc400115 	stw	r17,4(sp)
 100a204:	dc000015 	stw	r16,0(sp)
 100a208:	282b883a 	mov	r21,r5
 100a20c:	10095a00 	call	10095a0 <__sfp_lock_acquire>
 100a210:	98001f26 	beq	r19,zero,100a290 <_fwalk+0xb0>
 100a214:	002d883a 	mov	r22,zero
 100a218:	9c800117 	ldw	r18,4(r19)
 100a21c:	9c000217 	ldw	r16,8(r19)
 100a220:	90bfffc4 	addi	r2,r18,-1
 100a224:	10000c16 	blt	r2,zero,100a258 <_fwalk+0x78>
 100a228:	0023883a 	mov	r17,zero
 100a22c:	053fffc4 	movi	r20,-1
 100a230:	8080030f 	ldh	r2,12(r16)
 100a234:	8c400044 	addi	r17,r17,1
 100a238:	10000526 	beq	r2,zero,100a250 <_fwalk+0x70>
 100a23c:	8080038f 	ldh	r2,14(r16)
 100a240:	8009883a 	mov	r4,r16
 100a244:	15000226 	beq	r2,r20,100a250 <_fwalk+0x70>
 100a248:	a83ee83a 	callr	r21
 100a24c:	b0acb03a 	or	r22,r22,r2
 100a250:	84001704 	addi	r16,r16,92
 100a254:	947ff61e 	bne	r18,r17,100a230 <_fwalk+0x50>
 100a258:	9cc00017 	ldw	r19,0(r19)
 100a25c:	983fee1e 	bne	r19,zero,100a218 <_fwalk+0x38>
 100a260:	10095a40 	call	10095a4 <__sfp_lock_release>
 100a264:	b005883a 	mov	r2,r22
 100a268:	dfc00717 	ldw	ra,28(sp)
 100a26c:	dd800617 	ldw	r22,24(sp)
 100a270:	dd400517 	ldw	r21,20(sp)
 100a274:	dd000417 	ldw	r20,16(sp)
 100a278:	dcc00317 	ldw	r19,12(sp)
 100a27c:	dc800217 	ldw	r18,8(sp)
 100a280:	dc400117 	ldw	r17,4(sp)
 100a284:	dc000017 	ldw	r16,0(sp)
 100a288:	dec00804 	addi	sp,sp,32
 100a28c:	f800283a 	ret
 100a290:	002d883a 	mov	r22,zero
 100a294:	003ff206 	br	100a260 <_fwalk+0x80>

0100a298 <__locale_charset>:
 100a298:	d0a00517 	ldw	r2,-32748(gp)
 100a29c:	f800283a 	ret

0100a2a0 <_localeconv_r>:
 100a2a0:	00804074 	movhi	r2,257
 100a2a4:	108a1c04 	addi	r2,r2,10352
 100a2a8:	f800283a 	ret

0100a2ac <localeconv>:
 100a2ac:	00804074 	movhi	r2,257
 100a2b0:	10915704 	addi	r2,r2,17756
 100a2b4:	11000017 	ldw	r4,0(r2)
 100a2b8:	100a2a01 	jmpi	100a2a0 <_localeconv_r>

0100a2bc <_setlocale_r>:
 100a2bc:	defffc04 	addi	sp,sp,-16
 100a2c0:	00c04074 	movhi	r3,257
 100a2c4:	18ca1704 	addi	r3,r3,10332
 100a2c8:	dc800215 	stw	r18,8(sp)
 100a2cc:	dc400115 	stw	r17,4(sp)
 100a2d0:	dc000015 	stw	r16,0(sp)
 100a2d4:	2023883a 	mov	r17,r4
 100a2d8:	2825883a 	mov	r18,r5
 100a2dc:	dfc00315 	stw	ra,12(sp)
 100a2e0:	3021883a 	mov	r16,r6
 100a2e4:	3009883a 	mov	r4,r6
 100a2e8:	180b883a 	mov	r5,r3
 100a2ec:	30000926 	beq	r6,zero,100a314 <_setlocale_r+0x58>
 100a2f0:	100c0280 	call	100c028 <strcmp>
 100a2f4:	8009883a 	mov	r4,r16
 100a2f8:	01404074 	movhi	r5,257
 100a2fc:	294a0204 	addi	r5,r5,10248
 100a300:	10000b1e 	bne	r2,zero,100a330 <_setlocale_r+0x74>
 100a304:	8c000d15 	stw	r16,52(r17)
 100a308:	8c800c15 	stw	r18,48(r17)
 100a30c:	00c04074 	movhi	r3,257
 100a310:	18ca1704 	addi	r3,r3,10332
 100a314:	1805883a 	mov	r2,r3
 100a318:	dfc00317 	ldw	ra,12(sp)
 100a31c:	dc800217 	ldw	r18,8(sp)
 100a320:	dc400117 	ldw	r17,4(sp)
 100a324:	dc000017 	ldw	r16,0(sp)
 100a328:	dec00404 	addi	sp,sp,16
 100a32c:	f800283a 	ret
 100a330:	100c0280 	call	100c028 <strcmp>
 100a334:	0007883a 	mov	r3,zero
 100a338:	103ff226 	beq	r2,zero,100a304 <_setlocale_r+0x48>
 100a33c:	003ff506 	br	100a314 <_setlocale_r+0x58>

0100a340 <setlocale>:
 100a340:	01804074 	movhi	r6,257
 100a344:	31915704 	addi	r6,r6,17756
 100a348:	2007883a 	mov	r3,r4
 100a34c:	31000017 	ldw	r4,0(r6)
 100a350:	280d883a 	mov	r6,r5
 100a354:	180b883a 	mov	r5,r3
 100a358:	100a2bc1 	jmpi	100a2bc <_setlocale_r>

0100a35c <__smakebuf_r>:
 100a35c:	2880030b 	ldhu	r2,12(r5)
 100a360:	deffed04 	addi	sp,sp,-76
 100a364:	dc401015 	stw	r17,64(sp)
 100a368:	1080008c 	andi	r2,r2,2
 100a36c:	dc000f15 	stw	r16,60(sp)
 100a370:	dfc01215 	stw	ra,72(sp)
 100a374:	dc801115 	stw	r18,68(sp)
 100a378:	2821883a 	mov	r16,r5
 100a37c:	2023883a 	mov	r17,r4
 100a380:	10000b26 	beq	r2,zero,100a3b0 <__smakebuf_r+0x54>
 100a384:	28c010c4 	addi	r3,r5,67
 100a388:	00800044 	movi	r2,1
 100a38c:	28800515 	stw	r2,20(r5)
 100a390:	28c00415 	stw	r3,16(r5)
 100a394:	28c00015 	stw	r3,0(r5)
 100a398:	dfc01217 	ldw	ra,72(sp)
 100a39c:	dc801117 	ldw	r18,68(sp)
 100a3a0:	dc401017 	ldw	r17,64(sp)
 100a3a4:	dc000f17 	ldw	r16,60(sp)
 100a3a8:	dec01304 	addi	sp,sp,76
 100a3ac:	f800283a 	ret
 100a3b0:	2940038f 	ldh	r5,14(r5)
 100a3b4:	28002116 	blt	r5,zero,100a43c <__smakebuf_r+0xe0>
 100a3b8:	d80d883a 	mov	r6,sp
 100a3bc:	100c3b80 	call	100c3b8 <_fstat_r>
 100a3c0:	10001e16 	blt	r2,zero,100a43c <__smakebuf_r+0xe0>
 100a3c4:	d8800117 	ldw	r2,4(sp)
 100a3c8:	00e00014 	movui	r3,32768
 100a3cc:	113c000c 	andi	r4,r2,61440
 100a3d0:	20c03126 	beq	r4,r3,100a498 <__smakebuf_r+0x13c>
 100a3d4:	8080030b 	ldhu	r2,12(r16)
 100a3d8:	00c80004 	movi	r3,8192
 100a3dc:	10820014 	ori	r2,r2,2048
 100a3e0:	8080030d 	sth	r2,12(r16)
 100a3e4:	20c01e26 	beq	r4,r3,100a460 <__smakebuf_r+0x104>
 100a3e8:	04810004 	movi	r18,1024
 100a3ec:	8809883a 	mov	r4,r17
 100a3f0:	900b883a 	mov	r5,r18
 100a3f4:	10051540 	call	1005154 <_malloc_r>
 100a3f8:	1009883a 	mov	r4,r2
 100a3fc:	10003126 	beq	r2,zero,100a4c4 <__smakebuf_r+0x168>
 100a400:	80c0030b 	ldhu	r3,12(r16)
 100a404:	00804074 	movhi	r2,257
 100a408:	10a5a504 	addi	r2,r2,-26988
 100a40c:	88800f15 	stw	r2,60(r17)
 100a410:	18c02014 	ori	r3,r3,128
 100a414:	84800515 	stw	r18,20(r16)
 100a418:	80c0030d 	sth	r3,12(r16)
 100a41c:	81000415 	stw	r4,16(r16)
 100a420:	81000015 	stw	r4,0(r16)
 100a424:	dfc01217 	ldw	ra,72(sp)
 100a428:	dc801117 	ldw	r18,68(sp)
 100a42c:	dc401017 	ldw	r17,64(sp)
 100a430:	dc000f17 	ldw	r16,60(sp)
 100a434:	dec01304 	addi	sp,sp,76
 100a438:	f800283a 	ret
 100a43c:	80c0030b 	ldhu	r3,12(r16)
 100a440:	1880200c 	andi	r2,r3,128
 100a444:	10000426 	beq	r2,zero,100a458 <__smakebuf_r+0xfc>
 100a448:	04801004 	movi	r18,64
 100a44c:	18820014 	ori	r2,r3,2048
 100a450:	8080030d 	sth	r2,12(r16)
 100a454:	003fe506 	br	100a3ec <__smakebuf_r+0x90>
 100a458:	04810004 	movi	r18,1024
 100a45c:	003ffb06 	br	100a44c <__smakebuf_r+0xf0>
 100a460:	8140038f 	ldh	r5,14(r16)
 100a464:	8809883a 	mov	r4,r17
 100a468:	100c42c0 	call	100c42c <_isatty_r>
 100a46c:	103fde26 	beq	r2,zero,100a3e8 <__smakebuf_r+0x8c>
 100a470:	8080030b 	ldhu	r2,12(r16)
 100a474:	80c010c4 	addi	r3,r16,67
 100a478:	04810004 	movi	r18,1024
 100a47c:	10800054 	ori	r2,r2,1
 100a480:	8080030d 	sth	r2,12(r16)
 100a484:	00800044 	movi	r2,1
 100a488:	80c00415 	stw	r3,16(r16)
 100a48c:	80800515 	stw	r2,20(r16)
 100a490:	80c00015 	stw	r3,0(r16)
 100a494:	003fd506 	br	100a3ec <__smakebuf_r+0x90>
 100a498:	80c00a17 	ldw	r3,40(r16)
 100a49c:	00804074 	movhi	r2,257
 100a4a0:	10afb904 	addi	r2,r2,-16668
 100a4a4:	18bfcb1e 	bne	r3,r2,100a3d4 <__smakebuf_r+0x78>
 100a4a8:	8080030b 	ldhu	r2,12(r16)
 100a4ac:	00c10004 	movi	r3,1024
 100a4b0:	1825883a 	mov	r18,r3
 100a4b4:	10c4b03a 	or	r2,r2,r3
 100a4b8:	8080030d 	sth	r2,12(r16)
 100a4bc:	80c01315 	stw	r3,76(r16)
 100a4c0:	003fca06 	br	100a3ec <__smakebuf_r+0x90>
 100a4c4:	8100030b 	ldhu	r4,12(r16)
 100a4c8:	2080800c 	andi	r2,r4,512
 100a4cc:	103fb21e 	bne	r2,zero,100a398 <__smakebuf_r+0x3c>
 100a4d0:	80c010c4 	addi	r3,r16,67
 100a4d4:	21000094 	ori	r4,r4,2
 100a4d8:	00800044 	movi	r2,1
 100a4dc:	80800515 	stw	r2,20(r16)
 100a4e0:	8100030d 	sth	r4,12(r16)
 100a4e4:	80c00415 	stw	r3,16(r16)
 100a4e8:	80c00015 	stw	r3,0(r16)
 100a4ec:	003faa06 	br	100a398 <__smakebuf_r+0x3c>

0100a4f0 <memchr>:
 100a4f0:	008000c4 	movi	r2,3
 100a4f4:	29403fcc 	andi	r5,r5,255
 100a4f8:	2007883a 	mov	r3,r4
 100a4fc:	1180022e 	bgeu	r2,r6,100a508 <memchr+0x18>
 100a500:	2084703a 	and	r2,r4,r2
 100a504:	10000b26 	beq	r2,zero,100a534 <memchr+0x44>
 100a508:	313fffc4 	addi	r4,r6,-1
 100a50c:	3000051e 	bne	r6,zero,100a524 <memchr+0x34>
 100a510:	00002c06 	br	100a5c4 <memchr+0xd4>
 100a514:	213fffc4 	addi	r4,r4,-1
 100a518:	00bfffc4 	movi	r2,-1
 100a51c:	18c00044 	addi	r3,r3,1
 100a520:	20802826 	beq	r4,r2,100a5c4 <memchr+0xd4>
 100a524:	18800003 	ldbu	r2,0(r3)
 100a528:	28bffa1e 	bne	r5,r2,100a514 <memchr+0x24>
 100a52c:	1805883a 	mov	r2,r3
 100a530:	f800283a 	ret
 100a534:	0011883a 	mov	r8,zero
 100a538:	0007883a 	mov	r3,zero
 100a53c:	01c00104 	movi	r7,4
 100a540:	4004923a 	slli	r2,r8,8
 100a544:	18c00044 	addi	r3,r3,1
 100a548:	1151883a 	add	r8,r2,r5
 100a54c:	19fffc1e 	bne	r3,r7,100a540 <memchr+0x50>
 100a550:	02bfbff4 	movhi	r10,65279
 100a554:	52bfbfc4 	addi	r10,r10,-257
 100a558:	02602074 	movhi	r9,32897
 100a55c:	4a602004 	addi	r9,r9,-32640
 100a560:	02c000c4 	movi	r11,3
 100a564:	20800017 	ldw	r2,0(r4)
 100a568:	31bfff04 	addi	r6,r6,-4
 100a56c:	200f883a 	mov	r7,r4
 100a570:	1204f03a 	xor	r2,r2,r8
 100a574:	1287883a 	add	r3,r2,r10
 100a578:	1a46703a 	and	r3,r3,r9
 100a57c:	0084303a 	nor	r2,zero,r2
 100a580:	10c4703a 	and	r2,r2,r3
 100a584:	10000b26 	beq	r2,zero,100a5b4 <memchr+0xc4>
 100a588:	20800003 	ldbu	r2,0(r4)
 100a58c:	28800f26 	beq	r5,r2,100a5cc <memchr+0xdc>
 100a590:	20800043 	ldbu	r2,1(r4)
 100a594:	21c00044 	addi	r7,r4,1
 100a598:	28800c26 	beq	r5,r2,100a5cc <memchr+0xdc>
 100a59c:	20800083 	ldbu	r2,2(r4)
 100a5a0:	21c00084 	addi	r7,r4,2
 100a5a4:	28800926 	beq	r5,r2,100a5cc <memchr+0xdc>
 100a5a8:	208000c3 	ldbu	r2,3(r4)
 100a5ac:	21c000c4 	addi	r7,r4,3
 100a5b0:	28800626 	beq	r5,r2,100a5cc <memchr+0xdc>
 100a5b4:	21000104 	addi	r4,r4,4
 100a5b8:	59bfea36 	bltu	r11,r6,100a564 <memchr+0x74>
 100a5bc:	2007883a 	mov	r3,r4
 100a5c0:	003fd106 	br	100a508 <memchr+0x18>
 100a5c4:	0005883a 	mov	r2,zero
 100a5c8:	f800283a 	ret
 100a5cc:	3805883a 	mov	r2,r7
 100a5d0:	f800283a 	ret

0100a5d4 <memcpy>:
 100a5d4:	01c003c4 	movi	r7,15
 100a5d8:	2007883a 	mov	r3,r4
 100a5dc:	3980032e 	bgeu	r7,r6,100a5ec <memcpy+0x18>
 100a5e0:	2904b03a 	or	r2,r5,r4
 100a5e4:	108000cc 	andi	r2,r2,3
 100a5e8:	10000926 	beq	r2,zero,100a610 <memcpy+0x3c>
 100a5ec:	30000626 	beq	r6,zero,100a608 <memcpy+0x34>
 100a5f0:	30cd883a 	add	r6,r6,r3
 100a5f4:	28800003 	ldbu	r2,0(r5)
 100a5f8:	29400044 	addi	r5,r5,1
 100a5fc:	18800005 	stb	r2,0(r3)
 100a600:	18c00044 	addi	r3,r3,1
 100a604:	30fffb1e 	bne	r6,r3,100a5f4 <memcpy+0x20>
 100a608:	2005883a 	mov	r2,r4
 100a60c:	f800283a 	ret
 100a610:	3811883a 	mov	r8,r7
 100a614:	200f883a 	mov	r7,r4
 100a618:	28c00017 	ldw	r3,0(r5)
 100a61c:	31bffc04 	addi	r6,r6,-16
 100a620:	38c00015 	stw	r3,0(r7)
 100a624:	28800117 	ldw	r2,4(r5)
 100a628:	38800115 	stw	r2,4(r7)
 100a62c:	28c00217 	ldw	r3,8(r5)
 100a630:	38c00215 	stw	r3,8(r7)
 100a634:	28800317 	ldw	r2,12(r5)
 100a638:	29400404 	addi	r5,r5,16
 100a63c:	38800315 	stw	r2,12(r7)
 100a640:	39c00404 	addi	r7,r7,16
 100a644:	41bff436 	bltu	r8,r6,100a618 <memcpy+0x44>
 100a648:	008000c4 	movi	r2,3
 100a64c:	1180072e 	bgeu	r2,r6,100a66c <memcpy+0x98>
 100a650:	1007883a 	mov	r3,r2
 100a654:	28800017 	ldw	r2,0(r5)
 100a658:	31bfff04 	addi	r6,r6,-4
 100a65c:	29400104 	addi	r5,r5,4
 100a660:	38800015 	stw	r2,0(r7)
 100a664:	39c00104 	addi	r7,r7,4
 100a668:	19bffa36 	bltu	r3,r6,100a654 <memcpy+0x80>
 100a66c:	3807883a 	mov	r3,r7
 100a670:	003fde06 	br	100a5ec <memcpy+0x18>

0100a674 <memmove>:
 100a674:	2807883a 	mov	r3,r5
 100a678:	2011883a 	mov	r8,r4
 100a67c:	29000c2e 	bgeu	r5,r4,100a6b0 <memmove+0x3c>
 100a680:	298f883a 	add	r7,r5,r6
 100a684:	21c00a2e 	bgeu	r4,r7,100a6b0 <memmove+0x3c>
 100a688:	30000726 	beq	r6,zero,100a6a8 <memmove+0x34>
 100a68c:	2187883a 	add	r3,r4,r6
 100a690:	198dc83a 	sub	r6,r3,r6
 100a694:	39ffffc4 	addi	r7,r7,-1
 100a698:	38800003 	ldbu	r2,0(r7)
 100a69c:	18ffffc4 	addi	r3,r3,-1
 100a6a0:	18800005 	stb	r2,0(r3)
 100a6a4:	19bffb1e 	bne	r3,r6,100a694 <memmove+0x20>
 100a6a8:	2005883a 	mov	r2,r4
 100a6ac:	f800283a 	ret
 100a6b0:	01c003c4 	movi	r7,15
 100a6b4:	39800a36 	bltu	r7,r6,100a6e0 <memmove+0x6c>
 100a6b8:	303ffb26 	beq	r6,zero,100a6a8 <memmove+0x34>
 100a6bc:	400f883a 	mov	r7,r8
 100a6c0:	320d883a 	add	r6,r6,r8
 100a6c4:	28800003 	ldbu	r2,0(r5)
 100a6c8:	29400044 	addi	r5,r5,1
 100a6cc:	38800005 	stb	r2,0(r7)
 100a6d0:	39c00044 	addi	r7,r7,1
 100a6d4:	39bffb1e 	bne	r7,r6,100a6c4 <memmove+0x50>
 100a6d8:	2005883a 	mov	r2,r4
 100a6dc:	f800283a 	ret
 100a6e0:	1904b03a 	or	r2,r3,r4
 100a6e4:	108000cc 	andi	r2,r2,3
 100a6e8:	103ff31e 	bne	r2,zero,100a6b8 <memmove+0x44>
 100a6ec:	3811883a 	mov	r8,r7
 100a6f0:	180b883a 	mov	r5,r3
 100a6f4:	200f883a 	mov	r7,r4
 100a6f8:	28c00017 	ldw	r3,0(r5)
 100a6fc:	31bffc04 	addi	r6,r6,-16
 100a700:	38c00015 	stw	r3,0(r7)
 100a704:	28800117 	ldw	r2,4(r5)
 100a708:	38800115 	stw	r2,4(r7)
 100a70c:	28c00217 	ldw	r3,8(r5)
 100a710:	38c00215 	stw	r3,8(r7)
 100a714:	28800317 	ldw	r2,12(r5)
 100a718:	29400404 	addi	r5,r5,16
 100a71c:	38800315 	stw	r2,12(r7)
 100a720:	39c00404 	addi	r7,r7,16
 100a724:	41bff436 	bltu	r8,r6,100a6f8 <memmove+0x84>
 100a728:	008000c4 	movi	r2,3
 100a72c:	1180072e 	bgeu	r2,r6,100a74c <memmove+0xd8>
 100a730:	1007883a 	mov	r3,r2
 100a734:	28800017 	ldw	r2,0(r5)
 100a738:	31bfff04 	addi	r6,r6,-4
 100a73c:	29400104 	addi	r5,r5,4
 100a740:	38800015 	stw	r2,0(r7)
 100a744:	39c00104 	addi	r7,r7,4
 100a748:	19bffa36 	bltu	r3,r6,100a734 <memmove+0xc0>
 100a74c:	3811883a 	mov	r8,r7
 100a750:	003fd906 	br	100a6b8 <memmove+0x44>

0100a754 <memset>:
 100a754:	008000c4 	movi	r2,3
 100a758:	29403fcc 	andi	r5,r5,255
 100a75c:	2007883a 	mov	r3,r4
 100a760:	1180022e 	bgeu	r2,r6,100a76c <memset+0x18>
 100a764:	2084703a 	and	r2,r4,r2
 100a768:	10000826 	beq	r2,zero,100a78c <memset+0x38>
 100a76c:	30000526 	beq	r6,zero,100a784 <memset+0x30>
 100a770:	2805883a 	mov	r2,r5
 100a774:	30cd883a 	add	r6,r6,r3
 100a778:	18800005 	stb	r2,0(r3)
 100a77c:	18c00044 	addi	r3,r3,1
 100a780:	19bffd1e 	bne	r3,r6,100a778 <memset+0x24>
 100a784:	2005883a 	mov	r2,r4
 100a788:	f800283a 	ret
 100a78c:	2804923a 	slli	r2,r5,8
 100a790:	020003c4 	movi	r8,15
 100a794:	200f883a 	mov	r7,r4
 100a798:	2884b03a 	or	r2,r5,r2
 100a79c:	1006943a 	slli	r3,r2,16
 100a7a0:	10c6b03a 	or	r3,r2,r3
 100a7a4:	41800a2e 	bgeu	r8,r6,100a7d0 <memset+0x7c>
 100a7a8:	4005883a 	mov	r2,r8
 100a7ac:	31bffc04 	addi	r6,r6,-16
 100a7b0:	38c00015 	stw	r3,0(r7)
 100a7b4:	38c00115 	stw	r3,4(r7)
 100a7b8:	38c00215 	stw	r3,8(r7)
 100a7bc:	38c00315 	stw	r3,12(r7)
 100a7c0:	39c00404 	addi	r7,r7,16
 100a7c4:	11bff936 	bltu	r2,r6,100a7ac <memset+0x58>
 100a7c8:	008000c4 	movi	r2,3
 100a7cc:	1180052e 	bgeu	r2,r6,100a7e4 <memset+0x90>
 100a7d0:	31bfff04 	addi	r6,r6,-4
 100a7d4:	008000c4 	movi	r2,3
 100a7d8:	38c00015 	stw	r3,0(r7)
 100a7dc:	39c00104 	addi	r7,r7,4
 100a7e0:	11bffb36 	bltu	r2,r6,100a7d0 <memset+0x7c>
 100a7e4:	3807883a 	mov	r3,r7
 100a7e8:	003fe006 	br	100a76c <memset+0x18>

0100a7ec <_Bfree>:
 100a7ec:	28000826 	beq	r5,zero,100a810 <_Bfree+0x24>
 100a7f0:	28800117 	ldw	r2,4(r5)
 100a7f4:	21001317 	ldw	r4,76(r4)
 100a7f8:	1085883a 	add	r2,r2,r2
 100a7fc:	1085883a 	add	r2,r2,r2
 100a800:	1105883a 	add	r2,r2,r4
 100a804:	10c00017 	ldw	r3,0(r2)
 100a808:	28c00015 	stw	r3,0(r5)
 100a80c:	11400015 	stw	r5,0(r2)
 100a810:	f800283a 	ret

0100a814 <__hi0bits>:
 100a814:	20bfffec 	andhi	r2,r4,65535
 100a818:	10001426 	beq	r2,zero,100a86c <__hi0bits+0x58>
 100a81c:	0007883a 	mov	r3,zero
 100a820:	20bfc02c 	andhi	r2,r4,65280
 100a824:	1000021e 	bne	r2,zero,100a830 <__hi0bits+0x1c>
 100a828:	2008923a 	slli	r4,r4,8
 100a82c:	18c00204 	addi	r3,r3,8
 100a830:	20bc002c 	andhi	r2,r4,61440
 100a834:	1000021e 	bne	r2,zero,100a840 <__hi0bits+0x2c>
 100a838:	2008913a 	slli	r4,r4,4
 100a83c:	18c00104 	addi	r3,r3,4
 100a840:	20b0002c 	andhi	r2,r4,49152
 100a844:	1000031e 	bne	r2,zero,100a854 <__hi0bits+0x40>
 100a848:	2105883a 	add	r2,r4,r4
 100a84c:	18c00084 	addi	r3,r3,2
 100a850:	1089883a 	add	r4,r2,r2
 100a854:	20000316 	blt	r4,zero,100a864 <__hi0bits+0x50>
 100a858:	2090002c 	andhi	r2,r4,16384
 100a85c:	10000626 	beq	r2,zero,100a878 <__hi0bits+0x64>
 100a860:	18c00044 	addi	r3,r3,1
 100a864:	1805883a 	mov	r2,r3
 100a868:	f800283a 	ret
 100a86c:	2008943a 	slli	r4,r4,16
 100a870:	00c00404 	movi	r3,16
 100a874:	003fea06 	br	100a820 <__hi0bits+0xc>
 100a878:	00c00804 	movi	r3,32
 100a87c:	1805883a 	mov	r2,r3
 100a880:	f800283a 	ret

0100a884 <__lo0bits>:
 100a884:	20c00017 	ldw	r3,0(r4)
 100a888:	188001cc 	andi	r2,r3,7
 100a88c:	10000a26 	beq	r2,zero,100a8b8 <__lo0bits+0x34>
 100a890:	1880004c 	andi	r2,r3,1
 100a894:	1005003a 	cmpeq	r2,r2,zero
 100a898:	10002126 	beq	r2,zero,100a920 <__lo0bits+0x9c>
 100a89c:	1880008c 	andi	r2,r3,2
 100a8a0:	1000251e 	bne	r2,zero,100a938 <__lo0bits+0xb4>
 100a8a4:	1804d0ba 	srli	r2,r3,2
 100a8a8:	01400084 	movi	r5,2
 100a8ac:	20800015 	stw	r2,0(r4)
 100a8b0:	2805883a 	mov	r2,r5
 100a8b4:	f800283a 	ret
 100a8b8:	18bfffcc 	andi	r2,r3,65535
 100a8bc:	10001526 	beq	r2,zero,100a914 <__lo0bits+0x90>
 100a8c0:	000b883a 	mov	r5,zero
 100a8c4:	18803fcc 	andi	r2,r3,255
 100a8c8:	1000021e 	bne	r2,zero,100a8d4 <__lo0bits+0x50>
 100a8cc:	1806d23a 	srli	r3,r3,8
 100a8d0:	29400204 	addi	r5,r5,8
 100a8d4:	188003cc 	andi	r2,r3,15
 100a8d8:	1000021e 	bne	r2,zero,100a8e4 <__lo0bits+0x60>
 100a8dc:	1806d13a 	srli	r3,r3,4
 100a8e0:	29400104 	addi	r5,r5,4
 100a8e4:	188000cc 	andi	r2,r3,3
 100a8e8:	1000021e 	bne	r2,zero,100a8f4 <__lo0bits+0x70>
 100a8ec:	1806d0ba 	srli	r3,r3,2
 100a8f0:	29400084 	addi	r5,r5,2
 100a8f4:	1880004c 	andi	r2,r3,1
 100a8f8:	1000031e 	bne	r2,zero,100a908 <__lo0bits+0x84>
 100a8fc:	1806d07a 	srli	r3,r3,1
 100a900:	18000a26 	beq	r3,zero,100a92c <__lo0bits+0xa8>
 100a904:	29400044 	addi	r5,r5,1
 100a908:	2805883a 	mov	r2,r5
 100a90c:	20c00015 	stw	r3,0(r4)
 100a910:	f800283a 	ret
 100a914:	1806d43a 	srli	r3,r3,16
 100a918:	01400404 	movi	r5,16
 100a91c:	003fe906 	br	100a8c4 <__lo0bits+0x40>
 100a920:	000b883a 	mov	r5,zero
 100a924:	2805883a 	mov	r2,r5
 100a928:	f800283a 	ret
 100a92c:	01400804 	movi	r5,32
 100a930:	2805883a 	mov	r2,r5
 100a934:	f800283a 	ret
 100a938:	1804d07a 	srli	r2,r3,1
 100a93c:	01400044 	movi	r5,1
 100a940:	20800015 	stw	r2,0(r4)
 100a944:	003fda06 	br	100a8b0 <__lo0bits+0x2c>

0100a948 <__mcmp>:
 100a948:	20800417 	ldw	r2,16(r4)
 100a94c:	28c00417 	ldw	r3,16(r5)
 100a950:	10cfc83a 	sub	r7,r2,r3
 100a954:	38000c1e 	bne	r7,zero,100a988 <__mcmp+0x40>
 100a958:	18c5883a 	add	r2,r3,r3
 100a95c:	1085883a 	add	r2,r2,r2
 100a960:	10c00504 	addi	r3,r2,20
 100a964:	21000504 	addi	r4,r4,20
 100a968:	28cb883a 	add	r5,r5,r3
 100a96c:	2085883a 	add	r2,r4,r2
 100a970:	10bfff04 	addi	r2,r2,-4
 100a974:	297fff04 	addi	r5,r5,-4
 100a978:	11800017 	ldw	r6,0(r2)
 100a97c:	28c00017 	ldw	r3,0(r5)
 100a980:	30c0031e 	bne	r6,r3,100a990 <__mcmp+0x48>
 100a984:	20bffa36 	bltu	r4,r2,100a970 <__mcmp+0x28>
 100a988:	3805883a 	mov	r2,r7
 100a98c:	f800283a 	ret
 100a990:	30c00336 	bltu	r6,r3,100a9a0 <__mcmp+0x58>
 100a994:	01c00044 	movi	r7,1
 100a998:	3805883a 	mov	r2,r7
 100a99c:	f800283a 	ret
 100a9a0:	01ffffc4 	movi	r7,-1
 100a9a4:	003ff806 	br	100a988 <__mcmp+0x40>

0100a9a8 <__ulp>:
 100a9a8:	295ffc2c 	andhi	r5,r5,32752
 100a9ac:	013f3034 	movhi	r4,64704
 100a9b0:	290b883a 	add	r5,r5,r4
 100a9b4:	0145c83a 	sub	r2,zero,r5
 100a9b8:	1007d53a 	srai	r3,r2,20
 100a9bc:	000d883a 	mov	r6,zero
 100a9c0:	0140040e 	bge	zero,r5,100a9d4 <__ulp+0x2c>
 100a9c4:	280f883a 	mov	r7,r5
 100a9c8:	3807883a 	mov	r3,r7
 100a9cc:	3005883a 	mov	r2,r6
 100a9d0:	f800283a 	ret
 100a9d4:	008004c4 	movi	r2,19
 100a9d8:	193ffb04 	addi	r4,r3,-20
 100a9dc:	10c00c0e 	bge	r2,r3,100aa10 <__ulp+0x68>
 100a9e0:	008007c4 	movi	r2,31
 100a9e4:	1107c83a 	sub	r3,r2,r4
 100a9e8:	00800784 	movi	r2,30
 100a9ec:	01400044 	movi	r5,1
 100a9f0:	11000216 	blt	r2,r4,100a9fc <__ulp+0x54>
 100a9f4:	00800044 	movi	r2,1
 100a9f8:	10ca983a 	sll	r5,r2,r3
 100a9fc:	000f883a 	mov	r7,zero
 100aa00:	280d883a 	mov	r6,r5
 100aa04:	3807883a 	mov	r3,r7
 100aa08:	3005883a 	mov	r2,r6
 100aa0c:	f800283a 	ret
 100aa10:	00800234 	movhi	r2,8
 100aa14:	10cfd83a 	sra	r7,r2,r3
 100aa18:	000d883a 	mov	r6,zero
 100aa1c:	3005883a 	mov	r2,r6
 100aa20:	3807883a 	mov	r3,r7
 100aa24:	f800283a 	ret

0100aa28 <__b2d>:
 100aa28:	20800417 	ldw	r2,16(r4)
 100aa2c:	defff904 	addi	sp,sp,-28
 100aa30:	dd000415 	stw	r20,16(sp)
 100aa34:	1085883a 	add	r2,r2,r2
 100aa38:	25000504 	addi	r20,r4,20
 100aa3c:	1085883a 	add	r2,r2,r2
 100aa40:	dc000015 	stw	r16,0(sp)
 100aa44:	a0a1883a 	add	r16,r20,r2
 100aa48:	dd400515 	stw	r21,20(sp)
 100aa4c:	857fff17 	ldw	r21,-4(r16)
 100aa50:	dc400115 	stw	r17,4(sp)
 100aa54:	dfc00615 	stw	ra,24(sp)
 100aa58:	a809883a 	mov	r4,r21
 100aa5c:	2823883a 	mov	r17,r5
 100aa60:	dcc00315 	stw	r19,12(sp)
 100aa64:	dc800215 	stw	r18,8(sp)
 100aa68:	100a8140 	call	100a814 <__hi0bits>
 100aa6c:	100b883a 	mov	r5,r2
 100aa70:	00800804 	movi	r2,32
 100aa74:	1145c83a 	sub	r2,r2,r5
 100aa78:	88800015 	stw	r2,0(r17)
 100aa7c:	00800284 	movi	r2,10
 100aa80:	80ffff04 	addi	r3,r16,-4
 100aa84:	11401416 	blt	r2,r5,100aad8 <__b2d+0xb0>
 100aa88:	008002c4 	movi	r2,11
 100aa8c:	1149c83a 	sub	r4,r2,r5
 100aa90:	a0c02736 	bltu	r20,r3,100ab30 <__b2d+0x108>
 100aa94:	000d883a 	mov	r6,zero
 100aa98:	28800544 	addi	r2,r5,21
 100aa9c:	a906d83a 	srl	r3,r21,r4
 100aaa0:	a884983a 	sll	r2,r21,r2
 100aaa4:	1ccffc34 	orhi	r19,r3,16368
 100aaa8:	11a4b03a 	or	r18,r2,r6
 100aaac:	9005883a 	mov	r2,r18
 100aab0:	9807883a 	mov	r3,r19
 100aab4:	dfc00617 	ldw	ra,24(sp)
 100aab8:	dd400517 	ldw	r21,20(sp)
 100aabc:	dd000417 	ldw	r20,16(sp)
 100aac0:	dcc00317 	ldw	r19,12(sp)
 100aac4:	dc800217 	ldw	r18,8(sp)
 100aac8:	dc400117 	ldw	r17,4(sp)
 100aacc:	dc000017 	ldw	r16,0(sp)
 100aad0:	dec00704 	addi	sp,sp,28
 100aad4:	f800283a 	ret
 100aad8:	a0c00e36 	bltu	r20,r3,100ab14 <__b2d+0xec>
 100aadc:	293ffd44 	addi	r4,r5,-11
 100aae0:	000d883a 	mov	r6,zero
 100aae4:	20000f26 	beq	r4,zero,100ab24 <__b2d+0xfc>
 100aae8:	00800804 	movi	r2,32
 100aaec:	110bc83a 	sub	r5,r2,r4
 100aaf0:	a0c01236 	bltu	r20,r3,100ab3c <__b2d+0x114>
 100aaf4:	000f883a 	mov	r7,zero
 100aaf8:	a904983a 	sll	r2,r21,r4
 100aafc:	3146d83a 	srl	r3,r6,r5
 100ab00:	3108983a 	sll	r4,r6,r4
 100ab04:	108ffc34 	orhi	r2,r2,16368
 100ab08:	18a6b03a 	or	r19,r3,r2
 100ab0c:	3924b03a 	or	r18,r7,r4
 100ab10:	003fe606 	br	100aaac <__b2d+0x84>
 100ab14:	293ffd44 	addi	r4,r5,-11
 100ab18:	81bffe17 	ldw	r6,-8(r16)
 100ab1c:	80fffe04 	addi	r3,r16,-8
 100ab20:	203ff11e 	bne	r4,zero,100aae8 <__b2d+0xc0>
 100ab24:	accffc34 	orhi	r19,r21,16368
 100ab28:	3025883a 	mov	r18,r6
 100ab2c:	003fdf06 	br	100aaac <__b2d+0x84>
 100ab30:	18bfff17 	ldw	r2,-4(r3)
 100ab34:	110cd83a 	srl	r6,r2,r4
 100ab38:	003fd706 	br	100aa98 <__b2d+0x70>
 100ab3c:	18bfff17 	ldw	r2,-4(r3)
 100ab40:	114ed83a 	srl	r7,r2,r5
 100ab44:	003fec06 	br	100aaf8 <__b2d+0xd0>

0100ab48 <__ratio>:
 100ab48:	defff904 	addi	sp,sp,-28
 100ab4c:	dc400215 	stw	r17,8(sp)
 100ab50:	2823883a 	mov	r17,r5
 100ab54:	d80b883a 	mov	r5,sp
 100ab58:	dfc00615 	stw	ra,24(sp)
 100ab5c:	dd000515 	stw	r20,20(sp)
 100ab60:	dcc00415 	stw	r19,16(sp)
 100ab64:	dc800315 	stw	r18,12(sp)
 100ab68:	2025883a 	mov	r18,r4
 100ab6c:	100aa280 	call	100aa28 <__b2d>
 100ab70:	8809883a 	mov	r4,r17
 100ab74:	d9400104 	addi	r5,sp,4
 100ab78:	1027883a 	mov	r19,r2
 100ab7c:	1829883a 	mov	r20,r3
 100ab80:	100aa280 	call	100aa28 <__b2d>
 100ab84:	89000417 	ldw	r4,16(r17)
 100ab88:	91c00417 	ldw	r7,16(r18)
 100ab8c:	d9800117 	ldw	r6,4(sp)
 100ab90:	180b883a 	mov	r5,r3
 100ab94:	390fc83a 	sub	r7,r7,r4
 100ab98:	1009883a 	mov	r4,r2
 100ab9c:	d8800017 	ldw	r2,0(sp)
 100aba0:	380e917a 	slli	r7,r7,5
 100aba4:	2011883a 	mov	r8,r4
 100aba8:	1185c83a 	sub	r2,r2,r6
 100abac:	11c5883a 	add	r2,r2,r7
 100abb0:	1006953a 	slli	r3,r2,20
 100abb4:	2813883a 	mov	r9,r5
 100abb8:	00800d0e 	bge	zero,r2,100abf0 <__ratio+0xa8>
 100abbc:	1d29883a 	add	r20,r3,r20
 100abc0:	a00b883a 	mov	r5,r20
 100abc4:	480f883a 	mov	r7,r9
 100abc8:	9809883a 	mov	r4,r19
 100abcc:	400d883a 	mov	r6,r8
 100abd0:	100d2580 	call	100d258 <__divdf3>
 100abd4:	dfc00617 	ldw	ra,24(sp)
 100abd8:	dd000517 	ldw	r20,20(sp)
 100abdc:	dcc00417 	ldw	r19,16(sp)
 100abe0:	dc800317 	ldw	r18,12(sp)
 100abe4:	dc400217 	ldw	r17,8(sp)
 100abe8:	dec00704 	addi	sp,sp,28
 100abec:	f800283a 	ret
 100abf0:	28d3c83a 	sub	r9,r5,r3
 100abf4:	003ff206 	br	100abc0 <__ratio+0x78>

0100abf8 <_mprec_log10>:
 100abf8:	defffe04 	addi	sp,sp,-8
 100abfc:	008005c4 	movi	r2,23
 100ac00:	dc000015 	stw	r16,0(sp)
 100ac04:	dfc00115 	stw	ra,4(sp)
 100ac08:	2021883a 	mov	r16,r4
 100ac0c:	11000c16 	blt	r2,r4,100ac40 <_mprec_log10+0x48>
 100ac10:	200490fa 	slli	r2,r4,3
 100ac14:	00c04074 	movhi	r3,257
 100ac18:	18ca2804 	addi	r3,r3,10400
 100ac1c:	10c5883a 	add	r2,r2,r3
 100ac20:	12400117 	ldw	r9,4(r2)
 100ac24:	12000017 	ldw	r8,0(r2)
 100ac28:	4807883a 	mov	r3,r9
 100ac2c:	4005883a 	mov	r2,r8
 100ac30:	dfc00117 	ldw	ra,4(sp)
 100ac34:	dc000017 	ldw	r16,0(sp)
 100ac38:	dec00204 	addi	sp,sp,8
 100ac3c:	f800283a 	ret
 100ac40:	0011883a 	mov	r8,zero
 100ac44:	024ffc34 	movhi	r9,16368
 100ac48:	0005883a 	mov	r2,zero
 100ac4c:	00d00934 	movhi	r3,16420
 100ac50:	480b883a 	mov	r5,r9
 100ac54:	4009883a 	mov	r4,r8
 100ac58:	180f883a 	mov	r7,r3
 100ac5c:	100d883a 	mov	r6,r2
 100ac60:	1003ebc0 	call	1003ebc <__muldf3>
 100ac64:	843fffc4 	addi	r16,r16,-1
 100ac68:	1011883a 	mov	r8,r2
 100ac6c:	1813883a 	mov	r9,r3
 100ac70:	803ff51e 	bne	r16,zero,100ac48 <_mprec_log10+0x50>
 100ac74:	4005883a 	mov	r2,r8
 100ac78:	4807883a 	mov	r3,r9
 100ac7c:	dfc00117 	ldw	ra,4(sp)
 100ac80:	dc000017 	ldw	r16,0(sp)
 100ac84:	dec00204 	addi	sp,sp,8
 100ac88:	f800283a 	ret

0100ac8c <__copybits>:
 100ac8c:	297fffc4 	addi	r5,r5,-1
 100ac90:	30800417 	ldw	r2,16(r6)
 100ac94:	280bd17a 	srai	r5,r5,5
 100ac98:	31800504 	addi	r6,r6,20
 100ac9c:	1085883a 	add	r2,r2,r2
 100aca0:	294b883a 	add	r5,r5,r5
 100aca4:	294b883a 	add	r5,r5,r5
 100aca8:	1085883a 	add	r2,r2,r2
 100acac:	290b883a 	add	r5,r5,r4
 100acb0:	3087883a 	add	r3,r6,r2
 100acb4:	29400104 	addi	r5,r5,4
 100acb8:	30c0052e 	bgeu	r6,r3,100acd0 <__copybits+0x44>
 100acbc:	30800017 	ldw	r2,0(r6)
 100acc0:	31800104 	addi	r6,r6,4
 100acc4:	20800015 	stw	r2,0(r4)
 100acc8:	21000104 	addi	r4,r4,4
 100accc:	30fffb36 	bltu	r6,r3,100acbc <__copybits+0x30>
 100acd0:	2140032e 	bgeu	r4,r5,100ace0 <__copybits+0x54>
 100acd4:	20000015 	stw	zero,0(r4)
 100acd8:	21000104 	addi	r4,r4,4
 100acdc:	217ffd36 	bltu	r4,r5,100acd4 <__copybits+0x48>
 100ace0:	f800283a 	ret

0100ace4 <__any_on>:
 100ace4:	20800417 	ldw	r2,16(r4)
 100ace8:	2807d17a 	srai	r3,r5,5
 100acec:	21000504 	addi	r4,r4,20
 100acf0:	10c00d0e 	bge	r2,r3,100ad28 <__any_on+0x44>
 100acf4:	1085883a 	add	r2,r2,r2
 100acf8:	1085883a 	add	r2,r2,r2
 100acfc:	208d883a 	add	r6,r4,r2
 100ad00:	2180182e 	bgeu	r4,r6,100ad64 <__any_on+0x80>
 100ad04:	30bfff17 	ldw	r2,-4(r6)
 100ad08:	30ffff04 	addi	r3,r6,-4
 100ad0c:	1000041e 	bne	r2,zero,100ad20 <__any_on+0x3c>
 100ad10:	20c0142e 	bgeu	r4,r3,100ad64 <__any_on+0x80>
 100ad14:	18ffff04 	addi	r3,r3,-4
 100ad18:	18800017 	ldw	r2,0(r3)
 100ad1c:	103ffc26 	beq	r2,zero,100ad10 <__any_on+0x2c>
 100ad20:	00800044 	movi	r2,1
 100ad24:	f800283a 	ret
 100ad28:	18800a0e 	bge	r3,r2,100ad54 <__any_on+0x70>
 100ad2c:	294007cc 	andi	r5,r5,31
 100ad30:	28000826 	beq	r5,zero,100ad54 <__any_on+0x70>
 100ad34:	18c5883a 	add	r2,r3,r3
 100ad38:	1085883a 	add	r2,r2,r2
 100ad3c:	208d883a 	add	r6,r4,r2
 100ad40:	30c00017 	ldw	r3,0(r6)
 100ad44:	1944d83a 	srl	r2,r3,r5
 100ad48:	1144983a 	sll	r2,r2,r5
 100ad4c:	18bff41e 	bne	r3,r2,100ad20 <__any_on+0x3c>
 100ad50:	003feb06 	br	100ad00 <__any_on+0x1c>
 100ad54:	18c5883a 	add	r2,r3,r3
 100ad58:	1085883a 	add	r2,r2,r2
 100ad5c:	208d883a 	add	r6,r4,r2
 100ad60:	003fe706 	br	100ad00 <__any_on+0x1c>
 100ad64:	0005883a 	mov	r2,zero
 100ad68:	f800283a 	ret

0100ad6c <_Balloc>:
 100ad6c:	20c01317 	ldw	r3,76(r4)
 100ad70:	defffb04 	addi	sp,sp,-20
 100ad74:	dcc00315 	stw	r19,12(sp)
 100ad78:	dc800215 	stw	r18,8(sp)
 100ad7c:	dfc00415 	stw	ra,16(sp)
 100ad80:	2825883a 	mov	r18,r5
 100ad84:	dc400115 	stw	r17,4(sp)
 100ad88:	dc000015 	stw	r16,0(sp)
 100ad8c:	2027883a 	mov	r19,r4
 100ad90:	01800404 	movi	r6,16
 100ad94:	01400104 	movi	r5,4
 100ad98:	18001726 	beq	r3,zero,100adf8 <_Balloc+0x8c>
 100ad9c:	01400044 	movi	r5,1
 100ada0:	9485883a 	add	r2,r18,r18
 100ada4:	2ca2983a 	sll	r17,r5,r18
 100ada8:	1085883a 	add	r2,r2,r2
 100adac:	10c7883a 	add	r3,r2,r3
 100adb0:	1c000017 	ldw	r16,0(r3)
 100adb4:	8c4d883a 	add	r6,r17,r17
 100adb8:	318d883a 	add	r6,r6,r6
 100adbc:	9809883a 	mov	r4,r19
 100adc0:	31800504 	addi	r6,r6,20
 100adc4:	80001226 	beq	r16,zero,100ae10 <_Balloc+0xa4>
 100adc8:	80800017 	ldw	r2,0(r16)
 100adcc:	18800015 	stw	r2,0(r3)
 100add0:	80000415 	stw	zero,16(r16)
 100add4:	80000315 	stw	zero,12(r16)
 100add8:	8005883a 	mov	r2,r16
 100addc:	dfc00417 	ldw	ra,16(sp)
 100ade0:	dcc00317 	ldw	r19,12(sp)
 100ade4:	dc800217 	ldw	r18,8(sp)
 100ade8:	dc400117 	ldw	r17,4(sp)
 100adec:	dc000017 	ldw	r16,0(sp)
 100adf0:	dec00504 	addi	sp,sp,20
 100adf4:	f800283a 	ret
 100adf8:	100c15c0 	call	100c15c <_calloc_r>
 100adfc:	1007883a 	mov	r3,r2
 100ae00:	0021883a 	mov	r16,zero
 100ae04:	98801315 	stw	r2,76(r19)
 100ae08:	103fe41e 	bne	r2,zero,100ad9c <_Balloc+0x30>
 100ae0c:	003ff206 	br	100add8 <_Balloc+0x6c>
 100ae10:	100c15c0 	call	100c15c <_calloc_r>
 100ae14:	103ff026 	beq	r2,zero,100add8 <_Balloc+0x6c>
 100ae18:	1021883a 	mov	r16,r2
 100ae1c:	14800115 	stw	r18,4(r2)
 100ae20:	14400215 	stw	r17,8(r2)
 100ae24:	003fea06 	br	100add0 <_Balloc+0x64>

0100ae28 <__d2b>:
 100ae28:	defff504 	addi	sp,sp,-44
 100ae2c:	dcc00515 	stw	r19,20(sp)
 100ae30:	04c00044 	movi	r19,1
 100ae34:	dc000215 	stw	r16,8(sp)
 100ae38:	2821883a 	mov	r16,r5
 100ae3c:	980b883a 	mov	r5,r19
 100ae40:	ddc00915 	stw	r23,36(sp)
 100ae44:	dd800815 	stw	r22,32(sp)
 100ae48:	dd400715 	stw	r21,28(sp)
 100ae4c:	dd000615 	stw	r20,24(sp)
 100ae50:	dc800415 	stw	r18,16(sp)
 100ae54:	dc400315 	stw	r17,12(sp)
 100ae58:	dfc00a15 	stw	ra,40(sp)
 100ae5c:	3023883a 	mov	r17,r6
 100ae60:	382d883a 	mov	r22,r7
 100ae64:	ddc00b17 	ldw	r23,44(sp)
 100ae68:	100ad6c0 	call	100ad6c <_Balloc>
 100ae6c:	1025883a 	mov	r18,r2
 100ae70:	00a00034 	movhi	r2,32768
 100ae74:	10bfffc4 	addi	r2,r2,-1
 100ae78:	8888703a 	and	r4,r17,r2
 100ae7c:	202ad53a 	srli	r21,r4,20
 100ae80:	00800434 	movhi	r2,16
 100ae84:	10bfffc4 	addi	r2,r2,-1
 100ae88:	8886703a 	and	r3,r17,r2
 100ae8c:	a829003a 	cmpeq	r20,r21,zero
 100ae90:	800b883a 	mov	r5,r16
 100ae94:	d8c00115 	stw	r3,4(sp)
 100ae98:	94000504 	addi	r16,r18,20
 100ae9c:	a000021e 	bne	r20,zero,100aea8 <__d2b+0x80>
 100aea0:	18c00434 	orhi	r3,r3,16
 100aea4:	d8c00115 	stw	r3,4(sp)
 100aea8:	28002726 	beq	r5,zero,100af48 <__d2b+0x120>
 100aeac:	d809883a 	mov	r4,sp
 100aeb0:	d9400015 	stw	r5,0(sp)
 100aeb4:	100a8840 	call	100a884 <__lo0bits>
 100aeb8:	100d883a 	mov	r6,r2
 100aebc:	10003526 	beq	r2,zero,100af94 <__d2b+0x16c>
 100aec0:	d8c00117 	ldw	r3,4(sp)
 100aec4:	00800804 	movi	r2,32
 100aec8:	1185c83a 	sub	r2,r2,r6
 100aecc:	d9000017 	ldw	r4,0(sp)
 100aed0:	1886983a 	sll	r3,r3,r2
 100aed4:	1906b03a 	or	r3,r3,r4
 100aed8:	90c00515 	stw	r3,20(r18)
 100aedc:	d8c00117 	ldw	r3,4(sp)
 100aee0:	1986d83a 	srl	r3,r3,r6
 100aee4:	d8c00115 	stw	r3,4(sp)
 100aee8:	180b003a 	cmpeq	r5,r3,zero
 100aeec:	00800084 	movi	r2,2
 100aef0:	114bc83a 	sub	r5,r2,r5
 100aef4:	80c00115 	stw	r3,4(r16)
 100aef8:	91400415 	stw	r5,16(r18)
 100aefc:	a0001a1e 	bne	r20,zero,100af68 <__d2b+0x140>
 100af00:	3545883a 	add	r2,r6,r21
 100af04:	10bef344 	addi	r2,r2,-1075
 100af08:	00c00d44 	movi	r3,53
 100af0c:	b0800015 	stw	r2,0(r22)
 100af10:	1987c83a 	sub	r3,r3,r6
 100af14:	b8c00015 	stw	r3,0(r23)
 100af18:	9005883a 	mov	r2,r18
 100af1c:	dfc00a17 	ldw	ra,40(sp)
 100af20:	ddc00917 	ldw	r23,36(sp)
 100af24:	dd800817 	ldw	r22,32(sp)
 100af28:	dd400717 	ldw	r21,28(sp)
 100af2c:	dd000617 	ldw	r20,24(sp)
 100af30:	dcc00517 	ldw	r19,20(sp)
 100af34:	dc800417 	ldw	r18,16(sp)
 100af38:	dc400317 	ldw	r17,12(sp)
 100af3c:	dc000217 	ldw	r16,8(sp)
 100af40:	dec00b04 	addi	sp,sp,44
 100af44:	f800283a 	ret
 100af48:	d9000104 	addi	r4,sp,4
 100af4c:	100a8840 	call	100a884 <__lo0bits>
 100af50:	11800804 	addi	r6,r2,32
 100af54:	d8800117 	ldw	r2,4(sp)
 100af58:	94c00415 	stw	r19,16(r18)
 100af5c:	980b883a 	mov	r5,r19
 100af60:	90800515 	stw	r2,20(r18)
 100af64:	a03fe626 	beq	r20,zero,100af00 <__d2b+0xd8>
 100af68:	2945883a 	add	r2,r5,r5
 100af6c:	1085883a 	add	r2,r2,r2
 100af70:	1405883a 	add	r2,r2,r16
 100af74:	113fff17 	ldw	r4,-4(r2)
 100af78:	30fef384 	addi	r3,r6,-1074
 100af7c:	2820917a 	slli	r16,r5,5
 100af80:	b0c00015 	stw	r3,0(r22)
 100af84:	100a8140 	call	100a814 <__hi0bits>
 100af88:	80a1c83a 	sub	r16,r16,r2
 100af8c:	bc000015 	stw	r16,0(r23)
 100af90:	003fe106 	br	100af18 <__d2b+0xf0>
 100af94:	d8800017 	ldw	r2,0(sp)
 100af98:	90800515 	stw	r2,20(r18)
 100af9c:	d8c00117 	ldw	r3,4(sp)
 100afa0:	003fd106 	br	100aee8 <__d2b+0xc0>

0100afa4 <__mdiff>:
 100afa4:	defffb04 	addi	sp,sp,-20
 100afa8:	dc000015 	stw	r16,0(sp)
 100afac:	2821883a 	mov	r16,r5
 100afb0:	dc800215 	stw	r18,8(sp)
 100afb4:	300b883a 	mov	r5,r6
 100afb8:	2025883a 	mov	r18,r4
 100afbc:	8009883a 	mov	r4,r16
 100afc0:	dc400115 	stw	r17,4(sp)
 100afc4:	dfc00415 	stw	ra,16(sp)
 100afc8:	dcc00315 	stw	r19,12(sp)
 100afcc:	3023883a 	mov	r17,r6
 100afd0:	100a9480 	call	100a948 <__mcmp>
 100afd4:	10004226 	beq	r2,zero,100b0e0 <__mdiff+0x13c>
 100afd8:	10005016 	blt	r2,zero,100b11c <__mdiff+0x178>
 100afdc:	0027883a 	mov	r19,zero
 100afe0:	81400117 	ldw	r5,4(r16)
 100afe4:	9009883a 	mov	r4,r18
 100afe8:	100ad6c0 	call	100ad6c <_Balloc>
 100afec:	1019883a 	mov	r12,r2
 100aff0:	82800417 	ldw	r10,16(r16)
 100aff4:	88800417 	ldw	r2,16(r17)
 100aff8:	81800504 	addi	r6,r16,20
 100affc:	5287883a 	add	r3,r10,r10
 100b000:	1085883a 	add	r2,r2,r2
 100b004:	18c7883a 	add	r3,r3,r3
 100b008:	1085883a 	add	r2,r2,r2
 100b00c:	8a000504 	addi	r8,r17,20
 100b010:	64c00315 	stw	r19,12(r12)
 100b014:	30db883a 	add	r13,r6,r3
 100b018:	4097883a 	add	r11,r8,r2
 100b01c:	61c00504 	addi	r7,r12,20
 100b020:	0013883a 	mov	r9,zero
 100b024:	31000017 	ldw	r4,0(r6)
 100b028:	41400017 	ldw	r5,0(r8)
 100b02c:	42000104 	addi	r8,r8,4
 100b030:	20bfffcc 	andi	r2,r4,65535
 100b034:	28ffffcc 	andi	r3,r5,65535
 100b038:	10c5c83a 	sub	r2,r2,r3
 100b03c:	1245883a 	add	r2,r2,r9
 100b040:	2008d43a 	srli	r4,r4,16
 100b044:	280ad43a 	srli	r5,r5,16
 100b048:	1007d43a 	srai	r3,r2,16
 100b04c:	3880000d 	sth	r2,0(r7)
 100b050:	2149c83a 	sub	r4,r4,r5
 100b054:	20c9883a 	add	r4,r4,r3
 100b058:	3900008d 	sth	r4,2(r7)
 100b05c:	31800104 	addi	r6,r6,4
 100b060:	39c00104 	addi	r7,r7,4
 100b064:	2013d43a 	srai	r9,r4,16
 100b068:	42ffee36 	bltu	r8,r11,100b024 <__mdiff+0x80>
 100b06c:	33400c2e 	bgeu	r6,r13,100b0a0 <__mdiff+0xfc>
 100b070:	30800017 	ldw	r2,0(r6)
 100b074:	31800104 	addi	r6,r6,4
 100b078:	10ffffcc 	andi	r3,r2,65535
 100b07c:	1a47883a 	add	r3,r3,r9
 100b080:	1004d43a 	srli	r2,r2,16
 100b084:	1809d43a 	srai	r4,r3,16
 100b088:	38c0000d 	sth	r3,0(r7)
 100b08c:	1105883a 	add	r2,r2,r4
 100b090:	3880008d 	sth	r2,2(r7)
 100b094:	1013d43a 	srai	r9,r2,16
 100b098:	39c00104 	addi	r7,r7,4
 100b09c:	337ff436 	bltu	r6,r13,100b070 <__mdiff+0xcc>
 100b0a0:	38bfff17 	ldw	r2,-4(r7)
 100b0a4:	38ffff04 	addi	r3,r7,-4
 100b0a8:	1000041e 	bne	r2,zero,100b0bc <__mdiff+0x118>
 100b0ac:	18ffff04 	addi	r3,r3,-4
 100b0b0:	18800017 	ldw	r2,0(r3)
 100b0b4:	52bfffc4 	addi	r10,r10,-1
 100b0b8:	103ffc26 	beq	r2,zero,100b0ac <__mdiff+0x108>
 100b0bc:	6005883a 	mov	r2,r12
 100b0c0:	62800415 	stw	r10,16(r12)
 100b0c4:	dfc00417 	ldw	ra,16(sp)
 100b0c8:	dcc00317 	ldw	r19,12(sp)
 100b0cc:	dc800217 	ldw	r18,8(sp)
 100b0d0:	dc400117 	ldw	r17,4(sp)
 100b0d4:	dc000017 	ldw	r16,0(sp)
 100b0d8:	dec00504 	addi	sp,sp,20
 100b0dc:	f800283a 	ret
 100b0e0:	9009883a 	mov	r4,r18
 100b0e4:	000b883a 	mov	r5,zero
 100b0e8:	100ad6c0 	call	100ad6c <_Balloc>
 100b0ec:	1019883a 	mov	r12,r2
 100b0f0:	00800044 	movi	r2,1
 100b0f4:	60800415 	stw	r2,16(r12)
 100b0f8:	6005883a 	mov	r2,r12
 100b0fc:	60000515 	stw	zero,20(r12)
 100b100:	dfc00417 	ldw	ra,16(sp)
 100b104:	dcc00317 	ldw	r19,12(sp)
 100b108:	dc800217 	ldw	r18,8(sp)
 100b10c:	dc400117 	ldw	r17,4(sp)
 100b110:	dc000017 	ldw	r16,0(sp)
 100b114:	dec00504 	addi	sp,sp,20
 100b118:	f800283a 	ret
 100b11c:	880d883a 	mov	r6,r17
 100b120:	04c00044 	movi	r19,1
 100b124:	8023883a 	mov	r17,r16
 100b128:	3021883a 	mov	r16,r6
 100b12c:	003fac06 	br	100afe0 <__mdiff+0x3c>

0100b130 <__lshift>:
 100b130:	defff904 	addi	sp,sp,-28
 100b134:	28800417 	ldw	r2,16(r5)
 100b138:	dc000015 	stw	r16,0(sp)
 100b13c:	3021d17a 	srai	r16,r6,5
 100b140:	28c00217 	ldw	r3,8(r5)
 100b144:	10800044 	addi	r2,r2,1
 100b148:	dc400115 	stw	r17,4(sp)
 100b14c:	80a3883a 	add	r17,r16,r2
 100b150:	dd400515 	stw	r21,20(sp)
 100b154:	dd000415 	stw	r20,16(sp)
 100b158:	dc800215 	stw	r18,8(sp)
 100b15c:	dfc00615 	stw	ra,24(sp)
 100b160:	2825883a 	mov	r18,r5
 100b164:	dcc00315 	stw	r19,12(sp)
 100b168:	3029883a 	mov	r20,r6
 100b16c:	202b883a 	mov	r21,r4
 100b170:	29400117 	ldw	r5,4(r5)
 100b174:	1c40030e 	bge	r3,r17,100b184 <__lshift+0x54>
 100b178:	18c7883a 	add	r3,r3,r3
 100b17c:	29400044 	addi	r5,r5,1
 100b180:	1c7ffd16 	blt	r3,r17,100b178 <__lshift+0x48>
 100b184:	a809883a 	mov	r4,r21
 100b188:	100ad6c0 	call	100ad6c <_Balloc>
 100b18c:	1027883a 	mov	r19,r2
 100b190:	11400504 	addi	r5,r2,20
 100b194:	0400090e 	bge	zero,r16,100b1bc <__lshift+0x8c>
 100b198:	2805883a 	mov	r2,r5
 100b19c:	0007883a 	mov	r3,zero
 100b1a0:	18c00044 	addi	r3,r3,1
 100b1a4:	10000015 	stw	zero,0(r2)
 100b1a8:	10800104 	addi	r2,r2,4
 100b1ac:	80fffc1e 	bne	r16,r3,100b1a0 <__lshift+0x70>
 100b1b0:	8405883a 	add	r2,r16,r16
 100b1b4:	1085883a 	add	r2,r2,r2
 100b1b8:	288b883a 	add	r5,r5,r2
 100b1bc:	90800417 	ldw	r2,16(r18)
 100b1c0:	91000504 	addi	r4,r18,20
 100b1c4:	a18007cc 	andi	r6,r20,31
 100b1c8:	1085883a 	add	r2,r2,r2
 100b1cc:	1085883a 	add	r2,r2,r2
 100b1d0:	208f883a 	add	r7,r4,r2
 100b1d4:	30001e26 	beq	r6,zero,100b250 <__lshift+0x120>
 100b1d8:	00800804 	movi	r2,32
 100b1dc:	1191c83a 	sub	r8,r2,r6
 100b1e0:	0007883a 	mov	r3,zero
 100b1e4:	20800017 	ldw	r2,0(r4)
 100b1e8:	1184983a 	sll	r2,r2,r6
 100b1ec:	1884b03a 	or	r2,r3,r2
 100b1f0:	28800015 	stw	r2,0(r5)
 100b1f4:	20c00017 	ldw	r3,0(r4)
 100b1f8:	21000104 	addi	r4,r4,4
 100b1fc:	29400104 	addi	r5,r5,4
 100b200:	1a06d83a 	srl	r3,r3,r8
 100b204:	21fff736 	bltu	r4,r7,100b1e4 <__lshift+0xb4>
 100b208:	28c00015 	stw	r3,0(r5)
 100b20c:	18000126 	beq	r3,zero,100b214 <__lshift+0xe4>
 100b210:	8c400044 	addi	r17,r17,1
 100b214:	88bfffc4 	addi	r2,r17,-1
 100b218:	98800415 	stw	r2,16(r19)
 100b21c:	a809883a 	mov	r4,r21
 100b220:	900b883a 	mov	r5,r18
 100b224:	100a7ec0 	call	100a7ec <_Bfree>
 100b228:	9805883a 	mov	r2,r19
 100b22c:	dfc00617 	ldw	ra,24(sp)
 100b230:	dd400517 	ldw	r21,20(sp)
 100b234:	dd000417 	ldw	r20,16(sp)
 100b238:	dcc00317 	ldw	r19,12(sp)
 100b23c:	dc800217 	ldw	r18,8(sp)
 100b240:	dc400117 	ldw	r17,4(sp)
 100b244:	dc000017 	ldw	r16,0(sp)
 100b248:	dec00704 	addi	sp,sp,28
 100b24c:	f800283a 	ret
 100b250:	20800017 	ldw	r2,0(r4)
 100b254:	21000104 	addi	r4,r4,4
 100b258:	28800015 	stw	r2,0(r5)
 100b25c:	29400104 	addi	r5,r5,4
 100b260:	21ffec2e 	bgeu	r4,r7,100b214 <__lshift+0xe4>
 100b264:	20800017 	ldw	r2,0(r4)
 100b268:	21000104 	addi	r4,r4,4
 100b26c:	28800015 	stw	r2,0(r5)
 100b270:	29400104 	addi	r5,r5,4
 100b274:	21fff636 	bltu	r4,r7,100b250 <__lshift+0x120>
 100b278:	003fe606 	br	100b214 <__lshift+0xe4>

0100b27c <__multiply>:
 100b27c:	defff004 	addi	sp,sp,-64
 100b280:	dc800815 	stw	r18,32(sp)
 100b284:	dc400715 	stw	r17,28(sp)
 100b288:	2c800417 	ldw	r18,16(r5)
 100b28c:	34400417 	ldw	r17,16(r6)
 100b290:	dcc00915 	stw	r19,36(sp)
 100b294:	dc000615 	stw	r16,24(sp)
 100b298:	dfc00f15 	stw	ra,60(sp)
 100b29c:	df000e15 	stw	fp,56(sp)
 100b2a0:	ddc00d15 	stw	r23,52(sp)
 100b2a4:	dd800c15 	stw	r22,48(sp)
 100b2a8:	dd400b15 	stw	r21,44(sp)
 100b2ac:	dd000a15 	stw	r20,40(sp)
 100b2b0:	2821883a 	mov	r16,r5
 100b2b4:	3027883a 	mov	r19,r6
 100b2b8:	9440040e 	bge	r18,r17,100b2cc <__multiply+0x50>
 100b2bc:	8825883a 	mov	r18,r17
 100b2c0:	2c400417 	ldw	r17,16(r5)
 100b2c4:	2827883a 	mov	r19,r5
 100b2c8:	3021883a 	mov	r16,r6
 100b2cc:	80800217 	ldw	r2,8(r16)
 100b2d0:	9447883a 	add	r3,r18,r17
 100b2d4:	d8c00415 	stw	r3,16(sp)
 100b2d8:	81400117 	ldw	r5,4(r16)
 100b2dc:	10c0010e 	bge	r2,r3,100b2e4 <__multiply+0x68>
 100b2e0:	29400044 	addi	r5,r5,1
 100b2e4:	100ad6c0 	call	100ad6c <_Balloc>
 100b2e8:	d8800515 	stw	r2,20(sp)
 100b2ec:	d9000417 	ldw	r4,16(sp)
 100b2f0:	d8c00517 	ldw	r3,20(sp)
 100b2f4:	2105883a 	add	r2,r4,r4
 100b2f8:	1085883a 	add	r2,r2,r2
 100b2fc:	19000504 	addi	r4,r3,20
 100b300:	2085883a 	add	r2,r4,r2
 100b304:	d8800315 	stw	r2,12(sp)
 100b308:	2080052e 	bgeu	r4,r2,100b320 <__multiply+0xa4>
 100b30c:	2005883a 	mov	r2,r4
 100b310:	d8c00317 	ldw	r3,12(sp)
 100b314:	10000015 	stw	zero,0(r2)
 100b318:	10800104 	addi	r2,r2,4
 100b31c:	10fffc36 	bltu	r2,r3,100b310 <__multiply+0x94>
 100b320:	8c45883a 	add	r2,r17,r17
 100b324:	9487883a 	add	r3,r18,r18
 100b328:	9dc00504 	addi	r23,r19,20
 100b32c:	1085883a 	add	r2,r2,r2
 100b330:	84000504 	addi	r16,r16,20
 100b334:	18c7883a 	add	r3,r3,r3
 100b338:	b885883a 	add	r2,r23,r2
 100b33c:	dc000015 	stw	r16,0(sp)
 100b340:	d8800215 	stw	r2,8(sp)
 100b344:	80f9883a 	add	fp,r16,r3
 100b348:	b880432e 	bgeu	r23,r2,100b458 <__multiply+0x1dc>
 100b34c:	d9000115 	stw	r4,4(sp)
 100b350:	b9000017 	ldw	r4,0(r23)
 100b354:	253fffcc 	andi	r20,r4,65535
 100b358:	a0001a26 	beq	r20,zero,100b3c4 <__multiply+0x148>
 100b35c:	dcc00017 	ldw	r19,0(sp)
 100b360:	dc800117 	ldw	r18,4(sp)
 100b364:	002b883a 	mov	r21,zero
 100b368:	9c400017 	ldw	r17,0(r19)
 100b36c:	94000017 	ldw	r16,0(r18)
 100b370:	a009883a 	mov	r4,r20
 100b374:	897fffcc 	andi	r5,r17,65535
 100b378:	100476c0 	call	100476c <__mulsi3>
 100b37c:	880ad43a 	srli	r5,r17,16
 100b380:	80ffffcc 	andi	r3,r16,65535
 100b384:	a8c7883a 	add	r3,r21,r3
 100b388:	a009883a 	mov	r4,r20
 100b38c:	10e3883a 	add	r17,r2,r3
 100b390:	8020d43a 	srli	r16,r16,16
 100b394:	100476c0 	call	100476c <__mulsi3>
 100b398:	8806d43a 	srli	r3,r17,16
 100b39c:	1405883a 	add	r2,r2,r16
 100b3a0:	9cc00104 	addi	r19,r19,4
 100b3a4:	1887883a 	add	r3,r3,r2
 100b3a8:	90c0008d 	sth	r3,2(r18)
 100b3ac:	9440000d 	sth	r17,0(r18)
 100b3b0:	182ad43a 	srli	r21,r3,16
 100b3b4:	94800104 	addi	r18,r18,4
 100b3b8:	9f3feb36 	bltu	r19,fp,100b368 <__multiply+0xec>
 100b3bc:	95400015 	stw	r21,0(r18)
 100b3c0:	b9000017 	ldw	r4,0(r23)
 100b3c4:	202ad43a 	srli	r21,r4,16
 100b3c8:	a8001c26 	beq	r21,zero,100b43c <__multiply+0x1c0>
 100b3cc:	d9000117 	ldw	r4,4(sp)
 100b3d0:	dd000017 	ldw	r20,0(sp)
 100b3d4:	002d883a 	mov	r22,zero
 100b3d8:	24c00017 	ldw	r19,0(r4)
 100b3dc:	2025883a 	mov	r18,r4
 100b3e0:	9823883a 	mov	r17,r19
 100b3e4:	a4000017 	ldw	r16,0(r20)
 100b3e8:	a809883a 	mov	r4,r21
 100b3ec:	a5000104 	addi	r20,r20,4
 100b3f0:	817fffcc 	andi	r5,r16,65535
 100b3f4:	100476c0 	call	100476c <__mulsi3>
 100b3f8:	8806d43a 	srli	r3,r17,16
 100b3fc:	800ad43a 	srli	r5,r16,16
 100b400:	94c0000d 	sth	r19,0(r18)
 100b404:	b0c7883a 	add	r3,r22,r3
 100b408:	10e1883a 	add	r16,r2,r3
 100b40c:	9400008d 	sth	r16,2(r18)
 100b410:	a809883a 	mov	r4,r21
 100b414:	94800104 	addi	r18,r18,4
 100b418:	100476c0 	call	100476c <__mulsi3>
 100b41c:	94400017 	ldw	r17,0(r18)
 100b420:	8020d43a 	srli	r16,r16,16
 100b424:	88ffffcc 	andi	r3,r17,65535
 100b428:	10c5883a 	add	r2,r2,r3
 100b42c:	80a7883a 	add	r19,r16,r2
 100b430:	982cd43a 	srli	r22,r19,16
 100b434:	a73feb36 	bltu	r20,fp,100b3e4 <__multiply+0x168>
 100b438:	94c00015 	stw	r19,0(r18)
 100b43c:	d8800217 	ldw	r2,8(sp)
 100b440:	bdc00104 	addi	r23,r23,4
 100b444:	b880042e 	bgeu	r23,r2,100b458 <__multiply+0x1dc>
 100b448:	d8c00117 	ldw	r3,4(sp)
 100b44c:	18c00104 	addi	r3,r3,4
 100b450:	d8c00115 	stw	r3,4(sp)
 100b454:	003fbe06 	br	100b350 <__multiply+0xd4>
 100b458:	d9000417 	ldw	r4,16(sp)
 100b45c:	01000c0e 	bge	zero,r4,100b490 <__multiply+0x214>
 100b460:	d8c00317 	ldw	r3,12(sp)
 100b464:	18bfff17 	ldw	r2,-4(r3)
 100b468:	18ffff04 	addi	r3,r3,-4
 100b46c:	10000326 	beq	r2,zero,100b47c <__multiply+0x200>
 100b470:	00000706 	br	100b490 <__multiply+0x214>
 100b474:	18800017 	ldw	r2,0(r3)
 100b478:	1000051e 	bne	r2,zero,100b490 <__multiply+0x214>
 100b47c:	d9000417 	ldw	r4,16(sp)
 100b480:	18ffff04 	addi	r3,r3,-4
 100b484:	213fffc4 	addi	r4,r4,-1
 100b488:	d9000415 	stw	r4,16(sp)
 100b48c:	203ff91e 	bne	r4,zero,100b474 <__multiply+0x1f8>
 100b490:	d8800417 	ldw	r2,16(sp)
 100b494:	d8c00517 	ldw	r3,20(sp)
 100b498:	18800415 	stw	r2,16(r3)
 100b49c:	1805883a 	mov	r2,r3
 100b4a0:	dfc00f17 	ldw	ra,60(sp)
 100b4a4:	df000e17 	ldw	fp,56(sp)
 100b4a8:	ddc00d17 	ldw	r23,52(sp)
 100b4ac:	dd800c17 	ldw	r22,48(sp)
 100b4b0:	dd400b17 	ldw	r21,44(sp)
 100b4b4:	dd000a17 	ldw	r20,40(sp)
 100b4b8:	dcc00917 	ldw	r19,36(sp)
 100b4bc:	dc800817 	ldw	r18,32(sp)
 100b4c0:	dc400717 	ldw	r17,28(sp)
 100b4c4:	dc000617 	ldw	r16,24(sp)
 100b4c8:	dec01004 	addi	sp,sp,64
 100b4cc:	f800283a 	ret

0100b4d0 <__i2b>:
 100b4d0:	defffd04 	addi	sp,sp,-12
 100b4d4:	dc000015 	stw	r16,0(sp)
 100b4d8:	04000044 	movi	r16,1
 100b4dc:	dc800115 	stw	r18,4(sp)
 100b4e0:	2825883a 	mov	r18,r5
 100b4e4:	800b883a 	mov	r5,r16
 100b4e8:	dfc00215 	stw	ra,8(sp)
 100b4ec:	100ad6c0 	call	100ad6c <_Balloc>
 100b4f0:	14000415 	stw	r16,16(r2)
 100b4f4:	14800515 	stw	r18,20(r2)
 100b4f8:	dfc00217 	ldw	ra,8(sp)
 100b4fc:	dc800117 	ldw	r18,4(sp)
 100b500:	dc000017 	ldw	r16,0(sp)
 100b504:	dec00304 	addi	sp,sp,12
 100b508:	f800283a 	ret

0100b50c <__multadd>:
 100b50c:	defff604 	addi	sp,sp,-40
 100b510:	dd800615 	stw	r22,24(sp)
 100b514:	2d800417 	ldw	r22,16(r5)
 100b518:	df000815 	stw	fp,32(sp)
 100b51c:	ddc00715 	stw	r23,28(sp)
 100b520:	dd400515 	stw	r21,20(sp)
 100b524:	dd000415 	stw	r20,16(sp)
 100b528:	dcc00315 	stw	r19,12(sp)
 100b52c:	dc800215 	stw	r18,8(sp)
 100b530:	dfc00915 	stw	ra,36(sp)
 100b534:	dc400115 	stw	r17,4(sp)
 100b538:	dc000015 	stw	r16,0(sp)
 100b53c:	282f883a 	mov	r23,r5
 100b540:	2039883a 	mov	fp,r4
 100b544:	302b883a 	mov	r21,r6
 100b548:	3829883a 	mov	r20,r7
 100b54c:	2c800504 	addi	r18,r5,20
 100b550:	0027883a 	mov	r19,zero
 100b554:	94400017 	ldw	r17,0(r18)
 100b558:	a80b883a 	mov	r5,r21
 100b55c:	9cc00044 	addi	r19,r19,1
 100b560:	893fffcc 	andi	r4,r17,65535
 100b564:	100476c0 	call	100476c <__mulsi3>
 100b568:	8808d43a 	srli	r4,r17,16
 100b56c:	1521883a 	add	r16,r2,r20
 100b570:	a80b883a 	mov	r5,r21
 100b574:	100476c0 	call	100476c <__mulsi3>
 100b578:	8008d43a 	srli	r4,r16,16
 100b57c:	843fffcc 	andi	r16,r16,65535
 100b580:	1105883a 	add	r2,r2,r4
 100b584:	1006943a 	slli	r3,r2,16
 100b588:	1028d43a 	srli	r20,r2,16
 100b58c:	1c07883a 	add	r3,r3,r16
 100b590:	90c00015 	stw	r3,0(r18)
 100b594:	94800104 	addi	r18,r18,4
 100b598:	9dbfee16 	blt	r19,r22,100b554 <__multadd+0x48>
 100b59c:	a0000826 	beq	r20,zero,100b5c0 <__multadd+0xb4>
 100b5a0:	b8800217 	ldw	r2,8(r23)
 100b5a4:	b080130e 	bge	r22,r2,100b5f4 <__multadd+0xe8>
 100b5a8:	b585883a 	add	r2,r22,r22
 100b5ac:	1085883a 	add	r2,r2,r2
 100b5b0:	15c5883a 	add	r2,r2,r23
 100b5b4:	b0c00044 	addi	r3,r22,1
 100b5b8:	15000515 	stw	r20,20(r2)
 100b5bc:	b8c00415 	stw	r3,16(r23)
 100b5c0:	b805883a 	mov	r2,r23
 100b5c4:	dfc00917 	ldw	ra,36(sp)
 100b5c8:	df000817 	ldw	fp,32(sp)
 100b5cc:	ddc00717 	ldw	r23,28(sp)
 100b5d0:	dd800617 	ldw	r22,24(sp)
 100b5d4:	dd400517 	ldw	r21,20(sp)
 100b5d8:	dd000417 	ldw	r20,16(sp)
 100b5dc:	dcc00317 	ldw	r19,12(sp)
 100b5e0:	dc800217 	ldw	r18,8(sp)
 100b5e4:	dc400117 	ldw	r17,4(sp)
 100b5e8:	dc000017 	ldw	r16,0(sp)
 100b5ec:	dec00a04 	addi	sp,sp,40
 100b5f0:	f800283a 	ret
 100b5f4:	b9400117 	ldw	r5,4(r23)
 100b5f8:	e009883a 	mov	r4,fp
 100b5fc:	29400044 	addi	r5,r5,1
 100b600:	100ad6c0 	call	100ad6c <_Balloc>
 100b604:	b9800417 	ldw	r6,16(r23)
 100b608:	b9400304 	addi	r5,r23,12
 100b60c:	11000304 	addi	r4,r2,12
 100b610:	318d883a 	add	r6,r6,r6
 100b614:	318d883a 	add	r6,r6,r6
 100b618:	31800204 	addi	r6,r6,8
 100b61c:	1023883a 	mov	r17,r2
 100b620:	100a5d40 	call	100a5d4 <memcpy>
 100b624:	b80b883a 	mov	r5,r23
 100b628:	e009883a 	mov	r4,fp
 100b62c:	100a7ec0 	call	100a7ec <_Bfree>
 100b630:	882f883a 	mov	r23,r17
 100b634:	003fdc06 	br	100b5a8 <__multadd+0x9c>

0100b638 <__pow5mult>:
 100b638:	defffa04 	addi	sp,sp,-24
 100b63c:	308000cc 	andi	r2,r6,3
 100b640:	dd000415 	stw	r20,16(sp)
 100b644:	dcc00315 	stw	r19,12(sp)
 100b648:	dc000015 	stw	r16,0(sp)
 100b64c:	dfc00515 	stw	ra,20(sp)
 100b650:	dc800215 	stw	r18,8(sp)
 100b654:	dc400115 	stw	r17,4(sp)
 100b658:	3021883a 	mov	r16,r6
 100b65c:	2027883a 	mov	r19,r4
 100b660:	2829883a 	mov	r20,r5
 100b664:	10002b1e 	bne	r2,zero,100b714 <__pow5mult+0xdc>
 100b668:	8025d0ba 	srai	r18,r16,2
 100b66c:	90001b26 	beq	r18,zero,100b6dc <__pow5mult+0xa4>
 100b670:	9c001217 	ldw	r16,72(r19)
 100b674:	8000081e 	bne	r16,zero,100b698 <__pow5mult+0x60>
 100b678:	00003006 	br	100b73c <__pow5mult+0x104>
 100b67c:	800b883a 	mov	r5,r16
 100b680:	800d883a 	mov	r6,r16
 100b684:	9809883a 	mov	r4,r19
 100b688:	90001426 	beq	r18,zero,100b6dc <__pow5mult+0xa4>
 100b68c:	80800017 	ldw	r2,0(r16)
 100b690:	10001b26 	beq	r2,zero,100b700 <__pow5mult+0xc8>
 100b694:	1021883a 	mov	r16,r2
 100b698:	9080004c 	andi	r2,r18,1
 100b69c:	1005003a 	cmpeq	r2,r2,zero
 100b6a0:	9025d07a 	srai	r18,r18,1
 100b6a4:	800d883a 	mov	r6,r16
 100b6a8:	9809883a 	mov	r4,r19
 100b6ac:	a00b883a 	mov	r5,r20
 100b6b0:	103ff21e 	bne	r2,zero,100b67c <__pow5mult+0x44>
 100b6b4:	100b27c0 	call	100b27c <__multiply>
 100b6b8:	a00b883a 	mov	r5,r20
 100b6bc:	9809883a 	mov	r4,r19
 100b6c0:	1023883a 	mov	r17,r2
 100b6c4:	100a7ec0 	call	100a7ec <_Bfree>
 100b6c8:	8829883a 	mov	r20,r17
 100b6cc:	800b883a 	mov	r5,r16
 100b6d0:	800d883a 	mov	r6,r16
 100b6d4:	9809883a 	mov	r4,r19
 100b6d8:	903fec1e 	bne	r18,zero,100b68c <__pow5mult+0x54>
 100b6dc:	a005883a 	mov	r2,r20
 100b6e0:	dfc00517 	ldw	ra,20(sp)
 100b6e4:	dd000417 	ldw	r20,16(sp)
 100b6e8:	dcc00317 	ldw	r19,12(sp)
 100b6ec:	dc800217 	ldw	r18,8(sp)
 100b6f0:	dc400117 	ldw	r17,4(sp)
 100b6f4:	dc000017 	ldw	r16,0(sp)
 100b6f8:	dec00604 	addi	sp,sp,24
 100b6fc:	f800283a 	ret
 100b700:	100b27c0 	call	100b27c <__multiply>
 100b704:	80800015 	stw	r2,0(r16)
 100b708:	1021883a 	mov	r16,r2
 100b70c:	10000015 	stw	zero,0(r2)
 100b710:	003fe106 	br	100b698 <__pow5mult+0x60>
 100b714:	1085883a 	add	r2,r2,r2
 100b718:	00c04074 	movhi	r3,257
 100b71c:	18ca6e04 	addi	r3,r3,10680
 100b720:	1085883a 	add	r2,r2,r2
 100b724:	10c5883a 	add	r2,r2,r3
 100b728:	11bfff17 	ldw	r6,-4(r2)
 100b72c:	000f883a 	mov	r7,zero
 100b730:	100b50c0 	call	100b50c <__multadd>
 100b734:	1029883a 	mov	r20,r2
 100b738:	003fcb06 	br	100b668 <__pow5mult+0x30>
 100b73c:	9809883a 	mov	r4,r19
 100b740:	01409c44 	movi	r5,625
 100b744:	100b4d00 	call	100b4d0 <__i2b>
 100b748:	98801215 	stw	r2,72(r19)
 100b74c:	1021883a 	mov	r16,r2
 100b750:	10000015 	stw	zero,0(r2)
 100b754:	003fd006 	br	100b698 <__pow5mult+0x60>

0100b758 <__s2b>:
 100b758:	defff904 	addi	sp,sp,-28
 100b75c:	dcc00315 	stw	r19,12(sp)
 100b760:	dc800215 	stw	r18,8(sp)
 100b764:	2827883a 	mov	r19,r5
 100b768:	2025883a 	mov	r18,r4
 100b76c:	01400244 	movi	r5,9
 100b770:	39000204 	addi	r4,r7,8
 100b774:	dd000415 	stw	r20,16(sp)
 100b778:	dc400115 	stw	r17,4(sp)
 100b77c:	dfc00615 	stw	ra,24(sp)
 100b780:	dd400515 	stw	r21,20(sp)
 100b784:	dc000015 	stw	r16,0(sp)
 100b788:	3829883a 	mov	r20,r7
 100b78c:	3023883a 	mov	r17,r6
 100b790:	100469c0 	call	100469c <__divsi3>
 100b794:	00c00044 	movi	r3,1
 100b798:	1880350e 	bge	r3,r2,100b870 <__s2b+0x118>
 100b79c:	000b883a 	mov	r5,zero
 100b7a0:	18c7883a 	add	r3,r3,r3
 100b7a4:	29400044 	addi	r5,r5,1
 100b7a8:	18bffd16 	blt	r3,r2,100b7a0 <__s2b+0x48>
 100b7ac:	9009883a 	mov	r4,r18
 100b7b0:	100ad6c0 	call	100ad6c <_Balloc>
 100b7b4:	1011883a 	mov	r8,r2
 100b7b8:	d8800717 	ldw	r2,28(sp)
 100b7bc:	00c00044 	movi	r3,1
 100b7c0:	01800244 	movi	r6,9
 100b7c4:	40800515 	stw	r2,20(r8)
 100b7c8:	40c00415 	stw	r3,16(r8)
 100b7cc:	3440260e 	bge	r6,r17,100b868 <__s2b+0x110>
 100b7d0:	3021883a 	mov	r16,r6
 100b7d4:	99ab883a 	add	r21,r19,r6
 100b7d8:	9c05883a 	add	r2,r19,r16
 100b7dc:	11c00007 	ldb	r7,0(r2)
 100b7e0:	400b883a 	mov	r5,r8
 100b7e4:	9009883a 	mov	r4,r18
 100b7e8:	39fff404 	addi	r7,r7,-48
 100b7ec:	01800284 	movi	r6,10
 100b7f0:	100b50c0 	call	100b50c <__multadd>
 100b7f4:	84000044 	addi	r16,r16,1
 100b7f8:	1011883a 	mov	r8,r2
 100b7fc:	8c3ff61e 	bne	r17,r16,100b7d8 <__s2b+0x80>
 100b800:	ac45883a 	add	r2,r21,r17
 100b804:	117ffe04 	addi	r5,r2,-8
 100b808:	880d883a 	mov	r6,r17
 100b80c:	35000c0e 	bge	r6,r20,100b840 <__s2b+0xe8>
 100b810:	a185c83a 	sub	r2,r20,r6
 100b814:	2821883a 	mov	r16,r5
 100b818:	28a3883a 	add	r17,r5,r2
 100b81c:	81c00007 	ldb	r7,0(r16)
 100b820:	400b883a 	mov	r5,r8
 100b824:	9009883a 	mov	r4,r18
 100b828:	39fff404 	addi	r7,r7,-48
 100b82c:	01800284 	movi	r6,10
 100b830:	100b50c0 	call	100b50c <__multadd>
 100b834:	84000044 	addi	r16,r16,1
 100b838:	1011883a 	mov	r8,r2
 100b83c:	847ff71e 	bne	r16,r17,100b81c <__s2b+0xc4>
 100b840:	4005883a 	mov	r2,r8
 100b844:	dfc00617 	ldw	ra,24(sp)
 100b848:	dd400517 	ldw	r21,20(sp)
 100b84c:	dd000417 	ldw	r20,16(sp)
 100b850:	dcc00317 	ldw	r19,12(sp)
 100b854:	dc800217 	ldw	r18,8(sp)
 100b858:	dc400117 	ldw	r17,4(sp)
 100b85c:	dc000017 	ldw	r16,0(sp)
 100b860:	dec00704 	addi	sp,sp,28
 100b864:	f800283a 	ret
 100b868:	99400284 	addi	r5,r19,10
 100b86c:	003fe706 	br	100b80c <__s2b+0xb4>
 100b870:	000b883a 	mov	r5,zero
 100b874:	003fcd06 	br	100b7ac <__s2b+0x54>

0100b878 <_realloc_r>:
 100b878:	defff404 	addi	sp,sp,-48
 100b87c:	dd800815 	stw	r22,32(sp)
 100b880:	dc800415 	stw	r18,16(sp)
 100b884:	dc400315 	stw	r17,12(sp)
 100b888:	dfc00b15 	stw	ra,44(sp)
 100b88c:	df000a15 	stw	fp,40(sp)
 100b890:	ddc00915 	stw	r23,36(sp)
 100b894:	dd400715 	stw	r21,28(sp)
 100b898:	dd000615 	stw	r20,24(sp)
 100b89c:	dcc00515 	stw	r19,20(sp)
 100b8a0:	dc000215 	stw	r16,8(sp)
 100b8a4:	2825883a 	mov	r18,r5
 100b8a8:	3023883a 	mov	r17,r6
 100b8ac:	202d883a 	mov	r22,r4
 100b8b0:	2800c926 	beq	r5,zero,100bbd8 <_realloc_r+0x360>
 100b8b4:	100dde80 	call	100dde8 <__malloc_lock>
 100b8b8:	943ffe04 	addi	r16,r18,-8
 100b8bc:	88c002c4 	addi	r3,r17,11
 100b8c0:	00800584 	movi	r2,22
 100b8c4:	82000117 	ldw	r8,4(r16)
 100b8c8:	10c01b2e 	bgeu	r2,r3,100b938 <_realloc_r+0xc0>
 100b8cc:	00bffe04 	movi	r2,-8
 100b8d0:	188e703a 	and	r7,r3,r2
 100b8d4:	3839883a 	mov	fp,r7
 100b8d8:	38001a16 	blt	r7,zero,100b944 <_realloc_r+0xcc>
 100b8dc:	e4401936 	bltu	fp,r17,100b944 <_realloc_r+0xcc>
 100b8e0:	013fff04 	movi	r4,-4
 100b8e4:	4126703a 	and	r19,r8,r4
 100b8e8:	99c02616 	blt	r19,r7,100b984 <_realloc_r+0x10c>
 100b8ec:	802b883a 	mov	r21,r16
 100b8f0:	9829883a 	mov	r20,r19
 100b8f4:	84000204 	addi	r16,r16,8
 100b8f8:	a80f883a 	mov	r7,r21
 100b8fc:	a70dc83a 	sub	r6,r20,fp
 100b900:	008003c4 	movi	r2,15
 100b904:	1180c136 	bltu	r2,r6,100bc0c <_realloc_r+0x394>
 100b908:	38800117 	ldw	r2,4(r7)
 100b90c:	a549883a 	add	r4,r20,r21
 100b910:	1080004c 	andi	r2,r2,1
 100b914:	a084b03a 	or	r2,r20,r2
 100b918:	38800115 	stw	r2,4(r7)
 100b91c:	20c00117 	ldw	r3,4(r4)
 100b920:	18c00054 	ori	r3,r3,1
 100b924:	20c00115 	stw	r3,4(r4)
 100b928:	b009883a 	mov	r4,r22
 100b92c:	100de080 	call	100de08 <__malloc_unlock>
 100b930:	8023883a 	mov	r17,r16
 100b934:	00000606 	br	100b950 <_realloc_r+0xd8>
 100b938:	01c00404 	movi	r7,16
 100b93c:	3839883a 	mov	fp,r7
 100b940:	e47fe72e 	bgeu	fp,r17,100b8e0 <_realloc_r+0x68>
 100b944:	00800304 	movi	r2,12
 100b948:	0023883a 	mov	r17,zero
 100b94c:	b0800015 	stw	r2,0(r22)
 100b950:	8805883a 	mov	r2,r17
 100b954:	dfc00b17 	ldw	ra,44(sp)
 100b958:	df000a17 	ldw	fp,40(sp)
 100b95c:	ddc00917 	ldw	r23,36(sp)
 100b960:	dd800817 	ldw	r22,32(sp)
 100b964:	dd400717 	ldw	r21,28(sp)
 100b968:	dd000617 	ldw	r20,24(sp)
 100b96c:	dcc00517 	ldw	r19,20(sp)
 100b970:	dc800417 	ldw	r18,16(sp)
 100b974:	dc400317 	ldw	r17,12(sp)
 100b978:	dc000217 	ldw	r16,8(sp)
 100b97c:	dec00c04 	addi	sp,sp,48
 100b980:	f800283a 	ret
 100b984:	00804074 	movhi	r2,257
 100b988:	108a9c04 	addi	r2,r2,10864
 100b98c:	12400217 	ldw	r9,8(r2)
 100b990:	84cd883a 	add	r6,r16,r19
 100b994:	802b883a 	mov	r21,r16
 100b998:	3240b926 	beq	r6,r9,100bc80 <_realloc_r+0x408>
 100b99c:	31400117 	ldw	r5,4(r6)
 100b9a0:	00bfff84 	movi	r2,-2
 100b9a4:	2884703a 	and	r2,r5,r2
 100b9a8:	1185883a 	add	r2,r2,r6
 100b9ac:	10c00117 	ldw	r3,4(r2)
 100b9b0:	18c0004c 	andi	r3,r3,1
 100b9b4:	1807003a 	cmpeq	r3,r3,zero
 100b9b8:	1800a326 	beq	r3,zero,100bc48 <_realloc_r+0x3d0>
 100b9bc:	2908703a 	and	r4,r5,r4
 100b9c0:	9929883a 	add	r20,r19,r4
 100b9c4:	a1c0a30e 	bge	r20,r7,100bc54 <_realloc_r+0x3dc>
 100b9c8:	4080004c 	andi	r2,r8,1
 100b9cc:	1000551e 	bne	r2,zero,100bb24 <_realloc_r+0x2ac>
 100b9d0:	80800017 	ldw	r2,0(r16)
 100b9d4:	80afc83a 	sub	r23,r16,r2
 100b9d8:	b8c00117 	ldw	r3,4(r23)
 100b9dc:	00bfff04 	movi	r2,-4
 100b9e0:	1884703a 	and	r2,r3,r2
 100b9e4:	30002e26 	beq	r6,zero,100baa0 <_realloc_r+0x228>
 100b9e8:	3240b926 	beq	r6,r9,100bcd0 <_realloc_r+0x458>
 100b9ec:	98a9883a 	add	r20,r19,r2
 100b9f0:	2509883a 	add	r4,r4,r20
 100b9f4:	d9000015 	stw	r4,0(sp)
 100b9f8:	21c02a16 	blt	r4,r7,100baa4 <_realloc_r+0x22c>
 100b9fc:	30800317 	ldw	r2,12(r6)
 100ba00:	30c00217 	ldw	r3,8(r6)
 100ba04:	01400904 	movi	r5,36
 100ba08:	99bfff04 	addi	r6,r19,-4
 100ba0c:	18800315 	stw	r2,12(r3)
 100ba10:	10c00215 	stw	r3,8(r2)
 100ba14:	b9000317 	ldw	r4,12(r23)
 100ba18:	b8800217 	ldw	r2,8(r23)
 100ba1c:	b82b883a 	mov	r21,r23
 100ba20:	bc000204 	addi	r16,r23,8
 100ba24:	20800215 	stw	r2,8(r4)
 100ba28:	11000315 	stw	r4,12(r2)
 100ba2c:	2980e436 	bltu	r5,r6,100bdc0 <_realloc_r+0x548>
 100ba30:	008004c4 	movi	r2,19
 100ba34:	9009883a 	mov	r4,r18
 100ba38:	8011883a 	mov	r8,r16
 100ba3c:	11800f2e 	bgeu	r2,r6,100ba7c <_realloc_r+0x204>
 100ba40:	90800017 	ldw	r2,0(r18)
 100ba44:	ba000404 	addi	r8,r23,16
 100ba48:	91000204 	addi	r4,r18,8
 100ba4c:	b8800215 	stw	r2,8(r23)
 100ba50:	90c00117 	ldw	r3,4(r18)
 100ba54:	008006c4 	movi	r2,27
 100ba58:	b8c00315 	stw	r3,12(r23)
 100ba5c:	1180072e 	bgeu	r2,r6,100ba7c <_realloc_r+0x204>
 100ba60:	90c00217 	ldw	r3,8(r18)
 100ba64:	ba000604 	addi	r8,r23,24
 100ba68:	91000404 	addi	r4,r18,16
 100ba6c:	b8c00415 	stw	r3,16(r23)
 100ba70:	90800317 	ldw	r2,12(r18)
 100ba74:	b8800515 	stw	r2,20(r23)
 100ba78:	3140e726 	beq	r6,r5,100be18 <_realloc_r+0x5a0>
 100ba7c:	20800017 	ldw	r2,0(r4)
 100ba80:	dd000017 	ldw	r20,0(sp)
 100ba84:	b80f883a 	mov	r7,r23
 100ba88:	40800015 	stw	r2,0(r8)
 100ba8c:	20c00117 	ldw	r3,4(r4)
 100ba90:	40c00115 	stw	r3,4(r8)
 100ba94:	20800217 	ldw	r2,8(r4)
 100ba98:	40800215 	stw	r2,8(r8)
 100ba9c:	003f9706 	br	100b8fc <_realloc_r+0x84>
 100baa0:	98a9883a 	add	r20,r19,r2
 100baa4:	a1c01f16 	blt	r20,r7,100bb24 <_realloc_r+0x2ac>
 100baa8:	b8c00317 	ldw	r3,12(r23)
 100baac:	b8800217 	ldw	r2,8(r23)
 100bab0:	99bfff04 	addi	r6,r19,-4
 100bab4:	01400904 	movi	r5,36
 100bab8:	b82b883a 	mov	r21,r23
 100babc:	18800215 	stw	r2,8(r3)
 100bac0:	10c00315 	stw	r3,12(r2)
 100bac4:	bc000204 	addi	r16,r23,8
 100bac8:	2980c336 	bltu	r5,r6,100bdd8 <_realloc_r+0x560>
 100bacc:	008004c4 	movi	r2,19
 100bad0:	9009883a 	mov	r4,r18
 100bad4:	8011883a 	mov	r8,r16
 100bad8:	11800f2e 	bgeu	r2,r6,100bb18 <_realloc_r+0x2a0>
 100badc:	90800017 	ldw	r2,0(r18)
 100bae0:	ba000404 	addi	r8,r23,16
 100bae4:	91000204 	addi	r4,r18,8
 100bae8:	b8800215 	stw	r2,8(r23)
 100baec:	90c00117 	ldw	r3,4(r18)
 100baf0:	008006c4 	movi	r2,27
 100baf4:	b8c00315 	stw	r3,12(r23)
 100baf8:	1180072e 	bgeu	r2,r6,100bb18 <_realloc_r+0x2a0>
 100bafc:	90c00217 	ldw	r3,8(r18)
 100bb00:	ba000604 	addi	r8,r23,24
 100bb04:	91000404 	addi	r4,r18,16
 100bb08:	b8c00415 	stw	r3,16(r23)
 100bb0c:	90800317 	ldw	r2,12(r18)
 100bb10:	b8800515 	stw	r2,20(r23)
 100bb14:	3140c726 	beq	r6,r5,100be34 <_realloc_r+0x5bc>
 100bb18:	20800017 	ldw	r2,0(r4)
 100bb1c:	b80f883a 	mov	r7,r23
 100bb20:	003fd906 	br	100ba88 <_realloc_r+0x210>
 100bb24:	880b883a 	mov	r5,r17
 100bb28:	b009883a 	mov	r4,r22
 100bb2c:	10051540 	call	1005154 <_malloc_r>
 100bb30:	1023883a 	mov	r17,r2
 100bb34:	10002526 	beq	r2,zero,100bbcc <_realloc_r+0x354>
 100bb38:	80800117 	ldw	r2,4(r16)
 100bb3c:	00ffff84 	movi	r3,-2
 100bb40:	893ffe04 	addi	r4,r17,-8
 100bb44:	10c4703a 	and	r2,r2,r3
 100bb48:	8085883a 	add	r2,r16,r2
 100bb4c:	20809526 	beq	r4,r2,100bda4 <_realloc_r+0x52c>
 100bb50:	99bfff04 	addi	r6,r19,-4
 100bb54:	01c00904 	movi	r7,36
 100bb58:	39804536 	bltu	r7,r6,100bc70 <_realloc_r+0x3f8>
 100bb5c:	008004c4 	movi	r2,19
 100bb60:	9009883a 	mov	r4,r18
 100bb64:	880b883a 	mov	r5,r17
 100bb68:	11800f2e 	bgeu	r2,r6,100bba8 <_realloc_r+0x330>
 100bb6c:	90800017 	ldw	r2,0(r18)
 100bb70:	89400204 	addi	r5,r17,8
 100bb74:	91000204 	addi	r4,r18,8
 100bb78:	88800015 	stw	r2,0(r17)
 100bb7c:	90c00117 	ldw	r3,4(r18)
 100bb80:	008006c4 	movi	r2,27
 100bb84:	88c00115 	stw	r3,4(r17)
 100bb88:	1180072e 	bgeu	r2,r6,100bba8 <_realloc_r+0x330>
 100bb8c:	90c00217 	ldw	r3,8(r18)
 100bb90:	89400404 	addi	r5,r17,16
 100bb94:	91000404 	addi	r4,r18,16
 100bb98:	88c00215 	stw	r3,8(r17)
 100bb9c:	90800317 	ldw	r2,12(r18)
 100bba0:	88800315 	stw	r2,12(r17)
 100bba4:	31c09126 	beq	r6,r7,100bdec <_realloc_r+0x574>
 100bba8:	20800017 	ldw	r2,0(r4)
 100bbac:	28800015 	stw	r2,0(r5)
 100bbb0:	20c00117 	ldw	r3,4(r4)
 100bbb4:	28c00115 	stw	r3,4(r5)
 100bbb8:	20800217 	ldw	r2,8(r4)
 100bbbc:	28800215 	stw	r2,8(r5)
 100bbc0:	900b883a 	mov	r5,r18
 100bbc4:	b009883a 	mov	r4,r22
 100bbc8:	10099680 	call	1009968 <_free_r>
 100bbcc:	b009883a 	mov	r4,r22
 100bbd0:	100de080 	call	100de08 <__malloc_unlock>
 100bbd4:	003f5e06 	br	100b950 <_realloc_r+0xd8>
 100bbd8:	300b883a 	mov	r5,r6
 100bbdc:	dfc00b17 	ldw	ra,44(sp)
 100bbe0:	df000a17 	ldw	fp,40(sp)
 100bbe4:	ddc00917 	ldw	r23,36(sp)
 100bbe8:	dd800817 	ldw	r22,32(sp)
 100bbec:	dd400717 	ldw	r21,28(sp)
 100bbf0:	dd000617 	ldw	r20,24(sp)
 100bbf4:	dcc00517 	ldw	r19,20(sp)
 100bbf8:	dc800417 	ldw	r18,16(sp)
 100bbfc:	dc400317 	ldw	r17,12(sp)
 100bc00:	dc000217 	ldw	r16,8(sp)
 100bc04:	dec00c04 	addi	sp,sp,48
 100bc08:	10051541 	jmpi	1005154 <_malloc_r>
 100bc0c:	38800117 	ldw	r2,4(r7)
 100bc10:	e54b883a 	add	r5,fp,r21
 100bc14:	31000054 	ori	r4,r6,1
 100bc18:	1080004c 	andi	r2,r2,1
 100bc1c:	1704b03a 	or	r2,r2,fp
 100bc20:	38800115 	stw	r2,4(r7)
 100bc24:	29000115 	stw	r4,4(r5)
 100bc28:	2987883a 	add	r3,r5,r6
 100bc2c:	18800117 	ldw	r2,4(r3)
 100bc30:	29400204 	addi	r5,r5,8
 100bc34:	b009883a 	mov	r4,r22
 100bc38:	10800054 	ori	r2,r2,1
 100bc3c:	18800115 	stw	r2,4(r3)
 100bc40:	10099680 	call	1009968 <_free_r>
 100bc44:	003f3806 	br	100b928 <_realloc_r+0xb0>
 100bc48:	000d883a 	mov	r6,zero
 100bc4c:	0009883a 	mov	r4,zero
 100bc50:	003f5d06 	br	100b9c8 <_realloc_r+0x150>
 100bc54:	30c00217 	ldw	r3,8(r6)
 100bc58:	30800317 	ldw	r2,12(r6)
 100bc5c:	800f883a 	mov	r7,r16
 100bc60:	84000204 	addi	r16,r16,8
 100bc64:	10c00215 	stw	r3,8(r2)
 100bc68:	18800315 	stw	r2,12(r3)
 100bc6c:	003f2306 	br	100b8fc <_realloc_r+0x84>
 100bc70:	8809883a 	mov	r4,r17
 100bc74:	900b883a 	mov	r5,r18
 100bc78:	100a6740 	call	100a674 <memmove>
 100bc7c:	003fd006 	br	100bbc0 <_realloc_r+0x348>
 100bc80:	30800117 	ldw	r2,4(r6)
 100bc84:	e0c00404 	addi	r3,fp,16
 100bc88:	1108703a 	and	r4,r2,r4
 100bc8c:	9905883a 	add	r2,r19,r4
 100bc90:	10ff4d16 	blt	r2,r3,100b9c8 <_realloc_r+0x150>
 100bc94:	1705c83a 	sub	r2,r2,fp
 100bc98:	870b883a 	add	r5,r16,fp
 100bc9c:	10800054 	ori	r2,r2,1
 100bca0:	28800115 	stw	r2,4(r5)
 100bca4:	80c00117 	ldw	r3,4(r16)
 100bca8:	00804074 	movhi	r2,257
 100bcac:	108a9c04 	addi	r2,r2,10864
 100bcb0:	b009883a 	mov	r4,r22
 100bcb4:	18c0004c 	andi	r3,r3,1
 100bcb8:	e0c6b03a 	or	r3,fp,r3
 100bcbc:	11400215 	stw	r5,8(r2)
 100bcc0:	80c00115 	stw	r3,4(r16)
 100bcc4:	100de080 	call	100de08 <__malloc_unlock>
 100bcc8:	84400204 	addi	r17,r16,8
 100bccc:	003f2006 	br	100b950 <_realloc_r+0xd8>
 100bcd0:	98a9883a 	add	r20,r19,r2
 100bcd4:	2509883a 	add	r4,r4,r20
 100bcd8:	e0800404 	addi	r2,fp,16
 100bcdc:	d9000115 	stw	r4,4(sp)
 100bce0:	20bf7016 	blt	r4,r2,100baa4 <_realloc_r+0x22c>
 100bce4:	b8c00317 	ldw	r3,12(r23)
 100bce8:	b8800217 	ldw	r2,8(r23)
 100bcec:	99bfff04 	addi	r6,r19,-4
 100bcf0:	01400904 	movi	r5,36
 100bcf4:	18800215 	stw	r2,8(r3)
 100bcf8:	10c00315 	stw	r3,12(r2)
 100bcfc:	bc400204 	addi	r17,r23,8
 100bd00:	29804136 	bltu	r5,r6,100be08 <_realloc_r+0x590>
 100bd04:	008004c4 	movi	r2,19
 100bd08:	9009883a 	mov	r4,r18
 100bd0c:	880f883a 	mov	r7,r17
 100bd10:	11800f2e 	bgeu	r2,r6,100bd50 <_realloc_r+0x4d8>
 100bd14:	90800017 	ldw	r2,0(r18)
 100bd18:	b9c00404 	addi	r7,r23,16
 100bd1c:	91000204 	addi	r4,r18,8
 100bd20:	b8800215 	stw	r2,8(r23)
 100bd24:	90c00117 	ldw	r3,4(r18)
 100bd28:	008006c4 	movi	r2,27
 100bd2c:	b8c00315 	stw	r3,12(r23)
 100bd30:	1180072e 	bgeu	r2,r6,100bd50 <_realloc_r+0x4d8>
 100bd34:	90c00217 	ldw	r3,8(r18)
 100bd38:	b9c00604 	addi	r7,r23,24
 100bd3c:	91000404 	addi	r4,r18,16
 100bd40:	b8c00415 	stw	r3,16(r23)
 100bd44:	90800317 	ldw	r2,12(r18)
 100bd48:	b8800515 	stw	r2,20(r23)
 100bd4c:	31404026 	beq	r6,r5,100be50 <_realloc_r+0x5d8>
 100bd50:	20800017 	ldw	r2,0(r4)
 100bd54:	38800015 	stw	r2,0(r7)
 100bd58:	20c00117 	ldw	r3,4(r4)
 100bd5c:	38c00115 	stw	r3,4(r7)
 100bd60:	20800217 	ldw	r2,8(r4)
 100bd64:	38800215 	stw	r2,8(r7)
 100bd68:	d8c00117 	ldw	r3,4(sp)
 100bd6c:	bf0b883a 	add	r5,r23,fp
 100bd70:	b009883a 	mov	r4,r22
 100bd74:	1f05c83a 	sub	r2,r3,fp
 100bd78:	10800054 	ori	r2,r2,1
 100bd7c:	28800115 	stw	r2,4(r5)
 100bd80:	b8c00117 	ldw	r3,4(r23)
 100bd84:	00804074 	movhi	r2,257
 100bd88:	108a9c04 	addi	r2,r2,10864
 100bd8c:	11400215 	stw	r5,8(r2)
 100bd90:	18c0004c 	andi	r3,r3,1
 100bd94:	e0c6b03a 	or	r3,fp,r3
 100bd98:	b8c00115 	stw	r3,4(r23)
 100bd9c:	100de080 	call	100de08 <__malloc_unlock>
 100bda0:	003eeb06 	br	100b950 <_realloc_r+0xd8>
 100bda4:	20800117 	ldw	r2,4(r4)
 100bda8:	00ffff04 	movi	r3,-4
 100bdac:	800f883a 	mov	r7,r16
 100bdb0:	10c4703a 	and	r2,r2,r3
 100bdb4:	98a9883a 	add	r20,r19,r2
 100bdb8:	84000204 	addi	r16,r16,8
 100bdbc:	003ecf06 	br	100b8fc <_realloc_r+0x84>
 100bdc0:	900b883a 	mov	r5,r18
 100bdc4:	8009883a 	mov	r4,r16
 100bdc8:	100a6740 	call	100a674 <memmove>
 100bdcc:	dd000017 	ldw	r20,0(sp)
 100bdd0:	b80f883a 	mov	r7,r23
 100bdd4:	003ec906 	br	100b8fc <_realloc_r+0x84>
 100bdd8:	900b883a 	mov	r5,r18
 100bddc:	8009883a 	mov	r4,r16
 100bde0:	100a6740 	call	100a674 <memmove>
 100bde4:	b80f883a 	mov	r7,r23
 100bde8:	003ec406 	br	100b8fc <_realloc_r+0x84>
 100bdec:	90c00417 	ldw	r3,16(r18)
 100bdf0:	89400604 	addi	r5,r17,24
 100bdf4:	91000604 	addi	r4,r18,24
 100bdf8:	88c00415 	stw	r3,16(r17)
 100bdfc:	90800517 	ldw	r2,20(r18)
 100be00:	88800515 	stw	r2,20(r17)
 100be04:	003f6806 	br	100bba8 <_realloc_r+0x330>
 100be08:	900b883a 	mov	r5,r18
 100be0c:	8809883a 	mov	r4,r17
 100be10:	100a6740 	call	100a674 <memmove>
 100be14:	003fd406 	br	100bd68 <_realloc_r+0x4f0>
 100be18:	90c00417 	ldw	r3,16(r18)
 100be1c:	91000604 	addi	r4,r18,24
 100be20:	ba000804 	addi	r8,r23,32
 100be24:	b8c00615 	stw	r3,24(r23)
 100be28:	90800517 	ldw	r2,20(r18)
 100be2c:	b8800715 	stw	r2,28(r23)
 100be30:	003f1206 	br	100ba7c <_realloc_r+0x204>
 100be34:	90c00417 	ldw	r3,16(r18)
 100be38:	91000604 	addi	r4,r18,24
 100be3c:	ba000804 	addi	r8,r23,32
 100be40:	b8c00615 	stw	r3,24(r23)
 100be44:	90800517 	ldw	r2,20(r18)
 100be48:	b8800715 	stw	r2,28(r23)
 100be4c:	003f3206 	br	100bb18 <_realloc_r+0x2a0>
 100be50:	90c00417 	ldw	r3,16(r18)
 100be54:	91000604 	addi	r4,r18,24
 100be58:	b9c00804 	addi	r7,r23,32
 100be5c:	b8c00615 	stw	r3,24(r23)
 100be60:	90800517 	ldw	r2,20(r18)
 100be64:	b8800715 	stw	r2,28(r23)
 100be68:	003fb906 	br	100bd50 <_realloc_r+0x4d8>

0100be6c <__isinfd>:
 100be6c:	200d883a 	mov	r6,r4
 100be70:	0109c83a 	sub	r4,zero,r4
 100be74:	2188b03a 	or	r4,r4,r6
 100be78:	2008d7fa 	srli	r4,r4,31
 100be7c:	00a00034 	movhi	r2,32768
 100be80:	10bfffc4 	addi	r2,r2,-1
 100be84:	1144703a 	and	r2,r2,r5
 100be88:	2088b03a 	or	r4,r4,r2
 100be8c:	009ffc34 	movhi	r2,32752
 100be90:	1105c83a 	sub	r2,r2,r4
 100be94:	0087c83a 	sub	r3,zero,r2
 100be98:	10c4b03a 	or	r2,r2,r3
 100be9c:	1004d7fa 	srli	r2,r2,31
 100bea0:	00c00044 	movi	r3,1
 100bea4:	1885c83a 	sub	r2,r3,r2
 100bea8:	f800283a 	ret

0100beac <__isnand>:
 100beac:	200d883a 	mov	r6,r4
 100beb0:	0109c83a 	sub	r4,zero,r4
 100beb4:	2188b03a 	or	r4,r4,r6
 100beb8:	2008d7fa 	srli	r4,r4,31
 100bebc:	00a00034 	movhi	r2,32768
 100bec0:	10bfffc4 	addi	r2,r2,-1
 100bec4:	1144703a 	and	r2,r2,r5
 100bec8:	2088b03a 	or	r4,r4,r2
 100becc:	009ffc34 	movhi	r2,32752
 100bed0:	1105c83a 	sub	r2,r2,r4
 100bed4:	1004d7fa 	srli	r2,r2,31
 100bed8:	f800283a 	ret

0100bedc <__sclose>:
 100bedc:	2940038f 	ldh	r5,14(r5)
 100bee0:	100c2241 	jmpi	100c224 <_close_r>

0100bee4 <__sseek>:
 100bee4:	defffe04 	addi	sp,sp,-8
 100bee8:	dc000015 	stw	r16,0(sp)
 100beec:	2821883a 	mov	r16,r5
 100bef0:	2940038f 	ldh	r5,14(r5)
 100bef4:	dfc00115 	stw	ra,4(sp)
 100bef8:	100c49c0 	call	100c49c <_lseek_r>
 100befc:	1007883a 	mov	r3,r2
 100bf00:	00bfffc4 	movi	r2,-1
 100bf04:	18800926 	beq	r3,r2,100bf2c <__sseek+0x48>
 100bf08:	8080030b 	ldhu	r2,12(r16)
 100bf0c:	80c01415 	stw	r3,80(r16)
 100bf10:	10840014 	ori	r2,r2,4096
 100bf14:	8080030d 	sth	r2,12(r16)
 100bf18:	1805883a 	mov	r2,r3
 100bf1c:	dfc00117 	ldw	ra,4(sp)
 100bf20:	dc000017 	ldw	r16,0(sp)
 100bf24:	dec00204 	addi	sp,sp,8
 100bf28:	f800283a 	ret
 100bf2c:	8080030b 	ldhu	r2,12(r16)
 100bf30:	10bbffcc 	andi	r2,r2,61439
 100bf34:	8080030d 	sth	r2,12(r16)
 100bf38:	1805883a 	mov	r2,r3
 100bf3c:	dfc00117 	ldw	ra,4(sp)
 100bf40:	dc000017 	ldw	r16,0(sp)
 100bf44:	dec00204 	addi	sp,sp,8
 100bf48:	f800283a 	ret

0100bf4c <__swrite>:
 100bf4c:	2880030b 	ldhu	r2,12(r5)
 100bf50:	defffb04 	addi	sp,sp,-20
 100bf54:	dcc00315 	stw	r19,12(sp)
 100bf58:	1080400c 	andi	r2,r2,256
 100bf5c:	dc800215 	stw	r18,8(sp)
 100bf60:	dc400115 	stw	r17,4(sp)
 100bf64:	dc000015 	stw	r16,0(sp)
 100bf68:	3027883a 	mov	r19,r6
 100bf6c:	3825883a 	mov	r18,r7
 100bf70:	dfc00415 	stw	ra,16(sp)
 100bf74:	2821883a 	mov	r16,r5
 100bf78:	000d883a 	mov	r6,zero
 100bf7c:	01c00084 	movi	r7,2
 100bf80:	2023883a 	mov	r17,r4
 100bf84:	10000226 	beq	r2,zero,100bf90 <__swrite+0x44>
 100bf88:	2940038f 	ldh	r5,14(r5)
 100bf8c:	100c49c0 	call	100c49c <_lseek_r>
 100bf90:	8080030b 	ldhu	r2,12(r16)
 100bf94:	8140038f 	ldh	r5,14(r16)
 100bf98:	8809883a 	mov	r4,r17
 100bf9c:	10bbffcc 	andi	r2,r2,61439
 100bfa0:	980d883a 	mov	r6,r19
 100bfa4:	900f883a 	mov	r7,r18
 100bfa8:	8080030d 	sth	r2,12(r16)
 100bfac:	dfc00417 	ldw	ra,16(sp)
 100bfb0:	dcc00317 	ldw	r19,12(sp)
 100bfb4:	dc800217 	ldw	r18,8(sp)
 100bfb8:	dc400117 	ldw	r17,4(sp)
 100bfbc:	dc000017 	ldw	r16,0(sp)
 100bfc0:	dec00504 	addi	sp,sp,20
 100bfc4:	100c0e41 	jmpi	100c0e4 <_write_r>

0100bfc8 <__sread>:
 100bfc8:	defffe04 	addi	sp,sp,-8
 100bfcc:	dc000015 	stw	r16,0(sp)
 100bfd0:	2821883a 	mov	r16,r5
 100bfd4:	2940038f 	ldh	r5,14(r5)
 100bfd8:	dfc00115 	stw	ra,4(sp)
 100bfdc:	100c5140 	call	100c514 <_read_r>
 100bfe0:	1007883a 	mov	r3,r2
 100bfe4:	10000816 	blt	r2,zero,100c008 <__sread+0x40>
 100bfe8:	80801417 	ldw	r2,80(r16)
 100bfec:	10c5883a 	add	r2,r2,r3
 100bff0:	80801415 	stw	r2,80(r16)
 100bff4:	1805883a 	mov	r2,r3
 100bff8:	dfc00117 	ldw	ra,4(sp)
 100bffc:	dc000017 	ldw	r16,0(sp)
 100c000:	dec00204 	addi	sp,sp,8
 100c004:	f800283a 	ret
 100c008:	8080030b 	ldhu	r2,12(r16)
 100c00c:	10bbffcc 	andi	r2,r2,61439
 100c010:	8080030d 	sth	r2,12(r16)
 100c014:	1805883a 	mov	r2,r3
 100c018:	dfc00117 	ldw	ra,4(sp)
 100c01c:	dc000017 	ldw	r16,0(sp)
 100c020:	dec00204 	addi	sp,sp,8
 100c024:	f800283a 	ret

0100c028 <strcmp>:
 100c028:	2144b03a 	or	r2,r4,r5
 100c02c:	108000cc 	andi	r2,r2,3
 100c030:	10001d1e 	bne	r2,zero,100c0a8 <strcmp+0x80>
 100c034:	200f883a 	mov	r7,r4
 100c038:	28800017 	ldw	r2,0(r5)
 100c03c:	21000017 	ldw	r4,0(r4)
 100c040:	280d883a 	mov	r6,r5
 100c044:	2080161e 	bne	r4,r2,100c0a0 <strcmp+0x78>
 100c048:	023fbff4 	movhi	r8,65279
 100c04c:	423fbfc4 	addi	r8,r8,-257
 100c050:	2207883a 	add	r3,r4,r8
 100c054:	01602074 	movhi	r5,32897
 100c058:	29602004 	addi	r5,r5,-32640
 100c05c:	1946703a 	and	r3,r3,r5
 100c060:	0104303a 	nor	r2,zero,r4
 100c064:	10c4703a 	and	r2,r2,r3
 100c068:	10001c1e 	bne	r2,zero,100c0dc <strcmp+0xb4>
 100c06c:	4013883a 	mov	r9,r8
 100c070:	2811883a 	mov	r8,r5
 100c074:	00000106 	br	100c07c <strcmp+0x54>
 100c078:	1800181e 	bne	r3,zero,100c0dc <strcmp+0xb4>
 100c07c:	39c00104 	addi	r7,r7,4
 100c080:	39000017 	ldw	r4,0(r7)
 100c084:	31800104 	addi	r6,r6,4
 100c088:	31400017 	ldw	r5,0(r6)
 100c08c:	2245883a 	add	r2,r4,r9
 100c090:	1204703a 	and	r2,r2,r8
 100c094:	0106303a 	nor	r3,zero,r4
 100c098:	1886703a 	and	r3,r3,r2
 100c09c:	217ff626 	beq	r4,r5,100c078 <strcmp+0x50>
 100c0a0:	3809883a 	mov	r4,r7
 100c0a4:	300b883a 	mov	r5,r6
 100c0a8:	20c00007 	ldb	r3,0(r4)
 100c0ac:	1800051e 	bne	r3,zero,100c0c4 <strcmp+0x9c>
 100c0b0:	00000606 	br	100c0cc <strcmp+0xa4>
 100c0b4:	21000044 	addi	r4,r4,1
 100c0b8:	20c00007 	ldb	r3,0(r4)
 100c0bc:	29400044 	addi	r5,r5,1
 100c0c0:	18000226 	beq	r3,zero,100c0cc <strcmp+0xa4>
 100c0c4:	28800007 	ldb	r2,0(r5)
 100c0c8:	18bffa26 	beq	r3,r2,100c0b4 <strcmp+0x8c>
 100c0cc:	20c00003 	ldbu	r3,0(r4)
 100c0d0:	28800003 	ldbu	r2,0(r5)
 100c0d4:	1885c83a 	sub	r2,r3,r2
 100c0d8:	f800283a 	ret
 100c0dc:	0005883a 	mov	r2,zero
 100c0e0:	f800283a 	ret

0100c0e4 <_write_r>:
 100c0e4:	defffd04 	addi	sp,sp,-12
 100c0e8:	dc000015 	stw	r16,0(sp)
 100c0ec:	04004074 	movhi	r16,257
 100c0f0:	84183104 	addi	r16,r16,24772
 100c0f4:	dc400115 	stw	r17,4(sp)
 100c0f8:	80000015 	stw	zero,0(r16)
 100c0fc:	2023883a 	mov	r17,r4
 100c100:	2809883a 	mov	r4,r5
 100c104:	300b883a 	mov	r5,r6
 100c108:	380d883a 	mov	r6,r7
 100c10c:	dfc00215 	stw	ra,8(sp)
 100c110:	100e1100 	call	100e110 <write>
 100c114:	1007883a 	mov	r3,r2
 100c118:	00bfffc4 	movi	r2,-1
 100c11c:	18800626 	beq	r3,r2,100c138 <_write_r+0x54>
 100c120:	1805883a 	mov	r2,r3
 100c124:	dfc00217 	ldw	ra,8(sp)
 100c128:	dc400117 	ldw	r17,4(sp)
 100c12c:	dc000017 	ldw	r16,0(sp)
 100c130:	dec00304 	addi	sp,sp,12
 100c134:	f800283a 	ret
 100c138:	80800017 	ldw	r2,0(r16)
 100c13c:	103ff826 	beq	r2,zero,100c120 <_write_r+0x3c>
 100c140:	88800015 	stw	r2,0(r17)
 100c144:	1805883a 	mov	r2,r3
 100c148:	dfc00217 	ldw	ra,8(sp)
 100c14c:	dc400117 	ldw	r17,4(sp)
 100c150:	dc000017 	ldw	r16,0(sp)
 100c154:	dec00304 	addi	sp,sp,12
 100c158:	f800283a 	ret

0100c15c <_calloc_r>:
 100c15c:	defffe04 	addi	sp,sp,-8
 100c160:	dc400015 	stw	r17,0(sp)
 100c164:	2023883a 	mov	r17,r4
 100c168:	2809883a 	mov	r4,r5
 100c16c:	300b883a 	mov	r5,r6
 100c170:	dfc00115 	stw	ra,4(sp)
 100c174:	100476c0 	call	100476c <__mulsi3>
 100c178:	100b883a 	mov	r5,r2
 100c17c:	8809883a 	mov	r4,r17
 100c180:	10051540 	call	1005154 <_malloc_r>
 100c184:	1023883a 	mov	r17,r2
 100c188:	01c00904 	movi	r7,36
 100c18c:	10000d26 	beq	r2,zero,100c1c4 <_calloc_r+0x68>
 100c190:	10ffff17 	ldw	r3,-4(r2)
 100c194:	1009883a 	mov	r4,r2
 100c198:	00bfff04 	movi	r2,-4
 100c19c:	1886703a 	and	r3,r3,r2
 100c1a0:	1887883a 	add	r3,r3,r2
 100c1a4:	180d883a 	mov	r6,r3
 100c1a8:	000b883a 	mov	r5,zero
 100c1ac:	38c01736 	bltu	r7,r3,100c20c <_calloc_r+0xb0>
 100c1b0:	008004c4 	movi	r2,19
 100c1b4:	10c00836 	bltu	r2,r3,100c1d8 <_calloc_r+0x7c>
 100c1b8:	20000215 	stw	zero,8(r4)
 100c1bc:	20000015 	stw	zero,0(r4)
 100c1c0:	20000115 	stw	zero,4(r4)
 100c1c4:	8805883a 	mov	r2,r17
 100c1c8:	dfc00117 	ldw	ra,4(sp)
 100c1cc:	dc400017 	ldw	r17,0(sp)
 100c1d0:	dec00204 	addi	sp,sp,8
 100c1d4:	f800283a 	ret
 100c1d8:	008006c4 	movi	r2,27
 100c1dc:	88000015 	stw	zero,0(r17)
 100c1e0:	88000115 	stw	zero,4(r17)
 100c1e4:	89000204 	addi	r4,r17,8
 100c1e8:	10fff32e 	bgeu	r2,r3,100c1b8 <_calloc_r+0x5c>
 100c1ec:	88000215 	stw	zero,8(r17)
 100c1f0:	88000315 	stw	zero,12(r17)
 100c1f4:	89000404 	addi	r4,r17,16
 100c1f8:	19ffef1e 	bne	r3,r7,100c1b8 <_calloc_r+0x5c>
 100c1fc:	89000604 	addi	r4,r17,24
 100c200:	88000415 	stw	zero,16(r17)
 100c204:	88000515 	stw	zero,20(r17)
 100c208:	003feb06 	br	100c1b8 <_calloc_r+0x5c>
 100c20c:	100a7540 	call	100a754 <memset>
 100c210:	8805883a 	mov	r2,r17
 100c214:	dfc00117 	ldw	ra,4(sp)
 100c218:	dc400017 	ldw	r17,0(sp)
 100c21c:	dec00204 	addi	sp,sp,8
 100c220:	f800283a 	ret

0100c224 <_close_r>:
 100c224:	defffd04 	addi	sp,sp,-12
 100c228:	dc000015 	stw	r16,0(sp)
 100c22c:	04004074 	movhi	r16,257
 100c230:	84183104 	addi	r16,r16,24772
 100c234:	dc400115 	stw	r17,4(sp)
 100c238:	80000015 	stw	zero,0(r16)
 100c23c:	2023883a 	mov	r17,r4
 100c240:	2809883a 	mov	r4,r5
 100c244:	dfc00215 	stw	ra,8(sp)
 100c248:	100d7540 	call	100d754 <close>
 100c24c:	1007883a 	mov	r3,r2
 100c250:	00bfffc4 	movi	r2,-1
 100c254:	18800626 	beq	r3,r2,100c270 <_close_r+0x4c>
 100c258:	1805883a 	mov	r2,r3
 100c25c:	dfc00217 	ldw	ra,8(sp)
 100c260:	dc400117 	ldw	r17,4(sp)
 100c264:	dc000017 	ldw	r16,0(sp)
 100c268:	dec00304 	addi	sp,sp,12
 100c26c:	f800283a 	ret
 100c270:	80800017 	ldw	r2,0(r16)
 100c274:	103ff826 	beq	r2,zero,100c258 <_close_r+0x34>
 100c278:	88800015 	stw	r2,0(r17)
 100c27c:	1805883a 	mov	r2,r3
 100c280:	dfc00217 	ldw	ra,8(sp)
 100c284:	dc400117 	ldw	r17,4(sp)
 100c288:	dc000017 	ldw	r16,0(sp)
 100c28c:	dec00304 	addi	sp,sp,12
 100c290:	f800283a 	ret

0100c294 <_fclose_r>:
 100c294:	defffc04 	addi	sp,sp,-16
 100c298:	dc400115 	stw	r17,4(sp)
 100c29c:	dc000015 	stw	r16,0(sp)
 100c2a0:	dfc00315 	stw	ra,12(sp)
 100c2a4:	dc800215 	stw	r18,8(sp)
 100c2a8:	2821883a 	mov	r16,r5
 100c2ac:	2023883a 	mov	r17,r4
 100c2b0:	28002926 	beq	r5,zero,100c358 <_fclose_r+0xc4>
 100c2b4:	10095a00 	call	10095a0 <__sfp_lock_acquire>
 100c2b8:	88000226 	beq	r17,zero,100c2c4 <_fclose_r+0x30>
 100c2bc:	88800e17 	ldw	r2,56(r17)
 100c2c0:	10002d26 	beq	r2,zero,100c378 <_fclose_r+0xe4>
 100c2c4:	8080030f 	ldh	r2,12(r16)
 100c2c8:	10002226 	beq	r2,zero,100c354 <_fclose_r+0xc0>
 100c2cc:	8809883a 	mov	r4,r17
 100c2d0:	800b883a 	mov	r5,r16
 100c2d4:	10093180 	call	1009318 <_fflush_r>
 100c2d8:	1025883a 	mov	r18,r2
 100c2dc:	80800b17 	ldw	r2,44(r16)
 100c2e0:	10000426 	beq	r2,zero,100c2f4 <_fclose_r+0x60>
 100c2e4:	81400717 	ldw	r5,28(r16)
 100c2e8:	8809883a 	mov	r4,r17
 100c2ec:	103ee83a 	callr	r2
 100c2f0:	10002a16 	blt	r2,zero,100c39c <_fclose_r+0x108>
 100c2f4:	8080030b 	ldhu	r2,12(r16)
 100c2f8:	1080200c 	andi	r2,r2,128
 100c2fc:	1000231e 	bne	r2,zero,100c38c <_fclose_r+0xf8>
 100c300:	81400c17 	ldw	r5,48(r16)
 100c304:	28000526 	beq	r5,zero,100c31c <_fclose_r+0x88>
 100c308:	80801004 	addi	r2,r16,64
 100c30c:	28800226 	beq	r5,r2,100c318 <_fclose_r+0x84>
 100c310:	8809883a 	mov	r4,r17
 100c314:	10099680 	call	1009968 <_free_r>
 100c318:	80000c15 	stw	zero,48(r16)
 100c31c:	81401117 	ldw	r5,68(r16)
 100c320:	28000326 	beq	r5,zero,100c330 <_fclose_r+0x9c>
 100c324:	8809883a 	mov	r4,r17
 100c328:	10099680 	call	1009968 <_free_r>
 100c32c:	80001115 	stw	zero,68(r16)
 100c330:	8000030d 	sth	zero,12(r16)
 100c334:	10095a40 	call	10095a4 <__sfp_lock_release>
 100c338:	9005883a 	mov	r2,r18
 100c33c:	dfc00317 	ldw	ra,12(sp)
 100c340:	dc800217 	ldw	r18,8(sp)
 100c344:	dc400117 	ldw	r17,4(sp)
 100c348:	dc000017 	ldw	r16,0(sp)
 100c34c:	dec00404 	addi	sp,sp,16
 100c350:	f800283a 	ret
 100c354:	10095a40 	call	10095a4 <__sfp_lock_release>
 100c358:	0025883a 	mov	r18,zero
 100c35c:	9005883a 	mov	r2,r18
 100c360:	dfc00317 	ldw	ra,12(sp)
 100c364:	dc800217 	ldw	r18,8(sp)
 100c368:	dc400117 	ldw	r17,4(sp)
 100c36c:	dc000017 	ldw	r16,0(sp)
 100c370:	dec00404 	addi	sp,sp,16
 100c374:	f800283a 	ret
 100c378:	8809883a 	mov	r4,r17
 100c37c:	10095b00 	call	10095b0 <__sinit>
 100c380:	8080030f 	ldh	r2,12(r16)
 100c384:	103fd11e 	bne	r2,zero,100c2cc <_fclose_r+0x38>
 100c388:	003ff206 	br	100c354 <_fclose_r+0xc0>
 100c38c:	81400417 	ldw	r5,16(r16)
 100c390:	8809883a 	mov	r4,r17
 100c394:	10099680 	call	1009968 <_free_r>
 100c398:	003fd906 	br	100c300 <_fclose_r+0x6c>
 100c39c:	04bfffc4 	movi	r18,-1
 100c3a0:	003fd406 	br	100c2f4 <_fclose_r+0x60>

0100c3a4 <fclose>:
 100c3a4:	00804074 	movhi	r2,257
 100c3a8:	10915704 	addi	r2,r2,17756
 100c3ac:	200b883a 	mov	r5,r4
 100c3b0:	11000017 	ldw	r4,0(r2)
 100c3b4:	100c2941 	jmpi	100c294 <_fclose_r>

0100c3b8 <_fstat_r>:
 100c3b8:	defffd04 	addi	sp,sp,-12
 100c3bc:	dc000015 	stw	r16,0(sp)
 100c3c0:	04004074 	movhi	r16,257
 100c3c4:	84183104 	addi	r16,r16,24772
 100c3c8:	dc400115 	stw	r17,4(sp)
 100c3cc:	80000015 	stw	zero,0(r16)
 100c3d0:	2023883a 	mov	r17,r4
 100c3d4:	2809883a 	mov	r4,r5
 100c3d8:	300b883a 	mov	r5,r6
 100c3dc:	dfc00215 	stw	ra,8(sp)
 100c3e0:	100d8e00 	call	100d8e0 <fstat>
 100c3e4:	1007883a 	mov	r3,r2
 100c3e8:	00bfffc4 	movi	r2,-1
 100c3ec:	18800626 	beq	r3,r2,100c408 <_fstat_r+0x50>
 100c3f0:	1805883a 	mov	r2,r3
 100c3f4:	dfc00217 	ldw	ra,8(sp)
 100c3f8:	dc400117 	ldw	r17,4(sp)
 100c3fc:	dc000017 	ldw	r16,0(sp)
 100c400:	dec00304 	addi	sp,sp,12
 100c404:	f800283a 	ret
 100c408:	80800017 	ldw	r2,0(r16)
 100c40c:	103ff826 	beq	r2,zero,100c3f0 <_fstat_r+0x38>
 100c410:	88800015 	stw	r2,0(r17)
 100c414:	1805883a 	mov	r2,r3
 100c418:	dfc00217 	ldw	ra,8(sp)
 100c41c:	dc400117 	ldw	r17,4(sp)
 100c420:	dc000017 	ldw	r16,0(sp)
 100c424:	dec00304 	addi	sp,sp,12
 100c428:	f800283a 	ret

0100c42c <_isatty_r>:
 100c42c:	defffd04 	addi	sp,sp,-12
 100c430:	dc000015 	stw	r16,0(sp)
 100c434:	04004074 	movhi	r16,257
 100c438:	84183104 	addi	r16,r16,24772
 100c43c:	dc400115 	stw	r17,4(sp)
 100c440:	80000015 	stw	zero,0(r16)
 100c444:	2023883a 	mov	r17,r4
 100c448:	2809883a 	mov	r4,r5
 100c44c:	dfc00215 	stw	ra,8(sp)
 100c450:	100da180 	call	100da18 <isatty>
 100c454:	1007883a 	mov	r3,r2
 100c458:	00bfffc4 	movi	r2,-1
 100c45c:	18800626 	beq	r3,r2,100c478 <_isatty_r+0x4c>
 100c460:	1805883a 	mov	r2,r3
 100c464:	dfc00217 	ldw	ra,8(sp)
 100c468:	dc400117 	ldw	r17,4(sp)
 100c46c:	dc000017 	ldw	r16,0(sp)
 100c470:	dec00304 	addi	sp,sp,12
 100c474:	f800283a 	ret
 100c478:	80800017 	ldw	r2,0(r16)
 100c47c:	103ff826 	beq	r2,zero,100c460 <_isatty_r+0x34>
 100c480:	88800015 	stw	r2,0(r17)
 100c484:	1805883a 	mov	r2,r3
 100c488:	dfc00217 	ldw	ra,8(sp)
 100c48c:	dc400117 	ldw	r17,4(sp)
 100c490:	dc000017 	ldw	r16,0(sp)
 100c494:	dec00304 	addi	sp,sp,12
 100c498:	f800283a 	ret

0100c49c <_lseek_r>:
 100c49c:	defffd04 	addi	sp,sp,-12
 100c4a0:	dc000015 	stw	r16,0(sp)
 100c4a4:	04004074 	movhi	r16,257
 100c4a8:	84183104 	addi	r16,r16,24772
 100c4ac:	dc400115 	stw	r17,4(sp)
 100c4b0:	80000015 	stw	zero,0(r16)
 100c4b4:	2023883a 	mov	r17,r4
 100c4b8:	2809883a 	mov	r4,r5
 100c4bc:	300b883a 	mov	r5,r6
 100c4c0:	380d883a 	mov	r6,r7
 100c4c4:	dfc00215 	stw	ra,8(sp)
 100c4c8:	100dc280 	call	100dc28 <lseek>
 100c4cc:	1007883a 	mov	r3,r2
 100c4d0:	00bfffc4 	movi	r2,-1
 100c4d4:	18800626 	beq	r3,r2,100c4f0 <_lseek_r+0x54>
 100c4d8:	1805883a 	mov	r2,r3
 100c4dc:	dfc00217 	ldw	ra,8(sp)
 100c4e0:	dc400117 	ldw	r17,4(sp)
 100c4e4:	dc000017 	ldw	r16,0(sp)
 100c4e8:	dec00304 	addi	sp,sp,12
 100c4ec:	f800283a 	ret
 100c4f0:	80800017 	ldw	r2,0(r16)
 100c4f4:	103ff826 	beq	r2,zero,100c4d8 <_lseek_r+0x3c>
 100c4f8:	88800015 	stw	r2,0(r17)
 100c4fc:	1805883a 	mov	r2,r3
 100c500:	dfc00217 	ldw	ra,8(sp)
 100c504:	dc400117 	ldw	r17,4(sp)
 100c508:	dc000017 	ldw	r16,0(sp)
 100c50c:	dec00304 	addi	sp,sp,12
 100c510:	f800283a 	ret

0100c514 <_read_r>:
 100c514:	defffd04 	addi	sp,sp,-12
 100c518:	dc000015 	stw	r16,0(sp)
 100c51c:	04004074 	movhi	r16,257
 100c520:	84183104 	addi	r16,r16,24772
 100c524:	dc400115 	stw	r17,4(sp)
 100c528:	80000015 	stw	zero,0(r16)
 100c52c:	2023883a 	mov	r17,r4
 100c530:	2809883a 	mov	r4,r5
 100c534:	300b883a 	mov	r5,r6
 100c538:	380d883a 	mov	r6,r7
 100c53c:	dfc00215 	stw	ra,8(sp)
 100c540:	100de280 	call	100de28 <read>
 100c544:	1007883a 	mov	r3,r2
 100c548:	00bfffc4 	movi	r2,-1
 100c54c:	18800626 	beq	r3,r2,100c568 <_read_r+0x54>
 100c550:	1805883a 	mov	r2,r3
 100c554:	dfc00217 	ldw	ra,8(sp)
 100c558:	dc400117 	ldw	r17,4(sp)
 100c55c:	dc000017 	ldw	r16,0(sp)
 100c560:	dec00304 	addi	sp,sp,12
 100c564:	f800283a 	ret
 100c568:	80800017 	ldw	r2,0(r16)
 100c56c:	103ff826 	beq	r2,zero,100c550 <_read_r+0x3c>
 100c570:	88800015 	stw	r2,0(r17)
 100c574:	1805883a 	mov	r2,r3
 100c578:	dfc00217 	ldw	ra,8(sp)
 100c57c:	dc400117 	ldw	r17,4(sp)
 100c580:	dc000017 	ldw	r16,0(sp)
 100c584:	dec00304 	addi	sp,sp,12
 100c588:	f800283a 	ret

0100c58c <__udivdi3>:
 100c58c:	defff104 	addi	sp,sp,-60
 100c590:	0015883a 	mov	r10,zero
 100c594:	2005883a 	mov	r2,r4
 100c598:	3011883a 	mov	r8,r6
 100c59c:	df000d15 	stw	fp,52(sp)
 100c5a0:	dd400a15 	stw	r21,40(sp)
 100c5a4:	dcc00815 	stw	r19,32(sp)
 100c5a8:	dfc00e15 	stw	ra,56(sp)
 100c5ac:	ddc00c15 	stw	r23,48(sp)
 100c5b0:	dd800b15 	stw	r22,44(sp)
 100c5b4:	dd000915 	stw	r20,36(sp)
 100c5b8:	dc800715 	stw	r18,28(sp)
 100c5bc:	dc400615 	stw	r17,24(sp)
 100c5c0:	dc000515 	stw	r16,20(sp)
 100c5c4:	da800315 	stw	r10,12(sp)
 100c5c8:	4027883a 	mov	r19,r8
 100c5cc:	1039883a 	mov	fp,r2
 100c5d0:	282b883a 	mov	r21,r5
 100c5d4:	da800415 	stw	r10,16(sp)
 100c5d8:	3800401e 	bne	r7,zero,100c6dc <__udivdi3+0x150>
 100c5dc:	2a006536 	bltu	r5,r8,100c774 <__udivdi3+0x1e8>
 100c5e0:	4000b526 	beq	r8,zero,100c8b8 <__udivdi3+0x32c>
 100c5e4:	00bfffd4 	movui	r2,65535
 100c5e8:	14c0ad36 	bltu	r2,r19,100c8a0 <__udivdi3+0x314>
 100c5ec:	00803fc4 	movi	r2,255
 100c5f0:	14c15e36 	bltu	r2,r19,100cb6c <__udivdi3+0x5e0>
 100c5f4:	000b883a 	mov	r5,zero
 100c5f8:	0005883a 	mov	r2,zero
 100c5fc:	9884d83a 	srl	r2,r19,r2
 100c600:	01004074 	movhi	r4,257
 100c604:	2109b204 	addi	r4,r4,9928
 100c608:	01800804 	movi	r6,32
 100c60c:	1105883a 	add	r2,r2,r4
 100c610:	10c00003 	ldbu	r3,0(r2)
 100c614:	28c7883a 	add	r3,r5,r3
 100c618:	30e9c83a 	sub	r20,r6,r3
 100c61c:	a0010a1e 	bne	r20,zero,100ca48 <__udivdi3+0x4bc>
 100c620:	982ed43a 	srli	r23,r19,16
 100c624:	acebc83a 	sub	r21,r21,r19
 100c628:	9dbfffcc 	andi	r22,r19,65535
 100c62c:	05000044 	movi	r20,1
 100c630:	a809883a 	mov	r4,r21
 100c634:	b80b883a 	mov	r5,r23
 100c638:	100475c0 	call	100475c <__udivsi3>
 100c63c:	100b883a 	mov	r5,r2
 100c640:	b009883a 	mov	r4,r22
 100c644:	1021883a 	mov	r16,r2
 100c648:	100476c0 	call	100476c <__mulsi3>
 100c64c:	a809883a 	mov	r4,r21
 100c650:	b80b883a 	mov	r5,r23
 100c654:	1023883a 	mov	r17,r2
 100c658:	10047640 	call	1004764 <__umodsi3>
 100c65c:	1004943a 	slli	r2,r2,16
 100c660:	e006d43a 	srli	r3,fp,16
 100c664:	10c4b03a 	or	r2,r2,r3
 100c668:	1440042e 	bgeu	r2,r17,100c67c <__udivdi3+0xf0>
 100c66c:	14c5883a 	add	r2,r2,r19
 100c670:	843fffc4 	addi	r16,r16,-1
 100c674:	14c00136 	bltu	r2,r19,100c67c <__udivdi3+0xf0>
 100c678:	14415c36 	bltu	r2,r17,100cbec <__udivdi3+0x660>
 100c67c:	1463c83a 	sub	r17,r2,r17
 100c680:	8809883a 	mov	r4,r17
 100c684:	b80b883a 	mov	r5,r23
 100c688:	100475c0 	call	100475c <__udivsi3>
 100c68c:	100b883a 	mov	r5,r2
 100c690:	b009883a 	mov	r4,r22
 100c694:	102b883a 	mov	r21,r2
 100c698:	100476c0 	call	100476c <__mulsi3>
 100c69c:	8809883a 	mov	r4,r17
 100c6a0:	b80b883a 	mov	r5,r23
 100c6a4:	1025883a 	mov	r18,r2
 100c6a8:	10047640 	call	1004764 <__umodsi3>
 100c6ac:	1004943a 	slli	r2,r2,16
 100c6b0:	e0ffffcc 	andi	r3,fp,65535
 100c6b4:	10c4b03a 	or	r2,r2,r3
 100c6b8:	1480042e 	bgeu	r2,r18,100c6cc <__udivdi3+0x140>
 100c6bc:	9885883a 	add	r2,r19,r2
 100c6c0:	ad7fffc4 	addi	r21,r21,-1
 100c6c4:	14c00136 	bltu	r2,r19,100c6cc <__udivdi3+0x140>
 100c6c8:	14813c36 	bltu	r2,r18,100cbbc <__udivdi3+0x630>
 100c6cc:	8004943a 	slli	r2,r16,16
 100c6d0:	a009883a 	mov	r4,r20
 100c6d4:	a884b03a 	or	r2,r21,r2
 100c6d8:	00001506 	br	100c730 <__udivdi3+0x1a4>
 100c6dc:	380d883a 	mov	r6,r7
 100c6e0:	29c06c36 	bltu	r5,r7,100c894 <__udivdi3+0x308>
 100c6e4:	00bfffd4 	movui	r2,65535
 100c6e8:	11c06436 	bltu	r2,r7,100c87c <__udivdi3+0x2f0>
 100c6ec:	00803fc4 	movi	r2,255
 100c6f0:	11c11836 	bltu	r2,r7,100cb54 <__udivdi3+0x5c8>
 100c6f4:	000b883a 	mov	r5,zero
 100c6f8:	0005883a 	mov	r2,zero
 100c6fc:	3084d83a 	srl	r2,r6,r2
 100c700:	01004074 	movhi	r4,257
 100c704:	2109b204 	addi	r4,r4,9928
 100c708:	01c00804 	movi	r7,32
 100c70c:	1105883a 	add	r2,r2,r4
 100c710:	10c00003 	ldbu	r3,0(r2)
 100c714:	28c7883a 	add	r3,r5,r3
 100c718:	38edc83a 	sub	r22,r7,r3
 100c71c:	b000731e 	bne	r22,zero,100c8ec <__udivdi3+0x360>
 100c720:	35400136 	bltu	r6,r21,100c728 <__udivdi3+0x19c>
 100c724:	e4c05b36 	bltu	fp,r19,100c894 <__udivdi3+0x308>
 100c728:	00800044 	movi	r2,1
 100c72c:	0009883a 	mov	r4,zero
 100c730:	d8800315 	stw	r2,12(sp)
 100c734:	d9400317 	ldw	r5,12(sp)
 100c738:	d9000415 	stw	r4,16(sp)
 100c73c:	2007883a 	mov	r3,r4
 100c740:	2805883a 	mov	r2,r5
 100c744:	dfc00e17 	ldw	ra,56(sp)
 100c748:	df000d17 	ldw	fp,52(sp)
 100c74c:	ddc00c17 	ldw	r23,48(sp)
 100c750:	dd800b17 	ldw	r22,44(sp)
 100c754:	dd400a17 	ldw	r21,40(sp)
 100c758:	dd000917 	ldw	r20,36(sp)
 100c75c:	dcc00817 	ldw	r19,32(sp)
 100c760:	dc800717 	ldw	r18,28(sp)
 100c764:	dc400617 	ldw	r17,24(sp)
 100c768:	dc000517 	ldw	r16,20(sp)
 100c76c:	dec00f04 	addi	sp,sp,60
 100c770:	f800283a 	ret
 100c774:	00bfffd4 	movui	r2,65535
 100c778:	12005636 	bltu	r2,r8,100c8d4 <__udivdi3+0x348>
 100c77c:	00803fc4 	movi	r2,255
 100c780:	12010036 	bltu	r2,r8,100cb84 <__udivdi3+0x5f8>
 100c784:	000b883a 	mov	r5,zero
 100c788:	0005883a 	mov	r2,zero
 100c78c:	9884d83a 	srl	r2,r19,r2
 100c790:	01004074 	movhi	r4,257
 100c794:	2109b204 	addi	r4,r4,9928
 100c798:	01800804 	movi	r6,32
 100c79c:	1105883a 	add	r2,r2,r4
 100c7a0:	10c00003 	ldbu	r3,0(r2)
 100c7a4:	28c7883a 	add	r3,r5,r3
 100c7a8:	30cbc83a 	sub	r5,r6,r3
 100c7ac:	28000626 	beq	r5,zero,100c7c8 <__udivdi3+0x23c>
 100c7b0:	3145c83a 	sub	r2,r6,r5
 100c7b4:	e084d83a 	srl	r2,fp,r2
 100c7b8:	a946983a 	sll	r3,r21,r5
 100c7bc:	e178983a 	sll	fp,fp,r5
 100c7c0:	9966983a 	sll	r19,r19,r5
 100c7c4:	18aab03a 	or	r21,r3,r2
 100c7c8:	982ed43a 	srli	r23,r19,16
 100c7cc:	a809883a 	mov	r4,r21
 100c7d0:	9cbfffcc 	andi	r18,r19,65535
 100c7d4:	b80b883a 	mov	r5,r23
 100c7d8:	100475c0 	call	100475c <__udivsi3>
 100c7dc:	100b883a 	mov	r5,r2
 100c7e0:	9009883a 	mov	r4,r18
 100c7e4:	1021883a 	mov	r16,r2
 100c7e8:	100476c0 	call	100476c <__mulsi3>
 100c7ec:	a809883a 	mov	r4,r21
 100c7f0:	b80b883a 	mov	r5,r23
 100c7f4:	1023883a 	mov	r17,r2
 100c7f8:	10047640 	call	1004764 <__umodsi3>
 100c7fc:	1004943a 	slli	r2,r2,16
 100c800:	e006d43a 	srli	r3,fp,16
 100c804:	10c4b03a 	or	r2,r2,r3
 100c808:	1440042e 	bgeu	r2,r17,100c81c <__udivdi3+0x290>
 100c80c:	14c5883a 	add	r2,r2,r19
 100c810:	843fffc4 	addi	r16,r16,-1
 100c814:	14c00136 	bltu	r2,r19,100c81c <__udivdi3+0x290>
 100c818:	1440ea36 	bltu	r2,r17,100cbc4 <__udivdi3+0x638>
 100c81c:	1463c83a 	sub	r17,r2,r17
 100c820:	8809883a 	mov	r4,r17
 100c824:	b80b883a 	mov	r5,r23
 100c828:	100475c0 	call	100475c <__udivsi3>
 100c82c:	100b883a 	mov	r5,r2
 100c830:	9009883a 	mov	r4,r18
 100c834:	102b883a 	mov	r21,r2
 100c838:	100476c0 	call	100476c <__mulsi3>
 100c83c:	8809883a 	mov	r4,r17
 100c840:	b80b883a 	mov	r5,r23
 100c844:	1025883a 	mov	r18,r2
 100c848:	10047640 	call	1004764 <__umodsi3>
 100c84c:	1004943a 	slli	r2,r2,16
 100c850:	e0ffffcc 	andi	r3,fp,65535
 100c854:	10c4b03a 	or	r2,r2,r3
 100c858:	1480042e 	bgeu	r2,r18,100c86c <__udivdi3+0x2e0>
 100c85c:	9885883a 	add	r2,r19,r2
 100c860:	ad7fffc4 	addi	r21,r21,-1
 100c864:	14c00136 	bltu	r2,r19,100c86c <__udivdi3+0x2e0>
 100c868:	1480d936 	bltu	r2,r18,100cbd0 <__udivdi3+0x644>
 100c86c:	8004943a 	slli	r2,r16,16
 100c870:	0009883a 	mov	r4,zero
 100c874:	a884b03a 	or	r2,r21,r2
 100c878:	003fad06 	br	100c730 <__udivdi3+0x1a4>
 100c87c:	00804034 	movhi	r2,256
 100c880:	10bfffc4 	addi	r2,r2,-1
 100c884:	11c0b636 	bltu	r2,r7,100cb60 <__udivdi3+0x5d4>
 100c888:	01400404 	movi	r5,16
 100c88c:	2805883a 	mov	r2,r5
 100c890:	003f9a06 	br	100c6fc <__udivdi3+0x170>
 100c894:	0005883a 	mov	r2,zero
 100c898:	0009883a 	mov	r4,zero
 100c89c:	003fa406 	br	100c730 <__udivdi3+0x1a4>
 100c8a0:	00804034 	movhi	r2,256
 100c8a4:	10bfffc4 	addi	r2,r2,-1
 100c8a8:	14c0b336 	bltu	r2,r19,100cb78 <__udivdi3+0x5ec>
 100c8ac:	01400404 	movi	r5,16
 100c8b0:	2805883a 	mov	r2,r5
 100c8b4:	003f5106 	br	100c5fc <__udivdi3+0x70>
 100c8b8:	01000044 	movi	r4,1
 100c8bc:	000b883a 	mov	r5,zero
 100c8c0:	100475c0 	call	100475c <__udivsi3>
 100c8c4:	1027883a 	mov	r19,r2
 100c8c8:	00bfffd4 	movui	r2,65535
 100c8cc:	14fff436 	bltu	r2,r19,100c8a0 <__udivdi3+0x314>
 100c8d0:	003f4606 	br	100c5ec <__udivdi3+0x60>
 100c8d4:	00804034 	movhi	r2,256
 100c8d8:	10bfffc4 	addi	r2,r2,-1
 100c8dc:	1200ac36 	bltu	r2,r8,100cb90 <__udivdi3+0x604>
 100c8e0:	01400404 	movi	r5,16
 100c8e4:	2805883a 	mov	r2,r5
 100c8e8:	003fa806 	br	100c78c <__udivdi3+0x200>
 100c8ec:	3d85c83a 	sub	r2,r7,r22
 100c8f0:	3588983a 	sll	r4,r6,r22
 100c8f4:	9886d83a 	srl	r3,r19,r2
 100c8f8:	a8a2d83a 	srl	r17,r21,r2
 100c8fc:	e084d83a 	srl	r2,fp,r2
 100c900:	20eeb03a 	or	r23,r4,r3
 100c904:	b824d43a 	srli	r18,r23,16
 100c908:	ad86983a 	sll	r3,r21,r22
 100c90c:	8809883a 	mov	r4,r17
 100c910:	900b883a 	mov	r5,r18
 100c914:	1886b03a 	or	r3,r3,r2
 100c918:	d8c00115 	stw	r3,4(sp)
 100c91c:	bc3fffcc 	andi	r16,r23,65535
 100c920:	100475c0 	call	100475c <__udivsi3>
 100c924:	100b883a 	mov	r5,r2
 100c928:	8009883a 	mov	r4,r16
 100c92c:	1029883a 	mov	r20,r2
 100c930:	100476c0 	call	100476c <__mulsi3>
 100c934:	900b883a 	mov	r5,r18
 100c938:	8809883a 	mov	r4,r17
 100c93c:	102b883a 	mov	r21,r2
 100c940:	10047640 	call	1004764 <__umodsi3>
 100c944:	d9400117 	ldw	r5,4(sp)
 100c948:	1004943a 	slli	r2,r2,16
 100c94c:	9da6983a 	sll	r19,r19,r22
 100c950:	2806d43a 	srli	r3,r5,16
 100c954:	10c4b03a 	or	r2,r2,r3
 100c958:	1540032e 	bgeu	r2,r21,100c968 <__udivdi3+0x3dc>
 100c95c:	15c5883a 	add	r2,r2,r23
 100c960:	a53fffc4 	addi	r20,r20,-1
 100c964:	15c0912e 	bgeu	r2,r23,100cbac <__udivdi3+0x620>
 100c968:	1563c83a 	sub	r17,r2,r21
 100c96c:	8809883a 	mov	r4,r17
 100c970:	900b883a 	mov	r5,r18
 100c974:	100475c0 	call	100475c <__udivsi3>
 100c978:	100b883a 	mov	r5,r2
 100c97c:	8009883a 	mov	r4,r16
 100c980:	102b883a 	mov	r21,r2
 100c984:	100476c0 	call	100476c <__mulsi3>
 100c988:	8809883a 	mov	r4,r17
 100c98c:	900b883a 	mov	r5,r18
 100c990:	1021883a 	mov	r16,r2
 100c994:	10047640 	call	1004764 <__umodsi3>
 100c998:	da800117 	ldw	r10,4(sp)
 100c99c:	1004943a 	slli	r2,r2,16
 100c9a0:	50ffffcc 	andi	r3,r10,65535
 100c9a4:	10c6b03a 	or	r3,r2,r3
 100c9a8:	1c00032e 	bgeu	r3,r16,100c9b8 <__udivdi3+0x42c>
 100c9ac:	1dc7883a 	add	r3,r3,r23
 100c9b0:	ad7fffc4 	addi	r21,r21,-1
 100c9b4:	1dc0792e 	bgeu	r3,r23,100cb9c <__udivdi3+0x610>
 100c9b8:	a004943a 	slli	r2,r20,16
 100c9bc:	982ed43a 	srli	r23,r19,16
 100c9c0:	9cffffcc 	andi	r19,r19,65535
 100c9c4:	a8a4b03a 	or	r18,r21,r2
 100c9c8:	947fffcc 	andi	r17,r18,65535
 100c9cc:	902ad43a 	srli	r21,r18,16
 100c9d0:	8809883a 	mov	r4,r17
 100c9d4:	980b883a 	mov	r5,r19
 100c9d8:	1c21c83a 	sub	r16,r3,r16
 100c9dc:	100476c0 	call	100476c <__mulsi3>
 100c9e0:	8809883a 	mov	r4,r17
 100c9e4:	b80b883a 	mov	r5,r23
 100c9e8:	1029883a 	mov	r20,r2
 100c9ec:	100476c0 	call	100476c <__mulsi3>
 100c9f0:	980b883a 	mov	r5,r19
 100c9f4:	a809883a 	mov	r4,r21
 100c9f8:	1023883a 	mov	r17,r2
 100c9fc:	100476c0 	call	100476c <__mulsi3>
 100ca00:	a809883a 	mov	r4,r21
 100ca04:	b80b883a 	mov	r5,r23
 100ca08:	1027883a 	mov	r19,r2
 100ca0c:	100476c0 	call	100476c <__mulsi3>
 100ca10:	1009883a 	mov	r4,r2
 100ca14:	a004d43a 	srli	r2,r20,16
 100ca18:	8ce3883a 	add	r17,r17,r19
 100ca1c:	1447883a 	add	r3,r2,r17
 100ca20:	1cc0022e 	bgeu	r3,r19,100ca2c <__udivdi3+0x4a0>
 100ca24:	00800074 	movhi	r2,1
 100ca28:	2089883a 	add	r4,r4,r2
 100ca2c:	1804d43a 	srli	r2,r3,16
 100ca30:	2085883a 	add	r2,r4,r2
 100ca34:	80804436 	bltu	r16,r2,100cb48 <__udivdi3+0x5bc>
 100ca38:	80803e26 	beq	r16,r2,100cb34 <__udivdi3+0x5a8>
 100ca3c:	9005883a 	mov	r2,r18
 100ca40:	0009883a 	mov	r4,zero
 100ca44:	003f3a06 	br	100c730 <__udivdi3+0x1a4>
 100ca48:	9d26983a 	sll	r19,r19,r20
 100ca4c:	3505c83a 	sub	r2,r6,r20
 100ca50:	a8a2d83a 	srl	r17,r21,r2
 100ca54:	982ed43a 	srli	r23,r19,16
 100ca58:	e084d83a 	srl	r2,fp,r2
 100ca5c:	ad06983a 	sll	r3,r21,r20
 100ca60:	8809883a 	mov	r4,r17
 100ca64:	b80b883a 	mov	r5,r23
 100ca68:	1886b03a 	or	r3,r3,r2
 100ca6c:	d8c00015 	stw	r3,0(sp)
 100ca70:	9dbfffcc 	andi	r22,r19,65535
 100ca74:	100475c0 	call	100475c <__udivsi3>
 100ca78:	100b883a 	mov	r5,r2
 100ca7c:	b009883a 	mov	r4,r22
 100ca80:	d8800215 	stw	r2,8(sp)
 100ca84:	100476c0 	call	100476c <__mulsi3>
 100ca88:	8809883a 	mov	r4,r17
 100ca8c:	b80b883a 	mov	r5,r23
 100ca90:	102b883a 	mov	r21,r2
 100ca94:	10047640 	call	1004764 <__umodsi3>
 100ca98:	d9000017 	ldw	r4,0(sp)
 100ca9c:	1004943a 	slli	r2,r2,16
 100caa0:	2006d43a 	srli	r3,r4,16
 100caa4:	10c4b03a 	or	r2,r2,r3
 100caa8:	1540052e 	bgeu	r2,r21,100cac0 <__udivdi3+0x534>
 100caac:	d9400217 	ldw	r5,8(sp)
 100cab0:	14c5883a 	add	r2,r2,r19
 100cab4:	297fffc4 	addi	r5,r5,-1
 100cab8:	d9400215 	stw	r5,8(sp)
 100cabc:	14c0462e 	bgeu	r2,r19,100cbd8 <__udivdi3+0x64c>
 100cac0:	1563c83a 	sub	r17,r2,r21
 100cac4:	8809883a 	mov	r4,r17
 100cac8:	b80b883a 	mov	r5,r23
 100cacc:	100475c0 	call	100475c <__udivsi3>
 100cad0:	100b883a 	mov	r5,r2
 100cad4:	b009883a 	mov	r4,r22
 100cad8:	1025883a 	mov	r18,r2
 100cadc:	100476c0 	call	100476c <__mulsi3>
 100cae0:	8809883a 	mov	r4,r17
 100cae4:	b80b883a 	mov	r5,r23
 100cae8:	1021883a 	mov	r16,r2
 100caec:	10047640 	call	1004764 <__umodsi3>
 100caf0:	da800017 	ldw	r10,0(sp)
 100caf4:	1004943a 	slli	r2,r2,16
 100caf8:	50ffffcc 	andi	r3,r10,65535
 100cafc:	10c6b03a 	or	r3,r2,r3
 100cb00:	1c00062e 	bgeu	r3,r16,100cb1c <__udivdi3+0x590>
 100cb04:	1cc7883a 	add	r3,r3,r19
 100cb08:	94bfffc4 	addi	r18,r18,-1
 100cb0c:	1cc00336 	bltu	r3,r19,100cb1c <__udivdi3+0x590>
 100cb10:	1c00022e 	bgeu	r3,r16,100cb1c <__udivdi3+0x590>
 100cb14:	94bfffc4 	addi	r18,r18,-1
 100cb18:	1cc7883a 	add	r3,r3,r19
 100cb1c:	d9000217 	ldw	r4,8(sp)
 100cb20:	e538983a 	sll	fp,fp,r20
 100cb24:	1c2bc83a 	sub	r21,r3,r16
 100cb28:	2004943a 	slli	r2,r4,16
 100cb2c:	90a8b03a 	or	r20,r18,r2
 100cb30:	003ebf06 	br	100c630 <__udivdi3+0xa4>
 100cb34:	1804943a 	slli	r2,r3,16
 100cb38:	e588983a 	sll	r4,fp,r22
 100cb3c:	a0ffffcc 	andi	r3,r20,65535
 100cb40:	10c5883a 	add	r2,r2,r3
 100cb44:	20bfbd2e 	bgeu	r4,r2,100ca3c <__udivdi3+0x4b0>
 100cb48:	90bfffc4 	addi	r2,r18,-1
 100cb4c:	0009883a 	mov	r4,zero
 100cb50:	003ef706 	br	100c730 <__udivdi3+0x1a4>
 100cb54:	01400204 	movi	r5,8
 100cb58:	2805883a 	mov	r2,r5
 100cb5c:	003ee706 	br	100c6fc <__udivdi3+0x170>
 100cb60:	01400604 	movi	r5,24
 100cb64:	2805883a 	mov	r2,r5
 100cb68:	003ee406 	br	100c6fc <__udivdi3+0x170>
 100cb6c:	01400204 	movi	r5,8
 100cb70:	2805883a 	mov	r2,r5
 100cb74:	003ea106 	br	100c5fc <__udivdi3+0x70>
 100cb78:	01400604 	movi	r5,24
 100cb7c:	2805883a 	mov	r2,r5
 100cb80:	003e9e06 	br	100c5fc <__udivdi3+0x70>
 100cb84:	01400204 	movi	r5,8
 100cb88:	2805883a 	mov	r2,r5
 100cb8c:	003eff06 	br	100c78c <__udivdi3+0x200>
 100cb90:	01400604 	movi	r5,24
 100cb94:	2805883a 	mov	r2,r5
 100cb98:	003efc06 	br	100c78c <__udivdi3+0x200>
 100cb9c:	1c3f862e 	bgeu	r3,r16,100c9b8 <__udivdi3+0x42c>
 100cba0:	1dc7883a 	add	r3,r3,r23
 100cba4:	ad7fffc4 	addi	r21,r21,-1
 100cba8:	003f8306 	br	100c9b8 <__udivdi3+0x42c>
 100cbac:	157f6e2e 	bgeu	r2,r21,100c968 <__udivdi3+0x3dc>
 100cbb0:	a53fffc4 	addi	r20,r20,-1
 100cbb4:	15c5883a 	add	r2,r2,r23
 100cbb8:	003f6b06 	br	100c968 <__udivdi3+0x3dc>
 100cbbc:	ad7fffc4 	addi	r21,r21,-1
 100cbc0:	003ec206 	br	100c6cc <__udivdi3+0x140>
 100cbc4:	843fffc4 	addi	r16,r16,-1
 100cbc8:	14c5883a 	add	r2,r2,r19
 100cbcc:	003f1306 	br	100c81c <__udivdi3+0x290>
 100cbd0:	ad7fffc4 	addi	r21,r21,-1
 100cbd4:	003f2506 	br	100c86c <__udivdi3+0x2e0>
 100cbd8:	157fb92e 	bgeu	r2,r21,100cac0 <__udivdi3+0x534>
 100cbdc:	297fffc4 	addi	r5,r5,-1
 100cbe0:	14c5883a 	add	r2,r2,r19
 100cbe4:	d9400215 	stw	r5,8(sp)
 100cbe8:	003fb506 	br	100cac0 <__udivdi3+0x534>
 100cbec:	843fffc4 	addi	r16,r16,-1
 100cbf0:	14c5883a 	add	r2,r2,r19
 100cbf4:	003ea106 	br	100c67c <__udivdi3+0xf0>

0100cbf8 <__umoddi3>:
 100cbf8:	defff004 	addi	sp,sp,-64
 100cbfc:	3011883a 	mov	r8,r6
 100cc00:	000d883a 	mov	r6,zero
 100cc04:	dd400b15 	stw	r21,44(sp)
 100cc08:	dcc00915 	stw	r19,36(sp)
 100cc0c:	dc000615 	stw	r16,24(sp)
 100cc10:	dfc00f15 	stw	ra,60(sp)
 100cc14:	df000e15 	stw	fp,56(sp)
 100cc18:	ddc00d15 	stw	r23,52(sp)
 100cc1c:	dd800c15 	stw	r22,48(sp)
 100cc20:	dd000a15 	stw	r20,40(sp)
 100cc24:	dc800815 	stw	r18,32(sp)
 100cc28:	dc400715 	stw	r17,28(sp)
 100cc2c:	2817883a 	mov	r11,r5
 100cc30:	d9800415 	stw	r6,16(sp)
 100cc34:	4027883a 	mov	r19,r8
 100cc38:	d9800515 	stw	r6,20(sp)
 100cc3c:	2021883a 	mov	r16,r4
 100cc40:	282b883a 	mov	r21,r5
 100cc44:	38002c1e 	bne	r7,zero,100ccf8 <__umoddi3+0x100>
 100cc48:	2a005636 	bltu	r5,r8,100cda4 <__umoddi3+0x1ac>
 100cc4c:	40009a26 	beq	r8,zero,100ceb8 <__umoddi3+0x2c0>
 100cc50:	00bfffd4 	movui	r2,65535
 100cc54:	14c09236 	bltu	r2,r19,100cea0 <__umoddi3+0x2a8>
 100cc58:	00803fc4 	movi	r2,255
 100cc5c:	14c15c36 	bltu	r2,r19,100d1d0 <__umoddi3+0x5d8>
 100cc60:	000b883a 	mov	r5,zero
 100cc64:	0005883a 	mov	r2,zero
 100cc68:	9884d83a 	srl	r2,r19,r2
 100cc6c:	01004074 	movhi	r4,257
 100cc70:	2109b204 	addi	r4,r4,9928
 100cc74:	01800804 	movi	r6,32
 100cc78:	1105883a 	add	r2,r2,r4
 100cc7c:	10c00003 	ldbu	r3,0(r2)
 100cc80:	28c7883a 	add	r3,r5,r3
 100cc84:	30e5c83a 	sub	r18,r6,r3
 100cc88:	9000a41e 	bne	r18,zero,100cf1c <__umoddi3+0x324>
 100cc8c:	982ed43a 	srli	r23,r19,16
 100cc90:	acebc83a 	sub	r21,r21,r19
 100cc94:	9d3fffcc 	andi	r20,r19,65535
 100cc98:	002d883a 	mov	r22,zero
 100cc9c:	a809883a 	mov	r4,r21
 100cca0:	b80b883a 	mov	r5,r23
 100cca4:	100475c0 	call	100475c <__udivsi3>
 100cca8:	100b883a 	mov	r5,r2
 100ccac:	a009883a 	mov	r4,r20
 100ccb0:	100476c0 	call	100476c <__mulsi3>
 100ccb4:	a809883a 	mov	r4,r21
 100ccb8:	b80b883a 	mov	r5,r23
 100ccbc:	1023883a 	mov	r17,r2
 100ccc0:	10047640 	call	1004764 <__umodsi3>
 100ccc4:	1004943a 	slli	r2,r2,16
 100ccc8:	8006d43a 	srli	r3,r16,16
 100cccc:	10c4b03a 	or	r2,r2,r3
 100ccd0:	1440032e 	bgeu	r2,r17,100cce0 <__umoddi3+0xe8>
 100ccd4:	14c5883a 	add	r2,r2,r19
 100ccd8:	14c00136 	bltu	r2,r19,100cce0 <__umoddi3+0xe8>
 100ccdc:	14415836 	bltu	r2,r17,100d240 <__umoddi3+0x648>
 100cce0:	1463c83a 	sub	r17,r2,r17
 100cce4:	8809883a 	mov	r4,r17
 100cce8:	b80b883a 	mov	r5,r23
 100ccec:	100475c0 	call	100475c <__udivsi3>
 100ccf0:	a009883a 	mov	r4,r20
 100ccf4:	00005306 	br	100ce44 <__umoddi3+0x24c>
 100ccf8:	380d883a 	mov	r6,r7
 100ccfc:	29c0132e 	bgeu	r5,r7,100cd4c <__umoddi3+0x154>
 100cd00:	d9000415 	stw	r4,16(sp)
 100cd04:	d9400515 	stw	r5,20(sp)
 100cd08:	d9400417 	ldw	r5,16(sp)
 100cd0c:	5813883a 	mov	r9,r11
 100cd10:	2811883a 	mov	r8,r5
 100cd14:	4005883a 	mov	r2,r8
 100cd18:	4807883a 	mov	r3,r9
 100cd1c:	dfc00f17 	ldw	ra,60(sp)
 100cd20:	df000e17 	ldw	fp,56(sp)
 100cd24:	ddc00d17 	ldw	r23,52(sp)
 100cd28:	dd800c17 	ldw	r22,48(sp)
 100cd2c:	dd400b17 	ldw	r21,44(sp)
 100cd30:	dd000a17 	ldw	r20,40(sp)
 100cd34:	dcc00917 	ldw	r19,36(sp)
 100cd38:	dc800817 	ldw	r18,32(sp)
 100cd3c:	dc400717 	ldw	r17,28(sp)
 100cd40:	dc000617 	ldw	r16,24(sp)
 100cd44:	dec01004 	addi	sp,sp,64
 100cd48:	f800283a 	ret
 100cd4c:	00bfffd4 	movui	r2,65535
 100cd50:	11c06636 	bltu	r2,r7,100ceec <__umoddi3+0x2f4>
 100cd54:	00803fc4 	movi	r2,255
 100cd58:	11c12036 	bltu	r2,r7,100d1dc <__umoddi3+0x5e4>
 100cd5c:	000b883a 	mov	r5,zero
 100cd60:	0005883a 	mov	r2,zero
 100cd64:	3084d83a 	srl	r2,r6,r2
 100cd68:	01004074 	movhi	r4,257
 100cd6c:	2109b204 	addi	r4,r4,9928
 100cd70:	01c00804 	movi	r7,32
 100cd74:	1105883a 	add	r2,r2,r4
 100cd78:	10c00003 	ldbu	r3,0(r2)
 100cd7c:	28c7883a 	add	r3,r5,r3
 100cd80:	38e5c83a 	sub	r18,r7,r3
 100cd84:	9000941e 	bne	r18,zero,100cfd8 <__umoddi3+0x3e0>
 100cd88:	35405e36 	bltu	r6,r21,100cf04 <__umoddi3+0x30c>
 100cd8c:	84c05d2e 	bgeu	r16,r19,100cf04 <__umoddi3+0x30c>
 100cd90:	8011883a 	mov	r8,r16
 100cd94:	a813883a 	mov	r9,r21
 100cd98:	dc000415 	stw	r16,16(sp)
 100cd9c:	dd400515 	stw	r21,20(sp)
 100cda0:	003fdc06 	br	100cd14 <__umoddi3+0x11c>
 100cda4:	00bfffd4 	movui	r2,65535
 100cda8:	12004a36 	bltu	r2,r8,100ced4 <__umoddi3+0x2dc>
 100cdac:	00803fc4 	movi	r2,255
 100cdb0:	12010d36 	bltu	r2,r8,100d1e8 <__umoddi3+0x5f0>
 100cdb4:	000b883a 	mov	r5,zero
 100cdb8:	0005883a 	mov	r2,zero
 100cdbc:	9884d83a 	srl	r2,r19,r2
 100cdc0:	01004074 	movhi	r4,257
 100cdc4:	2109b204 	addi	r4,r4,9928
 100cdc8:	01800804 	movi	r6,32
 100cdcc:	1105883a 	add	r2,r2,r4
 100cdd0:	10c00003 	ldbu	r3,0(r2)
 100cdd4:	28c7883a 	add	r3,r5,r3
 100cdd8:	30c7c83a 	sub	r3,r6,r3
 100cddc:	1800dc1e 	bne	r3,zero,100d150 <__umoddi3+0x558>
 100cde0:	002d883a 	mov	r22,zero
 100cde4:	982ed43a 	srli	r23,r19,16
 100cde8:	a809883a 	mov	r4,r21
 100cdec:	9cbfffcc 	andi	r18,r19,65535
 100cdf0:	b80b883a 	mov	r5,r23
 100cdf4:	100475c0 	call	100475c <__udivsi3>
 100cdf8:	100b883a 	mov	r5,r2
 100cdfc:	9009883a 	mov	r4,r18
 100ce00:	100476c0 	call	100476c <__mulsi3>
 100ce04:	a809883a 	mov	r4,r21
 100ce08:	b80b883a 	mov	r5,r23
 100ce0c:	1023883a 	mov	r17,r2
 100ce10:	10047640 	call	1004764 <__umodsi3>
 100ce14:	1004943a 	slli	r2,r2,16
 100ce18:	8006d43a 	srli	r3,r16,16
 100ce1c:	10c4b03a 	or	r2,r2,r3
 100ce20:	1440032e 	bgeu	r2,r17,100ce30 <__umoddi3+0x238>
 100ce24:	14c5883a 	add	r2,r2,r19
 100ce28:	14c00136 	bltu	r2,r19,100ce30 <__umoddi3+0x238>
 100ce2c:	14410236 	bltu	r2,r17,100d238 <__umoddi3+0x640>
 100ce30:	1463c83a 	sub	r17,r2,r17
 100ce34:	8809883a 	mov	r4,r17
 100ce38:	b80b883a 	mov	r5,r23
 100ce3c:	100475c0 	call	100475c <__udivsi3>
 100ce40:	9009883a 	mov	r4,r18
 100ce44:	100b883a 	mov	r5,r2
 100ce48:	100476c0 	call	100476c <__mulsi3>
 100ce4c:	8809883a 	mov	r4,r17
 100ce50:	b80b883a 	mov	r5,r23
 100ce54:	102b883a 	mov	r21,r2
 100ce58:	10047640 	call	1004764 <__umodsi3>
 100ce5c:	1004943a 	slli	r2,r2,16
 100ce60:	80ffffcc 	andi	r3,r16,65535
 100ce64:	10c4b03a 	or	r2,r2,r3
 100ce68:	1540042e 	bgeu	r2,r21,100ce7c <__umoddi3+0x284>
 100ce6c:	14c5883a 	add	r2,r2,r19
 100ce70:	14c00236 	bltu	r2,r19,100ce7c <__umoddi3+0x284>
 100ce74:	1540012e 	bgeu	r2,r21,100ce7c <__umoddi3+0x284>
 100ce78:	14c5883a 	add	r2,r2,r19
 100ce7c:	1545c83a 	sub	r2,r2,r21
 100ce80:	1584d83a 	srl	r2,r2,r22
 100ce84:	0013883a 	mov	r9,zero
 100ce88:	d8800415 	stw	r2,16(sp)
 100ce8c:	d8c00417 	ldw	r3,16(sp)
 100ce90:	0005883a 	mov	r2,zero
 100ce94:	d8800515 	stw	r2,20(sp)
 100ce98:	1811883a 	mov	r8,r3
 100ce9c:	003f9d06 	br	100cd14 <__umoddi3+0x11c>
 100cea0:	00804034 	movhi	r2,256
 100cea4:	10bfffc4 	addi	r2,r2,-1
 100cea8:	14c0c636 	bltu	r2,r19,100d1c4 <__umoddi3+0x5cc>
 100ceac:	01400404 	movi	r5,16
 100ceb0:	2805883a 	mov	r2,r5
 100ceb4:	003f6c06 	br	100cc68 <__umoddi3+0x70>
 100ceb8:	01000044 	movi	r4,1
 100cebc:	000b883a 	mov	r5,zero
 100cec0:	100475c0 	call	100475c <__udivsi3>
 100cec4:	1027883a 	mov	r19,r2
 100cec8:	00bfffd4 	movui	r2,65535
 100cecc:	14fff436 	bltu	r2,r19,100cea0 <__umoddi3+0x2a8>
 100ced0:	003f6106 	br	100cc58 <__umoddi3+0x60>
 100ced4:	00804034 	movhi	r2,256
 100ced8:	10bfffc4 	addi	r2,r2,-1
 100cedc:	1200c536 	bltu	r2,r8,100d1f4 <__umoddi3+0x5fc>
 100cee0:	01400404 	movi	r5,16
 100cee4:	2805883a 	mov	r2,r5
 100cee8:	003fb406 	br	100cdbc <__umoddi3+0x1c4>
 100ceec:	00804034 	movhi	r2,256
 100cef0:	10bfffc4 	addi	r2,r2,-1
 100cef4:	11c0c236 	bltu	r2,r7,100d200 <__umoddi3+0x608>
 100cef8:	01400404 	movi	r5,16
 100cefc:	2805883a 	mov	r2,r5
 100cf00:	003f9806 	br	100cd64 <__umoddi3+0x16c>
 100cf04:	84c9c83a 	sub	r4,r16,r19
 100cf08:	8105803a 	cmpltu	r2,r16,r4
 100cf0c:	a987c83a 	sub	r3,r21,r6
 100cf10:	18abc83a 	sub	r21,r3,r2
 100cf14:	2021883a 	mov	r16,r4
 100cf18:	003f9d06 	br	100cd90 <__umoddi3+0x198>
 100cf1c:	9ca6983a 	sll	r19,r19,r18
 100cf20:	3485c83a 	sub	r2,r6,r18
 100cf24:	a8a2d83a 	srl	r17,r21,r2
 100cf28:	982ed43a 	srli	r23,r19,16
 100cf2c:	ac86983a 	sll	r3,r21,r18
 100cf30:	8084d83a 	srl	r2,r16,r2
 100cf34:	8809883a 	mov	r4,r17
 100cf38:	b80b883a 	mov	r5,r23
 100cf3c:	18b8b03a 	or	fp,r3,r2
 100cf40:	9d3fffcc 	andi	r20,r19,65535
 100cf44:	100475c0 	call	100475c <__udivsi3>
 100cf48:	100b883a 	mov	r5,r2
 100cf4c:	a009883a 	mov	r4,r20
 100cf50:	100476c0 	call	100476c <__mulsi3>
 100cf54:	8809883a 	mov	r4,r17
 100cf58:	b80b883a 	mov	r5,r23
 100cf5c:	102b883a 	mov	r21,r2
 100cf60:	10047640 	call	1004764 <__umodsi3>
 100cf64:	1004943a 	slli	r2,r2,16
 100cf68:	e006d43a 	srli	r3,fp,16
 100cf6c:	902d883a 	mov	r22,r18
 100cf70:	10c4b03a 	or	r2,r2,r3
 100cf74:	1540022e 	bgeu	r2,r21,100cf80 <__umoddi3+0x388>
 100cf78:	14c5883a 	add	r2,r2,r19
 100cf7c:	14c0ab2e 	bgeu	r2,r19,100d22c <__umoddi3+0x634>
 100cf80:	1563c83a 	sub	r17,r2,r21
 100cf84:	8809883a 	mov	r4,r17
 100cf88:	b80b883a 	mov	r5,r23
 100cf8c:	100475c0 	call	100475c <__udivsi3>
 100cf90:	100b883a 	mov	r5,r2
 100cf94:	a009883a 	mov	r4,r20
 100cf98:	100476c0 	call	100476c <__mulsi3>
 100cf9c:	8809883a 	mov	r4,r17
 100cfa0:	b80b883a 	mov	r5,r23
 100cfa4:	102b883a 	mov	r21,r2
 100cfa8:	10047640 	call	1004764 <__umodsi3>
 100cfac:	1004943a 	slli	r2,r2,16
 100cfb0:	e0ffffcc 	andi	r3,fp,65535
 100cfb4:	10c4b03a 	or	r2,r2,r3
 100cfb8:	1540042e 	bgeu	r2,r21,100cfcc <__umoddi3+0x3d4>
 100cfbc:	14c5883a 	add	r2,r2,r19
 100cfc0:	14c00236 	bltu	r2,r19,100cfcc <__umoddi3+0x3d4>
 100cfc4:	1540012e 	bgeu	r2,r21,100cfcc <__umoddi3+0x3d4>
 100cfc8:	14c5883a 	add	r2,r2,r19
 100cfcc:	84a0983a 	sll	r16,r16,r18
 100cfd0:	156bc83a 	sub	r21,r2,r21
 100cfd4:	003f3106 	br	100cc9c <__umoddi3+0xa4>
 100cfd8:	3c8fc83a 	sub	r7,r7,r18
 100cfdc:	3486983a 	sll	r3,r6,r18
 100cfe0:	99c4d83a 	srl	r2,r19,r7
 100cfe4:	a9e2d83a 	srl	r17,r21,r7
 100cfe8:	ac8c983a 	sll	r6,r21,r18
 100cfec:	18acb03a 	or	r22,r3,r2
 100cff0:	b02ed43a 	srli	r23,r22,16
 100cff4:	81c4d83a 	srl	r2,r16,r7
 100cff8:	8809883a 	mov	r4,r17
 100cffc:	b80b883a 	mov	r5,r23
 100d000:	308cb03a 	or	r6,r6,r2
 100d004:	d9c00315 	stw	r7,12(sp)
 100d008:	d9800215 	stw	r6,8(sp)
 100d00c:	b53fffcc 	andi	r20,r22,65535
 100d010:	100475c0 	call	100475c <__udivsi3>
 100d014:	100b883a 	mov	r5,r2
 100d018:	a009883a 	mov	r4,r20
 100d01c:	1039883a 	mov	fp,r2
 100d020:	100476c0 	call	100476c <__mulsi3>
 100d024:	8809883a 	mov	r4,r17
 100d028:	b80b883a 	mov	r5,r23
 100d02c:	102b883a 	mov	r21,r2
 100d030:	10047640 	call	1004764 <__umodsi3>
 100d034:	d9000217 	ldw	r4,8(sp)
 100d038:	1004943a 	slli	r2,r2,16
 100d03c:	9ca6983a 	sll	r19,r19,r18
 100d040:	2006d43a 	srli	r3,r4,16
 100d044:	84a0983a 	sll	r16,r16,r18
 100d048:	dcc00015 	stw	r19,0(sp)
 100d04c:	10c4b03a 	or	r2,r2,r3
 100d050:	dc000115 	stw	r16,4(sp)
 100d054:	1540032e 	bgeu	r2,r21,100d064 <__umoddi3+0x46c>
 100d058:	1585883a 	add	r2,r2,r22
 100d05c:	e73fffc4 	addi	fp,fp,-1
 100d060:	15806e2e 	bgeu	r2,r22,100d21c <__umoddi3+0x624>
 100d064:	1563c83a 	sub	r17,r2,r21
 100d068:	8809883a 	mov	r4,r17
 100d06c:	b80b883a 	mov	r5,r23
 100d070:	100475c0 	call	100475c <__udivsi3>
 100d074:	100b883a 	mov	r5,r2
 100d078:	a009883a 	mov	r4,r20
 100d07c:	1021883a 	mov	r16,r2
 100d080:	100476c0 	call	100476c <__mulsi3>
 100d084:	b80b883a 	mov	r5,r23
 100d088:	8809883a 	mov	r4,r17
 100d08c:	1029883a 	mov	r20,r2
 100d090:	10047640 	call	1004764 <__umodsi3>
 100d094:	d9400217 	ldw	r5,8(sp)
 100d098:	1004943a 	slli	r2,r2,16
 100d09c:	28ffffcc 	andi	r3,r5,65535
 100d0a0:	10c4b03a 	or	r2,r2,r3
 100d0a4:	1500032e 	bgeu	r2,r20,100d0b4 <__umoddi3+0x4bc>
 100d0a8:	1585883a 	add	r2,r2,r22
 100d0ac:	843fffc4 	addi	r16,r16,-1
 100d0b0:	1580562e 	bgeu	r2,r22,100d20c <__umoddi3+0x614>
 100d0b4:	d9800017 	ldw	r6,0(sp)
 100d0b8:	e022943a 	slli	r17,fp,16
 100d0bc:	302ed43a 	srli	r23,r6,16
 100d0c0:	8462b03a 	or	r17,r16,r17
 100d0c4:	34ffffcc 	andi	r19,r6,65535
 100d0c8:	882ad43a 	srli	r21,r17,16
 100d0cc:	8c7fffcc 	andi	r17,r17,65535
 100d0d0:	8809883a 	mov	r4,r17
 100d0d4:	980b883a 	mov	r5,r19
 100d0d8:	1521c83a 	sub	r16,r2,r20
 100d0dc:	100476c0 	call	100476c <__mulsi3>
 100d0e0:	8809883a 	mov	r4,r17
 100d0e4:	b80b883a 	mov	r5,r23
 100d0e8:	1029883a 	mov	r20,r2
 100d0ec:	100476c0 	call	100476c <__mulsi3>
 100d0f0:	980b883a 	mov	r5,r19
 100d0f4:	a809883a 	mov	r4,r21
 100d0f8:	1023883a 	mov	r17,r2
 100d0fc:	100476c0 	call	100476c <__mulsi3>
 100d100:	a809883a 	mov	r4,r21
 100d104:	b80b883a 	mov	r5,r23
 100d108:	1027883a 	mov	r19,r2
 100d10c:	100476c0 	call	100476c <__mulsi3>
 100d110:	100b883a 	mov	r5,r2
 100d114:	a004d43a 	srli	r2,r20,16
 100d118:	8ce3883a 	add	r17,r17,r19
 100d11c:	1449883a 	add	r4,r2,r17
 100d120:	24c0022e 	bgeu	r4,r19,100d12c <__umoddi3+0x534>
 100d124:	00800074 	movhi	r2,1
 100d128:	288b883a 	add	r5,r5,r2
 100d12c:	2004d43a 	srli	r2,r4,16
 100d130:	2008943a 	slli	r4,r4,16
 100d134:	a0ffffcc 	andi	r3,r20,65535
 100d138:	288d883a 	add	r6,r5,r2
 100d13c:	20c9883a 	add	r4,r4,r3
 100d140:	81800b36 	bltu	r16,r6,100d170 <__umoddi3+0x578>
 100d144:	81804026 	beq	r16,r6,100d248 <__umoddi3+0x650>
 100d148:	818dc83a 	sub	r6,r16,r6
 100d14c:	00000f06 	br	100d18c <__umoddi3+0x594>
 100d150:	30c5c83a 	sub	r2,r6,r3
 100d154:	182d883a 	mov	r22,r3
 100d158:	8084d83a 	srl	r2,r16,r2
 100d15c:	a8c6983a 	sll	r3,r21,r3
 100d160:	9da6983a 	sll	r19,r19,r22
 100d164:	85a0983a 	sll	r16,r16,r22
 100d168:	18aab03a 	or	r21,r3,r2
 100d16c:	003f1d06 	br	100cde4 <__umoddi3+0x1ec>
 100d170:	d8c00017 	ldw	r3,0(sp)
 100d174:	20c5c83a 	sub	r2,r4,r3
 100d178:	2089803a 	cmpltu	r4,r4,r2
 100d17c:	3587c83a 	sub	r3,r6,r22
 100d180:	1907c83a 	sub	r3,r3,r4
 100d184:	80cdc83a 	sub	r6,r16,r3
 100d188:	1009883a 	mov	r4,r2
 100d18c:	d9400117 	ldw	r5,4(sp)
 100d190:	2905c83a 	sub	r2,r5,r4
 100d194:	2887803a 	cmpltu	r3,r5,r2
 100d198:	30c7c83a 	sub	r3,r6,r3
 100d19c:	d9800317 	ldw	r6,12(sp)
 100d1a0:	1484d83a 	srl	r2,r2,r18
 100d1a4:	1988983a 	sll	r4,r3,r6
 100d1a8:	1c86d83a 	srl	r3,r3,r18
 100d1ac:	2088b03a 	or	r4,r4,r2
 100d1b0:	2011883a 	mov	r8,r4
 100d1b4:	1813883a 	mov	r9,r3
 100d1b8:	d9000415 	stw	r4,16(sp)
 100d1bc:	d8c00515 	stw	r3,20(sp)
 100d1c0:	003ed406 	br	100cd14 <__umoddi3+0x11c>
 100d1c4:	01400604 	movi	r5,24
 100d1c8:	2805883a 	mov	r2,r5
 100d1cc:	003ea606 	br	100cc68 <__umoddi3+0x70>
 100d1d0:	01400204 	movi	r5,8
 100d1d4:	2805883a 	mov	r2,r5
 100d1d8:	003ea306 	br	100cc68 <__umoddi3+0x70>
 100d1dc:	01400204 	movi	r5,8
 100d1e0:	2805883a 	mov	r2,r5
 100d1e4:	003edf06 	br	100cd64 <__umoddi3+0x16c>
 100d1e8:	01400204 	movi	r5,8
 100d1ec:	2805883a 	mov	r2,r5
 100d1f0:	003ef206 	br	100cdbc <__umoddi3+0x1c4>
 100d1f4:	01400604 	movi	r5,24
 100d1f8:	2805883a 	mov	r2,r5
 100d1fc:	003eef06 	br	100cdbc <__umoddi3+0x1c4>
 100d200:	01400604 	movi	r5,24
 100d204:	2805883a 	mov	r2,r5
 100d208:	003ed606 	br	100cd64 <__umoddi3+0x16c>
 100d20c:	153fa92e 	bgeu	r2,r20,100d0b4 <__umoddi3+0x4bc>
 100d210:	843fffc4 	addi	r16,r16,-1
 100d214:	1585883a 	add	r2,r2,r22
 100d218:	003fa606 	br	100d0b4 <__umoddi3+0x4bc>
 100d21c:	157f912e 	bgeu	r2,r21,100d064 <__umoddi3+0x46c>
 100d220:	e73fffc4 	addi	fp,fp,-1
 100d224:	1585883a 	add	r2,r2,r22
 100d228:	003f8e06 	br	100d064 <__umoddi3+0x46c>
 100d22c:	157f542e 	bgeu	r2,r21,100cf80 <__umoddi3+0x388>
 100d230:	14c5883a 	add	r2,r2,r19
 100d234:	003f5206 	br	100cf80 <__umoddi3+0x388>
 100d238:	14c5883a 	add	r2,r2,r19
 100d23c:	003efc06 	br	100ce30 <__umoddi3+0x238>
 100d240:	14c5883a 	add	r2,r2,r19
 100d244:	003ea606 	br	100cce0 <__umoddi3+0xe8>
 100d248:	d8800117 	ldw	r2,4(sp)
 100d24c:	113fc836 	bltu	r2,r4,100d170 <__umoddi3+0x578>
 100d250:	000d883a 	mov	r6,zero
 100d254:	003fcd06 	br	100d18c <__umoddi3+0x594>

0100d258 <__divdf3>:
 100d258:	deffed04 	addi	sp,sp,-76
 100d25c:	dcc01115 	stw	r19,68(sp)
 100d260:	dcc00404 	addi	r19,sp,16
 100d264:	2011883a 	mov	r8,r4
 100d268:	2813883a 	mov	r9,r5
 100d26c:	dc000e15 	stw	r16,56(sp)
 100d270:	d809883a 	mov	r4,sp
 100d274:	980b883a 	mov	r5,r19
 100d278:	dc000904 	addi	r16,sp,36
 100d27c:	dfc01215 	stw	ra,72(sp)
 100d280:	da400115 	stw	r9,4(sp)
 100d284:	d9c00315 	stw	r7,12(sp)
 100d288:	da000015 	stw	r8,0(sp)
 100d28c:	d9800215 	stw	r6,8(sp)
 100d290:	dc801015 	stw	r18,64(sp)
 100d294:	dc400f15 	stw	r17,60(sp)
 100d298:	1004f2c0 	call	1004f2c <__unpack_d>
 100d29c:	d9000204 	addi	r4,sp,8
 100d2a0:	800b883a 	mov	r5,r16
 100d2a4:	1004f2c0 	call	1004f2c <__unpack_d>
 100d2a8:	d9000417 	ldw	r4,16(sp)
 100d2ac:	00800044 	movi	r2,1
 100d2b0:	11000b2e 	bgeu	r2,r4,100d2e0 <__divdf3+0x88>
 100d2b4:	d9400917 	ldw	r5,36(sp)
 100d2b8:	1140762e 	bgeu	r2,r5,100d494 <__divdf3+0x23c>
 100d2bc:	d8800517 	ldw	r2,20(sp)
 100d2c0:	d8c00a17 	ldw	r3,40(sp)
 100d2c4:	01800104 	movi	r6,4
 100d2c8:	10c4f03a 	xor	r2,r2,r3
 100d2cc:	d8800515 	stw	r2,20(sp)
 100d2d0:	21800226 	beq	r4,r6,100d2dc <__divdf3+0x84>
 100d2d4:	00800084 	movi	r2,2
 100d2d8:	2080141e 	bne	r4,r2,100d32c <__divdf3+0xd4>
 100d2dc:	29000926 	beq	r5,r4,100d304 <__divdf3+0xac>
 100d2e0:	9809883a 	mov	r4,r19
 100d2e4:	1004c180 	call	1004c18 <__pack_d>
 100d2e8:	dfc01217 	ldw	ra,72(sp)
 100d2ec:	dcc01117 	ldw	r19,68(sp)
 100d2f0:	dc801017 	ldw	r18,64(sp)
 100d2f4:	dc400f17 	ldw	r17,60(sp)
 100d2f8:	dc000e17 	ldw	r16,56(sp)
 100d2fc:	dec01304 	addi	sp,sp,76
 100d300:	f800283a 	ret
 100d304:	01004074 	movhi	r4,257
 100d308:	2109ad04 	addi	r4,r4,9908
 100d30c:	1004c180 	call	1004c18 <__pack_d>
 100d310:	dfc01217 	ldw	ra,72(sp)
 100d314:	dcc01117 	ldw	r19,68(sp)
 100d318:	dc801017 	ldw	r18,64(sp)
 100d31c:	dc400f17 	ldw	r17,60(sp)
 100d320:	dc000e17 	ldw	r16,56(sp)
 100d324:	dec01304 	addi	sp,sp,76
 100d328:	f800283a 	ret
 100d32c:	29805b26 	beq	r5,r6,100d49c <__divdf3+0x244>
 100d330:	28802d26 	beq	r5,r2,100d3e8 <__divdf3+0x190>
 100d334:	d8c00617 	ldw	r3,24(sp)
 100d338:	d8800b17 	ldw	r2,44(sp)
 100d33c:	d9c00817 	ldw	r7,32(sp)
 100d340:	dc400d17 	ldw	r17,52(sp)
 100d344:	188bc83a 	sub	r5,r3,r2
 100d348:	d9800717 	ldw	r6,28(sp)
 100d34c:	dc000c17 	ldw	r16,48(sp)
 100d350:	d9400615 	stw	r5,24(sp)
 100d354:	3c403836 	bltu	r7,r17,100d438 <__divdf3+0x1e0>
 100d358:	89c03626 	beq	r17,r7,100d434 <__divdf3+0x1dc>
 100d35c:	0015883a 	mov	r10,zero
 100d360:	001d883a 	mov	r14,zero
 100d364:	02c40034 	movhi	r11,4096
 100d368:	001f883a 	mov	r15,zero
 100d36c:	003f883a 	mov	ra,zero
 100d370:	04800f44 	movi	r18,61
 100d374:	00000f06 	br	100d3b4 <__divdf3+0x15c>
 100d378:	601d883a 	mov	r14,r12
 100d37c:	681f883a 	mov	r15,r13
 100d380:	400d883a 	mov	r6,r8
 100d384:	100f883a 	mov	r7,r2
 100d388:	3191883a 	add	r8,r6,r6
 100d38c:	5808d07a 	srli	r4,r11,1
 100d390:	4185803a 	cmpltu	r2,r8,r6
 100d394:	39d3883a 	add	r9,r7,r7
 100d398:	28c6b03a 	or	r3,r5,r3
 100d39c:	1245883a 	add	r2,r2,r9
 100d3a0:	1815883a 	mov	r10,r3
 100d3a4:	2017883a 	mov	r11,r4
 100d3a8:	400d883a 	mov	r6,r8
 100d3ac:	100f883a 	mov	r7,r2
 100d3b0:	fc801726 	beq	ra,r18,100d410 <__divdf3+0x1b8>
 100d3b4:	580a97fa 	slli	r5,r11,31
 100d3b8:	5006d07a 	srli	r3,r10,1
 100d3bc:	ffc00044 	addi	ra,ra,1
 100d3c0:	3c7ff136 	bltu	r7,r17,100d388 <__divdf3+0x130>
 100d3c4:	3411c83a 	sub	r8,r6,r16
 100d3c8:	3205803a 	cmpltu	r2,r6,r8
 100d3cc:	3c53c83a 	sub	r9,r7,r17
 100d3d0:	7298b03a 	or	r12,r14,r10
 100d3d4:	7adab03a 	or	r13,r15,r11
 100d3d8:	4885c83a 	sub	r2,r9,r2
 100d3dc:	89ffe61e 	bne	r17,r7,100d378 <__divdf3+0x120>
 100d3e0:	343fe936 	bltu	r6,r16,100d388 <__divdf3+0x130>
 100d3e4:	003fe406 	br	100d378 <__divdf3+0x120>
 100d3e8:	9809883a 	mov	r4,r19
 100d3ec:	d9800415 	stw	r6,16(sp)
 100d3f0:	1004c180 	call	1004c18 <__pack_d>
 100d3f4:	dfc01217 	ldw	ra,72(sp)
 100d3f8:	dcc01117 	ldw	r19,68(sp)
 100d3fc:	dc801017 	ldw	r18,64(sp)
 100d400:	dc400f17 	ldw	r17,60(sp)
 100d404:	dc000e17 	ldw	r16,56(sp)
 100d408:	dec01304 	addi	sp,sp,76
 100d40c:	f800283a 	ret
 100d410:	00803fc4 	movi	r2,255
 100d414:	7090703a 	and	r8,r14,r2
 100d418:	00802004 	movi	r2,128
 100d41c:	0007883a 	mov	r3,zero
 100d420:	0013883a 	mov	r9,zero
 100d424:	40800d26 	beq	r8,r2,100d45c <__divdf3+0x204>
 100d428:	dbc00815 	stw	r15,32(sp)
 100d42c:	db800715 	stw	r14,28(sp)
 100d430:	003fab06 	br	100d2e0 <__divdf3+0x88>
 100d434:	343fc92e 	bgeu	r6,r16,100d35c <__divdf3+0x104>
 100d438:	3185883a 	add	r2,r6,r6
 100d43c:	1189803a 	cmpltu	r4,r2,r6
 100d440:	39c7883a 	add	r3,r7,r7
 100d444:	20c9883a 	add	r4,r4,r3
 100d448:	297fffc4 	addi	r5,r5,-1
 100d44c:	100d883a 	mov	r6,r2
 100d450:	200f883a 	mov	r7,r4
 100d454:	d9400615 	stw	r5,24(sp)
 100d458:	003fc006 	br	100d35c <__divdf3+0x104>
 100d45c:	483ff21e 	bne	r9,zero,100d428 <__divdf3+0x1d0>
 100d460:	01004004 	movi	r4,256
 100d464:	7104703a 	and	r2,r14,r4
 100d468:	10c4b03a 	or	r2,r2,r3
 100d46c:	103fee1e 	bne	r2,zero,100d428 <__divdf3+0x1d0>
 100d470:	31c4b03a 	or	r2,r6,r7
 100d474:	103fec26 	beq	r2,zero,100d428 <__divdf3+0x1d0>
 100d478:	7205883a 	add	r2,r14,r8
 100d47c:	1391803a 	cmpltu	r8,r2,r14
 100d480:	43d1883a 	add	r8,r8,r15
 100d484:	013fc004 	movi	r4,-256
 100d488:	111c703a 	and	r14,r2,r4
 100d48c:	401f883a 	mov	r15,r8
 100d490:	003fe506 	br	100d428 <__divdf3+0x1d0>
 100d494:	8009883a 	mov	r4,r16
 100d498:	003f9206 	br	100d2e4 <__divdf3+0x8c>
 100d49c:	9809883a 	mov	r4,r19
 100d4a0:	d8000715 	stw	zero,28(sp)
 100d4a4:	d8000815 	stw	zero,32(sp)
 100d4a8:	d8000615 	stw	zero,24(sp)
 100d4ac:	003f8d06 	br	100d2e4 <__divdf3+0x8c>

0100d4b0 <__nedf2>:
 100d4b0:	deffef04 	addi	sp,sp,-68
 100d4b4:	dc400f15 	stw	r17,60(sp)
 100d4b8:	dc400404 	addi	r17,sp,16
 100d4bc:	2005883a 	mov	r2,r4
 100d4c0:	2807883a 	mov	r3,r5
 100d4c4:	dc000e15 	stw	r16,56(sp)
 100d4c8:	d809883a 	mov	r4,sp
 100d4cc:	880b883a 	mov	r5,r17
 100d4d0:	dc000904 	addi	r16,sp,36
 100d4d4:	d8c00115 	stw	r3,4(sp)
 100d4d8:	d8800015 	stw	r2,0(sp)
 100d4dc:	d9800215 	stw	r6,8(sp)
 100d4e0:	dfc01015 	stw	ra,64(sp)
 100d4e4:	d9c00315 	stw	r7,12(sp)
 100d4e8:	1004f2c0 	call	1004f2c <__unpack_d>
 100d4ec:	d9000204 	addi	r4,sp,8
 100d4f0:	800b883a 	mov	r5,r16
 100d4f4:	1004f2c0 	call	1004f2c <__unpack_d>
 100d4f8:	d8800417 	ldw	r2,16(sp)
 100d4fc:	00c00044 	movi	r3,1
 100d500:	180d883a 	mov	r6,r3
 100d504:	1880062e 	bgeu	r3,r2,100d520 <__nedf2+0x70>
 100d508:	d8800917 	ldw	r2,36(sp)
 100d50c:	8809883a 	mov	r4,r17
 100d510:	800b883a 	mov	r5,r16
 100d514:	1880022e 	bgeu	r3,r2,100d520 <__nedf2+0x70>
 100d518:	10050640 	call	1005064 <__fpcmp_parts_d>
 100d51c:	100d883a 	mov	r6,r2
 100d520:	3005883a 	mov	r2,r6
 100d524:	dfc01017 	ldw	ra,64(sp)
 100d528:	dc400f17 	ldw	r17,60(sp)
 100d52c:	dc000e17 	ldw	r16,56(sp)
 100d530:	dec01104 	addi	sp,sp,68
 100d534:	f800283a 	ret

0100d538 <__ltdf2>:
 100d538:	deffef04 	addi	sp,sp,-68
 100d53c:	dc400f15 	stw	r17,60(sp)
 100d540:	dc400404 	addi	r17,sp,16
 100d544:	2005883a 	mov	r2,r4
 100d548:	2807883a 	mov	r3,r5
 100d54c:	dc000e15 	stw	r16,56(sp)
 100d550:	d809883a 	mov	r4,sp
 100d554:	880b883a 	mov	r5,r17
 100d558:	dc000904 	addi	r16,sp,36
 100d55c:	d8c00115 	stw	r3,4(sp)
 100d560:	d8800015 	stw	r2,0(sp)
 100d564:	d9800215 	stw	r6,8(sp)
 100d568:	dfc01015 	stw	ra,64(sp)
 100d56c:	d9c00315 	stw	r7,12(sp)
 100d570:	1004f2c0 	call	1004f2c <__unpack_d>
 100d574:	d9000204 	addi	r4,sp,8
 100d578:	800b883a 	mov	r5,r16
 100d57c:	1004f2c0 	call	1004f2c <__unpack_d>
 100d580:	d8800417 	ldw	r2,16(sp)
 100d584:	00c00044 	movi	r3,1
 100d588:	180d883a 	mov	r6,r3
 100d58c:	1880062e 	bgeu	r3,r2,100d5a8 <__ltdf2+0x70>
 100d590:	d8800917 	ldw	r2,36(sp)
 100d594:	8809883a 	mov	r4,r17
 100d598:	800b883a 	mov	r5,r16
 100d59c:	1880022e 	bgeu	r3,r2,100d5a8 <__ltdf2+0x70>
 100d5a0:	10050640 	call	1005064 <__fpcmp_parts_d>
 100d5a4:	100d883a 	mov	r6,r2
 100d5a8:	3005883a 	mov	r2,r6
 100d5ac:	dfc01017 	ldw	ra,64(sp)
 100d5b0:	dc400f17 	ldw	r17,60(sp)
 100d5b4:	dc000e17 	ldw	r16,56(sp)
 100d5b8:	dec01104 	addi	sp,sp,68
 100d5bc:	f800283a 	ret

0100d5c0 <__floatunsidf>:
 100d5c0:	defff204 	addi	sp,sp,-56
 100d5c4:	dfc00d15 	stw	ra,52(sp)
 100d5c8:	ddc00c15 	stw	r23,48(sp)
 100d5cc:	dd800b15 	stw	r22,44(sp)
 100d5d0:	dd400a15 	stw	r21,40(sp)
 100d5d4:	dd000915 	stw	r20,36(sp)
 100d5d8:	dcc00815 	stw	r19,32(sp)
 100d5dc:	dc800715 	stw	r18,28(sp)
 100d5e0:	dc400615 	stw	r17,24(sp)
 100d5e4:	dc000515 	stw	r16,20(sp)
 100d5e8:	d8000115 	stw	zero,4(sp)
 100d5ec:	20000f1e 	bne	r4,zero,100d62c <__floatunsidf+0x6c>
 100d5f0:	00800084 	movi	r2,2
 100d5f4:	d8800015 	stw	r2,0(sp)
 100d5f8:	d809883a 	mov	r4,sp
 100d5fc:	1004c180 	call	1004c18 <__pack_d>
 100d600:	dfc00d17 	ldw	ra,52(sp)
 100d604:	ddc00c17 	ldw	r23,48(sp)
 100d608:	dd800b17 	ldw	r22,44(sp)
 100d60c:	dd400a17 	ldw	r21,40(sp)
 100d610:	dd000917 	ldw	r20,36(sp)
 100d614:	dcc00817 	ldw	r19,32(sp)
 100d618:	dc800717 	ldw	r18,28(sp)
 100d61c:	dc400617 	ldw	r17,24(sp)
 100d620:	dc000517 	ldw	r16,20(sp)
 100d624:	dec00e04 	addi	sp,sp,56
 100d628:	f800283a 	ret
 100d62c:	008000c4 	movi	r2,3
 100d630:	00c00f04 	movi	r3,60
 100d634:	002f883a 	mov	r23,zero
 100d638:	202d883a 	mov	r22,r4
 100d63c:	d8800015 	stw	r2,0(sp)
 100d640:	d8c00215 	stw	r3,8(sp)
 100d644:	d9000315 	stw	r4,12(sp)
 100d648:	ddc00415 	stw	r23,16(sp)
 100d64c:	10048c80 	call	10048c8 <__clzsi2>
 100d650:	12400744 	addi	r9,r2,29
 100d654:	48000b16 	blt	r9,zero,100d684 <__floatunsidf+0xc4>
 100d658:	483fe726 	beq	r9,zero,100d5f8 <__floatunsidf+0x38>
 100d65c:	10bfff44 	addi	r2,r2,-3
 100d660:	10002e16 	blt	r2,zero,100d71c <__floatunsidf+0x15c>
 100d664:	b0a2983a 	sll	r17,r22,r2
 100d668:	0021883a 	mov	r16,zero
 100d66c:	d8800217 	ldw	r2,8(sp)
 100d670:	dc400415 	stw	r17,16(sp)
 100d674:	dc000315 	stw	r16,12(sp)
 100d678:	1245c83a 	sub	r2,r2,r9
 100d67c:	d8800215 	stw	r2,8(sp)
 100d680:	003fdd06 	br	100d5f8 <__floatunsidf+0x38>
 100d684:	0255c83a 	sub	r10,zero,r9
 100d688:	51bff804 	addi	r6,r10,-32
 100d68c:	30001b16 	blt	r6,zero,100d6fc <__floatunsidf+0x13c>
 100d690:	b9a8d83a 	srl	r20,r23,r6
 100d694:	002b883a 	mov	r21,zero
 100d698:	000f883a 	mov	r7,zero
 100d69c:	01000044 	movi	r4,1
 100d6a0:	0011883a 	mov	r8,zero
 100d6a4:	30002516 	blt	r6,zero,100d73c <__floatunsidf+0x17c>
 100d6a8:	21a6983a 	sll	r19,r4,r6
 100d6ac:	0025883a 	mov	r18,zero
 100d6b0:	00bfffc4 	movi	r2,-1
 100d6b4:	9089883a 	add	r4,r18,r2
 100d6b8:	988b883a 	add	r5,r19,r2
 100d6bc:	248d803a 	cmpltu	r6,r4,r18
 100d6c0:	314b883a 	add	r5,r6,r5
 100d6c4:	b104703a 	and	r2,r22,r4
 100d6c8:	b946703a 	and	r3,r23,r5
 100d6cc:	10c4b03a 	or	r2,r2,r3
 100d6d0:	10000226 	beq	r2,zero,100d6dc <__floatunsidf+0x11c>
 100d6d4:	01c00044 	movi	r7,1
 100d6d8:	0011883a 	mov	r8,zero
 100d6dc:	d9000217 	ldw	r4,8(sp)
 100d6e0:	a1c4b03a 	or	r2,r20,r7
 100d6e4:	aa06b03a 	or	r3,r21,r8
 100d6e8:	2249c83a 	sub	r4,r4,r9
 100d6ec:	d8c00415 	stw	r3,16(sp)
 100d6f0:	d9000215 	stw	r4,8(sp)
 100d6f4:	d8800315 	stw	r2,12(sp)
 100d6f8:	003fbf06 	br	100d5f8 <__floatunsidf+0x38>
 100d6fc:	bdc7883a 	add	r3,r23,r23
 100d700:	008007c4 	movi	r2,31
 100d704:	1285c83a 	sub	r2,r2,r10
 100d708:	1886983a 	sll	r3,r3,r2
 100d70c:	b2a8d83a 	srl	r20,r22,r10
 100d710:	baaad83a 	srl	r21,r23,r10
 100d714:	1d28b03a 	or	r20,r3,r20
 100d718:	003fdf06 	br	100d698 <__floatunsidf+0xd8>
 100d71c:	b006d07a 	srli	r3,r22,1
 100d720:	008007c4 	movi	r2,31
 100d724:	1245c83a 	sub	r2,r2,r9
 100d728:	1886d83a 	srl	r3,r3,r2
 100d72c:	ba62983a 	sll	r17,r23,r9
 100d730:	b260983a 	sll	r16,r22,r9
 100d734:	1c62b03a 	or	r17,r3,r17
 100d738:	003fcc06 	br	100d66c <__floatunsidf+0xac>
 100d73c:	2006d07a 	srli	r3,r4,1
 100d740:	008007c4 	movi	r2,31
 100d744:	1285c83a 	sub	r2,r2,r10
 100d748:	18a6d83a 	srl	r19,r3,r2
 100d74c:	22a4983a 	sll	r18,r4,r10
 100d750:	003fd706 	br	100d6b0 <__floatunsidf+0xf0>

0100d754 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100d754:	defff804 	addi	sp,sp,-32
 100d758:	dfc00715 	stw	ra,28(sp)
 100d75c:	df000615 	stw	fp,24(sp)
 100d760:	df000604 	addi	fp,sp,24
 100d764:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100d768:	e0bffc17 	ldw	r2,-16(fp)
 100d76c:	1004803a 	cmplt	r2,r2,zero
 100d770:	1000091e 	bne	r2,zero,100d798 <close+0x44>
 100d774:	e13ffc17 	ldw	r4,-16(fp)
 100d778:	01400304 	movi	r5,12
 100d77c:	100476c0 	call	100476c <__mulsi3>
 100d780:	1007883a 	mov	r3,r2
 100d784:	00804074 	movhi	r2,257
 100d788:	108cab04 	addi	r2,r2,12972
 100d78c:	1887883a 	add	r3,r3,r2
 100d790:	e0ffff15 	stw	r3,-4(fp)
 100d794:	00000106 	br	100d79c <close+0x48>
 100d798:	e03fff15 	stw	zero,-4(fp)
 100d79c:	e0bfff17 	ldw	r2,-4(fp)
 100d7a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100d7a4:	e0bffb17 	ldw	r2,-20(fp)
 100d7a8:	1005003a 	cmpeq	r2,r2,zero
 100d7ac:	10001d1e 	bne	r2,zero,100d824 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100d7b0:	e0bffb17 	ldw	r2,-20(fp)
 100d7b4:	10800017 	ldw	r2,0(r2)
 100d7b8:	10800417 	ldw	r2,16(r2)
 100d7bc:	1005003a 	cmpeq	r2,r2,zero
 100d7c0:	1000071e 	bne	r2,zero,100d7e0 <close+0x8c>
 100d7c4:	e0bffb17 	ldw	r2,-20(fp)
 100d7c8:	10800017 	ldw	r2,0(r2)
 100d7cc:	10800417 	ldw	r2,16(r2)
 100d7d0:	e13ffb17 	ldw	r4,-20(fp)
 100d7d4:	103ee83a 	callr	r2
 100d7d8:	e0bffe15 	stw	r2,-8(fp)
 100d7dc:	00000106 	br	100d7e4 <close+0x90>
 100d7e0:	e03ffe15 	stw	zero,-8(fp)
 100d7e4:	e0bffe17 	ldw	r2,-8(fp)
 100d7e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100d7ec:	e13ffc17 	ldw	r4,-16(fp)
 100d7f0:	100dfac0 	call	100dfac <alt_release_fd>
    if (rval < 0)
 100d7f4:	e0bffa17 	ldw	r2,-24(fp)
 100d7f8:	1004403a 	cmpge	r2,r2,zero
 100d7fc:	1000071e 	bne	r2,zero,100d81c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100d800:	100d8540 	call	100d854 <alt_get_errno>
 100d804:	e0fffa17 	ldw	r3,-24(fp)
 100d808:	00c7c83a 	sub	r3,zero,r3
 100d80c:	10c00015 	stw	r3,0(r2)
      return -1;
 100d810:	00bfffc4 	movi	r2,-1
 100d814:	e0bffd15 	stw	r2,-12(fp)
 100d818:	00000806 	br	100d83c <close+0xe8>
    }
    return 0;
 100d81c:	e03ffd15 	stw	zero,-12(fp)
 100d820:	00000606 	br	100d83c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d824:	100d8540 	call	100d854 <alt_get_errno>
 100d828:	1007883a 	mov	r3,r2
 100d82c:	00801444 	movi	r2,81
 100d830:	18800015 	stw	r2,0(r3)
    return -1;
 100d834:	00bfffc4 	movi	r2,-1
 100d838:	e0bffd15 	stw	r2,-12(fp)
 100d83c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100d840:	e037883a 	mov	sp,fp
 100d844:	dfc00117 	ldw	ra,4(sp)
 100d848:	df000017 	ldw	fp,0(sp)
 100d84c:	dec00204 	addi	sp,sp,8
 100d850:	f800283a 	ret

0100d854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d854:	defffd04 	addi	sp,sp,-12
 100d858:	dfc00215 	stw	ra,8(sp)
 100d85c:	df000115 	stw	fp,4(sp)
 100d860:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d864:	00804074 	movhi	r2,257
 100d868:	10916004 	addi	r2,r2,17792
 100d86c:	10800017 	ldw	r2,0(r2)
 100d870:	1005003a 	cmpeq	r2,r2,zero
 100d874:	1000061e 	bne	r2,zero,100d890 <alt_get_errno+0x3c>
 100d878:	00804074 	movhi	r2,257
 100d87c:	10916004 	addi	r2,r2,17792
 100d880:	10800017 	ldw	r2,0(r2)
 100d884:	103ee83a 	callr	r2
 100d888:	e0bfff15 	stw	r2,-4(fp)
 100d88c:	00000306 	br	100d89c <alt_get_errno+0x48>
 100d890:	00804074 	movhi	r2,257
 100d894:	10983104 	addi	r2,r2,24772
 100d898:	e0bfff15 	stw	r2,-4(fp)
 100d89c:	e0bfff17 	ldw	r2,-4(fp)
}
 100d8a0:	e037883a 	mov	sp,fp
 100d8a4:	dfc00117 	ldw	ra,4(sp)
 100d8a8:	df000017 	ldw	fp,0(sp)
 100d8ac:	dec00204 	addi	sp,sp,8
 100d8b0:	f800283a 	ret

0100d8b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100d8b4:	defffc04 	addi	sp,sp,-16
 100d8b8:	df000315 	stw	fp,12(sp)
 100d8bc:	df000304 	addi	fp,sp,12
 100d8c0:	e13ffd15 	stw	r4,-12(fp)
 100d8c4:	e17ffe15 	stw	r5,-8(fp)
 100d8c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100d8cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100d8d0:	e037883a 	mov	sp,fp
 100d8d4:	df000017 	ldw	fp,0(sp)
 100d8d8:	dec00104 	addi	sp,sp,4
 100d8dc:	f800283a 	ret

0100d8e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100d8e0:	defff904 	addi	sp,sp,-28
 100d8e4:	dfc00615 	stw	ra,24(sp)
 100d8e8:	df000515 	stw	fp,20(sp)
 100d8ec:	df000504 	addi	fp,sp,20
 100d8f0:	e13ffc15 	stw	r4,-16(fp)
 100d8f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d8f8:	e0bffc17 	ldw	r2,-16(fp)
 100d8fc:	1004803a 	cmplt	r2,r2,zero
 100d900:	1000091e 	bne	r2,zero,100d928 <fstat+0x48>
 100d904:	e13ffc17 	ldw	r4,-16(fp)
 100d908:	01400304 	movi	r5,12
 100d90c:	100476c0 	call	100476c <__mulsi3>
 100d910:	1007883a 	mov	r3,r2
 100d914:	00804074 	movhi	r2,257
 100d918:	108cab04 	addi	r2,r2,12972
 100d91c:	1887883a 	add	r3,r3,r2
 100d920:	e0ffff15 	stw	r3,-4(fp)
 100d924:	00000106 	br	100d92c <fstat+0x4c>
 100d928:	e03fff15 	stw	zero,-4(fp)
 100d92c:	e0bfff17 	ldw	r2,-4(fp)
 100d930:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d934:	e0bffb17 	ldw	r2,-20(fp)
 100d938:	1005003a 	cmpeq	r2,r2,zero
 100d93c:	1000121e 	bne	r2,zero,100d988 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100d940:	e0bffb17 	ldw	r2,-20(fp)
 100d944:	10800017 	ldw	r2,0(r2)
 100d948:	10800817 	ldw	r2,32(r2)
 100d94c:	1005003a 	cmpeq	r2,r2,zero
 100d950:	1000081e 	bne	r2,zero,100d974 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100d954:	e0bffb17 	ldw	r2,-20(fp)
 100d958:	10800017 	ldw	r2,0(r2)
 100d95c:	10800817 	ldw	r2,32(r2)
 100d960:	e13ffb17 	ldw	r4,-20(fp)
 100d964:	e17ffd17 	ldw	r5,-12(fp)
 100d968:	103ee83a 	callr	r2
 100d96c:	e0bffe15 	stw	r2,-8(fp)
 100d970:	00000b06 	br	100d9a0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100d974:	e0fffd17 	ldw	r3,-12(fp)
 100d978:	00880004 	movi	r2,8192
 100d97c:	18800115 	stw	r2,4(r3)
      return 0;
 100d980:	e03ffe15 	stw	zero,-8(fp)
 100d984:	00000606 	br	100d9a0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d988:	100d9b80 	call	100d9b8 <alt_get_errno>
 100d98c:	1007883a 	mov	r3,r2
 100d990:	00801444 	movi	r2,81
 100d994:	18800015 	stw	r2,0(r3)
    return -1;
 100d998:	00bfffc4 	movi	r2,-1
 100d99c:	e0bffe15 	stw	r2,-8(fp)
 100d9a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100d9a4:	e037883a 	mov	sp,fp
 100d9a8:	dfc00117 	ldw	ra,4(sp)
 100d9ac:	df000017 	ldw	fp,0(sp)
 100d9b0:	dec00204 	addi	sp,sp,8
 100d9b4:	f800283a 	ret

0100d9b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d9b8:	defffd04 	addi	sp,sp,-12
 100d9bc:	dfc00215 	stw	ra,8(sp)
 100d9c0:	df000115 	stw	fp,4(sp)
 100d9c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d9c8:	00804074 	movhi	r2,257
 100d9cc:	10916004 	addi	r2,r2,17792
 100d9d0:	10800017 	ldw	r2,0(r2)
 100d9d4:	1005003a 	cmpeq	r2,r2,zero
 100d9d8:	1000061e 	bne	r2,zero,100d9f4 <alt_get_errno+0x3c>
 100d9dc:	00804074 	movhi	r2,257
 100d9e0:	10916004 	addi	r2,r2,17792
 100d9e4:	10800017 	ldw	r2,0(r2)
 100d9e8:	103ee83a 	callr	r2
 100d9ec:	e0bfff15 	stw	r2,-4(fp)
 100d9f0:	00000306 	br	100da00 <alt_get_errno+0x48>
 100d9f4:	00804074 	movhi	r2,257
 100d9f8:	10983104 	addi	r2,r2,24772
 100d9fc:	e0bfff15 	stw	r2,-4(fp)
 100da00:	e0bfff17 	ldw	r2,-4(fp)
}
 100da04:	e037883a 	mov	sp,fp
 100da08:	dfc00117 	ldw	ra,4(sp)
 100da0c:	df000017 	ldw	fp,0(sp)
 100da10:	dec00204 	addi	sp,sp,8
 100da14:	f800283a 	ret

0100da18 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100da18:	deffeb04 	addi	sp,sp,-84
 100da1c:	dfc01415 	stw	ra,80(sp)
 100da20:	df001315 	stw	fp,76(sp)
 100da24:	df001304 	addi	fp,sp,76
 100da28:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100da2c:	e0bffd17 	ldw	r2,-12(fp)
 100da30:	1004803a 	cmplt	r2,r2,zero
 100da34:	1000091e 	bne	r2,zero,100da5c <isatty+0x44>
 100da38:	e13ffd17 	ldw	r4,-12(fp)
 100da3c:	01400304 	movi	r5,12
 100da40:	100476c0 	call	100476c <__mulsi3>
 100da44:	1007883a 	mov	r3,r2
 100da48:	00804074 	movhi	r2,257
 100da4c:	108cab04 	addi	r2,r2,12972
 100da50:	1887883a 	add	r3,r3,r2
 100da54:	e0ffff15 	stw	r3,-4(fp)
 100da58:	00000106 	br	100da60 <isatty+0x48>
 100da5c:	e03fff15 	stw	zero,-4(fp)
 100da60:	e0bfff17 	ldw	r2,-4(fp)
 100da64:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100da68:	e0bfed17 	ldw	r2,-76(fp)
 100da6c:	1005003a 	cmpeq	r2,r2,zero
 100da70:	10000f1e 	bne	r2,zero,100dab0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100da74:	e0bfed17 	ldw	r2,-76(fp)
 100da78:	10800017 	ldw	r2,0(r2)
 100da7c:	10800817 	ldw	r2,32(r2)
 100da80:	1004c03a 	cmpne	r2,r2,zero
 100da84:	1000031e 	bne	r2,zero,100da94 <isatty+0x7c>
    {
      return 1;
 100da88:	00800044 	movi	r2,1
 100da8c:	e0bffe15 	stw	r2,-8(fp)
 100da90:	00000c06 	br	100dac4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100da94:	e17fee04 	addi	r5,fp,-72
 100da98:	e13ffd17 	ldw	r4,-12(fp)
 100da9c:	100d8e00 	call	100d8e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100daa0:	e0bfef17 	ldw	r2,-68(fp)
 100daa4:	10880020 	cmpeqi	r2,r2,8192
 100daa8:	e0bffe15 	stw	r2,-8(fp)
 100daac:	00000506 	br	100dac4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100dab0:	100dadc0 	call	100dadc <alt_get_errno>
 100dab4:	1007883a 	mov	r3,r2
 100dab8:	00801444 	movi	r2,81
 100dabc:	18800015 	stw	r2,0(r3)
    return 0;
 100dac0:	e03ffe15 	stw	zero,-8(fp)
 100dac4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100dac8:	e037883a 	mov	sp,fp
 100dacc:	dfc00117 	ldw	ra,4(sp)
 100dad0:	df000017 	ldw	fp,0(sp)
 100dad4:	dec00204 	addi	sp,sp,8
 100dad8:	f800283a 	ret

0100dadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dadc:	defffd04 	addi	sp,sp,-12
 100dae0:	dfc00215 	stw	ra,8(sp)
 100dae4:	df000115 	stw	fp,4(sp)
 100dae8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100daec:	00804074 	movhi	r2,257
 100daf0:	10916004 	addi	r2,r2,17792
 100daf4:	10800017 	ldw	r2,0(r2)
 100daf8:	1005003a 	cmpeq	r2,r2,zero
 100dafc:	1000061e 	bne	r2,zero,100db18 <alt_get_errno+0x3c>
 100db00:	00804074 	movhi	r2,257
 100db04:	10916004 	addi	r2,r2,17792
 100db08:	10800017 	ldw	r2,0(r2)
 100db0c:	103ee83a 	callr	r2
 100db10:	e0bfff15 	stw	r2,-4(fp)
 100db14:	00000306 	br	100db24 <alt_get_errno+0x48>
 100db18:	00804074 	movhi	r2,257
 100db1c:	10983104 	addi	r2,r2,24772
 100db20:	e0bfff15 	stw	r2,-4(fp)
 100db24:	e0bfff17 	ldw	r2,-4(fp)
}
 100db28:	e037883a 	mov	sp,fp
 100db2c:	dfc00117 	ldw	ra,4(sp)
 100db30:	df000017 	ldw	fp,0(sp)
 100db34:	dec00204 	addi	sp,sp,8
 100db38:	f800283a 	ret

0100db3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100db3c:	defffe04 	addi	sp,sp,-8
 100db40:	dfc00115 	stw	ra,4(sp)
 100db44:	df000015 	stw	fp,0(sp)
 100db48:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100db4c:	01004074 	movhi	r4,257
 100db50:	21116504 	addi	r4,r4,17812
 100db54:	01404074 	movhi	r5,257
 100db58:	294a9c04 	addi	r5,r5,10864
 100db5c:	01804074 	movhi	r6,257
 100db60:	31916504 	addi	r6,r6,17812
 100db64:	100dbbc0 	call	100dbbc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100db68:	01004034 	movhi	r4,256
 100db6c:	21000804 	addi	r4,r4,32
 100db70:	01404034 	movhi	r5,256
 100db74:	29400804 	addi	r5,r5,32
 100db78:	01804034 	movhi	r6,256
 100db7c:	31806d04 	addi	r6,r6,436
 100db80:	100dbbc0 	call	100dbbc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100db84:	01004074 	movhi	r4,257
 100db88:	2108ee04 	addi	r4,r4,9144
 100db8c:	01404074 	movhi	r5,257
 100db90:	2948ee04 	addi	r5,r5,9144
 100db94:	01804074 	movhi	r6,257
 100db98:	318a9c04 	addi	r6,r6,10864
 100db9c:	100dbbc0 	call	100dbbc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100dba0:	10111400 	call	1011140 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100dba4:	10113cc0 	call	10113cc <alt_icache_flush_all>
}
 100dba8:	e037883a 	mov	sp,fp
 100dbac:	dfc00117 	ldw	ra,4(sp)
 100dbb0:	df000017 	ldw	fp,0(sp)
 100dbb4:	dec00204 	addi	sp,sp,8
 100dbb8:	f800283a 	ret

0100dbbc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100dbbc:	defffc04 	addi	sp,sp,-16
 100dbc0:	df000315 	stw	fp,12(sp)
 100dbc4:	df000304 	addi	fp,sp,12
 100dbc8:	e13ffd15 	stw	r4,-12(fp)
 100dbcc:	e17ffe15 	stw	r5,-8(fp)
 100dbd0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100dbd4:	e0fffe17 	ldw	r3,-8(fp)
 100dbd8:	e0bffd17 	ldw	r2,-12(fp)
 100dbdc:	18800e26 	beq	r3,r2,100dc18 <alt_load_section+0x5c>
  {
    while( to != end )
 100dbe0:	00000a06 	br	100dc0c <alt_load_section+0x50>
    {
      *to++ = *from++;
 100dbe4:	e0bffd17 	ldw	r2,-12(fp)
 100dbe8:	10c00017 	ldw	r3,0(r2)
 100dbec:	e0bffe17 	ldw	r2,-8(fp)
 100dbf0:	10c00015 	stw	r3,0(r2)
 100dbf4:	e0bffe17 	ldw	r2,-8(fp)
 100dbf8:	10800104 	addi	r2,r2,4
 100dbfc:	e0bffe15 	stw	r2,-8(fp)
 100dc00:	e0bffd17 	ldw	r2,-12(fp)
 100dc04:	10800104 	addi	r2,r2,4
 100dc08:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100dc0c:	e0fffe17 	ldw	r3,-8(fp)
 100dc10:	e0bfff17 	ldw	r2,-4(fp)
 100dc14:	18bff31e 	bne	r3,r2,100dbe4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100dc18:	e037883a 	mov	sp,fp
 100dc1c:	df000017 	ldw	fp,0(sp)
 100dc20:	dec00104 	addi	sp,sp,4
 100dc24:	f800283a 	ret

0100dc28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100dc28:	defff804 	addi	sp,sp,-32
 100dc2c:	dfc00715 	stw	ra,28(sp)
 100dc30:	df000615 	stw	fp,24(sp)
 100dc34:	df000604 	addi	fp,sp,24
 100dc38:	e13ffc15 	stw	r4,-16(fp)
 100dc3c:	e17ffd15 	stw	r5,-12(fp)
 100dc40:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100dc44:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dc48:	e0bffc17 	ldw	r2,-16(fp)
 100dc4c:	1004803a 	cmplt	r2,r2,zero
 100dc50:	1000091e 	bne	r2,zero,100dc78 <lseek+0x50>
 100dc54:	e13ffc17 	ldw	r4,-16(fp)
 100dc58:	01400304 	movi	r5,12
 100dc5c:	100476c0 	call	100476c <__mulsi3>
 100dc60:	1007883a 	mov	r3,r2
 100dc64:	00804074 	movhi	r2,257
 100dc68:	108cab04 	addi	r2,r2,12972
 100dc6c:	1887883a 	add	r3,r3,r2
 100dc70:	e0ffff15 	stw	r3,-4(fp)
 100dc74:	00000106 	br	100dc7c <lseek+0x54>
 100dc78:	e03fff15 	stw	zero,-4(fp)
 100dc7c:	e0bfff17 	ldw	r2,-4(fp)
 100dc80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100dc84:	e0bffb17 	ldw	r2,-20(fp)
 100dc88:	1005003a 	cmpeq	r2,r2,zero
 100dc8c:	1000111e 	bne	r2,zero,100dcd4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100dc90:	e0bffb17 	ldw	r2,-20(fp)
 100dc94:	10800017 	ldw	r2,0(r2)
 100dc98:	10800717 	ldw	r2,28(r2)
 100dc9c:	1005003a 	cmpeq	r2,r2,zero
 100dca0:	1000091e 	bne	r2,zero,100dcc8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100dca4:	e0bffb17 	ldw	r2,-20(fp)
 100dca8:	10800017 	ldw	r2,0(r2)
 100dcac:	10800717 	ldw	r2,28(r2)
 100dcb0:	e13ffb17 	ldw	r4,-20(fp)
 100dcb4:	e17ffd17 	ldw	r5,-12(fp)
 100dcb8:	e1bffe17 	ldw	r6,-8(fp)
 100dcbc:	103ee83a 	callr	r2
 100dcc0:	e0bffa15 	stw	r2,-24(fp)
 100dcc4:	00000506 	br	100dcdc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100dcc8:	00bfde84 	movi	r2,-134
 100dccc:	e0bffa15 	stw	r2,-24(fp)
 100dcd0:	00000206 	br	100dcdc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100dcd4:	00bfebc4 	movi	r2,-81
 100dcd8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100dcdc:	e0bffa17 	ldw	r2,-24(fp)
 100dce0:	1004403a 	cmpge	r2,r2,zero
 100dce4:	1000071e 	bne	r2,zero,100dd04 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100dce8:	100dd1c0 	call	100dd1c <alt_get_errno>
 100dcec:	1007883a 	mov	r3,r2
 100dcf0:	e0bffa17 	ldw	r2,-24(fp)
 100dcf4:	0085c83a 	sub	r2,zero,r2
 100dcf8:	18800015 	stw	r2,0(r3)
    rc = -1;
 100dcfc:	00bfffc4 	movi	r2,-1
 100dd00:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100dd04:	e0bffa17 	ldw	r2,-24(fp)
}
 100dd08:	e037883a 	mov	sp,fp
 100dd0c:	dfc00117 	ldw	ra,4(sp)
 100dd10:	df000017 	ldw	fp,0(sp)
 100dd14:	dec00204 	addi	sp,sp,8
 100dd18:	f800283a 	ret

0100dd1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dd1c:	defffd04 	addi	sp,sp,-12
 100dd20:	dfc00215 	stw	ra,8(sp)
 100dd24:	df000115 	stw	fp,4(sp)
 100dd28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100dd2c:	00804074 	movhi	r2,257
 100dd30:	10916004 	addi	r2,r2,17792
 100dd34:	10800017 	ldw	r2,0(r2)
 100dd38:	1005003a 	cmpeq	r2,r2,zero
 100dd3c:	1000061e 	bne	r2,zero,100dd58 <alt_get_errno+0x3c>
 100dd40:	00804074 	movhi	r2,257
 100dd44:	10916004 	addi	r2,r2,17792
 100dd48:	10800017 	ldw	r2,0(r2)
 100dd4c:	103ee83a 	callr	r2
 100dd50:	e0bfff15 	stw	r2,-4(fp)
 100dd54:	00000306 	br	100dd64 <alt_get_errno+0x48>
 100dd58:	00804074 	movhi	r2,257
 100dd5c:	10983104 	addi	r2,r2,24772
 100dd60:	e0bfff15 	stw	r2,-4(fp)
 100dd64:	e0bfff17 	ldw	r2,-4(fp)
}
 100dd68:	e037883a 	mov	sp,fp
 100dd6c:	dfc00117 	ldw	ra,4(sp)
 100dd70:	df000017 	ldw	fp,0(sp)
 100dd74:	dec00204 	addi	sp,sp,8
 100dd78:	f800283a 	ret

0100dd7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100dd7c:	defffd04 	addi	sp,sp,-12
 100dd80:	dfc00215 	stw	ra,8(sp)
 100dd84:	df000115 	stw	fp,4(sp)
 100dd88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100dd8c:	0009883a 	mov	r4,zero
 100dd90:	100e2940 	call	100e294 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100dd94:	100e2c80 	call	100e2c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100dd98:	01004074 	movhi	r4,257
 100dd9c:	210a7404 	addi	r4,r4,10704
 100dda0:	01404074 	movhi	r5,257
 100dda4:	294a7404 	addi	r5,r5,10704
 100dda8:	01804074 	movhi	r6,257
 100ddac:	318a7404 	addi	r6,r6,10704
 100ddb0:	10117a00 	call	10117a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ddb4:	10112700 	call	1011270 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ddb8:	01004074 	movhi	r4,257
 100ddbc:	2104b504 	addi	r4,r4,4820
 100ddc0:	1011f400 	call	1011f40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ddc4:	d126e017 	ldw	r4,-25728(gp)
 100ddc8:	d166e117 	ldw	r5,-25724(gp)
 100ddcc:	d1a6e217 	ldw	r6,-25720(gp)
 100ddd0:	1000ea40 	call	1000ea4 <main>
 100ddd4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ddd8:	01000044 	movi	r4,1
 100dddc:	100d7540 	call	100d754 <close>
  exit (result);
 100dde0:	e13fff17 	ldw	r4,-4(fp)
 100dde4:	1011f540 	call	1011f54 <exit>

0100dde8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100dde8:	defffe04 	addi	sp,sp,-8
 100ddec:	df000115 	stw	fp,4(sp)
 100ddf0:	df000104 	addi	fp,sp,4
 100ddf4:	e13fff15 	stw	r4,-4(fp)
}
 100ddf8:	e037883a 	mov	sp,fp
 100ddfc:	df000017 	ldw	fp,0(sp)
 100de00:	dec00104 	addi	sp,sp,4
 100de04:	f800283a 	ret

0100de08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100de08:	defffe04 	addi	sp,sp,-8
 100de0c:	df000115 	stw	fp,4(sp)
 100de10:	df000104 	addi	fp,sp,4
 100de14:	e13fff15 	stw	r4,-4(fp)
}
 100de18:	e037883a 	mov	sp,fp
 100de1c:	df000017 	ldw	fp,0(sp)
 100de20:	dec00104 	addi	sp,sp,4
 100de24:	f800283a 	ret

0100de28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100de28:	defff704 	addi	sp,sp,-36
 100de2c:	dfc00815 	stw	ra,32(sp)
 100de30:	df000715 	stw	fp,28(sp)
 100de34:	df000704 	addi	fp,sp,28
 100de38:	e13ffb15 	stw	r4,-20(fp)
 100de3c:	e17ffc15 	stw	r5,-16(fp)
 100de40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100de44:	e0bffb17 	ldw	r2,-20(fp)
 100de48:	1004803a 	cmplt	r2,r2,zero
 100de4c:	1000091e 	bne	r2,zero,100de74 <read+0x4c>
 100de50:	e13ffb17 	ldw	r4,-20(fp)
 100de54:	01400304 	movi	r5,12
 100de58:	100476c0 	call	100476c <__mulsi3>
 100de5c:	1007883a 	mov	r3,r2
 100de60:	00804074 	movhi	r2,257
 100de64:	108cab04 	addi	r2,r2,12972
 100de68:	1887883a 	add	r3,r3,r2
 100de6c:	e0ffff15 	stw	r3,-4(fp)
 100de70:	00000106 	br	100de78 <read+0x50>
 100de74:	e03fff15 	stw	zero,-4(fp)
 100de78:	e0bfff17 	ldw	r2,-4(fp)
 100de7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100de80:	e0bffa17 	ldw	r2,-24(fp)
 100de84:	1005003a 	cmpeq	r2,r2,zero
 100de88:	1000241e 	bne	r2,zero,100df1c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100de8c:	e0bffa17 	ldw	r2,-24(fp)
 100de90:	10800217 	ldw	r2,8(r2)
 100de94:	108000cc 	andi	r2,r2,3
 100de98:	10800060 	cmpeqi	r2,r2,1
 100de9c:	10001a1e 	bne	r2,zero,100df08 <read+0xe0>
 100dea0:	e0bffa17 	ldw	r2,-24(fp)
 100dea4:	10800017 	ldw	r2,0(r2)
 100dea8:	10800517 	ldw	r2,20(r2)
 100deac:	1005003a 	cmpeq	r2,r2,zero
 100deb0:	1000151e 	bne	r2,zero,100df08 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100deb4:	e0bffa17 	ldw	r2,-24(fp)
 100deb8:	10800017 	ldw	r2,0(r2)
 100debc:	10800517 	ldw	r2,20(r2)
 100dec0:	e17ffc17 	ldw	r5,-16(fp)
 100dec4:	e1bffd17 	ldw	r6,-12(fp)
 100dec8:	e13ffa17 	ldw	r4,-24(fp)
 100decc:	103ee83a 	callr	r2
 100ded0:	e0bff915 	stw	r2,-28(fp)
 100ded4:	e0bff917 	ldw	r2,-28(fp)
 100ded8:	1004403a 	cmpge	r2,r2,zero
 100dedc:	1000071e 	bne	r2,zero,100defc <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100dee0:	100df4c0 	call	100df4c <alt_get_errno>
 100dee4:	e0fff917 	ldw	r3,-28(fp)
 100dee8:	00c7c83a 	sub	r3,zero,r3
 100deec:	10c00015 	stw	r3,0(r2)
          return -1;
 100def0:	00bfffc4 	movi	r2,-1
 100def4:	e0bffe15 	stw	r2,-8(fp)
 100def8:	00000e06 	br	100df34 <read+0x10c>
        }
        return rval;
 100defc:	e0bff917 	ldw	r2,-28(fp)
 100df00:	e0bffe15 	stw	r2,-8(fp)
 100df04:	00000b06 	br	100df34 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100df08:	100df4c0 	call	100df4c <alt_get_errno>
 100df0c:	1007883a 	mov	r3,r2
 100df10:	00800344 	movi	r2,13
 100df14:	18800015 	stw	r2,0(r3)
 100df18:	00000406 	br	100df2c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100df1c:	100df4c0 	call	100df4c <alt_get_errno>
 100df20:	1007883a 	mov	r3,r2
 100df24:	00801444 	movi	r2,81
 100df28:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100df2c:	00bfffc4 	movi	r2,-1
 100df30:	e0bffe15 	stw	r2,-8(fp)
 100df34:	e0bffe17 	ldw	r2,-8(fp)
}
 100df38:	e037883a 	mov	sp,fp
 100df3c:	dfc00117 	ldw	ra,4(sp)
 100df40:	df000017 	ldw	fp,0(sp)
 100df44:	dec00204 	addi	sp,sp,8
 100df48:	f800283a 	ret

0100df4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100df4c:	defffd04 	addi	sp,sp,-12
 100df50:	dfc00215 	stw	ra,8(sp)
 100df54:	df000115 	stw	fp,4(sp)
 100df58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100df5c:	00804074 	movhi	r2,257
 100df60:	10916004 	addi	r2,r2,17792
 100df64:	10800017 	ldw	r2,0(r2)
 100df68:	1005003a 	cmpeq	r2,r2,zero
 100df6c:	1000061e 	bne	r2,zero,100df88 <alt_get_errno+0x3c>
 100df70:	00804074 	movhi	r2,257
 100df74:	10916004 	addi	r2,r2,17792
 100df78:	10800017 	ldw	r2,0(r2)
 100df7c:	103ee83a 	callr	r2
 100df80:	e0bfff15 	stw	r2,-4(fp)
 100df84:	00000306 	br	100df94 <alt_get_errno+0x48>
 100df88:	00804074 	movhi	r2,257
 100df8c:	10983104 	addi	r2,r2,24772
 100df90:	e0bfff15 	stw	r2,-4(fp)
 100df94:	e0bfff17 	ldw	r2,-4(fp)
}
 100df98:	e037883a 	mov	sp,fp
 100df9c:	dfc00117 	ldw	ra,4(sp)
 100dfa0:	df000017 	ldw	fp,0(sp)
 100dfa4:	dec00204 	addi	sp,sp,8
 100dfa8:	f800283a 	ret

0100dfac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100dfac:	defffc04 	addi	sp,sp,-16
 100dfb0:	dfc00315 	stw	ra,12(sp)
 100dfb4:	df000215 	stw	fp,8(sp)
 100dfb8:	dc000115 	stw	r16,4(sp)
 100dfbc:	df000104 	addi	fp,sp,4
 100dfc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100dfc4:	e0bfff17 	ldw	r2,-4(fp)
 100dfc8:	108000d0 	cmplti	r2,r2,3
 100dfcc:	10000f1e 	bne	r2,zero,100e00c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100dfd0:	e13fff17 	ldw	r4,-4(fp)
 100dfd4:	04004074 	movhi	r16,257
 100dfd8:	840cab04 	addi	r16,r16,12972
 100dfdc:	01400304 	movi	r5,12
 100dfe0:	100476c0 	call	100476c <__mulsi3>
 100dfe4:	1405883a 	add	r2,r2,r16
 100dfe8:	10800204 	addi	r2,r2,8
 100dfec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100dff0:	e13fff17 	ldw	r4,-4(fp)
 100dff4:	04004074 	movhi	r16,257
 100dff8:	840cab04 	addi	r16,r16,12972
 100dffc:	01400304 	movi	r5,12
 100e000:	100476c0 	call	100476c <__mulsi3>
 100e004:	1405883a 	add	r2,r2,r16
 100e008:	10000015 	stw	zero,0(r2)
  }
}
 100e00c:	e037883a 	mov	sp,fp
 100e010:	dfc00217 	ldw	ra,8(sp)
 100e014:	df000117 	ldw	fp,4(sp)
 100e018:	dc000017 	ldw	r16,0(sp)
 100e01c:	dec00304 	addi	sp,sp,12
 100e020:	f800283a 	ret

0100e024 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100e024:	defff804 	addi	sp,sp,-32
 100e028:	df000715 	stw	fp,28(sp)
 100e02c:	df000704 	addi	fp,sp,28
 100e030:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e034:	0005303a 	rdctl	r2,status
 100e038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e03c:	e0fffb17 	ldw	r3,-20(fp)
 100e040:	00bfff84 	movi	r2,-2
 100e044:	1884703a 	and	r2,r3,r2
 100e048:	1001703a 	wrctl	status,r2
  
  return context;
 100e04c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100e050:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100e054:	d0a00c17 	ldw	r2,-32720(gp)
 100e058:	10c000c4 	addi	r3,r2,3
 100e05c:	00bfff04 	movi	r2,-4
 100e060:	1884703a 	and	r2,r3,r2
 100e064:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100e068:	d0e00c17 	ldw	r3,-32720(gp)
 100e06c:	e0bffe17 	ldw	r2,-8(fp)
 100e070:	1887883a 	add	r3,r3,r2
 100e074:	00806034 	movhi	r2,384
 100e078:	10800004 	addi	r2,r2,0
 100e07c:	10c0072e 	bgeu	r2,r3,100e09c <sbrk+0x78>
 100e080:	e0bffd17 	ldw	r2,-12(fp)
 100e084:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e088:	e0bffa17 	ldw	r2,-24(fp)
 100e08c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100e090:	00bfffc4 	movi	r2,-1
 100e094:	e0bfff15 	stw	r2,-4(fp)
 100e098:	00000c06 	br	100e0cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100e09c:	d0a00c17 	ldw	r2,-32720(gp)
 100e0a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100e0a4:	d0e00c17 	ldw	r3,-32720(gp)
 100e0a8:	e0bffe17 	ldw	r2,-8(fp)
 100e0ac:	1885883a 	add	r2,r3,r2
 100e0b0:	d0a00c15 	stw	r2,-32720(gp)
 100e0b4:	e0bffd17 	ldw	r2,-12(fp)
 100e0b8:	e0bff915 	stw	r2,-28(fp)
 100e0bc:	e0bff917 	ldw	r2,-28(fp)
 100e0c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100e0c4:	e0bffc17 	ldw	r2,-16(fp)
 100e0c8:	e0bfff15 	stw	r2,-4(fp)
 100e0cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 100e0d0:	e037883a 	mov	sp,fp
 100e0d4:	df000017 	ldw	fp,0(sp)
 100e0d8:	dec00104 	addi	sp,sp,4
 100e0dc:	f800283a 	ret

0100e0e0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100e0e0:	defffd04 	addi	sp,sp,-12
 100e0e4:	dfc00215 	stw	ra,8(sp)
 100e0e8:	df000115 	stw	fp,4(sp)
 100e0ec:	df000104 	addi	fp,sp,4
 100e0f0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100e0f4:	e13fff17 	ldw	r4,-4(fp)
 100e0f8:	1010fe40 	call	1010fe4 <alt_busy_sleep>
}
 100e0fc:	e037883a 	mov	sp,fp
 100e100:	dfc00117 	ldw	ra,4(sp)
 100e104:	df000017 	ldw	fp,0(sp)
 100e108:	dec00204 	addi	sp,sp,8
 100e10c:	f800283a 	ret

0100e110 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100e110:	defff704 	addi	sp,sp,-36
 100e114:	dfc00815 	stw	ra,32(sp)
 100e118:	df000715 	stw	fp,28(sp)
 100e11c:	df000704 	addi	fp,sp,28
 100e120:	e13ffb15 	stw	r4,-20(fp)
 100e124:	e17ffc15 	stw	r5,-16(fp)
 100e128:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e12c:	e0bffb17 	ldw	r2,-20(fp)
 100e130:	1004803a 	cmplt	r2,r2,zero
 100e134:	1000091e 	bne	r2,zero,100e15c <write+0x4c>
 100e138:	e13ffb17 	ldw	r4,-20(fp)
 100e13c:	01400304 	movi	r5,12
 100e140:	100476c0 	call	100476c <__mulsi3>
 100e144:	1007883a 	mov	r3,r2
 100e148:	00804074 	movhi	r2,257
 100e14c:	108cab04 	addi	r2,r2,12972
 100e150:	1887883a 	add	r3,r3,r2
 100e154:	e0ffff15 	stw	r3,-4(fp)
 100e158:	00000106 	br	100e160 <write+0x50>
 100e15c:	e03fff15 	stw	zero,-4(fp)
 100e160:	e0bfff17 	ldw	r2,-4(fp)
 100e164:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100e168:	e0bffa17 	ldw	r2,-24(fp)
 100e16c:	1005003a 	cmpeq	r2,r2,zero
 100e170:	1000241e 	bne	r2,zero,100e204 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100e174:	e0bffa17 	ldw	r2,-24(fp)
 100e178:	10800217 	ldw	r2,8(r2)
 100e17c:	108000cc 	andi	r2,r2,3
 100e180:	1005003a 	cmpeq	r2,r2,zero
 100e184:	10001a1e 	bne	r2,zero,100e1f0 <write+0xe0>
 100e188:	e0bffa17 	ldw	r2,-24(fp)
 100e18c:	10800017 	ldw	r2,0(r2)
 100e190:	10800617 	ldw	r2,24(r2)
 100e194:	1005003a 	cmpeq	r2,r2,zero
 100e198:	1000151e 	bne	r2,zero,100e1f0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100e19c:	e0bffa17 	ldw	r2,-24(fp)
 100e1a0:	10800017 	ldw	r2,0(r2)
 100e1a4:	10800617 	ldw	r2,24(r2)
 100e1a8:	e17ffc17 	ldw	r5,-16(fp)
 100e1ac:	e1bffd17 	ldw	r6,-12(fp)
 100e1b0:	e13ffa17 	ldw	r4,-24(fp)
 100e1b4:	103ee83a 	callr	r2
 100e1b8:	e0bff915 	stw	r2,-28(fp)
 100e1bc:	e0bff917 	ldw	r2,-28(fp)
 100e1c0:	1004403a 	cmpge	r2,r2,zero
 100e1c4:	1000071e 	bne	r2,zero,100e1e4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100e1c8:	100e2340 	call	100e234 <alt_get_errno>
 100e1cc:	e0fff917 	ldw	r3,-28(fp)
 100e1d0:	00c7c83a 	sub	r3,zero,r3
 100e1d4:	10c00015 	stw	r3,0(r2)
        return -1;
 100e1d8:	00bfffc4 	movi	r2,-1
 100e1dc:	e0bffe15 	stw	r2,-8(fp)
 100e1e0:	00000e06 	br	100e21c <write+0x10c>
      }
      return rval;
 100e1e4:	e0bff917 	ldw	r2,-28(fp)
 100e1e8:	e0bffe15 	stw	r2,-8(fp)
 100e1ec:	00000b06 	br	100e21c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100e1f0:	100e2340 	call	100e234 <alt_get_errno>
 100e1f4:	1007883a 	mov	r3,r2
 100e1f8:	00800344 	movi	r2,13
 100e1fc:	18800015 	stw	r2,0(r3)
 100e200:	00000406 	br	100e214 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100e204:	100e2340 	call	100e234 <alt_get_errno>
 100e208:	1007883a 	mov	r3,r2
 100e20c:	00801444 	movi	r2,81
 100e210:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100e214:	00bfffc4 	movi	r2,-1
 100e218:	e0bffe15 	stw	r2,-8(fp)
 100e21c:	e0bffe17 	ldw	r2,-8(fp)
}
 100e220:	e037883a 	mov	sp,fp
 100e224:	dfc00117 	ldw	ra,4(sp)
 100e228:	df000017 	ldw	fp,0(sp)
 100e22c:	dec00204 	addi	sp,sp,8
 100e230:	f800283a 	ret

0100e234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e234:	defffd04 	addi	sp,sp,-12
 100e238:	dfc00215 	stw	ra,8(sp)
 100e23c:	df000115 	stw	fp,4(sp)
 100e240:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e244:	00804074 	movhi	r2,257
 100e248:	10916004 	addi	r2,r2,17792
 100e24c:	10800017 	ldw	r2,0(r2)
 100e250:	1005003a 	cmpeq	r2,r2,zero
 100e254:	1000061e 	bne	r2,zero,100e270 <alt_get_errno+0x3c>
 100e258:	00804074 	movhi	r2,257
 100e25c:	10916004 	addi	r2,r2,17792
 100e260:	10800017 	ldw	r2,0(r2)
 100e264:	103ee83a 	callr	r2
 100e268:	e0bfff15 	stw	r2,-4(fp)
 100e26c:	00000306 	br	100e27c <alt_get_errno+0x48>
 100e270:	00804074 	movhi	r2,257
 100e274:	10983104 	addi	r2,r2,24772
 100e278:	e0bfff15 	stw	r2,-4(fp)
 100e27c:	e0bfff17 	ldw	r2,-4(fp)
}
 100e280:	e037883a 	mov	sp,fp
 100e284:	dfc00117 	ldw	ra,4(sp)
 100e288:	df000017 	ldw	fp,0(sp)
 100e28c:	dec00204 	addi	sp,sp,8
 100e290:	f800283a 	ret

0100e294 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100e294:	defffd04 	addi	sp,sp,-12
 100e298:	dfc00215 	stw	ra,8(sp)
 100e29c:	df000115 	stw	fp,4(sp)
 100e2a0:	df000104 	addi	fp,sp,4
 100e2a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100e2a8:	1011ca00 	call	1011ca0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100e2ac:	00800044 	movi	r2,1
 100e2b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100e2b4:	e037883a 	mov	sp,fp
 100e2b8:	dfc00117 	ldw	ra,4(sp)
 100e2bc:	df000017 	ldw	fp,0(sp)
 100e2c0:	dec00204 	addi	sp,sp,8
 100e2c4:	f800283a 	ret

0100e2c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100e2c8:	defffd04 	addi	sp,sp,-12
 100e2cc:	dfc00215 	stw	ra,8(sp)
 100e2d0:	df000115 	stw	fp,4(sp)
 100e2d4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100e2d8:	01004074 	movhi	r4,257
 100e2dc:	210d1504 	addi	r4,r4,13396
 100e2e0:	000b883a 	mov	r5,zero
 100e2e4:	01800144 	movi	r6,5
 100e2e8:	100e7580 	call	100e758 <altera_avalon_jtag_uart_init>
 100e2ec:	01004074 	movhi	r4,257
 100e2f0:	210d0b04 	addi	r4,r4,13356
 100e2f4:	100e5d80 	call	100e5d8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100e2f8:	01004074 	movhi	r4,257
 100e2fc:	21112304 	addi	r4,r4,17548
 100e300:	100f16c0 	call	100f16c <alt_up_character_lcd_init>
 100e304:	01004074 	movhi	r4,257
 100e308:	21112304 	addi	r4,r4,17548
 100e30c:	100e5d80 	call	100e5d8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 100e310:	00804074 	movhi	r2,257
 100e314:	10912e04 	addi	r2,r2,17592
 100e318:	10800a17 	ldw	r2,40(r2)
 100e31c:	10800104 	addi	r2,r2,4
 100e320:	10800017 	ldw	r2,0(r2)
 100e324:	10ffffcc 	andi	r3,r2,65535
 100e328:	00804074 	movhi	r2,257
 100e32c:	10912e04 	addi	r2,r2,17592
 100e330:	10c00c15 	stw	r3,48(r2)
 100e334:	00804074 	movhi	r2,257
 100e338:	10912e04 	addi	r2,r2,17592
 100e33c:	10800a17 	ldw	r2,40(r2)
 100e340:	10800104 	addi	r2,r2,4
 100e344:	10800017 	ldw	r2,0(r2)
 100e348:	1005d43a 	srai	r2,r2,16
 100e34c:	10ffffcc 	andi	r3,r2,65535
 100e350:	00804074 	movhi	r2,257
 100e354:	10912e04 	addi	r2,r2,17592
 100e358:	10c00d15 	stw	r3,52(r2)
 100e35c:	00804074 	movhi	r2,257
 100e360:	10912e04 	addi	r2,r2,17592
 100e364:	10800c17 	ldw	r2,48(r2)
 100e368:	10801068 	cmpgeui	r2,r2,65
 100e36c:	1000081e 	bne	r2,zero,100e390 <alt_sys_init+0xc8>
 100e370:	00c04074 	movhi	r3,257
 100e374:	18d12e04 	addi	r3,r3,17592
 100e378:	00800fc4 	movi	r2,63
 100e37c:	18800f15 	stw	r2,60(r3)
 100e380:	00c04074 	movhi	r3,257
 100e384:	18d12e04 	addi	r3,r3,17592
 100e388:	00800184 	movi	r2,6
 100e38c:	18801015 	stw	r2,64(r3)
 100e390:	00804074 	movhi	r2,257
 100e394:	10912e04 	addi	r2,r2,17592
 100e398:	10800d17 	ldw	r2,52(r2)
 100e39c:	10800868 	cmpgeui	r2,r2,33
 100e3a0:	1000041e 	bne	r2,zero,100e3b4 <alt_sys_init+0xec>
 100e3a4:	00c04074 	movhi	r3,257
 100e3a8:	18d12e04 	addi	r3,r3,17592
 100e3ac:	008007c4 	movi	r2,31
 100e3b0:	18801115 	stw	r2,68(r3)
 100e3b4:	01004074 	movhi	r4,257
 100e3b8:	21112e04 	addi	r4,r4,17592
 100e3bc:	100f5ec0 	call	100f5ec <alt_up_char_buffer_init>
 100e3c0:	01004074 	movhi	r4,257
 100e3c4:	21112e04 	addi	r4,r4,17592
 100e3c8:	100e5d80 	call	100e5d8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 100e3cc:	00804074 	movhi	r2,257
 100e3d0:	10914004 	addi	r2,r2,17664
 100e3d4:	10800a17 	ldw	r2,40(r2)
 100e3d8:	10800017 	ldw	r2,0(r2)
 100e3dc:	1007883a 	mov	r3,r2
 100e3e0:	00804074 	movhi	r2,257
 100e3e4:	10914004 	addi	r2,r2,17664
 100e3e8:	10c00b15 	stw	r3,44(r2)
 100e3ec:	00804074 	movhi	r2,257
 100e3f0:	10914004 	addi	r2,r2,17664
 100e3f4:	10800a17 	ldw	r2,40(r2)
 100e3f8:	10800104 	addi	r2,r2,4
 100e3fc:	10800017 	ldw	r2,0(r2)
 100e400:	1007883a 	mov	r3,r2
 100e404:	00804074 	movhi	r2,257
 100e408:	10914004 	addi	r2,r2,17664
 100e40c:	10c00c15 	stw	r3,48(r2)
 100e410:	00804074 	movhi	r2,257
 100e414:	10914004 	addi	r2,r2,17664
 100e418:	10800a17 	ldw	r2,40(r2)
 100e41c:	10800204 	addi	r2,r2,8
 100e420:	10800017 	ldw	r2,0(r2)
 100e424:	10ffffcc 	andi	r3,r2,65535
 100e428:	00804074 	movhi	r2,257
 100e42c:	10914004 	addi	r2,r2,17664
 100e430:	10c00f15 	stw	r3,60(r2)
 100e434:	00804074 	movhi	r2,257
 100e438:	10914004 	addi	r2,r2,17664
 100e43c:	10800a17 	ldw	r2,40(r2)
 100e440:	10800204 	addi	r2,r2,8
 100e444:	10800017 	ldw	r2,0(r2)
 100e448:	1005d43a 	srai	r2,r2,16
 100e44c:	10ffffcc 	andi	r3,r2,65535
 100e450:	00804074 	movhi	r2,257
 100e454:	10914004 	addi	r2,r2,17664
 100e458:	10c01015 	stw	r3,64(r2)
 100e45c:	00804074 	movhi	r2,257
 100e460:	10914004 	addi	r2,r2,17664
 100e464:	10800a17 	ldw	r2,40(r2)
 100e468:	10800304 	addi	r2,r2,12
 100e46c:	10800017 	ldw	r2,0(r2)
 100e470:	1005d07a 	srai	r2,r2,1
 100e474:	10c0004c 	andi	r3,r2,1
 100e478:	00804074 	movhi	r2,257
 100e47c:	10914004 	addi	r2,r2,17664
 100e480:	10c00d15 	stw	r3,52(r2)
 100e484:	00804074 	movhi	r2,257
 100e488:	10914004 	addi	r2,r2,17664
 100e48c:	10800a17 	ldw	r2,40(r2)
 100e490:	10800304 	addi	r2,r2,12
 100e494:	10800017 	ldw	r2,0(r2)
 100e498:	1005d13a 	srai	r2,r2,4
 100e49c:	10c003cc 	andi	r3,r2,15
 100e4a0:	00804074 	movhi	r2,257
 100e4a4:	10914004 	addi	r2,r2,17664
 100e4a8:	10c00e15 	stw	r3,56(r2)
 100e4ac:	00804074 	movhi	r2,257
 100e4b0:	10914004 	addi	r2,r2,17664
 100e4b4:	10800a17 	ldw	r2,40(r2)
 100e4b8:	10800304 	addi	r2,r2,12
 100e4bc:	10800017 	ldw	r2,0(r2)
 100e4c0:	1005d43a 	srai	r2,r2,16
 100e4c4:	1007883a 	mov	r3,r2
 100e4c8:	00bfffc4 	movi	r2,-1
 100e4cc:	1884703a 	and	r2,r3,r2
 100e4d0:	e0bfff45 	stb	r2,-3(fp)
 100e4d4:	00804074 	movhi	r2,257
 100e4d8:	10914004 	addi	r2,r2,17664
 100e4dc:	10800a17 	ldw	r2,40(r2)
 100e4e0:	10800304 	addi	r2,r2,12
 100e4e4:	10800017 	ldw	r2,0(r2)
 100e4e8:	1005d63a 	srai	r2,r2,24
 100e4ec:	1007883a 	mov	r3,r2
 100e4f0:	00bfffc4 	movi	r2,-1
 100e4f4:	1884703a 	and	r2,r3,r2
 100e4f8:	e0bfff05 	stb	r2,-4(fp)
 100e4fc:	00804074 	movhi	r2,257
 100e500:	10914004 	addi	r2,r2,17664
 100e504:	10800e17 	ldw	r2,56(r2)
 100e508:	10800058 	cmpnei	r2,r2,1
 100e50c:	1000041e 	bne	r2,zero,100e520 <alt_sys_init+0x258>
 100e510:	00804074 	movhi	r2,257
 100e514:	10914004 	addi	r2,r2,17664
 100e518:	10001115 	stw	zero,68(r2)
 100e51c:	00000e06 	br	100e558 <alt_sys_init+0x290>
 100e520:	00804074 	movhi	r2,257
 100e524:	10914004 	addi	r2,r2,17664
 100e528:	10800e17 	ldw	r2,56(r2)
 100e52c:	10800098 	cmpnei	r2,r2,2
 100e530:	1000051e 	bne	r2,zero,100e548 <alt_sys_init+0x280>
 100e534:	00c04074 	movhi	r3,257
 100e538:	18d14004 	addi	r3,r3,17664
 100e53c:	00800044 	movi	r2,1
 100e540:	18801115 	stw	r2,68(r3)
 100e544:	00000406 	br	100e558 <alt_sys_init+0x290>
 100e548:	00c04074 	movhi	r3,257
 100e54c:	18d14004 	addi	r3,r3,17664
 100e550:	00800084 	movi	r2,2
 100e554:	18801115 	stw	r2,68(r3)
 100e558:	e0ffff43 	ldbu	r3,-3(fp)
 100e55c:	00800804 	movi	r2,32
 100e560:	10c7c83a 	sub	r3,r2,r3
 100e564:	00bfffc4 	movi	r2,-1
 100e568:	10c6d83a 	srl	r3,r2,r3
 100e56c:	00804074 	movhi	r2,257
 100e570:	10914004 	addi	r2,r2,17664
 100e574:	10c01215 	stw	r3,72(r2)
 100e578:	e0ffff43 	ldbu	r3,-3(fp)
 100e57c:	00804074 	movhi	r2,257
 100e580:	10914004 	addi	r2,r2,17664
 100e584:	10801117 	ldw	r2,68(r2)
 100e588:	1887883a 	add	r3,r3,r2
 100e58c:	00804074 	movhi	r2,257
 100e590:	10914004 	addi	r2,r2,17664
 100e594:	10c01315 	stw	r3,76(r2)
 100e598:	e0ffff03 	ldbu	r3,-4(fp)
 100e59c:	00800804 	movi	r2,32
 100e5a0:	10c7c83a 	sub	r3,r2,r3
 100e5a4:	00bfffc4 	movi	r2,-1
 100e5a8:	10c6d83a 	srl	r3,r2,r3
 100e5ac:	00804074 	movhi	r2,257
 100e5b0:	10914004 	addi	r2,r2,17664
 100e5b4:	10c01415 	stw	r3,80(r2)
 100e5b8:	01004074 	movhi	r4,257
 100e5bc:	21114004 	addi	r4,r4,17664
 100e5c0:	100e5d80 	call	100e5d8 <alt_dev_reg>
}
 100e5c4:	e037883a 	mov	sp,fp
 100e5c8:	dfc00117 	ldw	ra,4(sp)
 100e5cc:	df000017 	ldw	fp,0(sp)
 100e5d0:	dec00204 	addi	sp,sp,8
 100e5d4:	f800283a 	ret

0100e5d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100e5d8:	defffd04 	addi	sp,sp,-12
 100e5dc:	dfc00215 	stw	ra,8(sp)
 100e5e0:	df000115 	stw	fp,4(sp)
 100e5e4:	df000104 	addi	fp,sp,4
 100e5e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100e5ec:	e13fff17 	ldw	r4,-4(fp)
 100e5f0:	01404074 	movhi	r5,257
 100e5f4:	29515d04 	addi	r5,r5,17780
 100e5f8:	101115c0 	call	101115c <alt_dev_llist_insert>
}
 100e5fc:	e037883a 	mov	sp,fp
 100e600:	dfc00117 	ldw	ra,4(sp)
 100e604:	df000017 	ldw	fp,0(sp)
 100e608:	dec00204 	addi	sp,sp,8
 100e60c:	f800283a 	ret

0100e610 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100e610:	defffa04 	addi	sp,sp,-24
 100e614:	dfc00515 	stw	ra,20(sp)
 100e618:	df000415 	stw	fp,16(sp)
 100e61c:	df000404 	addi	fp,sp,16
 100e620:	e13ffd15 	stw	r4,-12(fp)
 100e624:	e17ffe15 	stw	r5,-8(fp)
 100e628:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e62c:	e0bffd17 	ldw	r2,-12(fp)
 100e630:	10800017 	ldw	r2,0(r2)
 100e634:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100e638:	e0bffc17 	ldw	r2,-16(fp)
 100e63c:	11000a04 	addi	r4,r2,40
 100e640:	e0bffd17 	ldw	r2,-12(fp)
 100e644:	11c00217 	ldw	r7,8(r2)
 100e648:	e17ffe17 	ldw	r5,-8(fp)
 100e64c:	e1bfff17 	ldw	r6,-4(fp)
 100e650:	100ec580 	call	100ec58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100e654:	e037883a 	mov	sp,fp
 100e658:	dfc00117 	ldw	ra,4(sp)
 100e65c:	df000017 	ldw	fp,0(sp)
 100e660:	dec00204 	addi	sp,sp,8
 100e664:	f800283a 	ret

0100e668 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100e668:	defffa04 	addi	sp,sp,-24
 100e66c:	dfc00515 	stw	ra,20(sp)
 100e670:	df000415 	stw	fp,16(sp)
 100e674:	df000404 	addi	fp,sp,16
 100e678:	e13ffd15 	stw	r4,-12(fp)
 100e67c:	e17ffe15 	stw	r5,-8(fp)
 100e680:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e684:	e0bffd17 	ldw	r2,-12(fp)
 100e688:	10800017 	ldw	r2,0(r2)
 100e68c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100e690:	e0bffc17 	ldw	r2,-16(fp)
 100e694:	11000a04 	addi	r4,r2,40
 100e698:	e0bffd17 	ldw	r2,-12(fp)
 100e69c:	11c00217 	ldw	r7,8(r2)
 100e6a0:	e17ffe17 	ldw	r5,-8(fp)
 100e6a4:	e1bfff17 	ldw	r6,-4(fp)
 100e6a8:	100ee7c0 	call	100ee7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100e6ac:	e037883a 	mov	sp,fp
 100e6b0:	dfc00117 	ldw	ra,4(sp)
 100e6b4:	df000017 	ldw	fp,0(sp)
 100e6b8:	dec00204 	addi	sp,sp,8
 100e6bc:	f800283a 	ret

0100e6c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100e6c0:	defffc04 	addi	sp,sp,-16
 100e6c4:	dfc00315 	stw	ra,12(sp)
 100e6c8:	df000215 	stw	fp,8(sp)
 100e6cc:	df000204 	addi	fp,sp,8
 100e6d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e6d4:	e0bfff17 	ldw	r2,-4(fp)
 100e6d8:	10800017 	ldw	r2,0(r2)
 100e6dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100e6e0:	e0bffe17 	ldw	r2,-8(fp)
 100e6e4:	11000a04 	addi	r4,r2,40
 100e6e8:	e0bfff17 	ldw	r2,-4(fp)
 100e6ec:	11400217 	ldw	r5,8(r2)
 100e6f0:	100eaf00 	call	100eaf0 <altera_avalon_jtag_uart_close>
}
 100e6f4:	e037883a 	mov	sp,fp
 100e6f8:	dfc00117 	ldw	ra,4(sp)
 100e6fc:	df000017 	ldw	fp,0(sp)
 100e700:	dec00204 	addi	sp,sp,8
 100e704:	f800283a 	ret

0100e708 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100e708:	defffa04 	addi	sp,sp,-24
 100e70c:	dfc00515 	stw	ra,20(sp)
 100e710:	df000415 	stw	fp,16(sp)
 100e714:	df000404 	addi	fp,sp,16
 100e718:	e13ffd15 	stw	r4,-12(fp)
 100e71c:	e17ffe15 	stw	r5,-8(fp)
 100e720:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100e724:	e0bffd17 	ldw	r2,-12(fp)
 100e728:	10800017 	ldw	r2,0(r2)
 100e72c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100e730:	e0bffc17 	ldw	r2,-16(fp)
 100e734:	11000a04 	addi	r4,r2,40
 100e738:	e17ffe17 	ldw	r5,-8(fp)
 100e73c:	e1bfff17 	ldw	r6,-4(fp)
 100e740:	100eb640 	call	100eb64 <altera_avalon_jtag_uart_ioctl>
}
 100e744:	e037883a 	mov	sp,fp
 100e748:	dfc00117 	ldw	ra,4(sp)
 100e74c:	df000017 	ldw	fp,0(sp)
 100e750:	dec00204 	addi	sp,sp,8
 100e754:	f800283a 	ret

0100e758 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100e758:	defffa04 	addi	sp,sp,-24
 100e75c:	dfc00515 	stw	ra,20(sp)
 100e760:	df000415 	stw	fp,16(sp)
 100e764:	df000404 	addi	fp,sp,16
 100e768:	e13ffd15 	stw	r4,-12(fp)
 100e76c:	e17ffe15 	stw	r5,-8(fp)
 100e770:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e774:	e0fffd17 	ldw	r3,-12(fp)
 100e778:	00800044 	movi	r2,1
 100e77c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100e780:	e0bffd17 	ldw	r2,-12(fp)
 100e784:	10800017 	ldw	r2,0(r2)
 100e788:	11000104 	addi	r4,r2,4
 100e78c:	e0bffd17 	ldw	r2,-12(fp)
 100e790:	10800817 	ldw	r2,32(r2)
 100e794:	1007883a 	mov	r3,r2
 100e798:	2005883a 	mov	r2,r4
 100e79c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100e7a0:	e13ffe17 	ldw	r4,-8(fp)
 100e7a4:	e17fff17 	ldw	r5,-4(fp)
 100e7a8:	d8000015 	stw	zero,0(sp)
 100e7ac:	01804074 	movhi	r6,257
 100e7b0:	31ba0604 	addi	r6,r6,-6120
 100e7b4:	e1fffd17 	ldw	r7,-12(fp)
 100e7b8:	10113fc0 	call	10113fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100e7bc:	e0bffd17 	ldw	r2,-12(fp)
 100e7c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100e7c4:	e0bffd17 	ldw	r2,-12(fp)
 100e7c8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100e7cc:	00804074 	movhi	r2,257
 100e7d0:	10983904 	addi	r2,r2,24804
 100e7d4:	10800017 	ldw	r2,0(r2)
 100e7d8:	100b883a 	mov	r5,r2
 100e7dc:	01804074 	movhi	r6,257
 100e7e0:	31ba9004 	addi	r6,r6,-5568
 100e7e4:	e1fffd17 	ldw	r7,-12(fp)
 100e7e8:	1010e900 	call	1010e90 <alt_alarm_start>
 100e7ec:	1004403a 	cmpge	r2,r2,zero
 100e7f0:	1000041e 	bne	r2,zero,100e804 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100e7f4:	e0fffd17 	ldw	r3,-12(fp)
 100e7f8:	00a00034 	movhi	r2,32768
 100e7fc:	10bfffc4 	addi	r2,r2,-1
 100e800:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100e804:	e037883a 	mov	sp,fp
 100e808:	dfc00117 	ldw	ra,4(sp)
 100e80c:	df000017 	ldw	fp,0(sp)
 100e810:	dec00204 	addi	sp,sp,8
 100e814:	f800283a 	ret

0100e818 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100e818:	defff804 	addi	sp,sp,-32
 100e81c:	df000715 	stw	fp,28(sp)
 100e820:	df000704 	addi	fp,sp,28
 100e824:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100e828:	e0bfff17 	ldw	r2,-4(fp)
 100e82c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100e830:	e0bffe17 	ldw	r2,-8(fp)
 100e834:	10800017 	ldw	r2,0(r2)
 100e838:	e0bffd15 	stw	r2,-12(fp)
 100e83c:	00000006 	br	100e840 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e840:	e0bffd17 	ldw	r2,-12(fp)
 100e844:	10800104 	addi	r2,r2,4
 100e848:	10800037 	ldwio	r2,0(r2)
 100e84c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100e850:	e0bffc17 	ldw	r2,-16(fp)
 100e854:	1080c00c 	andi	r2,r2,768
 100e858:	1005003a 	cmpeq	r2,r2,zero
 100e85c:	1000741e 	bne	r2,zero,100ea30 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100e860:	e0bffc17 	ldw	r2,-16(fp)
 100e864:	1080400c 	andi	r2,r2,256
 100e868:	1005003a 	cmpeq	r2,r2,zero
 100e86c:	1000351e 	bne	r2,zero,100e944 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100e870:	00800074 	movhi	r2,1
 100e874:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e878:	e0bffe17 	ldw	r2,-8(fp)
 100e87c:	10800a17 	ldw	r2,40(r2)
 100e880:	10800044 	addi	r2,r2,1
 100e884:	1081ffcc 	andi	r2,r2,2047
 100e888:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100e88c:	e0bffe17 	ldw	r2,-8(fp)
 100e890:	10c00b17 	ldw	r3,44(r2)
 100e894:	e0bffa17 	ldw	r2,-24(fp)
 100e898:	18801626 	beq	r3,r2,100e8f4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100e89c:	e0bffd17 	ldw	r2,-12(fp)
 100e8a0:	10800037 	ldwio	r2,0(r2)
 100e8a4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100e8a8:	e0bffb17 	ldw	r2,-20(fp)
 100e8ac:	10a0000c 	andi	r2,r2,32768
 100e8b0:	1005003a 	cmpeq	r2,r2,zero
 100e8b4:	10000f1e 	bne	r2,zero,100e8f4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100e8b8:	e0bffe17 	ldw	r2,-8(fp)
 100e8bc:	10c00a17 	ldw	r3,40(r2)
 100e8c0:	e0bffb17 	ldw	r2,-20(fp)
 100e8c4:	1009883a 	mov	r4,r2
 100e8c8:	e0bffe17 	ldw	r2,-8(fp)
 100e8cc:	1885883a 	add	r2,r3,r2
 100e8d0:	10800e04 	addi	r2,r2,56
 100e8d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e8d8:	e0bffe17 	ldw	r2,-8(fp)
 100e8dc:	10800a17 	ldw	r2,40(r2)
 100e8e0:	10800044 	addi	r2,r2,1
 100e8e4:	10c1ffcc 	andi	r3,r2,2047
 100e8e8:	e0bffe17 	ldw	r2,-8(fp)
 100e8ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100e8f0:	003fe106 	br	100e878 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100e8f4:	e0bffb17 	ldw	r2,-20(fp)
 100e8f8:	10bfffec 	andhi	r2,r2,65535
 100e8fc:	1005003a 	cmpeq	r2,r2,zero
 100e900:	1000101e 	bne	r2,zero,100e944 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e904:	e0bffe17 	ldw	r2,-8(fp)
 100e908:	10c00817 	ldw	r3,32(r2)
 100e90c:	00bfff84 	movi	r2,-2
 100e910:	1886703a 	and	r3,r3,r2
 100e914:	e0bffe17 	ldw	r2,-8(fp)
 100e918:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100e91c:	e0bffd17 	ldw	r2,-12(fp)
 100e920:	11000104 	addi	r4,r2,4
 100e924:	e0bffe17 	ldw	r2,-8(fp)
 100e928:	10800817 	ldw	r2,32(r2)
 100e92c:	1007883a 	mov	r3,r2
 100e930:	2005883a 	mov	r2,r4
 100e934:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e938:	e0bffd17 	ldw	r2,-12(fp)
 100e93c:	10800104 	addi	r2,r2,4
 100e940:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100e944:	e0bffc17 	ldw	r2,-16(fp)
 100e948:	1080800c 	andi	r2,r2,512
 100e94c:	1005003a 	cmpeq	r2,r2,zero
 100e950:	103fbb1e 	bne	r2,zero,100e840 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100e954:	e0bffc17 	ldw	r2,-16(fp)
 100e958:	10bfffec 	andhi	r2,r2,65535
 100e95c:	1004d43a 	srli	r2,r2,16
 100e960:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e964:	00001506 	br	100e9bc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100e968:	e13ffd17 	ldw	r4,-12(fp)
 100e96c:	e0bffe17 	ldw	r2,-8(fp)
 100e970:	10c00d17 	ldw	r3,52(r2)
 100e974:	e0bffe17 	ldw	r2,-8(fp)
 100e978:	1885883a 	add	r2,r3,r2
 100e97c:	10820e04 	addi	r2,r2,2104
 100e980:	10800003 	ldbu	r2,0(r2)
 100e984:	10c03fcc 	andi	r3,r2,255
 100e988:	18c0201c 	xori	r3,r3,128
 100e98c:	18ffe004 	addi	r3,r3,-128
 100e990:	2005883a 	mov	r2,r4
 100e994:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e998:	e0bffe17 	ldw	r2,-8(fp)
 100e99c:	10800d17 	ldw	r2,52(r2)
 100e9a0:	10800044 	addi	r2,r2,1
 100e9a4:	10c1ffcc 	andi	r3,r2,2047
 100e9a8:	e0bffe17 	ldw	r2,-8(fp)
 100e9ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100e9b0:	e0bff917 	ldw	r2,-28(fp)
 100e9b4:	10bfffc4 	addi	r2,r2,-1
 100e9b8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e9bc:	e0bff917 	ldw	r2,-28(fp)
 100e9c0:	1005003a 	cmpeq	r2,r2,zero
 100e9c4:	1000051e 	bne	r2,zero,100e9dc <altera_avalon_jtag_uart_irq+0x1c4>
 100e9c8:	e0bffe17 	ldw	r2,-8(fp)
 100e9cc:	10c00d17 	ldw	r3,52(r2)
 100e9d0:	e0bffe17 	ldw	r2,-8(fp)
 100e9d4:	10800c17 	ldw	r2,48(r2)
 100e9d8:	18bfe31e 	bne	r3,r2,100e968 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100e9dc:	e0bff917 	ldw	r2,-28(fp)
 100e9e0:	1005003a 	cmpeq	r2,r2,zero
 100e9e4:	103f961e 	bne	r2,zero,100e840 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e9e8:	e0bffe17 	ldw	r2,-8(fp)
 100e9ec:	10c00817 	ldw	r3,32(r2)
 100e9f0:	00bfff44 	movi	r2,-3
 100e9f4:	1886703a 	and	r3,r3,r2
 100e9f8:	e0bffe17 	ldw	r2,-8(fp)
 100e9fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100ea00:	e0bffe17 	ldw	r2,-8(fp)
 100ea04:	10800017 	ldw	r2,0(r2)
 100ea08:	11000104 	addi	r4,r2,4
 100ea0c:	e0bffe17 	ldw	r2,-8(fp)
 100ea10:	10800817 	ldw	r2,32(r2)
 100ea14:	1007883a 	mov	r3,r2
 100ea18:	2005883a 	mov	r2,r4
 100ea1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ea20:	e0bffd17 	ldw	r2,-12(fp)
 100ea24:	10800104 	addi	r2,r2,4
 100ea28:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100ea2c:	003f8406 	br	100e840 <altera_avalon_jtag_uart_irq+0x28>
}
 100ea30:	e037883a 	mov	sp,fp
 100ea34:	df000017 	ldw	fp,0(sp)
 100ea38:	dec00104 	addi	sp,sp,4
 100ea3c:	f800283a 	ret

0100ea40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100ea40:	defffc04 	addi	sp,sp,-16
 100ea44:	df000315 	stw	fp,12(sp)
 100ea48:	df000304 	addi	fp,sp,12
 100ea4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100ea50:	e0bfff17 	ldw	r2,-4(fp)
 100ea54:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100ea58:	e0bffe17 	ldw	r2,-8(fp)
 100ea5c:	10800017 	ldw	r2,0(r2)
 100ea60:	10800104 	addi	r2,r2,4
 100ea64:	10800037 	ldwio	r2,0(r2)
 100ea68:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100ea6c:	e0bffd17 	ldw	r2,-12(fp)
 100ea70:	1081000c 	andi	r2,r2,1024
 100ea74:	1005003a 	cmpeq	r2,r2,zero
 100ea78:	10000c1e 	bne	r2,zero,100eaac <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100ea7c:	e0bffe17 	ldw	r2,-8(fp)
 100ea80:	10800017 	ldw	r2,0(r2)
 100ea84:	11000104 	addi	r4,r2,4
 100ea88:	e0bffe17 	ldw	r2,-8(fp)
 100ea8c:	10800817 	ldw	r2,32(r2)
 100ea90:	10810014 	ori	r2,r2,1024
 100ea94:	1007883a 	mov	r3,r2
 100ea98:	2005883a 	mov	r2,r4
 100ea9c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100eaa0:	e0bffe17 	ldw	r2,-8(fp)
 100eaa4:	10000915 	stw	zero,36(r2)
 100eaa8:	00000a06 	br	100ead4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100eaac:	e0bffe17 	ldw	r2,-8(fp)
 100eab0:	10c00917 	ldw	r3,36(r2)
 100eab4:	00a00034 	movhi	r2,32768
 100eab8:	10bfff04 	addi	r2,r2,-4
 100eabc:	10c00536 	bltu	r2,r3,100ead4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100eac0:	e0bffe17 	ldw	r2,-8(fp)
 100eac4:	10800917 	ldw	r2,36(r2)
 100eac8:	10c00044 	addi	r3,r2,1
 100eacc:	e0bffe17 	ldw	r2,-8(fp)
 100ead0:	10c00915 	stw	r3,36(r2)
 100ead4:	00804074 	movhi	r2,257
 100ead8:	10983904 	addi	r2,r2,24804
 100eadc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100eae0:	e037883a 	mov	sp,fp
 100eae4:	df000017 	ldw	fp,0(sp)
 100eae8:	dec00104 	addi	sp,sp,4
 100eaec:	f800283a 	ret

0100eaf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100eaf0:	defffc04 	addi	sp,sp,-16
 100eaf4:	df000315 	stw	fp,12(sp)
 100eaf8:	df000304 	addi	fp,sp,12
 100eafc:	e13ffd15 	stw	r4,-12(fp)
 100eb00:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100eb04:	00000706 	br	100eb24 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100eb08:	e0bffe17 	ldw	r2,-8(fp)
 100eb0c:	1090000c 	andi	r2,r2,16384
 100eb10:	1005003a 	cmpeq	r2,r2,zero
 100eb14:	1000031e 	bne	r2,zero,100eb24 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100eb18:	00bffd44 	movi	r2,-11
 100eb1c:	e0bfff15 	stw	r2,-4(fp)
 100eb20:	00000b06 	br	100eb50 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100eb24:	e0bffd17 	ldw	r2,-12(fp)
 100eb28:	10c00d17 	ldw	r3,52(r2)
 100eb2c:	e0bffd17 	ldw	r2,-12(fp)
 100eb30:	10800c17 	ldw	r2,48(r2)
 100eb34:	18800526 	beq	r3,r2,100eb4c <altera_avalon_jtag_uart_close+0x5c>
 100eb38:	e0bffd17 	ldw	r2,-12(fp)
 100eb3c:	10c00917 	ldw	r3,36(r2)
 100eb40:	e0bffd17 	ldw	r2,-12(fp)
 100eb44:	10800117 	ldw	r2,4(r2)
 100eb48:	18bfef36 	bltu	r3,r2,100eb08 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100eb4c:	e03fff15 	stw	zero,-4(fp)
 100eb50:	e0bfff17 	ldw	r2,-4(fp)
}
 100eb54:	e037883a 	mov	sp,fp
 100eb58:	df000017 	ldw	fp,0(sp)
 100eb5c:	dec00104 	addi	sp,sp,4
 100eb60:	f800283a 	ret

0100eb64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100eb64:	defff804 	addi	sp,sp,-32
 100eb68:	df000715 	stw	fp,28(sp)
 100eb6c:	df000704 	addi	fp,sp,28
 100eb70:	e13ffb15 	stw	r4,-20(fp)
 100eb74:	e17ffc15 	stw	r5,-16(fp)
 100eb78:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100eb7c:	00bff9c4 	movi	r2,-25
 100eb80:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100eb84:	e0bffc17 	ldw	r2,-16(fp)
 100eb88:	e0bfff15 	stw	r2,-4(fp)
 100eb8c:	e0ffff17 	ldw	r3,-4(fp)
 100eb90:	189a8060 	cmpeqi	r2,r3,27137
 100eb94:	1000041e 	bne	r2,zero,100eba8 <altera_avalon_jtag_uart_ioctl+0x44>
 100eb98:	e0ffff17 	ldw	r3,-4(fp)
 100eb9c:	189a80a0 	cmpeqi	r2,r3,27138
 100eba0:	10001b1e 	bne	r2,zero,100ec10 <altera_avalon_jtag_uart_ioctl+0xac>
 100eba4:	00002706 	br	100ec44 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100eba8:	e0bffb17 	ldw	r2,-20(fp)
 100ebac:	10c00117 	ldw	r3,4(r2)
 100ebb0:	00a00034 	movhi	r2,32768
 100ebb4:	10bfffc4 	addi	r2,r2,-1
 100ebb8:	18802226 	beq	r3,r2,100ec44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100ebbc:	e0bffd17 	ldw	r2,-12(fp)
 100ebc0:	10800017 	ldw	r2,0(r2)
 100ebc4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100ebc8:	e0bff917 	ldw	r2,-28(fp)
 100ebcc:	10800090 	cmplti	r2,r2,2
 100ebd0:	1000071e 	bne	r2,zero,100ebf0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100ebd4:	e0fff917 	ldw	r3,-28(fp)
 100ebd8:	00a00034 	movhi	r2,32768
 100ebdc:	10bfffc4 	addi	r2,r2,-1
 100ebe0:	18800326 	beq	r3,r2,100ebf0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100ebe4:	e0bff917 	ldw	r2,-28(fp)
 100ebe8:	e0bffe15 	stw	r2,-8(fp)
 100ebec:	00000306 	br	100ebfc <altera_avalon_jtag_uart_ioctl+0x98>
 100ebf0:	00e00034 	movhi	r3,32768
 100ebf4:	18ffff84 	addi	r3,r3,-2
 100ebf8:	e0fffe15 	stw	r3,-8(fp)
 100ebfc:	e0bffb17 	ldw	r2,-20(fp)
 100ec00:	e0fffe17 	ldw	r3,-8(fp)
 100ec04:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100ec08:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100ec0c:	00000d06 	br	100ec44 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100ec10:	e0bffb17 	ldw	r2,-20(fp)
 100ec14:	10c00117 	ldw	r3,4(r2)
 100ec18:	00a00034 	movhi	r2,32768
 100ec1c:	10bfffc4 	addi	r2,r2,-1
 100ec20:	18800826 	beq	r3,r2,100ec44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100ec24:	e13ffd17 	ldw	r4,-12(fp)
 100ec28:	e0bffb17 	ldw	r2,-20(fp)
 100ec2c:	10c00917 	ldw	r3,36(r2)
 100ec30:	e0bffb17 	ldw	r2,-20(fp)
 100ec34:	10800117 	ldw	r2,4(r2)
 100ec38:	1885803a 	cmpltu	r2,r3,r2
 100ec3c:	20800015 	stw	r2,0(r4)
      rc = 0;
 100ec40:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100ec44:	e0bffa17 	ldw	r2,-24(fp)
}
 100ec48:	e037883a 	mov	sp,fp
 100ec4c:	df000017 	ldw	fp,0(sp)
 100ec50:	dec00104 	addi	sp,sp,4
 100ec54:	f800283a 	ret

0100ec58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100ec58:	defff204 	addi	sp,sp,-56
 100ec5c:	dfc00d15 	stw	ra,52(sp)
 100ec60:	df000c15 	stw	fp,48(sp)
 100ec64:	df000c04 	addi	fp,sp,48
 100ec68:	e13ffb15 	stw	r4,-20(fp)
 100ec6c:	e17ffc15 	stw	r5,-16(fp)
 100ec70:	e1bffd15 	stw	r6,-12(fp)
 100ec74:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100ec78:	e0bffc17 	ldw	r2,-16(fp)
 100ec7c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100ec80:	00004806 	br	100eda4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100ec84:	e0bffb17 	ldw	r2,-20(fp)
 100ec88:	10800a17 	ldw	r2,40(r2)
 100ec8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100ec90:	e0bffb17 	ldw	r2,-20(fp)
 100ec94:	10800b17 	ldw	r2,44(r2)
 100ec98:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100ec9c:	e0fff717 	ldw	r3,-36(fp)
 100eca0:	e0bff617 	ldw	r2,-40(fp)
 100eca4:	18800536 	bltu	r3,r2,100ecbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100eca8:	e0bff717 	ldw	r2,-36(fp)
 100ecac:	e0fff617 	ldw	r3,-40(fp)
 100ecb0:	10c5c83a 	sub	r2,r2,r3
 100ecb4:	e0bff815 	stw	r2,-32(fp)
 100ecb8:	00000406 	br	100eccc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100ecbc:	00820004 	movi	r2,2048
 100ecc0:	e0fff617 	ldw	r3,-40(fp)
 100ecc4:	10c5c83a 	sub	r2,r2,r3
 100ecc8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100eccc:	e0bff817 	ldw	r2,-32(fp)
 100ecd0:	1005003a 	cmpeq	r2,r2,zero
 100ecd4:	10001f1e 	bne	r2,zero,100ed54 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100ecd8:	e0fffd17 	ldw	r3,-12(fp)
 100ecdc:	e0bff817 	ldw	r2,-32(fp)
 100ece0:	1880022e 	bgeu	r3,r2,100ecec <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100ece4:	e0bffd17 	ldw	r2,-12(fp)
 100ece8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100ecec:	e0bffb17 	ldw	r2,-20(fp)
 100ecf0:	10c00e04 	addi	r3,r2,56
 100ecf4:	e0bff617 	ldw	r2,-40(fp)
 100ecf8:	1887883a 	add	r3,r3,r2
 100ecfc:	e0bffa17 	ldw	r2,-24(fp)
 100ed00:	1009883a 	mov	r4,r2
 100ed04:	180b883a 	mov	r5,r3
 100ed08:	e1bff817 	ldw	r6,-32(fp)
 100ed0c:	100a5d40 	call	100a5d4 <memcpy>
      ptr   += n;
 100ed10:	e0fff817 	ldw	r3,-32(fp)
 100ed14:	e0bffa17 	ldw	r2,-24(fp)
 100ed18:	10c5883a 	add	r2,r2,r3
 100ed1c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100ed20:	e0fffd17 	ldw	r3,-12(fp)
 100ed24:	e0bff817 	ldw	r2,-32(fp)
 100ed28:	1885c83a 	sub	r2,r3,r2
 100ed2c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ed30:	e0fff617 	ldw	r3,-40(fp)
 100ed34:	e0bff817 	ldw	r2,-32(fp)
 100ed38:	1885883a 	add	r2,r3,r2
 100ed3c:	10c1ffcc 	andi	r3,r2,2047
 100ed40:	e0bffb17 	ldw	r2,-20(fp)
 100ed44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100ed48:	e0bffd17 	ldw	r2,-12(fp)
 100ed4c:	10800048 	cmpgei	r2,r2,1
 100ed50:	103fcc1e 	bne	r2,zero,100ec84 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100ed54:	e0fffa17 	ldw	r3,-24(fp)
 100ed58:	e0bffc17 	ldw	r2,-16(fp)
 100ed5c:	1880141e 	bne	r3,r2,100edb0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100ed60:	e0bffe17 	ldw	r2,-8(fp)
 100ed64:	1090000c 	andi	r2,r2,16384
 100ed68:	1004c03a 	cmpne	r2,r2,zero
 100ed6c:	1000101e 	bne	r2,zero,100edb0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100ed70:	e0bffb17 	ldw	r2,-20(fp)
 100ed74:	10c00a17 	ldw	r3,40(r2)
 100ed78:	e0bff717 	ldw	r2,-36(fp)
 100ed7c:	1880051e 	bne	r3,r2,100ed94 <altera_avalon_jtag_uart_read+0x13c>
 100ed80:	e0bffb17 	ldw	r2,-20(fp)
 100ed84:	10c00917 	ldw	r3,36(r2)
 100ed88:	e0bffb17 	ldw	r2,-20(fp)
 100ed8c:	10800117 	ldw	r2,4(r2)
 100ed90:	18bff736 	bltu	r3,r2,100ed70 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100ed94:	e0bffb17 	ldw	r2,-20(fp)
 100ed98:	10c00a17 	ldw	r3,40(r2)
 100ed9c:	e0bff717 	ldw	r2,-36(fp)
 100eda0:	18800326 	beq	r3,r2,100edb0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100eda4:	e0bffd17 	ldw	r2,-12(fp)
 100eda8:	10800048 	cmpgei	r2,r2,1
 100edac:	103fb51e 	bne	r2,zero,100ec84 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100edb0:	e0fffa17 	ldw	r3,-24(fp)
 100edb4:	e0bffc17 	ldw	r2,-16(fp)
 100edb8:	18801926 	beq	r3,r2,100ee20 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100edbc:	0005303a 	rdctl	r2,status
 100edc0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100edc4:	e0fff517 	ldw	r3,-44(fp)
 100edc8:	00bfff84 	movi	r2,-2
 100edcc:	1884703a 	and	r2,r3,r2
 100edd0:	1001703a 	wrctl	status,r2
  
  return context;
 100edd4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100edd8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100eddc:	e0bffb17 	ldw	r2,-20(fp)
 100ede0:	10800817 	ldw	r2,32(r2)
 100ede4:	10c00054 	ori	r3,r2,1
 100ede8:	e0bffb17 	ldw	r2,-20(fp)
 100edec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100edf0:	e0bffb17 	ldw	r2,-20(fp)
 100edf4:	10800017 	ldw	r2,0(r2)
 100edf8:	11000104 	addi	r4,r2,4
 100edfc:	e0bffb17 	ldw	r2,-20(fp)
 100ee00:	10800817 	ldw	r2,32(r2)
 100ee04:	1007883a 	mov	r3,r2
 100ee08:	2005883a 	mov	r2,r4
 100ee0c:	10c00035 	stwio	r3,0(r2)
 100ee10:	e0bff917 	ldw	r2,-28(fp)
 100ee14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ee18:	e0bff417 	ldw	r2,-48(fp)
 100ee1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100ee20:	e0fffa17 	ldw	r3,-24(fp)
 100ee24:	e0bffc17 	ldw	r2,-16(fp)
 100ee28:	18800526 	beq	r3,r2,100ee40 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100ee2c:	e0fffa17 	ldw	r3,-24(fp)
 100ee30:	e0bffc17 	ldw	r2,-16(fp)
 100ee34:	1887c83a 	sub	r3,r3,r2
 100ee38:	e0ffff15 	stw	r3,-4(fp)
 100ee3c:	00000906 	br	100ee64 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100ee40:	e0bffe17 	ldw	r2,-8(fp)
 100ee44:	1090000c 	andi	r2,r2,16384
 100ee48:	1005003a 	cmpeq	r2,r2,zero
 100ee4c:	1000031e 	bne	r2,zero,100ee5c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100ee50:	00bffd44 	movi	r2,-11
 100ee54:	e0bfff15 	stw	r2,-4(fp)
 100ee58:	00000206 	br	100ee64 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100ee5c:	00bffec4 	movi	r2,-5
 100ee60:	e0bfff15 	stw	r2,-4(fp)
 100ee64:	e0bfff17 	ldw	r2,-4(fp)
}
 100ee68:	e037883a 	mov	sp,fp
 100ee6c:	dfc00117 	ldw	ra,4(sp)
 100ee70:	df000017 	ldw	fp,0(sp)
 100ee74:	dec00204 	addi	sp,sp,8
 100ee78:	f800283a 	ret

0100ee7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100ee7c:	defff204 	addi	sp,sp,-56
 100ee80:	dfc00d15 	stw	ra,52(sp)
 100ee84:	df000c15 	stw	fp,48(sp)
 100ee88:	df000c04 	addi	fp,sp,48
 100ee8c:	e13ffb15 	stw	r4,-20(fp)
 100ee90:	e17ffc15 	stw	r5,-16(fp)
 100ee94:	e1bffd15 	stw	r6,-12(fp)
 100ee98:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100ee9c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100eea0:	e0bffc17 	ldw	r2,-16(fp)
 100eea4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100eea8:	00003a06 	br	100ef94 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100eeac:	e0bffb17 	ldw	r2,-20(fp)
 100eeb0:	10800c17 	ldw	r2,48(r2)
 100eeb4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100eeb8:	e0bffb17 	ldw	r2,-20(fp)
 100eebc:	10800d17 	ldw	r2,52(r2)
 100eec0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100eec4:	e0fffa17 	ldw	r3,-24(fp)
 100eec8:	e0bff917 	ldw	r2,-28(fp)
 100eecc:	1880062e 	bgeu	r3,r2,100eee8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100eed0:	e0fff917 	ldw	r3,-28(fp)
 100eed4:	e0bffa17 	ldw	r2,-24(fp)
 100eed8:	1885c83a 	sub	r2,r3,r2
 100eedc:	10bfffc4 	addi	r2,r2,-1
 100eee0:	e0bff815 	stw	r2,-32(fp)
 100eee4:	00000c06 	br	100ef18 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100eee8:	e0bff917 	ldw	r2,-28(fp)
 100eeec:	1005003a 	cmpeq	r2,r2,zero
 100eef0:	1000051e 	bne	r2,zero,100ef08 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100eef4:	00820004 	movi	r2,2048
 100eef8:	e0fffa17 	ldw	r3,-24(fp)
 100eefc:	10c5c83a 	sub	r2,r2,r3
 100ef00:	e0bff815 	stw	r2,-32(fp)
 100ef04:	00000406 	br	100ef18 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100ef08:	0081ffc4 	movi	r2,2047
 100ef0c:	e0fffa17 	ldw	r3,-24(fp)
 100ef10:	10c5c83a 	sub	r2,r2,r3
 100ef14:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100ef18:	e0bff817 	ldw	r2,-32(fp)
 100ef1c:	1005003a 	cmpeq	r2,r2,zero
 100ef20:	10001f1e 	bne	r2,zero,100efa0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100ef24:	e0fffd17 	ldw	r3,-12(fp)
 100ef28:	e0bff817 	ldw	r2,-32(fp)
 100ef2c:	1880022e 	bgeu	r3,r2,100ef38 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100ef30:	e0bffd17 	ldw	r2,-12(fp)
 100ef34:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100ef38:	e0bffb17 	ldw	r2,-20(fp)
 100ef3c:	10c20e04 	addi	r3,r2,2104
 100ef40:	e0bffa17 	ldw	r2,-24(fp)
 100ef44:	1885883a 	add	r2,r3,r2
 100ef48:	e0fffc17 	ldw	r3,-16(fp)
 100ef4c:	1009883a 	mov	r4,r2
 100ef50:	180b883a 	mov	r5,r3
 100ef54:	e1bff817 	ldw	r6,-32(fp)
 100ef58:	100a5d40 	call	100a5d4 <memcpy>
      ptr   += n;
 100ef5c:	e0fff817 	ldw	r3,-32(fp)
 100ef60:	e0bffc17 	ldw	r2,-16(fp)
 100ef64:	10c5883a 	add	r2,r2,r3
 100ef68:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100ef6c:	e0fffd17 	ldw	r3,-12(fp)
 100ef70:	e0bff817 	ldw	r2,-32(fp)
 100ef74:	1885c83a 	sub	r2,r3,r2
 100ef78:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ef7c:	e0fffa17 	ldw	r3,-24(fp)
 100ef80:	e0bff817 	ldw	r2,-32(fp)
 100ef84:	1885883a 	add	r2,r3,r2
 100ef88:	10c1ffcc 	andi	r3,r2,2047
 100ef8c:	e0bffb17 	ldw	r2,-20(fp)
 100ef90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100ef94:	e0bffd17 	ldw	r2,-12(fp)
 100ef98:	10800048 	cmpgei	r2,r2,1
 100ef9c:	103fc31e 	bne	r2,zero,100eeac <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100efa0:	0005303a 	rdctl	r2,status
 100efa4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100efa8:	e0fff517 	ldw	r3,-44(fp)
 100efac:	00bfff84 	movi	r2,-2
 100efb0:	1884703a 	and	r2,r3,r2
 100efb4:	1001703a 	wrctl	status,r2
  
  return context;
 100efb8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100efbc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100efc0:	e0bffb17 	ldw	r2,-20(fp)
 100efc4:	10800817 	ldw	r2,32(r2)
 100efc8:	10c00094 	ori	r3,r2,2
 100efcc:	e0bffb17 	ldw	r2,-20(fp)
 100efd0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100efd4:	e0bffb17 	ldw	r2,-20(fp)
 100efd8:	10800017 	ldw	r2,0(r2)
 100efdc:	11000104 	addi	r4,r2,4
 100efe0:	e0bffb17 	ldw	r2,-20(fp)
 100efe4:	10800817 	ldw	r2,32(r2)
 100efe8:	1007883a 	mov	r3,r2
 100efec:	2005883a 	mov	r2,r4
 100eff0:	10c00035 	stwio	r3,0(r2)
 100eff4:	e0bff717 	ldw	r2,-36(fp)
 100eff8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100effc:	e0bff417 	ldw	r2,-48(fp)
 100f000:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100f004:	e0bffd17 	ldw	r2,-12(fp)
 100f008:	10800050 	cmplti	r2,r2,1
 100f00c:	1000111e 	bne	r2,zero,100f054 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100f010:	e0bffe17 	ldw	r2,-8(fp)
 100f014:	1090000c 	andi	r2,r2,16384
 100f018:	1004c03a 	cmpne	r2,r2,zero
 100f01c:	1000101e 	bne	r2,zero,100f060 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100f020:	e0bffb17 	ldw	r2,-20(fp)
 100f024:	10c00d17 	ldw	r3,52(r2)
 100f028:	e0bff917 	ldw	r2,-28(fp)
 100f02c:	1880051e 	bne	r3,r2,100f044 <altera_avalon_jtag_uart_write+0x1c8>
 100f030:	e0bffb17 	ldw	r2,-20(fp)
 100f034:	10c00917 	ldw	r3,36(r2)
 100f038:	e0bffb17 	ldw	r2,-20(fp)
 100f03c:	10800117 	ldw	r2,4(r2)
 100f040:	18bff736 	bltu	r3,r2,100f020 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100f044:	e0bffb17 	ldw	r2,-20(fp)
 100f048:	10c00d17 	ldw	r3,52(r2)
 100f04c:	e0bff917 	ldw	r2,-28(fp)
 100f050:	18800326 	beq	r3,r2,100f060 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100f054:	e0bffd17 	ldw	r2,-12(fp)
 100f058:	10800048 	cmpgei	r2,r2,1
 100f05c:	103fcd1e 	bne	r2,zero,100ef94 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100f060:	e0fffc17 	ldw	r3,-16(fp)
 100f064:	e0bff617 	ldw	r2,-40(fp)
 100f068:	18800526 	beq	r3,r2,100f080 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100f06c:	e0fffc17 	ldw	r3,-16(fp)
 100f070:	e0bff617 	ldw	r2,-40(fp)
 100f074:	1887c83a 	sub	r3,r3,r2
 100f078:	e0ffff15 	stw	r3,-4(fp)
 100f07c:	00000906 	br	100f0a4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100f080:	e0bffe17 	ldw	r2,-8(fp)
 100f084:	1090000c 	andi	r2,r2,16384
 100f088:	1005003a 	cmpeq	r2,r2,zero
 100f08c:	1000031e 	bne	r2,zero,100f09c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100f090:	00bffd44 	movi	r2,-11
 100f094:	e0bfff15 	stw	r2,-4(fp)
 100f098:	00000206 	br	100f0a4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100f09c:	00bffec4 	movi	r2,-5
 100f0a0:	e0bfff15 	stw	r2,-4(fp)
 100f0a4:	e0bfff17 	ldw	r2,-4(fp)
}
 100f0a8:	e037883a 	mov	sp,fp
 100f0ac:	dfc00117 	ldw	ra,4(sp)
 100f0b0:	df000017 	ldw	fp,0(sp)
 100f0b4:	dec00204 	addi	sp,sp,8
 100f0b8:	f800283a 	ret

0100f0bc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100f0bc:	defffc04 	addi	sp,sp,-16
 100f0c0:	df000315 	stw	fp,12(sp)
 100f0c4:	df000304 	addi	fp,sp,12
 100f0c8:	e13ffe15 	stw	r4,-8(fp)
 100f0cc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100f0d0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100f0d4:	e0bfff17 	ldw	r2,-4(fp)
 100f0d8:	1004c03a 	cmpne	r2,r2,zero
 100f0dc:	1000061e 	bne	r2,zero,100f0f8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100f0e0:	e0bffe17 	ldw	r2,-8(fp)
 100f0e4:	1007883a 	mov	r3,r2
 100f0e8:	e0bffd03 	ldbu	r2,-12(fp)
 100f0ec:	10c4b03a 	or	r2,r2,r3
 100f0f0:	e0bffd05 	stb	r2,-12(fp)
 100f0f4:	00000806 	br	100f118 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100f0f8:	e0bffe17 	ldw	r2,-8(fp)
 100f0fc:	1007883a 	mov	r3,r2
 100f100:	e0bffd03 	ldbu	r2,-12(fp)
 100f104:	10c4b03a 	or	r2,r2,r3
 100f108:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100f10c:	e0bffd03 	ldbu	r2,-12(fp)
 100f110:	10801014 	ori	r2,r2,64
 100f114:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100f118:	e0fffd03 	ldbu	r3,-12(fp)
 100f11c:	00bfe004 	movi	r2,-128
 100f120:	1884b03a 	or	r2,r3,r2
 100f124:	10803fcc 	andi	r2,r2,255
}
 100f128:	e037883a 	mov	sp,fp
 100f12c:	df000017 	ldw	fp,0(sp)
 100f130:	dec00104 	addi	sp,sp,4
 100f134:	f800283a 	ret

0100f138 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100f138:	defffd04 	addi	sp,sp,-12
 100f13c:	df000215 	stw	fp,8(sp)
 100f140:	df000204 	addi	fp,sp,8
 100f144:	e13ffe15 	stw	r4,-8(fp)
 100f148:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100f14c:	e0bffe17 	ldw	r2,-8(fp)
 100f150:	10800a17 	ldw	r2,40(r2)
 100f154:	e0ffff03 	ldbu	r3,-4(fp)
 100f158:	10c00025 	stbio	r3,0(r2)
}
 100f15c:	e037883a 	mov	sp,fp
 100f160:	df000017 	ldw	fp,0(sp)
 100f164:	dec00104 	addi	sp,sp,4
 100f168:	f800283a 	ret

0100f16c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100f16c:	defffe04 	addi	sp,sp,-8
 100f170:	df000115 	stw	fp,4(sp)
 100f174:	df000104 	addi	fp,sp,4
 100f178:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100f17c:	e0bfff17 	ldw	r2,-4(fp)
 100f180:	10800a17 	ldw	r2,40(r2)
 100f184:	1007883a 	mov	r3,r2
 100f188:	00800044 	movi	r2,1
 100f18c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100f190:	e037883a 	mov	sp,fp
 100f194:	df000017 	ldw	fp,0(sp)
 100f198:	dec00104 	addi	sp,sp,4
 100f19c:	f800283a 	ret

0100f1a0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100f1a0:	defffc04 	addi	sp,sp,-16
 100f1a4:	dfc00315 	stw	ra,12(sp)
 100f1a8:	df000215 	stw	fp,8(sp)
 100f1ac:	df000204 	addi	fp,sp,8
 100f1b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100f1b4:	e13fff17 	ldw	r4,-4(fp)
 100f1b8:	01404074 	movhi	r5,257
 100f1bc:	29515d04 	addi	r5,r5,17780
 100f1c0:	10113380 	call	1011338 <alt_find_dev>
 100f1c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100f1c8:	e0bffe17 	ldw	r2,-8(fp)
}
 100f1cc:	e037883a 	mov	sp,fp
 100f1d0:	dfc00117 	ldw	ra,4(sp)
 100f1d4:	df000017 	ldw	fp,0(sp)
 100f1d8:	dec00204 	addi	sp,sp,8
 100f1dc:	f800283a 	ret

0100f1e0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100f1e0:	defffb04 	addi	sp,sp,-20
 100f1e4:	df000415 	stw	fp,16(sp)
 100f1e8:	df000404 	addi	fp,sp,16
 100f1ec:	e13ffd15 	stw	r4,-12(fp)
 100f1f0:	e17ffe15 	stw	r5,-8(fp)
 100f1f4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100f1f8:	e03ffc15 	stw	zero,-16(fp)
 100f1fc:	00000f06 	br	100f23c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100f200:	e0bffd17 	ldw	r2,-12(fp)
 100f204:	10800a17 	ldw	r2,40(r2)
 100f208:	11000044 	addi	r4,r2,1
 100f20c:	e0fffc17 	ldw	r3,-16(fp)
 100f210:	e0bffe17 	ldw	r2,-8(fp)
 100f214:	1885883a 	add	r2,r3,r2
 100f218:	10800003 	ldbu	r2,0(r2)
 100f21c:	10c03fcc 	andi	r3,r2,255
 100f220:	18c0201c 	xori	r3,r3,128
 100f224:	18ffe004 	addi	r3,r3,-128
 100f228:	2005883a 	mov	r2,r4
 100f22c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100f230:	e0bffc17 	ldw	r2,-16(fp)
 100f234:	10800044 	addi	r2,r2,1
 100f238:	e0bffc15 	stw	r2,-16(fp)
 100f23c:	e0fffc17 	ldw	r3,-16(fp)
 100f240:	e0bfff17 	ldw	r2,-4(fp)
 100f244:	18bfee36 	bltu	r3,r2,100f200 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100f248:	e037883a 	mov	sp,fp
 100f24c:	df000017 	ldw	fp,0(sp)
 100f250:	dec00104 	addi	sp,sp,4
 100f254:	f800283a 	ret

0100f258 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100f258:	defffd04 	addi	sp,sp,-12
 100f25c:	df000215 	stw	fp,8(sp)
 100f260:	df000204 	addi	fp,sp,8
 100f264:	e13ffe15 	stw	r4,-8(fp)
 100f268:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100f26c:	00000d06 	br	100f2a4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100f270:	e0bffe17 	ldw	r2,-8(fp)
 100f274:	10800a17 	ldw	r2,40(r2)
 100f278:	11000044 	addi	r4,r2,1
 100f27c:	e0bfff17 	ldw	r2,-4(fp)
 100f280:	10800003 	ldbu	r2,0(r2)
 100f284:	10c03fcc 	andi	r3,r2,255
 100f288:	18c0201c 	xori	r3,r3,128
 100f28c:	18ffe004 	addi	r3,r3,-128
 100f290:	2005883a 	mov	r2,r4
 100f294:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100f298:	e0bfff17 	ldw	r2,-4(fp)
 100f29c:	10800044 	addi	r2,r2,1
 100f2a0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100f2a4:	e0bfff17 	ldw	r2,-4(fp)
 100f2a8:	10800003 	ldbu	r2,0(r2)
 100f2ac:	10803fcc 	andi	r2,r2,255
 100f2b0:	1080201c 	xori	r2,r2,128
 100f2b4:	10bfe004 	addi	r2,r2,-128
 100f2b8:	1004c03a 	cmpne	r2,r2,zero
 100f2bc:	103fec1e 	bne	r2,zero,100f270 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100f2c0:	e037883a 	mov	sp,fp
 100f2c4:	df000017 	ldw	fp,0(sp)
 100f2c8:	dec00104 	addi	sp,sp,4
 100f2cc:	f800283a 	ret

0100f2d0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100f2d0:	defffb04 	addi	sp,sp,-20
 100f2d4:	dfc00415 	stw	ra,16(sp)
 100f2d8:	df000315 	stw	fp,12(sp)
 100f2dc:	df000304 	addi	fp,sp,12
 100f2e0:	e13ffd15 	stw	r4,-12(fp)
 100f2e4:	e17ffe15 	stw	r5,-8(fp)
 100f2e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100f2ec:	e0bffd17 	ldw	r2,-12(fp)
 100f2f0:	10800017 	ldw	r2,0(r2)
 100f2f4:	1009883a 	mov	r4,r2
 100f2f8:	e1bfff17 	ldw	r6,-4(fp)
 100f2fc:	e17ffe17 	ldw	r5,-8(fp)
 100f300:	100f1e00 	call	100f1e0 <alt_up_character_lcd_write>
	return 0;
 100f304:	0005883a 	mov	r2,zero
}
 100f308:	e037883a 	mov	sp,fp
 100f30c:	dfc00117 	ldw	ra,4(sp)
 100f310:	df000017 	ldw	fp,0(sp)
 100f314:	dec00204 	addi	sp,sp,8
 100f318:	f800283a 	ret

0100f31c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100f31c:	defff904 	addi	sp,sp,-28
 100f320:	dfc00615 	stw	ra,24(sp)
 100f324:	df000515 	stw	fp,20(sp)
 100f328:	df000504 	addi	fp,sp,20
 100f32c:	e13ffc15 	stw	r4,-16(fp)
 100f330:	e17ffd15 	stw	r5,-12(fp)
 100f334:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100f338:	e0bffd17 	ldw	r2,-12(fp)
 100f33c:	10800a28 	cmpgeui	r2,r2,40
 100f340:	1000031e 	bne	r2,zero,100f350 <alt_up_character_lcd_set_cursor_pos+0x34>
 100f344:	e0bffe17 	ldw	r2,-8(fp)
 100f348:	108000b0 	cmpltui	r2,r2,2
 100f34c:	1000031e 	bne	r2,zero,100f35c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100f350:	00bfffc4 	movi	r2,-1
 100f354:	e0bfff15 	stw	r2,-4(fp)
 100f358:	00000806 	br	100f37c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100f35c:	e13ffd17 	ldw	r4,-12(fp)
 100f360:	e17ffe17 	ldw	r5,-8(fp)
 100f364:	100f0bc0 	call	100f0bc <get_DDRAM_addr>
 100f368:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100f36c:	e17ffb03 	ldbu	r5,-20(fp)
 100f370:	e13ffc17 	ldw	r4,-16(fp)
 100f374:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
	return 0;
 100f378:	e03fff15 	stw	zero,-4(fp)
 100f37c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f380:	e037883a 	mov	sp,fp
 100f384:	dfc00117 	ldw	ra,4(sp)
 100f388:	df000017 	ldw	fp,0(sp)
 100f38c:	dec00204 	addi	sp,sp,8
 100f390:	f800283a 	ret

0100f394 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100f394:	defff904 	addi	sp,sp,-28
 100f398:	dfc00615 	stw	ra,24(sp)
 100f39c:	df000515 	stw	fp,20(sp)
 100f3a0:	df000504 	addi	fp,sp,20
 100f3a4:	e13ffc15 	stw	r4,-16(fp)
 100f3a8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100f3ac:	e0bffd17 	ldw	r2,-12(fp)
 100f3b0:	1005003a 	cmpeq	r2,r2,zero
 100f3b4:	10001e1e 	bne	r2,zero,100f430 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100f3b8:	e0bffd17 	ldw	r2,-12(fp)
 100f3bc:	10800050 	cmplti	r2,r2,1
 100f3c0:	1000031e 	bne	r2,zero,100f3d0 <alt_up_character_lcd_shift_cursor+0x3c>
 100f3c4:	00800504 	movi	r2,20
 100f3c8:	e0bfff05 	stb	r2,-4(fp)
 100f3cc:	00000206 	br	100f3d8 <alt_up_character_lcd_shift_cursor+0x44>
 100f3d0:	00c00404 	movi	r3,16
 100f3d4:	e0ffff05 	stb	r3,-4(fp)
 100f3d8:	e0bfff03 	ldbu	r2,-4(fp)
 100f3dc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100f3e0:	e0fffd17 	ldw	r3,-12(fp)
 100f3e4:	e0fffe15 	stw	r3,-8(fp)
 100f3e8:	e0fffe17 	ldw	r3,-8(fp)
 100f3ec:	1804403a 	cmpge	r2,r3,zero
 100f3f0:	1000031e 	bne	r2,zero,100f400 <alt_up_character_lcd_shift_cursor+0x6c>
 100f3f4:	e0bffe17 	ldw	r2,-8(fp)
 100f3f8:	0085c83a 	sub	r2,zero,r2
 100f3fc:	e0bffe15 	stw	r2,-8(fp)
 100f400:	e0fffe17 	ldw	r3,-8(fp)
 100f404:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100f408:	00000306 	br	100f418 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100f40c:	e17ffb43 	ldbu	r5,-19(fp)
 100f410:	e13ffc17 	ldw	r4,-16(fp)
 100f414:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100f418:	e0bffb03 	ldbu	r2,-20(fp)
 100f41c:	10bfffc4 	addi	r2,r2,-1
 100f420:	e0bffb05 	stb	r2,-20(fp)
 100f424:	e0bffb03 	ldbu	r2,-20(fp)
 100f428:	10803fd8 	cmpnei	r2,r2,255
 100f42c:	103ff71e 	bne	r2,zero,100f40c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100f430:	e037883a 	mov	sp,fp
 100f434:	dfc00117 	ldw	ra,4(sp)
 100f438:	df000017 	ldw	fp,0(sp)
 100f43c:	dec00204 	addi	sp,sp,8
 100f440:	f800283a 	ret

0100f444 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100f444:	defff904 	addi	sp,sp,-28
 100f448:	dfc00615 	stw	ra,24(sp)
 100f44c:	df000515 	stw	fp,20(sp)
 100f450:	df000504 	addi	fp,sp,20
 100f454:	e13ffc15 	stw	r4,-16(fp)
 100f458:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100f45c:	e0bffd17 	ldw	r2,-12(fp)
 100f460:	1005003a 	cmpeq	r2,r2,zero
 100f464:	10001e1e 	bne	r2,zero,100f4e0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100f468:	e0bffd17 	ldw	r2,-12(fp)
 100f46c:	10800050 	cmplti	r2,r2,1
 100f470:	1000031e 	bne	r2,zero,100f480 <alt_up_character_lcd_shift_display+0x3c>
 100f474:	00800704 	movi	r2,28
 100f478:	e0bfff05 	stb	r2,-4(fp)
 100f47c:	00000206 	br	100f488 <alt_up_character_lcd_shift_display+0x44>
 100f480:	00c00604 	movi	r3,24
 100f484:	e0ffff05 	stb	r3,-4(fp)
 100f488:	e0bfff03 	ldbu	r2,-4(fp)
 100f48c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100f490:	e0fffd17 	ldw	r3,-12(fp)
 100f494:	e0fffe15 	stw	r3,-8(fp)
 100f498:	e0fffe17 	ldw	r3,-8(fp)
 100f49c:	1804403a 	cmpge	r2,r3,zero
 100f4a0:	1000031e 	bne	r2,zero,100f4b0 <alt_up_character_lcd_shift_display+0x6c>
 100f4a4:	e0bffe17 	ldw	r2,-8(fp)
 100f4a8:	0085c83a 	sub	r2,zero,r2
 100f4ac:	e0bffe15 	stw	r2,-8(fp)
 100f4b0:	e0fffe17 	ldw	r3,-8(fp)
 100f4b4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100f4b8:	00000306 	br	100f4c8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100f4bc:	e17ffb43 	ldbu	r5,-19(fp)
 100f4c0:	e13ffc17 	ldw	r4,-16(fp)
 100f4c4:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100f4c8:	e0bffb03 	ldbu	r2,-20(fp)
 100f4cc:	10bfffc4 	addi	r2,r2,-1
 100f4d0:	e0bffb05 	stb	r2,-20(fp)
 100f4d4:	e0bffb03 	ldbu	r2,-20(fp)
 100f4d8:	10803fd8 	cmpnei	r2,r2,255
 100f4dc:	103ff71e 	bne	r2,zero,100f4bc <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100f4e0:	e037883a 	mov	sp,fp
 100f4e4:	dfc00117 	ldw	ra,4(sp)
 100f4e8:	df000017 	ldw	fp,0(sp)
 100f4ec:	dec00204 	addi	sp,sp,8
 100f4f0:	f800283a 	ret

0100f4f4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100f4f4:	defff904 	addi	sp,sp,-28
 100f4f8:	dfc00615 	stw	ra,24(sp)
 100f4fc:	df000515 	stw	fp,20(sp)
 100f500:	df000504 	addi	fp,sp,20
 100f504:	e13ffc15 	stw	r4,-16(fp)
 100f508:	e17ffd15 	stw	r5,-12(fp)
 100f50c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100f510:	e0bffd17 	ldw	r2,-12(fp)
 100f514:	10800a28 	cmpgeui	r2,r2,40
 100f518:	1000031e 	bne	r2,zero,100f528 <alt_up_character_lcd_erase_pos+0x34>
 100f51c:	e0bffe17 	ldw	r2,-8(fp)
 100f520:	108000b0 	cmpltui	r2,r2,2
 100f524:	1000031e 	bne	r2,zero,100f534 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100f528:	00bfffc4 	movi	r2,-1
 100f52c:	e0bfff15 	stw	r2,-4(fp)
 100f530:	00000e06 	br	100f56c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100f534:	e13ffd17 	ldw	r4,-12(fp)
 100f538:	e17ffe17 	ldw	r5,-8(fp)
 100f53c:	100f0bc0 	call	100f0bc <get_DDRAM_addr>
 100f540:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100f544:	e17ffb03 	ldbu	r5,-20(fp)
 100f548:	e13ffc17 	ldw	r4,-16(fp)
 100f54c:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100f550:	e0bffc17 	ldw	r2,-16(fp)
 100f554:	10800a17 	ldw	r2,40(r2)
 100f558:	10800044 	addi	r2,r2,1
 100f55c:	1007883a 	mov	r3,r2
 100f560:	00800084 	movi	r2,2
 100f564:	18800025 	stbio	r2,0(r3)
	return 0;
 100f568:	e03fff15 	stw	zero,-4(fp)
 100f56c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f570:	e037883a 	mov	sp,fp
 100f574:	dfc00117 	ldw	ra,4(sp)
 100f578:	df000017 	ldw	fp,0(sp)
 100f57c:	dec00204 	addi	sp,sp,8
 100f580:	f800283a 	ret

0100f584 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100f584:	defffd04 	addi	sp,sp,-12
 100f588:	dfc00215 	stw	ra,8(sp)
 100f58c:	df000115 	stw	fp,4(sp)
 100f590:	df000104 	addi	fp,sp,4
 100f594:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100f598:	e13fff17 	ldw	r4,-4(fp)
 100f59c:	01400304 	movi	r5,12
 100f5a0:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
}
 100f5a4:	e037883a 	mov	sp,fp
 100f5a8:	dfc00117 	ldw	ra,4(sp)
 100f5ac:	df000017 	ldw	fp,0(sp)
 100f5b0:	dec00204 	addi	sp,sp,8
 100f5b4:	f800283a 	ret

0100f5b8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100f5b8:	defffd04 	addi	sp,sp,-12
 100f5bc:	dfc00215 	stw	ra,8(sp)
 100f5c0:	df000115 	stw	fp,4(sp)
 100f5c4:	df000104 	addi	fp,sp,4
 100f5c8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100f5cc:	e13fff17 	ldw	r4,-4(fp)
 100f5d0:	014003c4 	movi	r5,15
 100f5d4:	100f1380 	call	100f138 <alt_up_character_lcd_send_cmd>
}
 100f5d8:	e037883a 	mov	sp,fp
 100f5dc:	dfc00117 	ldw	ra,4(sp)
 100f5e0:	df000017 	ldw	fp,0(sp)
 100f5e4:	dec00204 	addi	sp,sp,8
 100f5e8:	f800283a 	ret

0100f5ec <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 100f5ec:	defffc04 	addi	sp,sp,-16
 100f5f0:	dfc00315 	stw	ra,12(sp)
 100f5f4:	df000215 	stw	fp,8(sp)
 100f5f8:	df000204 	addi	fp,sp,8
 100f5fc:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 100f600:	e0bfff17 	ldw	r2,-4(fp)
 100f604:	10800217 	ldw	r2,8(r2)
 100f608:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 100f60c:	00000c06 	br	100f640 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 100f610:	e13ffe17 	ldw	r4,-8(fp)
 100f614:	01404074 	movhi	r5,257
 100f618:	294a9504 	addi	r5,r5,10836
 100f61c:	100c0280 	call	100c028 <strcmp>
 100f620:	1004c03a 	cmpne	r2,r2,zero
 100f624:	1000031e 	bne	r2,zero,100f634 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 100f628:	e0bffe17 	ldw	r2,-8(fp)
 100f62c:	10000005 	stb	zero,0(r2)
			break;
 100f630:	00000a06 	br	100f65c <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 100f634:	e0bffe17 	ldw	r2,-8(fp)
 100f638:	10800044 	addi	r2,r2,1
 100f63c:	e0bffe15 	stw	r2,-8(fp)
 100f640:	e0bffe17 	ldw	r2,-8(fp)
 100f644:	10800003 	ldbu	r2,0(r2)
 100f648:	10803fcc 	andi	r2,r2,255
 100f64c:	1080201c 	xori	r2,r2,128
 100f650:	10bfe004 	addi	r2,r2,-128
 100f654:	1004c03a 	cmpne	r2,r2,zero
 100f658:	103fed1e 	bne	r2,zero,100f610 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 100f65c:	e037883a 	mov	sp,fp
 100f660:	dfc00117 	ldw	ra,4(sp)
 100f664:	df000017 	ldw	fp,0(sp)
 100f668:	dec00204 	addi	sp,sp,8
 100f66c:	f800283a 	ret

0100f670 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 100f670:	defffc04 	addi	sp,sp,-16
 100f674:	dfc00315 	stw	ra,12(sp)
 100f678:	df000215 	stw	fp,8(sp)
 100f67c:	df000204 	addi	fp,sp,8
 100f680:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100f684:	e13fff17 	ldw	r4,-4(fp)
 100f688:	01404074 	movhi	r5,257
 100f68c:	29515d04 	addi	r5,r5,17780
 100f690:	10113380 	call	1011338 <alt_find_dev>
 100f694:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100f698:	e0bffe17 	ldw	r2,-8(fp)
}
 100f69c:	e037883a 	mov	sp,fp
 100f6a0:	dfc00117 	ldw	ra,4(sp)
 100f6a4:	df000017 	ldw	fp,0(sp)
 100f6a8:	dec00204 	addi	sp,sp,8
 100f6ac:	f800283a 	ret

0100f6b0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 100f6b0:	defff904 	addi	sp,sp,-28
 100f6b4:	df000615 	stw	fp,24(sp)
 100f6b8:	df000604 	addi	fp,sp,24
 100f6bc:	e13ffb15 	stw	r4,-20(fp)
 100f6c0:	e1bffd15 	stw	r6,-12(fp)
 100f6c4:	e1fffe15 	stw	r7,-8(fp)
 100f6c8:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100f6cc:	e0bffb17 	ldw	r2,-20(fp)
 100f6d0:	10c00c17 	ldw	r3,48(r2)
 100f6d4:	e0bffd17 	ldw	r2,-12(fp)
 100f6d8:	10c0042e 	bgeu	r2,r3,100f6ec <alt_up_char_buffer_draw+0x3c>
 100f6dc:	e0bffb17 	ldw	r2,-20(fp)
 100f6e0:	10c00d17 	ldw	r3,52(r2)
 100f6e4:	e0bffe17 	ldw	r2,-8(fp)
 100f6e8:	10c00336 	bltu	r2,r3,100f6f8 <alt_up_char_buffer_draw+0x48>
		return -1;
 100f6ec:	00bfffc4 	movi	r2,-1
 100f6f0:	e0bfff15 	stw	r2,-4(fp)
 100f6f4:	00001d06 	br	100f76c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 100f6f8:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 100f6fc:	e0bffb17 	ldw	r2,-20(fp)
 100f700:	10c00f17 	ldw	r3,60(r2)
 100f704:	e0bffd17 	ldw	r2,-12(fp)
 100f708:	1886703a 	and	r3,r3,r2
 100f70c:	e0bffb17 	ldw	r2,-20(fp)
 100f710:	10800e17 	ldw	r2,56(r2)
 100f714:	1886983a 	sll	r3,r3,r2
 100f718:	e0bffa17 	ldw	r2,-24(fp)
 100f71c:	10c4b03a 	or	r2,r2,r3
 100f720:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 100f724:	e0bffb17 	ldw	r2,-20(fp)
 100f728:	10c01117 	ldw	r3,68(r2)
 100f72c:	e0bffe17 	ldw	r2,-8(fp)
 100f730:	1886703a 	and	r3,r3,r2
 100f734:	e0bffb17 	ldw	r2,-20(fp)
 100f738:	10801017 	ldw	r2,64(r2)
 100f73c:	1886983a 	sll	r3,r3,r2
 100f740:	e0bffa17 	ldw	r2,-24(fp)
 100f744:	10c4b03a 	or	r2,r2,r3
 100f748:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 100f74c:	e0bffb17 	ldw	r2,-20(fp)
 100f750:	10800b17 	ldw	r2,44(r2)
 100f754:	1007883a 	mov	r3,r2
 100f758:	e0bffa17 	ldw	r2,-24(fp)
 100f75c:	1885883a 	add	r2,r3,r2
 100f760:	e0fffc03 	ldbu	r3,-16(fp)
 100f764:	10c00025 	stbio	r3,0(r2)

	return 0;
 100f768:	e03fff15 	stw	zero,-4(fp)
 100f76c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f770:	e037883a 	mov	sp,fp
 100f774:	df000017 	ldw	fp,0(sp)
 100f778:	dec00104 	addi	sp,sp,4
 100f77c:	f800283a 	ret

0100f780 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 100f780:	defff904 	addi	sp,sp,-28
 100f784:	df000615 	stw	fp,24(sp)
 100f788:	df000604 	addi	fp,sp,24
 100f78c:	e13ffb15 	stw	r4,-20(fp)
 100f790:	e17ffc15 	stw	r5,-16(fp)
 100f794:	e1bffd15 	stw	r6,-12(fp)
 100f798:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100f79c:	e0bffb17 	ldw	r2,-20(fp)
 100f7a0:	10c00c17 	ldw	r3,48(r2)
 100f7a4:	e0bffd17 	ldw	r2,-12(fp)
 100f7a8:	10c0042e 	bgeu	r2,r3,100f7bc <alt_up_char_buffer_string+0x3c>
 100f7ac:	e0bffb17 	ldw	r2,-20(fp)
 100f7b0:	10c00d17 	ldw	r3,52(r2)
 100f7b4:	e0bffe17 	ldw	r2,-8(fp)
 100f7b8:	10c00336 	bltu	r2,r3,100f7c8 <alt_up_char_buffer_string+0x48>
		return -1;
 100f7bc:	00bfffc4 	movi	r2,-1
 100f7c0:	e0bfff15 	stw	r2,-4(fp)
 100f7c4:	00002e06 	br	100f880 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 100f7c8:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 100f7cc:	e0bffb17 	ldw	r2,-20(fp)
 100f7d0:	10801017 	ldw	r2,64(r2)
 100f7d4:	1007883a 	mov	r3,r2
 100f7d8:	e0bffe17 	ldw	r2,-8(fp)
 100f7dc:	10c6983a 	sll	r3,r2,r3
 100f7e0:	e0bffd17 	ldw	r2,-12(fp)
 100f7e4:	1885883a 	add	r2,r3,r2
 100f7e8:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 100f7ec:	00001c06 	br	100f860 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 100f7f0:	e0bffb17 	ldw	r2,-20(fp)
 100f7f4:	10800b17 	ldw	r2,44(r2)
 100f7f8:	1007883a 	mov	r3,r2
 100f7fc:	e0bffa17 	ldw	r2,-24(fp)
 100f800:	1889883a 	add	r4,r3,r2
 100f804:	e0bffc17 	ldw	r2,-16(fp)
 100f808:	10800003 	ldbu	r2,0(r2)
 100f80c:	10c03fcc 	andi	r3,r2,255
 100f810:	18c0201c 	xori	r3,r3,128
 100f814:	18ffe004 	addi	r3,r3,-128
 100f818:	2005883a 	mov	r2,r4
 100f81c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100f820:	e0bffc17 	ldw	r2,-16(fp)
 100f824:	10800044 	addi	r2,r2,1
 100f828:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 100f82c:	e0bffd17 	ldw	r2,-12(fp)
 100f830:	10800044 	addi	r2,r2,1
 100f834:	e0bffd15 	stw	r2,-12(fp)
 100f838:	e0bffb17 	ldw	r2,-20(fp)
 100f83c:	10c00c17 	ldw	r3,48(r2)
 100f840:	e0bffd17 	ldw	r2,-12(fp)
 100f844:	10c00336 	bltu	r2,r3,100f854 <alt_up_char_buffer_string+0xd4>
			return -1;
 100f848:	00bfffc4 	movi	r2,-1
 100f84c:	e0bfff15 	stw	r2,-4(fp)
 100f850:	00000b06 	br	100f880 <alt_up_char_buffer_string+0x100>
		++offset;
 100f854:	e0bffa17 	ldw	r2,-24(fp)
 100f858:	10800044 	addi	r2,r2,1
 100f85c:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 100f860:	e0bffc17 	ldw	r2,-16(fp)
 100f864:	10800003 	ldbu	r2,0(r2)
 100f868:	10803fcc 	andi	r2,r2,255
 100f86c:	1080201c 	xori	r2,r2,128
 100f870:	10bfe004 	addi	r2,r2,-128
 100f874:	1004c03a 	cmpne	r2,r2,zero
 100f878:	103fdd1e 	bne	r2,zero,100f7f0 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 100f87c:	e03fff15 	stw	zero,-4(fp)
 100f880:	e0bfff17 	ldw	r2,-4(fp)
}
 100f884:	e037883a 	mov	sp,fp
 100f888:	df000017 	ldw	fp,0(sp)
 100f88c:	dec00104 	addi	sp,sp,4
 100f890:	f800283a 	ret

0100f894 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100f894:	defffe04 	addi	sp,sp,-8
 100f898:	df000115 	stw	fp,4(sp)
 100f89c:	df000104 	addi	fp,sp,4
 100f8a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100f8a4:	e0bfff17 	ldw	r2,-4(fp)
 100f8a8:	10800a17 	ldw	r2,40(r2)
 100f8ac:	10800084 	addi	r2,r2,2
 100f8b0:	1007883a 	mov	r3,r2
 100f8b4:	00800044 	movi	r2,1
 100f8b8:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 100f8bc:	e0bfff17 	ldw	r2,-4(fp)
 100f8c0:	10800a17 	ldw	r2,40(r2)
 100f8c4:	10800084 	addi	r2,r2,2
 100f8c8:	10800023 	ldbuio	r2,0(r2)
 100f8cc:	1080004c 	andi	r2,r2,1
 100f8d0:	10803fcc 	andi	r2,r2,255
 100f8d4:	1004c03a 	cmpne	r2,r2,zero
 100f8d8:	103ff81e 	bne	r2,zero,100f8bc <alt_up_char_buffer_clear+0x28>
	return 0;
 100f8dc:	0005883a 	mov	r2,zero
}
 100f8e0:	e037883a 	mov	sp,fp
 100f8e4:	df000017 	ldw	fp,0(sp)
 100f8e8:	dec00104 	addi	sp,sp,4
 100f8ec:	f800283a 	ret

0100f8f0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 100f8f0:	defffc04 	addi	sp,sp,-16
 100f8f4:	dfc00315 	stw	ra,12(sp)
 100f8f8:	df000215 	stw	fp,8(sp)
 100f8fc:	df000204 	addi	fp,sp,8
 100f900:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 100f904:	e13fff17 	ldw	r4,-4(fp)
 100f908:	01404074 	movhi	r5,257
 100f90c:	29515d04 	addi	r5,r5,17780
 100f910:	10113380 	call	1011338 <alt_find_dev>
 100f914:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100f918:	e0bffe17 	ldw	r2,-8(fp)
}
 100f91c:	e037883a 	mov	sp,fp
 100f920:	dfc00117 	ldw	ra,4(sp)
 100f924:	df000017 	ldw	fp,0(sp)
 100f928:	dec00204 	addi	sp,sp,8
 100f92c:	f800283a 	ret

0100f930 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 100f930:	defff804 	addi	sp,sp,-32
 100f934:	dfc00715 	stw	ra,28(sp)
 100f938:	df000615 	stw	fp,24(sp)
 100f93c:	df000604 	addi	fp,sp,24
 100f940:	e13ffb15 	stw	r4,-20(fp)
 100f944:	e17ffc15 	stw	r5,-16(fp)
 100f948:	e1bffd15 	stw	r6,-12(fp)
 100f94c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 100f950:	e0bffb17 	ldw	r2,-20(fp)
 100f954:	10c00f17 	ldw	r3,60(r2)
 100f958:	e0bffd17 	ldw	r2,-12(fp)
 100f95c:	10c0042e 	bgeu	r2,r3,100f970 <alt_up_pixel_buffer_dma_draw+0x40>
 100f960:	e0bffb17 	ldw	r2,-20(fp)
 100f964:	10c01017 	ldw	r3,64(r2)
 100f968:	e0bffe17 	ldw	r2,-8(fp)
 100f96c:	10c00336 	bltu	r2,r3,100f97c <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
 100f970:	00bfffc4 	movi	r2,-1
 100f974:	e0bfff15 	stw	r2,-4(fp)
 100f978:	00005206 	br	100fac4 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 100f97c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100f980:	e0bffb17 	ldw	r2,-20(fp)
 100f984:	10800d17 	ldw	r2,52(r2)
 100f988:	1004c03a 	cmpne	r2,r2,zero
 100f98c:	1000151e 	bne	r2,zero,100f9e4 <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100f990:	e0bffb17 	ldw	r2,-20(fp)
 100f994:	10c01217 	ldw	r3,72(r2)
 100f998:	e0bffd17 	ldw	r2,-12(fp)
 100f99c:	1886703a 	and	r3,r3,r2
 100f9a0:	e0bffb17 	ldw	r2,-20(fp)
 100f9a4:	10801117 	ldw	r2,68(r2)
 100f9a8:	1886983a 	sll	r3,r3,r2
 100f9ac:	e0bffa17 	ldw	r2,-24(fp)
 100f9b0:	10c4b03a 	or	r2,r2,r3
 100f9b4:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 100f9b8:	e0bffb17 	ldw	r2,-20(fp)
 100f9bc:	10c01417 	ldw	r3,80(r2)
 100f9c0:	e0bffe17 	ldw	r2,-8(fp)
 100f9c4:	1886703a 	and	r3,r3,r2
 100f9c8:	e0bffb17 	ldw	r2,-20(fp)
 100f9cc:	10801317 	ldw	r2,76(r2)
 100f9d0:	1886983a 	sll	r3,r3,r2
 100f9d4:	e0bffa17 	ldw	r2,-24(fp)
 100f9d8:	10c4b03a 	or	r2,r2,r3
 100f9dc:	e0bffa15 	stw	r2,-24(fp)
 100f9e0:	00001806 	br	100fa44 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100f9e4:	e0bffb17 	ldw	r2,-20(fp)
 100f9e8:	10c01217 	ldw	r3,72(r2)
 100f9ec:	e0bffd17 	ldw	r2,-12(fp)
 100f9f0:	1886703a 	and	r3,r3,r2
 100f9f4:	e0bffb17 	ldw	r2,-20(fp)
 100f9f8:	10801117 	ldw	r2,68(r2)
 100f9fc:	1886983a 	sll	r3,r3,r2
 100fa00:	e0bffa17 	ldw	r2,-24(fp)
 100fa04:	10c5883a 	add	r2,r2,r3
 100fa08:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 100fa0c:	e0bffb17 	ldw	r2,-20(fp)
 100fa10:	10c01417 	ldw	r3,80(r2)
 100fa14:	e0bffe17 	ldw	r2,-8(fp)
 100fa18:	1888703a 	and	r4,r3,r2
 100fa1c:	e0bffb17 	ldw	r2,-20(fp)
 100fa20:	11400f17 	ldw	r5,60(r2)
 100fa24:	100476c0 	call	100476c <__mulsi3>
 100fa28:	1007883a 	mov	r3,r2
 100fa2c:	e0bffb17 	ldw	r2,-20(fp)
 100fa30:	10801117 	ldw	r2,68(r2)
 100fa34:	1886983a 	sll	r3,r3,r2
 100fa38:	e0bffa17 	ldw	r2,-24(fp)
 100fa3c:	10c5883a 	add	r2,r2,r3
 100fa40:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100fa44:	e0bffb17 	ldw	r2,-20(fp)
 100fa48:	10800e17 	ldw	r2,56(r2)
 100fa4c:	10800058 	cmpnei	r2,r2,1
 100fa50:	1000081e 	bne	r2,zero,100fa74 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100fa54:	e0bffb17 	ldw	r2,-20(fp)
 100fa58:	10800c17 	ldw	r2,48(r2)
 100fa5c:	1007883a 	mov	r3,r2
 100fa60:	e0bffa17 	ldw	r2,-24(fp)
 100fa64:	1885883a 	add	r2,r3,r2
 100fa68:	e0fffc17 	ldw	r3,-16(fp)
 100fa6c:	10c00025 	stbio	r3,0(r2)
 100fa70:	00001306 	br	100fac0 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100fa74:	e0bffb17 	ldw	r2,-20(fp)
 100fa78:	10800e17 	ldw	r2,56(r2)
 100fa7c:	10800098 	cmpnei	r2,r2,2
 100fa80:	1000081e 	bne	r2,zero,100faa4 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100fa84:	e0bffb17 	ldw	r2,-20(fp)
 100fa88:	10800c17 	ldw	r2,48(r2)
 100fa8c:	1007883a 	mov	r3,r2
 100fa90:	e0bffa17 	ldw	r2,-24(fp)
 100fa94:	1885883a 	add	r2,r3,r2
 100fa98:	e0fffc17 	ldw	r3,-16(fp)
 100fa9c:	10c0002d 	sthio	r3,0(r2)
 100faa0:	00000706 	br	100fac0 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100faa4:	e0bffb17 	ldw	r2,-20(fp)
 100faa8:	10800c17 	ldw	r2,48(r2)
 100faac:	1007883a 	mov	r3,r2
 100fab0:	e0bffa17 	ldw	r2,-24(fp)
 100fab4:	1885883a 	add	r2,r3,r2
 100fab8:	e0fffc17 	ldw	r3,-16(fp)
 100fabc:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 100fac0:	e03fff15 	stw	zero,-4(fp)
 100fac4:	e0bfff17 	ldw	r2,-4(fp)
}
 100fac8:	e037883a 	mov	sp,fp
 100facc:	dfc00117 	ldw	ra,4(sp)
 100fad0:	df000017 	ldw	fp,0(sp)
 100fad4:	dec00204 	addi	sp,sp,8
 100fad8:	f800283a 	ret

0100fadc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 100fadc:	defffd04 	addi	sp,sp,-12
 100fae0:	df000215 	stw	fp,8(sp)
 100fae4:	df000204 	addi	fp,sp,8
 100fae8:	e13ffe15 	stw	r4,-8(fp)
 100faec:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 100faf0:	e0bffe17 	ldw	r2,-8(fp)
 100faf4:	10800a17 	ldw	r2,40(r2)
 100faf8:	10800104 	addi	r2,r2,4
 100fafc:	e0ffff17 	ldw	r3,-4(fp)
 100fb00:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 100fb04:	e0bffe17 	ldw	r2,-8(fp)
 100fb08:	10800a17 	ldw	r2,40(r2)
 100fb0c:	10800104 	addi	r2,r2,4
 100fb10:	10800037 	ldwio	r2,0(r2)
 100fb14:	1007883a 	mov	r3,r2
 100fb18:	e0bffe17 	ldw	r2,-8(fp)
 100fb1c:	10c00c15 	stw	r3,48(r2)
	return 0;
 100fb20:	0005883a 	mov	r2,zero
}
 100fb24:	e037883a 	mov	sp,fp
 100fb28:	df000017 	ldw	fp,0(sp)
 100fb2c:	dec00104 	addi	sp,sp,4
 100fb30:	f800283a 	ret

0100fb34 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 100fb34:	defffe04 	addi	sp,sp,-8
 100fb38:	df000115 	stw	fp,4(sp)
 100fb3c:	df000104 	addi	fp,sp,4
 100fb40:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 100fb44:	e0bfff17 	ldw	r2,-4(fp)
 100fb48:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 100fb4c:	e0bfff17 	ldw	r2,-4(fp)
 100fb50:	10800a17 	ldw	r2,40(r2)
 100fb54:	1007883a 	mov	r3,r2
 100fb58:	00800044 	movi	r2,1
 100fb5c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 100fb60:	e0bfff17 	ldw	r2,-4(fp)
 100fb64:	10c00b17 	ldw	r3,44(r2)
 100fb68:	e0bfff17 	ldw	r2,-4(fp)
 100fb6c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 100fb70:	e0bfff17 	ldw	r2,-4(fp)
 100fb74:	11000b15 	stw	r4,44(r2)
	return 0;
 100fb78:	0005883a 	mov	r2,zero
}
 100fb7c:	e037883a 	mov	sp,fp
 100fb80:	df000017 	ldw	fp,0(sp)
 100fb84:	dec00104 	addi	sp,sp,4
 100fb88:	f800283a 	ret

0100fb8c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 100fb8c:	defffe04 	addi	sp,sp,-8
 100fb90:	df000115 	stw	fp,4(sp)
 100fb94:	df000104 	addi	fp,sp,4
 100fb98:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 100fb9c:	e0bfff17 	ldw	r2,-4(fp)
 100fba0:	10800a17 	ldw	r2,40(r2)
 100fba4:	10800304 	addi	r2,r2,12
 100fba8:	10800037 	ldwio	r2,0(r2)
 100fbac:	1080004c 	andi	r2,r2,1
}
 100fbb0:	e037883a 	mov	sp,fp
 100fbb4:	df000017 	ldw	fp,0(sp)
 100fbb8:	dec00104 	addi	sp,sp,4
 100fbbc:	f800283a 	ret

0100fbc0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 100fbc0:	defff504 	addi	sp,sp,-44
 100fbc4:	dfc00a15 	stw	ra,40(sp)
 100fbc8:	df000915 	stw	fp,36(sp)
 100fbcc:	df000904 	addi	fp,sp,36
 100fbd0:	e13ff715 	stw	r4,-36(fp)
 100fbd4:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100fbd8:	e0bff817 	ldw	r2,-32(fp)
 100fbdc:	10800058 	cmpnei	r2,r2,1
 100fbe0:	1000041e 	bne	r2,zero,100fbf4 <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
 100fbe4:	e0bff717 	ldw	r2,-36(fp)
 100fbe8:	10800c17 	ldw	r2,48(r2)
 100fbec:	e0bfff15 	stw	r2,-4(fp)
 100fbf0:	00000306 	br	100fc00 <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
 100fbf4:	e0bff717 	ldw	r2,-36(fp)
 100fbf8:	10800b17 	ldw	r2,44(r2)
 100fbfc:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 100fc00:	e0bff717 	ldw	r2,-36(fp)
 100fc04:	10800f17 	ldw	r2,60(r2)
 100fc08:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100fc0c:	e0bff717 	ldw	r2,-36(fp)
 100fc10:	10800e17 	ldw	r2,56(r2)
 100fc14:	10800098 	cmpnei	r2,r2,2
 100fc18:	1000051e 	bne	r2,zero,100fc30 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 100fc1c:	e0fffe17 	ldw	r3,-8(fp)
 100fc20:	e0fffe17 	ldw	r3,-8(fp)
 100fc24:	18c5883a 	add	r2,r3,r3
 100fc28:	e0bffe15 	stw	r2,-8(fp)
 100fc2c:	00000506 	br	100fc44 <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
 100fc30:	e13ffe17 	ldw	r4,-8(fp)
 100fc34:	e13ffe17 	ldw	r4,-8(fp)
 100fc38:	2105883a 	add	r2,r4,r4
 100fc3c:	1085883a 	add	r2,r2,r2
 100fc40:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 100fc44:	e0bff717 	ldw	r2,-36(fp)
 100fc48:	10801017 	ldw	r2,64(r2)
 100fc4c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100fc50:	e0bff717 	ldw	r2,-36(fp)
 100fc54:	10800d17 	ldw	r2,52(r2)
 100fc58:	1004c03a 	cmpne	r2,r2,zero
 100fc5c:	10001e1e 	bne	r2,zero,100fcd8 <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100fc60:	e0bff717 	ldw	r2,-36(fp)
 100fc64:	10801317 	ldw	r2,76(r2)
 100fc68:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 100fc6c:	e03ffb15 	stw	zero,-20(fp)
 100fc70:	00001506 	br	100fcc8 <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
 100fc74:	e03ffc15 	stw	zero,-16(fp)
 100fc78:	00000706 	br	100fc98 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
 100fc7c:	e0ffff17 	ldw	r3,-4(fp)
 100fc80:	e0bffc17 	ldw	r2,-16(fp)
 100fc84:	1885883a 	add	r2,r3,r2
 100fc88:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 100fc8c:	e0bffc17 	ldw	r2,-16(fp)
 100fc90:	10800104 	addi	r2,r2,4
 100fc94:	e0bffc15 	stw	r2,-16(fp)
 100fc98:	e0fffc17 	ldw	r3,-16(fp)
 100fc9c:	e13ffe17 	ldw	r4,-8(fp)
 100fca0:	193ff636 	bltu	r3,r4,100fc7c <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 100fca4:	e0fffa17 	ldw	r3,-24(fp)
 100fca8:	00800044 	movi	r2,1
 100fcac:	10c4983a 	sll	r2,r2,r3
 100fcb0:	e0ffff17 	ldw	r3,-4(fp)
 100fcb4:	1887883a 	add	r3,r3,r2
 100fcb8:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 100fcbc:	e13ffb17 	ldw	r4,-20(fp)
 100fcc0:	21000044 	addi	r4,r4,1
 100fcc4:	e13ffb15 	stw	r4,-20(fp)
 100fcc8:	e0bffb17 	ldw	r2,-20(fp)
 100fccc:	e0fffd17 	ldw	r3,-12(fp)
 100fcd0:	10ffe836 	bltu	r2,r3,100fc74 <alt_up_pixel_buffer_dma_clear_screen+0xb4>
 100fcd4:	00001006 	br	100fd18 <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 100fcd8:	e13ffd17 	ldw	r4,-12(fp)
 100fcdc:	e17ffe17 	ldw	r5,-8(fp)
 100fce0:	100476c0 	call	100476c <__mulsi3>
 100fce4:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 100fce8:	e03ff915 	stw	zero,-28(fp)
 100fcec:	00000706 	br	100fd0c <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
 100fcf0:	e0ffff17 	ldw	r3,-4(fp)
 100fcf4:	e0bff917 	ldw	r2,-28(fp)
 100fcf8:	1885883a 	add	r2,r3,r2
 100fcfc:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 100fd00:	e13ff917 	ldw	r4,-28(fp)
 100fd04:	21000104 	addi	r4,r4,4
 100fd08:	e13ff915 	stw	r4,-28(fp)
 100fd0c:	e0bff917 	ldw	r2,-28(fp)
 100fd10:	e0fffd17 	ldw	r3,-12(fp)
 100fd14:	10fff636 	bltu	r2,r3,100fcf0 <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 100fd18:	e037883a 	mov	sp,fp
 100fd1c:	dfc00117 	ldw	ra,4(sp)
 100fd20:	df000017 	ldw	fp,0(sp)
 100fd24:	dec00204 	addi	sp,sp,8
 100fd28:	f800283a 	ret

0100fd2c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 100fd2c:	deffec04 	addi	sp,sp,-80
 100fd30:	dfc01315 	stw	ra,76(sp)
 100fd34:	df001215 	stw	fp,72(sp)
 100fd38:	df001204 	addi	fp,sp,72
 100fd3c:	e13fee15 	stw	r4,-72(fp)
 100fd40:	e17fef15 	stw	r5,-68(fp)
 100fd44:	e1bff015 	stw	r6,-64(fp)
 100fd48:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 100fd4c:	e0bfee17 	ldw	r2,-72(fp)
 100fd50:	10800f17 	ldw	r2,60(r2)
 100fd54:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 100fd58:	e0bfee17 	ldw	r2,-72(fp)
 100fd5c:	10801017 	ldw	r2,64(r2)
 100fd60:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 100fd64:	e0bfef17 	ldw	r2,-68(fp)
 100fd68:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 100fd6c:	e0fff117 	ldw	r3,-60(fp)
 100fd70:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 100fd74:	e13ff017 	ldw	r4,-64(fp)
 100fd78:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 100fd7c:	e0800217 	ldw	r2,8(fp)
 100fd80:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 100fd84:	e0c00317 	ldw	r3,12(fp)
 100fd88:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 100fd8c:	e13ffa17 	ldw	r4,-24(fp)
 100fd90:	e0bffb17 	ldw	r2,-20(fp)
 100fd94:	2080062e 	bgeu	r4,r2,100fdb0 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
 100fd98:	e0fffb17 	ldw	r3,-20(fp)
 100fd9c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 100fda0:	e13ffa17 	ldw	r4,-24(fp)
 100fda4:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 100fda8:	e0bffc17 	ldw	r2,-16(fp)
 100fdac:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 100fdb0:	e0fff817 	ldw	r3,-32(fp)
 100fdb4:	e13ff917 	ldw	r4,-28(fp)
 100fdb8:	1900062e 	bgeu	r3,r4,100fdd4 <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
 100fdbc:	e0bff917 	ldw	r2,-28(fp)
 100fdc0:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 100fdc4:	e0fff817 	ldw	r3,-32(fp)
 100fdc8:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 100fdcc:	e13ffc17 	ldw	r4,-16(fp)
 100fdd0:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 100fdd4:	e0bffb17 	ldw	r2,-20(fp)
 100fdd8:	e0fffe17 	ldw	r3,-8(fp)
 100fddc:	10c10d2e 	bgeu	r2,r3,1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
 100fde0:	e13ff917 	ldw	r4,-28(fp)
 100fde4:	e0bffd17 	ldw	r2,-12(fp)
 100fde8:	20800136 	bltu	r4,r2,100fdf0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 100fdec:	00010906 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 100fdf0:	e0fffa17 	ldw	r3,-24(fp)
 100fdf4:	e13ffe17 	ldw	r4,-8(fp)
 100fdf8:	19000336 	bltu	r3,r4,100fe08 <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
 100fdfc:	e0bffe17 	ldw	r2,-8(fp)
 100fe00:	10bfffc4 	addi	r2,r2,-1
 100fe04:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 100fe08:	e0fff817 	ldw	r3,-32(fp)
 100fe0c:	e13ffd17 	ldw	r4,-12(fp)
 100fe10:	19000336 	bltu	r3,r4,100fe20 <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
 100fe14:	e0bffd17 	ldw	r2,-12(fp)
 100fe18:	10bfffc4 	addi	r2,r2,-1
 100fe1c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100fe20:	e0800417 	ldw	r2,16(fp)
 100fe24:	10800058 	cmpnei	r2,r2,1
 100fe28:	1000041e 	bne	r2,zero,100fe3c <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
 100fe2c:	e0bfee17 	ldw	r2,-72(fp)
 100fe30:	10800c17 	ldw	r2,48(r2)
 100fe34:	e0bfff15 	stw	r2,-4(fp)
 100fe38:	00000306 	br	100fe48 <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
 100fe3c:	e0bfee17 	ldw	r2,-72(fp)
 100fe40:	10800b17 	ldw	r2,44(r2)
 100fe44:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100fe48:	e0bfee17 	ldw	r2,-72(fp)
 100fe4c:	10800d17 	ldw	r2,52(r2)
 100fe50:	1004c03a 	cmpne	r2,r2,zero
 100fe54:	1000721e 	bne	r2,zero,1010020 <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100fe58:	e0bfee17 	ldw	r2,-72(fp)
 100fe5c:	10801317 	ldw	r2,76(r2)
 100fe60:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 100fe64:	e0bff417 	ldw	r2,-48(fp)
 100fe68:	e0fff917 	ldw	r3,-28(fp)
 100fe6c:	1884983a 	sll	r2,r3,r2
 100fe70:	e13fff17 	ldw	r4,-4(fp)
 100fe74:	2089883a 	add	r4,r4,r2
 100fe78:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100fe7c:	e0bfee17 	ldw	r2,-72(fp)
 100fe80:	10800e17 	ldw	r2,56(r2)
 100fe84:	10800058 	cmpnei	r2,r2,1
 100fe88:	10001e1e 	bne	r2,zero,100ff04 <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
 100fe8c:	e0bff917 	ldw	r2,-28(fp)
 100fe90:	e0bff515 	stw	r2,-44(fp)
 100fe94:	00001706 	br	100fef4 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
 100fe98:	e0fffb17 	ldw	r3,-20(fp)
 100fe9c:	e0fff615 	stw	r3,-40(fp)
 100fea0:	00000806 	br	100fec4 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
 100fea4:	e0ffff17 	ldw	r3,-4(fp)
 100fea8:	e0bff617 	ldw	r2,-40(fp)
 100feac:	1885883a 	add	r2,r3,r2
 100feb0:	e0fff717 	ldw	r3,-36(fp)
 100feb4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100feb8:	e13ff617 	ldw	r4,-40(fp)
 100febc:	21000044 	addi	r4,r4,1
 100fec0:	e13ff615 	stw	r4,-40(fp)
 100fec4:	e0bffa17 	ldw	r2,-24(fp)
 100fec8:	e0fff617 	ldw	r3,-40(fp)
 100fecc:	10fff52e 	bgeu	r2,r3,100fea4 <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 100fed0:	e0fff417 	ldw	r3,-48(fp)
 100fed4:	00800044 	movi	r2,1
 100fed8:	10c4983a 	sll	r2,r2,r3
 100fedc:	e13fff17 	ldw	r4,-4(fp)
 100fee0:	2089883a 	add	r4,r4,r2
 100fee4:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100fee8:	e0bff517 	ldw	r2,-44(fp)
 100feec:	10800044 	addi	r2,r2,1
 100fef0:	e0bff515 	stw	r2,-44(fp)
 100fef4:	e0fff817 	ldw	r3,-32(fp)
 100fef8:	e13ff517 	ldw	r4,-44(fp)
 100fefc:	193fe62e 	bgeu	r3,r4,100fe98 <alt_up_pixel_buffer_dma_draw_box+0x16c>
 100ff00:	0000c406 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100ff04:	e0bfee17 	ldw	r2,-72(fp)
 100ff08:	10800e17 	ldw	r2,56(r2)
 100ff0c:	10800098 	cmpnei	r2,r2,2
 100ff10:	1000211e 	bne	r2,zero,100ff98 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
 100ff14:	e0bff917 	ldw	r2,-28(fp)
 100ff18:	e0bff515 	stw	r2,-44(fp)
 100ff1c:	00001a06 	br	100ff88 <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
 100ff20:	e0fffb17 	ldw	r3,-20(fp)
 100ff24:	e0fff615 	stw	r3,-40(fp)
 100ff28:	00000b06 	br	100ff58 <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 100ff2c:	e13ff617 	ldw	r4,-40(fp)
 100ff30:	e13ff617 	ldw	r4,-40(fp)
 100ff34:	2105883a 	add	r2,r4,r4
 100ff38:	1007883a 	mov	r3,r2
 100ff3c:	e0bfff17 	ldw	r2,-4(fp)
 100ff40:	1885883a 	add	r2,r3,r2
 100ff44:	e0fff717 	ldw	r3,-36(fp)
 100ff48:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100ff4c:	e0bff617 	ldw	r2,-40(fp)
 100ff50:	10800044 	addi	r2,r2,1
 100ff54:	e0bff615 	stw	r2,-40(fp)
 100ff58:	e0fffa17 	ldw	r3,-24(fp)
 100ff5c:	e13ff617 	ldw	r4,-40(fp)
 100ff60:	193ff22e 	bgeu	r3,r4,100ff2c <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 100ff64:	e0fff417 	ldw	r3,-48(fp)
 100ff68:	00800044 	movi	r2,1
 100ff6c:	10c4983a 	sll	r2,r2,r3
 100ff70:	e0ffff17 	ldw	r3,-4(fp)
 100ff74:	1887883a 	add	r3,r3,r2
 100ff78:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100ff7c:	e13ff517 	ldw	r4,-44(fp)
 100ff80:	21000044 	addi	r4,r4,1
 100ff84:	e13ff515 	stw	r4,-44(fp)
 100ff88:	e0bff817 	ldw	r2,-32(fp)
 100ff8c:	e0fff517 	ldw	r3,-44(fp)
 100ff90:	10ffe32e 	bgeu	r2,r3,100ff20 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
 100ff94:	00009f06 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100ff98:	e13ff917 	ldw	r4,-28(fp)
 100ff9c:	e13ff515 	stw	r4,-44(fp)
 100ffa0:	00001b06 	br	1010010 <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
 100ffa4:	e0bffb17 	ldw	r2,-20(fp)
 100ffa8:	e0bff615 	stw	r2,-40(fp)
 100ffac:	00000c06 	br	100ffe0 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 100ffb0:	e0fff617 	ldw	r3,-40(fp)
 100ffb4:	e0fff617 	ldw	r3,-40(fp)
 100ffb8:	18c5883a 	add	r2,r3,r3
 100ffbc:	1085883a 	add	r2,r2,r2
 100ffc0:	1007883a 	mov	r3,r2
 100ffc4:	e0bfff17 	ldw	r2,-4(fp)
 100ffc8:	1885883a 	add	r2,r3,r2
 100ffcc:	e0fff717 	ldw	r3,-36(fp)
 100ffd0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100ffd4:	e13ff617 	ldw	r4,-40(fp)
 100ffd8:	21000044 	addi	r4,r4,1
 100ffdc:	e13ff615 	stw	r4,-40(fp)
 100ffe0:	e0bffa17 	ldw	r2,-24(fp)
 100ffe4:	e0fff617 	ldw	r3,-40(fp)
 100ffe8:	10fff12e 	bgeu	r2,r3,100ffb0 <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 100ffec:	e0fff417 	ldw	r3,-48(fp)
 100fff0:	00800044 	movi	r2,1
 100fff4:	10c4983a 	sll	r2,r2,r3
 100fff8:	e13fff17 	ldw	r4,-4(fp)
 100fffc:	2089883a 	add	r4,r4,r2
 1010000:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1010004:	e0bff517 	ldw	r2,-44(fp)
 1010008:	10800044 	addi	r2,r2,1
 101000c:	e0bff515 	stw	r2,-44(fp)
 1010010:	e0fff817 	ldw	r3,-32(fp)
 1010014:	e13ff517 	ldw	r4,-44(fp)
 1010018:	193fe22e 	bgeu	r3,r4,100ffa4 <alt_up_pixel_buffer_dma_draw_box+0x278>
 101001c:	00007d06 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1010020:	e0bfee17 	ldw	r2,-72(fp)
 1010024:	10800e17 	ldw	r2,56(r2)
 1010028:	10800058 	cmpnei	r2,r2,1
 101002c:	1000221e 	bne	r2,zero,10100b8 <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
 1010030:	e13ff917 	ldw	r4,-28(fp)
 1010034:	e17ffe17 	ldw	r5,-8(fp)
 1010038:	100476c0 	call	100476c <__mulsi3>
 101003c:	e0ffff17 	ldw	r3,-4(fp)
 1010040:	1887883a 	add	r3,r3,r2
 1010044:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1010048:	e13ff917 	ldw	r4,-28(fp)
 101004c:	e13ff215 	stw	r4,-56(fp)
 1010050:	00001506 	br	10100a8 <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
 1010054:	e0bffb17 	ldw	r2,-20(fp)
 1010058:	e0bff315 	stw	r2,-52(fp)
 101005c:	00000806 	br	1010080 <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1010060:	e0ffff17 	ldw	r3,-4(fp)
 1010064:	e0bff317 	ldw	r2,-52(fp)
 1010068:	1885883a 	add	r2,r3,r2
 101006c:	e0fff717 	ldw	r3,-36(fp)
 1010070:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1010074:	e0fff317 	ldw	r3,-52(fp)
 1010078:	18c00044 	addi	r3,r3,1
 101007c:	e0fff315 	stw	r3,-52(fp)
 1010080:	e13ffa17 	ldw	r4,-24(fp)
 1010084:	e0bff317 	ldw	r2,-52(fp)
 1010088:	20bff52e 	bgeu	r4,r2,1010060 <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 101008c:	e0ffff17 	ldw	r3,-4(fp)
 1010090:	e13ffe17 	ldw	r4,-8(fp)
 1010094:	1907883a 	add	r3,r3,r4
 1010098:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101009c:	e0bff217 	ldw	r2,-56(fp)
 10100a0:	10800044 	addi	r2,r2,1
 10100a4:	e0bff215 	stw	r2,-56(fp)
 10100a8:	e0fff817 	ldw	r3,-32(fp)
 10100ac:	e13ff217 	ldw	r4,-56(fp)
 10100b0:	193fe82e 	bgeu	r3,r4,1010054 <alt_up_pixel_buffer_dma_draw_box+0x328>
 10100b4:	00005706 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10100b8:	e0bfee17 	ldw	r2,-72(fp)
 10100bc:	10800e17 	ldw	r2,56(r2)
 10100c0:	10800098 	cmpnei	r2,r2,2
 10100c4:	1000291e 	bne	r2,zero,101016c <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
 10100c8:	e0fffe17 	ldw	r3,-8(fp)
 10100cc:	e0fffe17 	ldw	r3,-8(fp)
 10100d0:	18c5883a 	add	r2,r3,r3
 10100d4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10100d8:	e13ff917 	ldw	r4,-28(fp)
 10100dc:	e17ffe17 	ldw	r5,-8(fp)
 10100e0:	100476c0 	call	100476c <__mulsi3>
 10100e4:	e13fff17 	ldw	r4,-4(fp)
 10100e8:	2089883a 	add	r4,r4,r2
 10100ec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10100f0:	e0bff917 	ldw	r2,-28(fp)
 10100f4:	e0bff215 	stw	r2,-56(fp)
 10100f8:	00001806 	br	101015c <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
 10100fc:	e0fffb17 	ldw	r3,-20(fp)
 1010100:	e0fff315 	stw	r3,-52(fp)
 1010104:	00000b06 	br	1010134 <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1010108:	e13ff317 	ldw	r4,-52(fp)
 101010c:	e13ff317 	ldw	r4,-52(fp)
 1010110:	2105883a 	add	r2,r4,r4
 1010114:	1007883a 	mov	r3,r2
 1010118:	e0bfff17 	ldw	r2,-4(fp)
 101011c:	1885883a 	add	r2,r3,r2
 1010120:	e0fff717 	ldw	r3,-36(fp)
 1010124:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1010128:	e0bff317 	ldw	r2,-52(fp)
 101012c:	10800044 	addi	r2,r2,1
 1010130:	e0bff315 	stw	r2,-52(fp)
 1010134:	e0fffa17 	ldw	r3,-24(fp)
 1010138:	e13ff317 	ldw	r4,-52(fp)
 101013c:	193ff22e 	bgeu	r3,r4,1010108 <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1010140:	e0bfff17 	ldw	r2,-4(fp)
 1010144:	e0fffe17 	ldw	r3,-8(fp)
 1010148:	10c5883a 	add	r2,r2,r3
 101014c:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1010150:	e13ff217 	ldw	r4,-56(fp)
 1010154:	21000044 	addi	r4,r4,1
 1010158:	e13ff215 	stw	r4,-56(fp)
 101015c:	e0bff817 	ldw	r2,-32(fp)
 1010160:	e0fff217 	ldw	r3,-56(fp)
 1010164:	10ffe52e 	bgeu	r2,r3,10100fc <alt_up_pixel_buffer_dma_draw_box+0x3d0>
 1010168:	00002a06 	br	1010214 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 101016c:	e13ffe17 	ldw	r4,-8(fp)
 1010170:	e13ffe17 	ldw	r4,-8(fp)
 1010174:	2105883a 	add	r2,r4,r4
 1010178:	1085883a 	add	r2,r2,r2
 101017c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1010180:	e13ff917 	ldw	r4,-28(fp)
 1010184:	e17ffe17 	ldw	r5,-8(fp)
 1010188:	100476c0 	call	100476c <__mulsi3>
 101018c:	e0ffff17 	ldw	r3,-4(fp)
 1010190:	1887883a 	add	r3,r3,r2
 1010194:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1010198:	e13ff917 	ldw	r4,-28(fp)
 101019c:	e13ff215 	stw	r4,-56(fp)
 10101a0:	00001906 	br	1010208 <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
 10101a4:	e0bffb17 	ldw	r2,-20(fp)
 10101a8:	e0bff315 	stw	r2,-52(fp)
 10101ac:	00000c06 	br	10101e0 <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 10101b0:	e0fff317 	ldw	r3,-52(fp)
 10101b4:	e0fff317 	ldw	r3,-52(fp)
 10101b8:	18c5883a 	add	r2,r3,r3
 10101bc:	1085883a 	add	r2,r2,r2
 10101c0:	1007883a 	mov	r3,r2
 10101c4:	e0bfff17 	ldw	r2,-4(fp)
 10101c8:	1885883a 	add	r2,r3,r2
 10101cc:	e0fff717 	ldw	r3,-36(fp)
 10101d0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 10101d4:	e13ff317 	ldw	r4,-52(fp)
 10101d8:	21000044 	addi	r4,r4,1
 10101dc:	e13ff315 	stw	r4,-52(fp)
 10101e0:	e0bffa17 	ldw	r2,-24(fp)
 10101e4:	e0fff317 	ldw	r3,-52(fp)
 10101e8:	10fff12e 	bgeu	r2,r3,10101b0 <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 10101ec:	e13fff17 	ldw	r4,-4(fp)
 10101f0:	e0bffe17 	ldw	r2,-8(fp)
 10101f4:	2089883a 	add	r4,r4,r2
 10101f8:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10101fc:	e0fff217 	ldw	r3,-56(fp)
 1010200:	18c00044 	addi	r3,r3,1
 1010204:	e0fff215 	stw	r3,-56(fp)
 1010208:	e13ff817 	ldw	r4,-32(fp)
 101020c:	e0bff217 	ldw	r2,-56(fp)
 1010210:	20bfe42e 	bgeu	r4,r2,10101a4 <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1010214:	e037883a 	mov	sp,fp
 1010218:	dfc00117 	ldw	ra,4(sp)
 101021c:	df000017 	ldw	fp,0(sp)
 1010220:	dec00204 	addi	sp,sp,8
 1010224:	f800283a 	ret

01010228 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 1010228:	defff104 	addi	sp,sp,-60
 101022c:	dfc00e15 	stw	ra,56(sp)
 1010230:	df000d15 	stw	fp,52(sp)
 1010234:	df000d04 	addi	fp,sp,52
 1010238:	e13ff315 	stw	r4,-52(fp)
 101023c:	e17ff415 	stw	r5,-48(fp)
 1010240:	e1bff515 	stw	r6,-44(fp)
 1010244:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1010248:	e0bff317 	ldw	r2,-52(fp)
 101024c:	10800f17 	ldw	r2,60(r2)
 1010250:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1010254:	e0bff317 	ldw	r2,-52(fp)
 1010258:	10801017 	ldw	r2,64(r2)
 101025c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1010260:	e0bff417 	ldw	r2,-48(fp)
 1010264:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 1010268:	e0fff517 	ldw	r3,-44(fp)
 101026c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 1010270:	e13ff617 	ldw	r4,-40(fp)
 1010274:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1010278:	e0800217 	ldw	r2,8(fp)
 101027c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1010280:	e0fffb17 	ldw	r3,-20(fp)
 1010284:	e13ffc17 	ldw	r4,-16(fp)
 1010288:	1900042e 	bgeu	r3,r4,101029c <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
 101028c:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 1010290:	e0fffb17 	ldw	r3,-20(fp)
 1010294:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 1010298:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 101029c:	e13ffc17 	ldw	r4,-16(fp)
 10102a0:	e0bffe17 	ldw	r2,-8(fp)
 10102a4:	2080b12e 	bgeu	r4,r2,101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
 10102a8:	e13ffa17 	ldw	r4,-24(fp)
 10102ac:	e0fffd17 	ldw	r3,-12(fp)
 10102b0:	20c00136 	bltu	r4,r3,10102b8 <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 10102b4:	0000ad06 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 10102b8:	e0bffb17 	ldw	r2,-20(fp)
 10102bc:	e0fffe17 	ldw	r3,-8(fp)
 10102c0:	10c00336 	bltu	r2,r3,10102d0 <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
 10102c4:	e13ffe17 	ldw	r4,-8(fp)
 10102c8:	213fffc4 	addi	r4,r4,-1
 10102cc:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10102d0:	e0800317 	ldw	r2,12(fp)
 10102d4:	10800058 	cmpnei	r2,r2,1
 10102d8:	1000041e 	bne	r2,zero,10102ec <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 10102dc:	e0bff317 	ldw	r2,-52(fp)
 10102e0:	10800c17 	ldw	r2,48(r2)
 10102e4:	e0bfff15 	stw	r2,-4(fp)
 10102e8:	00000306 	br	10102f8 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 10102ec:	e0bff317 	ldw	r2,-52(fp)
 10102f0:	10800b17 	ldw	r2,44(r2)
 10102f4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10102f8:	e0bff317 	ldw	r2,-52(fp)
 10102fc:	10800d17 	ldw	r2,52(r2)
 1010300:	1004c03a 	cmpne	r2,r2,zero
 1010304:	1000431e 	bne	r2,zero,1010414 <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1010308:	e0bff317 	ldw	r2,-52(fp)
 101030c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 1010310:	e0fffa17 	ldw	r3,-24(fp)
 1010314:	1884983a 	sll	r2,r3,r2
 1010318:	e13fff17 	ldw	r4,-4(fp)
 101031c:	2089883a 	add	r4,r4,r2
 1010320:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1010324:	e0bff317 	ldw	r2,-52(fp)
 1010328:	10800e17 	ldw	r2,56(r2)
 101032c:	10800058 	cmpnei	r2,r2,1
 1010330:	10000f1e 	bne	r2,zero,1010370 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
 1010334:	e0bffc17 	ldw	r2,-16(fp)
 1010338:	e0bff815 	stw	r2,-32(fp)
 101033c:	00000806 	br	1010360 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1010340:	e0ffff17 	ldw	r3,-4(fp)
 1010344:	e0bff817 	ldw	r2,-32(fp)
 1010348:	1885883a 	add	r2,r3,r2
 101034c:	e0fff917 	ldw	r3,-28(fp)
 1010350:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1010354:	e0fff817 	ldw	r3,-32(fp)
 1010358:	18c00044 	addi	r3,r3,1
 101035c:	e0fff815 	stw	r3,-32(fp)
 1010360:	e13ffb17 	ldw	r4,-20(fp)
 1010364:	e0bff817 	ldw	r2,-32(fp)
 1010368:	20bff52e 	bgeu	r4,r2,1010340 <alt_up_pixel_buffer_dma_draw_hline+0x118>
 101036c:	00007f06 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1010370:	e0bff317 	ldw	r2,-52(fp)
 1010374:	10800e17 	ldw	r2,56(r2)
 1010378:	10800098 	cmpnei	r2,r2,2
 101037c:	1000121e 	bne	r2,zero,10103c8 <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
 1010380:	e0fffc17 	ldw	r3,-16(fp)
 1010384:	e0fff815 	stw	r3,-32(fp)
 1010388:	00000b06 	br	10103b8 <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 101038c:	e13ff817 	ldw	r4,-32(fp)
 1010390:	e13ff817 	ldw	r4,-32(fp)
 1010394:	2105883a 	add	r2,r4,r4
 1010398:	1007883a 	mov	r3,r2
 101039c:	e0bfff17 	ldw	r2,-4(fp)
 10103a0:	1885883a 	add	r2,r3,r2
 10103a4:	e0fff917 	ldw	r3,-28(fp)
 10103a8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 10103ac:	e0bff817 	ldw	r2,-32(fp)
 10103b0:	10800044 	addi	r2,r2,1
 10103b4:	e0bff815 	stw	r2,-32(fp)
 10103b8:	e0fffb17 	ldw	r3,-20(fp)
 10103bc:	e13ff817 	ldw	r4,-32(fp)
 10103c0:	193ff22e 	bgeu	r3,r4,101038c <alt_up_pixel_buffer_dma_draw_hline+0x164>
 10103c4:	00006906 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 10103c8:	e0bffc17 	ldw	r2,-16(fp)
 10103cc:	e0bff815 	stw	r2,-32(fp)
 10103d0:	00000c06 	br	1010404 <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 10103d4:	e0fff817 	ldw	r3,-32(fp)
 10103d8:	e0fff817 	ldw	r3,-32(fp)
 10103dc:	18c5883a 	add	r2,r3,r3
 10103e0:	1085883a 	add	r2,r2,r2
 10103e4:	1007883a 	mov	r3,r2
 10103e8:	e0bfff17 	ldw	r2,-4(fp)
 10103ec:	1885883a 	add	r2,r3,r2
 10103f0:	e0fff917 	ldw	r3,-28(fp)
 10103f4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 10103f8:	e13ff817 	ldw	r4,-32(fp)
 10103fc:	21000044 	addi	r4,r4,1
 1010400:	e13ff815 	stw	r4,-32(fp)
 1010404:	e0bffb17 	ldw	r2,-20(fp)
 1010408:	e0fff817 	ldw	r3,-32(fp)
 101040c:	10fff12e 	bgeu	r2,r3,10103d4 <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
 1010410:	00005606 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1010414:	e0bff317 	ldw	r2,-52(fp)
 1010418:	10800e17 	ldw	r2,56(r2)
 101041c:	10800058 	cmpnei	r2,r2,1
 1010420:	1000151e 	bne	r2,zero,1010478 <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
 1010424:	e13ffa17 	ldw	r4,-24(fp)
 1010428:	e17ffe17 	ldw	r5,-8(fp)
 101042c:	100476c0 	call	100476c <__mulsi3>
 1010430:	e13fff17 	ldw	r4,-4(fp)
 1010434:	2089883a 	add	r4,r4,r2
 1010438:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 101043c:	e0bffc17 	ldw	r2,-16(fp)
 1010440:	e0bff715 	stw	r2,-36(fp)
 1010444:	00000806 	br	1010468 <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1010448:	e0ffff17 	ldw	r3,-4(fp)
 101044c:	e0bff717 	ldw	r2,-36(fp)
 1010450:	1885883a 	add	r2,r3,r2
 1010454:	e0fff917 	ldw	r3,-28(fp)
 1010458:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 101045c:	e0fff717 	ldw	r3,-36(fp)
 1010460:	18c00044 	addi	r3,r3,1
 1010464:	e0fff715 	stw	r3,-36(fp)
 1010468:	e13ffb17 	ldw	r4,-20(fp)
 101046c:	e0bff717 	ldw	r2,-36(fp)
 1010470:	20bff52e 	bgeu	r4,r2,1010448 <alt_up_pixel_buffer_dma_draw_hline+0x220>
 1010474:	00003d06 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1010478:	e0bff317 	ldw	r2,-52(fp)
 101047c:	10800e17 	ldw	r2,56(r2)
 1010480:	10800098 	cmpnei	r2,r2,2
 1010484:	10001c1e 	bne	r2,zero,10104f8 <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
 1010488:	e0fffe17 	ldw	r3,-8(fp)
 101048c:	e0fffe17 	ldw	r3,-8(fp)
 1010490:	18c5883a 	add	r2,r3,r3
 1010494:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 1010498:	e13ffa17 	ldw	r4,-24(fp)
 101049c:	e17ffe17 	ldw	r5,-8(fp)
 10104a0:	100476c0 	call	100476c <__mulsi3>
 10104a4:	e13fff17 	ldw	r4,-4(fp)
 10104a8:	2089883a 	add	r4,r4,r2
 10104ac:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10104b0:	e0bffc17 	ldw	r2,-16(fp)
 10104b4:	e0bff715 	stw	r2,-36(fp)
 10104b8:	00000b06 	br	10104e8 <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 10104bc:	e0fff717 	ldw	r3,-36(fp)
 10104c0:	e0fff717 	ldw	r3,-36(fp)
 10104c4:	18c5883a 	add	r2,r3,r3
 10104c8:	1007883a 	mov	r3,r2
 10104cc:	e0bfff17 	ldw	r2,-4(fp)
 10104d0:	1885883a 	add	r2,r3,r2
 10104d4:	e0fff917 	ldw	r3,-28(fp)
 10104d8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10104dc:	e13ff717 	ldw	r4,-36(fp)
 10104e0:	21000044 	addi	r4,r4,1
 10104e4:	e13ff715 	stw	r4,-36(fp)
 10104e8:	e0bffb17 	ldw	r2,-20(fp)
 10104ec:	e0fff717 	ldw	r3,-36(fp)
 10104f0:	10fff22e 	bgeu	r2,r3,10104bc <alt_up_pixel_buffer_dma_draw_hline+0x294>
 10104f4:	00001d06 	br	101056c <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10104f8:	e13ffe17 	ldw	r4,-8(fp)
 10104fc:	e13ffe17 	ldw	r4,-8(fp)
 1010500:	2105883a 	add	r2,r4,r4
 1010504:	1085883a 	add	r2,r2,r2
 1010508:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 101050c:	e13ffa17 	ldw	r4,-24(fp)
 1010510:	e17ffe17 	ldw	r5,-8(fp)
 1010514:	100476c0 	call	100476c <__mulsi3>
 1010518:	e0ffff17 	ldw	r3,-4(fp)
 101051c:	1887883a 	add	r3,r3,r2
 1010520:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1010524:	e13ffc17 	ldw	r4,-16(fp)
 1010528:	e13ff715 	stw	r4,-36(fp)
 101052c:	00000c06 	br	1010560 <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1010530:	e0fff717 	ldw	r3,-36(fp)
 1010534:	e0fff717 	ldw	r3,-36(fp)
 1010538:	18c5883a 	add	r2,r3,r3
 101053c:	1085883a 	add	r2,r2,r2
 1010540:	1007883a 	mov	r3,r2
 1010544:	e0bfff17 	ldw	r2,-4(fp)
 1010548:	1885883a 	add	r2,r3,r2
 101054c:	e0fff917 	ldw	r3,-28(fp)
 1010550:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1010554:	e13ff717 	ldw	r4,-36(fp)
 1010558:	21000044 	addi	r4,r4,1
 101055c:	e13ff715 	stw	r4,-36(fp)
 1010560:	e0bffb17 	ldw	r2,-20(fp)
 1010564:	e0fff717 	ldw	r3,-36(fp)
 1010568:	10fff12e 	bgeu	r2,r3,1010530 <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 101056c:	e037883a 	mov	sp,fp
 1010570:	dfc00117 	ldw	ra,4(sp)
 1010574:	df000017 	ldw	fp,0(sp)
 1010578:	dec00204 	addi	sp,sp,8
 101057c:	f800283a 	ret

01010580 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 1010580:	defff004 	addi	sp,sp,-64
 1010584:	dfc00f15 	stw	ra,60(sp)
 1010588:	df000e15 	stw	fp,56(sp)
 101058c:	df000e04 	addi	fp,sp,56
 1010590:	e13ff215 	stw	r4,-56(fp)
 1010594:	e17ff315 	stw	r5,-52(fp)
 1010598:	e1bff415 	stw	r6,-48(fp)
 101059c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10105a0:	e0bff217 	ldw	r2,-56(fp)
 10105a4:	10800f17 	ldw	r2,60(r2)
 10105a8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10105ac:	e0bff217 	ldw	r2,-56(fp)
 10105b0:	10801017 	ldw	r2,64(r2)
 10105b4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 10105b8:	e0bff317 	ldw	r2,-52(fp)
 10105bc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 10105c0:	e0fff417 	ldw	r3,-48(fp)
 10105c4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 10105c8:	e13ff517 	ldw	r4,-44(fp)
 10105cc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 10105d0:	e0800217 	ldw	r2,8(fp)
 10105d4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 10105d8:	e0fffa17 	ldw	r3,-24(fp)
 10105dc:	e13ffb17 	ldw	r4,-20(fp)
 10105e0:	1900042e 	bgeu	r3,r4,10105f4 <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
 10105e4:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 10105e8:	e0fffa17 	ldw	r3,-24(fp)
 10105ec:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 10105f0:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 10105f4:	e13ffc17 	ldw	r4,-16(fp)
 10105f8:	e0bffe17 	ldw	r2,-8(fp)
 10105fc:	2080d12e 	bgeu	r4,r2,1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
 1010600:	e0fffb17 	ldw	r3,-20(fp)
 1010604:	e13ffd17 	ldw	r4,-12(fp)
 1010608:	19000136 	bltu	r3,r4,1010610 <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 101060c:	0000cd06 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1010610:	e0bffa17 	ldw	r2,-24(fp)
 1010614:	e0fffd17 	ldw	r3,-12(fp)
 1010618:	10c00336 	bltu	r2,r3,1010628 <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
 101061c:	e13ffd17 	ldw	r4,-12(fp)
 1010620:	213fffc4 	addi	r4,r4,-1
 1010624:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1010628:	e0800317 	ldw	r2,12(fp)
 101062c:	10800058 	cmpnei	r2,r2,1
 1010630:	1000041e 	bne	r2,zero,1010644 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 1010634:	e0bff217 	ldw	r2,-56(fp)
 1010638:	10800c17 	ldw	r2,48(r2)
 101063c:	e0bfff15 	stw	r2,-4(fp)
 1010640:	00000306 	br	1010650 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 1010644:	e0bff217 	ldw	r2,-56(fp)
 1010648:	10800b17 	ldw	r2,44(r2)
 101064c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1010650:	e0bff217 	ldw	r2,-56(fp)
 1010654:	10800d17 	ldw	r2,52(r2)
 1010658:	1004c03a 	cmpne	r2,r2,zero
 101065c:	1000571e 	bne	r2,zero,10107bc <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1010660:	e0bff217 	ldw	r2,-56(fp)
 1010664:	10801317 	ldw	r2,76(r2)
 1010668:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 101066c:	e0bff717 	ldw	r2,-36(fp)
 1010670:	e0fffb17 	ldw	r3,-20(fp)
 1010674:	1884983a 	sll	r2,r3,r2
 1010678:	e13fff17 	ldw	r4,-4(fp)
 101067c:	2089883a 	add	r4,r4,r2
 1010680:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1010684:	e0bff217 	ldw	r2,-56(fp)
 1010688:	10800e17 	ldw	r2,56(r2)
 101068c:	10800058 	cmpnei	r2,r2,1
 1010690:	1000151e 	bne	r2,zero,10106e8 <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
 1010694:	e0bffb17 	ldw	r2,-20(fp)
 1010698:	e0bff815 	stw	r2,-32(fp)
 101069c:	00000e06 	br	10106d8 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 10106a0:	e0ffff17 	ldw	r3,-4(fp)
 10106a4:	e0bffc17 	ldw	r2,-16(fp)
 10106a8:	1885883a 	add	r2,r3,r2
 10106ac:	e0fff917 	ldw	r3,-28(fp)
 10106b0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10106b4:	e0fff717 	ldw	r3,-36(fp)
 10106b8:	00800044 	movi	r2,1
 10106bc:	10c4983a 	sll	r2,r2,r3
 10106c0:	e0ffff17 	ldw	r3,-4(fp)
 10106c4:	1887883a 	add	r3,r3,r2
 10106c8:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10106cc:	e13ff817 	ldw	r4,-32(fp)
 10106d0:	21000044 	addi	r4,r4,1
 10106d4:	e13ff815 	stw	r4,-32(fp)
 10106d8:	e0bffa17 	ldw	r2,-24(fp)
 10106dc:	e0fff817 	ldw	r3,-32(fp)
 10106e0:	10ffef2e 	bgeu	r2,r3,10106a0 <alt_up_pixel_buffer_dma_draw_vline+0x120>
 10106e4:	00009706 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10106e8:	e0bff217 	ldw	r2,-56(fp)
 10106ec:	10800e17 	ldw	r2,56(r2)
 10106f0:	10800098 	cmpnei	r2,r2,2
 10106f4:	1000181e 	bne	r2,zero,1010758 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
 10106f8:	e13ffb17 	ldw	r4,-20(fp)
 10106fc:	e13ff815 	stw	r4,-32(fp)
 1010700:	00001106 	br	1010748 <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 1010704:	e0fffc17 	ldw	r3,-16(fp)
 1010708:	e0fffc17 	ldw	r3,-16(fp)
 101070c:	18c5883a 	add	r2,r3,r3
 1010710:	1007883a 	mov	r3,r2
 1010714:	e0bfff17 	ldw	r2,-4(fp)
 1010718:	1885883a 	add	r2,r3,r2
 101071c:	e0fff917 	ldw	r3,-28(fp)
 1010720:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 1010724:	e0fff717 	ldw	r3,-36(fp)
 1010728:	00800044 	movi	r2,1
 101072c:	10c4983a 	sll	r2,r2,r3
 1010730:	e13fff17 	ldw	r4,-4(fp)
 1010734:	2089883a 	add	r4,r4,r2
 1010738:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 101073c:	e0bff817 	ldw	r2,-32(fp)
 1010740:	10800044 	addi	r2,r2,1
 1010744:	e0bff815 	stw	r2,-32(fp)
 1010748:	e0fffa17 	ldw	r3,-24(fp)
 101074c:	e13ff817 	ldw	r4,-32(fp)
 1010750:	193fec2e 	bgeu	r3,r4,1010704 <alt_up_pixel_buffer_dma_draw_vline+0x184>
 1010754:	00007b06 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1010758:	e0bffb17 	ldw	r2,-20(fp)
 101075c:	e0bff815 	stw	r2,-32(fp)
 1010760:	00001206 	br	10107ac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1010764:	e0fffc17 	ldw	r3,-16(fp)
 1010768:	e0fffc17 	ldw	r3,-16(fp)
 101076c:	18c5883a 	add	r2,r3,r3
 1010770:	1085883a 	add	r2,r2,r2
 1010774:	1007883a 	mov	r3,r2
 1010778:	e0bfff17 	ldw	r2,-4(fp)
 101077c:	1885883a 	add	r2,r3,r2
 1010780:	e0fff917 	ldw	r3,-28(fp)
 1010784:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 1010788:	e0fff717 	ldw	r3,-36(fp)
 101078c:	00800044 	movi	r2,1
 1010790:	10c4983a 	sll	r2,r2,r3
 1010794:	e13fff17 	ldw	r4,-4(fp)
 1010798:	2089883a 	add	r4,r4,r2
 101079c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10107a0:	e0bff817 	ldw	r2,-32(fp)
 10107a4:	10800044 	addi	r2,r2,1
 10107a8:	e0bff815 	stw	r2,-32(fp)
 10107ac:	e0fffa17 	ldw	r3,-24(fp)
 10107b0:	e13ff817 	ldw	r4,-32(fp)
 10107b4:	193feb2e 	bgeu	r3,r4,1010764 <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
 10107b8:	00006206 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10107bc:	e0bff217 	ldw	r2,-56(fp)
 10107c0:	10800e17 	ldw	r2,56(r2)
 10107c4:	10800058 	cmpnei	r2,r2,1
 10107c8:	1000191e 	bne	r2,zero,1010830 <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
 10107cc:	e13ffb17 	ldw	r4,-20(fp)
 10107d0:	e17ffe17 	ldw	r5,-8(fp)
 10107d4:	100476c0 	call	100476c <__mulsi3>
 10107d8:	e0ffff17 	ldw	r3,-4(fp)
 10107dc:	1887883a 	add	r3,r3,r2
 10107e0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10107e4:	e13ffb17 	ldw	r4,-20(fp)
 10107e8:	e13ff615 	stw	r4,-40(fp)
 10107ec:	00000c06 	br	1010820 <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 10107f0:	e0ffff17 	ldw	r3,-4(fp)
 10107f4:	e0bffc17 	ldw	r2,-16(fp)
 10107f8:	1885883a 	add	r2,r3,r2
 10107fc:	e0fff917 	ldw	r3,-28(fp)
 1010800:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 1010804:	e0bfff17 	ldw	r2,-4(fp)
 1010808:	e0fffe17 	ldw	r3,-8(fp)
 101080c:	10c5883a 	add	r2,r2,r3
 1010810:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1010814:	e13ff617 	ldw	r4,-40(fp)
 1010818:	21000044 	addi	r4,r4,1
 101081c:	e13ff615 	stw	r4,-40(fp)
 1010820:	e0bffa17 	ldw	r2,-24(fp)
 1010824:	e0fff617 	ldw	r3,-40(fp)
 1010828:	10fff12e 	bgeu	r2,r3,10107f0 <alt_up_pixel_buffer_dma_draw_vline+0x270>
 101082c:	00004506 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1010830:	e0bff217 	ldw	r2,-56(fp)
 1010834:	10800e17 	ldw	r2,56(r2)
 1010838:	10800098 	cmpnei	r2,r2,2
 101083c:	1000201e 	bne	r2,zero,10108c0 <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
 1010840:	e13ffe17 	ldw	r4,-8(fp)
 1010844:	e13ffe17 	ldw	r4,-8(fp)
 1010848:	2105883a 	add	r2,r4,r4
 101084c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1010850:	e13ffb17 	ldw	r4,-20(fp)
 1010854:	e17ffe17 	ldw	r5,-8(fp)
 1010858:	100476c0 	call	100476c <__mulsi3>
 101085c:	e0ffff17 	ldw	r3,-4(fp)
 1010860:	1887883a 	add	r3,r3,r2
 1010864:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1010868:	e13ffb17 	ldw	r4,-20(fp)
 101086c:	e13ff615 	stw	r4,-40(fp)
 1010870:	00000f06 	br	10108b0 <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 1010874:	e0fffc17 	ldw	r3,-16(fp)
 1010878:	e0fffc17 	ldw	r3,-16(fp)
 101087c:	18c5883a 	add	r2,r3,r3
 1010880:	1007883a 	mov	r3,r2
 1010884:	e0bfff17 	ldw	r2,-4(fp)
 1010888:	1885883a 	add	r2,r3,r2
 101088c:	e0fff917 	ldw	r3,-28(fp)
 1010890:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 1010894:	e13fff17 	ldw	r4,-4(fp)
 1010898:	e0bffe17 	ldw	r2,-8(fp)
 101089c:	2089883a 	add	r4,r4,r2
 10108a0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10108a4:	e0fff617 	ldw	r3,-40(fp)
 10108a8:	18c00044 	addi	r3,r3,1
 10108ac:	e0fff615 	stw	r3,-40(fp)
 10108b0:	e13ffa17 	ldw	r4,-24(fp)
 10108b4:	e0bff617 	ldw	r2,-40(fp)
 10108b8:	20bfee2e 	bgeu	r4,r2,1010874 <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
 10108bc:	00002106 	br	1010944 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10108c0:	e0fffe17 	ldw	r3,-8(fp)
 10108c4:	e0fffe17 	ldw	r3,-8(fp)
 10108c8:	18c5883a 	add	r2,r3,r3
 10108cc:	1085883a 	add	r2,r2,r2
 10108d0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10108d4:	e13ffb17 	ldw	r4,-20(fp)
 10108d8:	e17ffe17 	ldw	r5,-8(fp)
 10108dc:	100476c0 	call	100476c <__mulsi3>
 10108e0:	e13fff17 	ldw	r4,-4(fp)
 10108e4:	2089883a 	add	r4,r4,r2
 10108e8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10108ec:	e0bffb17 	ldw	r2,-20(fp)
 10108f0:	e0bff615 	stw	r2,-40(fp)
 10108f4:	00001006 	br	1010938 <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 10108f8:	e0fffc17 	ldw	r3,-16(fp)
 10108fc:	e0fffc17 	ldw	r3,-16(fp)
 1010900:	18c5883a 	add	r2,r3,r3
 1010904:	1085883a 	add	r2,r2,r2
 1010908:	1007883a 	mov	r3,r2
 101090c:	e0bfff17 	ldw	r2,-4(fp)
 1010910:	1885883a 	add	r2,r3,r2
 1010914:	e0fff917 	ldw	r3,-28(fp)
 1010918:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 101091c:	e13fff17 	ldw	r4,-4(fp)
 1010920:	e0bffe17 	ldw	r2,-8(fp)
 1010924:	2089883a 	add	r4,r4,r2
 1010928:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101092c:	e0fff617 	ldw	r3,-40(fp)
 1010930:	18c00044 	addi	r3,r3,1
 1010934:	e0fff615 	stw	r3,-40(fp)
 1010938:	e13ffa17 	ldw	r4,-24(fp)
 101093c:	e0bff617 	ldw	r2,-40(fp)
 1010940:	20bfed2e 	bgeu	r4,r2,10108f8 <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 1010944:	e037883a 	mov	sp,fp
 1010948:	dfc00117 	ldw	ra,4(sp)
 101094c:	df000017 	ldw	fp,0(sp)
 1010950:	dec00204 	addi	sp,sp,8
 1010954:	f800283a 	ret

01010958 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 1010958:	defff804 	addi	sp,sp,-32
 101095c:	dfc00715 	stw	ra,28(sp)
 1010960:	df000615 	stw	fp,24(sp)
 1010964:	df000604 	addi	fp,sp,24
 1010968:	e13ffc15 	stw	r4,-16(fp)
 101096c:	e17ffd15 	stw	r5,-12(fp)
 1010970:	e1bffe15 	stw	r6,-8(fp)
 1010974:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 1010978:	e0800317 	ldw	r2,12(fp)
 101097c:	d8800015 	stw	r2,0(sp)
 1010980:	e0800417 	ldw	r2,16(fp)
 1010984:	d8800115 	stw	r2,4(sp)
 1010988:	e13ffc17 	ldw	r4,-16(fp)
 101098c:	e17ffd17 	ldw	r5,-12(fp)
 1010990:	e1bfff17 	ldw	r6,-4(fp)
 1010994:	e1fffe17 	ldw	r7,-8(fp)
 1010998:	10102280 	call	1010228 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 101099c:	e0800317 	ldw	r2,12(fp)
 10109a0:	d8800015 	stw	r2,0(sp)
 10109a4:	e0800417 	ldw	r2,16(fp)
 10109a8:	d8800115 	stw	r2,4(sp)
 10109ac:	e13ffc17 	ldw	r4,-16(fp)
 10109b0:	e17ffd17 	ldw	r5,-12(fp)
 10109b4:	e1bfff17 	ldw	r6,-4(fp)
 10109b8:	e1c00217 	ldw	r7,8(fp)
 10109bc:	10102280 	call	1010228 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 10109c0:	e0800317 	ldw	r2,12(fp)
 10109c4:	d8800015 	stw	r2,0(sp)
 10109c8:	e0800417 	ldw	r2,16(fp)
 10109cc:	d8800115 	stw	r2,4(sp)
 10109d0:	e13ffc17 	ldw	r4,-16(fp)
 10109d4:	e17ffd17 	ldw	r5,-12(fp)
 10109d8:	e1bffe17 	ldw	r6,-8(fp)
 10109dc:	e1c00217 	ldw	r7,8(fp)
 10109e0:	10105800 	call	1010580 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 10109e4:	e0800317 	ldw	r2,12(fp)
 10109e8:	d8800015 	stw	r2,0(sp)
 10109ec:	e0800417 	ldw	r2,16(fp)
 10109f0:	d8800115 	stw	r2,4(sp)
 10109f4:	e13ffc17 	ldw	r4,-16(fp)
 10109f8:	e17fff17 	ldw	r5,-4(fp)
 10109fc:	e1bffe17 	ldw	r6,-8(fp)
 1010a00:	e1c00217 	ldw	r7,8(fp)
 1010a04:	10105800 	call	1010580 <alt_up_pixel_buffer_dma_draw_vline>
}
 1010a08:	e037883a 	mov	sp,fp
 1010a0c:	dfc00117 	ldw	ra,4(sp)
 1010a10:	df000017 	ldw	fp,0(sp)
 1010a14:	dec00204 	addi	sp,sp,8
 1010a18:	f800283a 	ret

01010a1c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 1010a1c:	defffa04 	addi	sp,sp,-24
 1010a20:	dfc00515 	stw	ra,20(sp)
 1010a24:	df000415 	stw	fp,16(sp)
 1010a28:	df000404 	addi	fp,sp,16
 1010a2c:	e13ffc15 	stw	r4,-16(fp)
 1010a30:	e17ffd15 	stw	r5,-12(fp)
 1010a34:	e1bffe15 	stw	r6,-8(fp)
 1010a38:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 1010a3c:	e0c00317 	ldw	r3,12(fp)
 1010a40:	1804c03a 	cmpne	r2,r3,zero
 1010a44:	10000b1e 	bne	r2,zero,1010a74 <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 1010a48:	e13ffd17 	ldw	r4,-12(fp)
 1010a4c:	e17fff17 	ldw	r5,-4(fp)
 1010a50:	100476c0 	call	100476c <__mulsi3>
 1010a54:	e0fffe17 	ldw	r3,-8(fp)
 1010a58:	10c5883a 	add	r2,r2,r3
 1010a5c:	1007883a 	mov	r3,r2
 1010a60:	e0bffc17 	ldw	r2,-16(fp)
 1010a64:	1885883a 	add	r2,r3,r2
 1010a68:	e0c00217 	ldw	r3,8(fp)
 1010a6c:	10c00025 	stbio	r3,0(r2)
 1010a70:	00001b06 	br	1010ae0 <helper_plot_pixel+0xc4>
	else if (mode == 1)
 1010a74:	e0c00317 	ldw	r3,12(fp)
 1010a78:	18800058 	cmpnei	r2,r3,1
 1010a7c:	10000c1e 	bne	r2,zero,1010ab0 <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 1010a80:	e13ffd17 	ldw	r4,-12(fp)
 1010a84:	e17fff17 	ldw	r5,-4(fp)
 1010a88:	100476c0 	call	100476c <__mulsi3>
 1010a8c:	e0fffe17 	ldw	r3,-8(fp)
 1010a90:	10c5883a 	add	r2,r2,r3
 1010a94:	1085883a 	add	r2,r2,r2
 1010a98:	1007883a 	mov	r3,r2
 1010a9c:	e0bffc17 	ldw	r2,-16(fp)
 1010aa0:	1885883a 	add	r2,r3,r2
 1010aa4:	e0c00217 	ldw	r3,8(fp)
 1010aa8:	10c0002d 	sthio	r3,0(r2)
 1010aac:	00000c06 	br	1010ae0 <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 1010ab0:	e13ffd17 	ldw	r4,-12(fp)
 1010ab4:	e17fff17 	ldw	r5,-4(fp)
 1010ab8:	100476c0 	call	100476c <__mulsi3>
 1010abc:	e0fffe17 	ldw	r3,-8(fp)
 1010ac0:	10c5883a 	add	r2,r2,r3
 1010ac4:	1085883a 	add	r2,r2,r2
 1010ac8:	1085883a 	add	r2,r2,r2
 1010acc:	1007883a 	mov	r3,r2
 1010ad0:	e0bffc17 	ldw	r2,-16(fp)
 1010ad4:	1885883a 	add	r2,r3,r2
 1010ad8:	e0c00217 	ldw	r3,8(fp)
 1010adc:	10c00035 	stwio	r3,0(r2)
}
 1010ae0:	e037883a 	mov	sp,fp
 1010ae4:	dfc00117 	ldw	ra,4(sp)
 1010ae8:	df000017 	ldw	fp,0(sp)
 1010aec:	dec00204 	addi	sp,sp,8
 1010af0:	f800283a 	ret

01010af4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 1010af4:	deffe404 	addi	sp,sp,-112
 1010af8:	dfc01b15 	stw	ra,108(sp)
 1010afc:	df001a15 	stw	fp,104(sp)
 1010b00:	df001a04 	addi	fp,sp,104
 1010b04:	e13fe815 	stw	r4,-96(fp)
 1010b08:	e17fe915 	stw	r5,-92(fp)
 1010b0c:	e1bfea15 	stw	r6,-88(fp)
 1010b10:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 1010b14:	e0bfe917 	ldw	r2,-92(fp)
 1010b18:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 1010b1c:	e0ffea17 	ldw	r3,-88(fp)
 1010b20:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 1010b24:	e13feb17 	ldw	r4,-84(fp)
 1010b28:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 1010b2c:	e0800217 	ldw	r2,8(fp)
 1010b30:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 1010b34:	e0fff717 	ldw	r3,-36(fp)
 1010b38:	e13ff917 	ldw	r4,-28(fp)
 1010b3c:	1905c83a 	sub	r2,r3,r4
 1010b40:	e0bfff15 	stw	r2,-4(fp)
 1010b44:	e0ffff17 	ldw	r3,-4(fp)
 1010b48:	1804403a 	cmpge	r2,r3,zero
 1010b4c:	1000031e 	bne	r2,zero,1010b5c <alt_up_pixel_buffer_dma_draw_line+0x68>
 1010b50:	e13fff17 	ldw	r4,-4(fp)
 1010b54:	0109c83a 	sub	r4,zero,r4
 1010b58:	e13fff15 	stw	r4,-4(fp)
 1010b5c:	e0fff817 	ldw	r3,-32(fp)
 1010b60:	e13ffa17 	ldw	r4,-24(fp)
 1010b64:	1905c83a 	sub	r2,r3,r4
 1010b68:	e0bffe15 	stw	r2,-8(fp)
 1010b6c:	e0fffe17 	ldw	r3,-8(fp)
 1010b70:	1804403a 	cmpge	r2,r3,zero
 1010b74:	1000031e 	bne	r2,zero,1010b84 <alt_up_pixel_buffer_dma_draw_line+0x90>
 1010b78:	e13ffe17 	ldw	r4,-8(fp)
 1010b7c:	0109c83a 	sub	r4,zero,r4
 1010b80:	e13ffe15 	stw	r4,-8(fp)
 1010b84:	e0fffe17 	ldw	r3,-8(fp)
 1010b88:	e13fff17 	ldw	r4,-4(fp)
 1010b8c:	1904803a 	cmplt	r2,r3,r4
 1010b90:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 1010b94:	e0bfe817 	ldw	r2,-96(fp)
 1010b98:	10800e17 	ldw	r2,56(r2)
 1010b9c:	10800060 	cmpeqi	r2,r2,1
 1010ba0:	10000c1e 	bne	r2,zero,1010bd4 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 1010ba4:	e0bfe817 	ldw	r2,-96(fp)
 1010ba8:	10800e17 	ldw	r2,56(r2)
 1010bac:	10800098 	cmpnei	r2,r2,2
 1010bb0:	1000031e 	bne	r2,zero,1010bc0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 1010bb4:	00800044 	movi	r2,1
 1010bb8:	e0bffc15 	stw	r2,-16(fp)
 1010bbc:	00000206 	br	1010bc8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 1010bc0:	00c00084 	movi	r3,2
 1010bc4:	e0fffc15 	stw	r3,-16(fp)
 1010bc8:	e13ffc17 	ldw	r4,-16(fp)
 1010bcc:	e13ffd15 	stw	r4,-12(fp)
 1010bd0:	00000106 	br	1010bd8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 1010bd4:	e03ffd15 	stw	zero,-12(fp)
 1010bd8:	e0bffd17 	ldw	r2,-12(fp)
 1010bdc:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 1010be0:	e0c00317 	ldw	r3,12(fp)
 1010be4:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 1010be8:	e0bfe817 	ldw	r2,-96(fp)
 1010bec:	10800d17 	ldw	r2,52(r2)
 1010bf0:	1004c03a 	cmpne	r2,r2,zero
 1010bf4:	1000091e 	bne	r2,zero,1010c1c <alt_up_pixel_buffer_dma_draw_line+0x128>
 1010bf8:	e0bfe817 	ldw	r2,-96(fp)
 1010bfc:	10c01317 	ldw	r3,76(r2)
 1010c00:	e0bfef17 	ldw	r2,-68(fp)
 1010c04:	1885c83a 	sub	r2,r3,r2
 1010c08:	1007883a 	mov	r3,r2
 1010c0c:	00800044 	movi	r2,1
 1010c10:	10c4983a 	sll	r2,r2,r3
 1010c14:	e0bffb15 	stw	r2,-20(fp)
 1010c18:	00000306 	br	1010c28 <alt_up_pixel_buffer_dma_draw_line+0x134>
 1010c1c:	e0bfe817 	ldw	r2,-96(fp)
 1010c20:	10800f17 	ldw	r2,60(r2)
 1010c24:	e0bffb15 	stw	r2,-20(fp)
 1010c28:	e13ffb17 	ldw	r4,-20(fp)
 1010c2c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 1010c30:	e0800417 	ldw	r2,16(fp)
 1010c34:	10800058 	cmpnei	r2,r2,1
 1010c38:	1000041e 	bne	r2,zero,1010c4c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 1010c3c:	e0bfe817 	ldw	r2,-96(fp)
 1010c40:	10800c17 	ldw	r2,48(r2)
 1010c44:	e0bfed15 	stw	r2,-76(fp)
 1010c48:	00000306 	br	1010c58 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 1010c4c:	e0bfe817 	ldw	r2,-96(fp)
 1010c50:	10800b17 	ldw	r2,44(r2)
 1010c54:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 1010c58:	e0fff603 	ldbu	r3,-40(fp)
 1010c5c:	18803fcc 	andi	r2,r3,255
 1010c60:	1080201c 	xori	r2,r2,128
 1010c64:	10bfe004 	addi	r2,r2,-128
 1010c68:	10800050 	cmplti	r2,r2,1
 1010c6c:	10000c1e 	bne	r2,zero,1010ca0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 1010c70:	e13ffa17 	ldw	r4,-24(fp)
 1010c74:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 1010c78:	e0bff917 	ldw	r2,-28(fp)
 1010c7c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 1010c80:	e0fff317 	ldw	r3,-52(fp)
 1010c84:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 1010c88:	e13ff817 	ldw	r4,-32(fp)
 1010c8c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 1010c90:	e0bff717 	ldw	r2,-36(fp)
 1010c94:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 1010c98:	e0fff317 	ldw	r3,-52(fp)
 1010c9c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 1010ca0:	e13ff817 	ldw	r4,-32(fp)
 1010ca4:	e0bffa17 	ldw	r2,-24(fp)
 1010ca8:	20800c0e 	bge	r4,r2,1010cdc <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 1010cac:	e0fffa17 	ldw	r3,-24(fp)
 1010cb0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 1010cb4:	e13ff817 	ldw	r4,-32(fp)
 1010cb8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 1010cbc:	e0bff317 	ldw	r2,-52(fp)
 1010cc0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 1010cc4:	e0fff917 	ldw	r3,-28(fp)
 1010cc8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 1010ccc:	e13ff717 	ldw	r4,-36(fp)
 1010cd0:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 1010cd4:	e0bff317 	ldw	r2,-52(fp)
 1010cd8:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 1010cdc:	e0fff817 	ldw	r3,-32(fp)
 1010ce0:	e13ffa17 	ldw	r4,-24(fp)
 1010ce4:	1907c83a 	sub	r3,r3,r4
 1010ce8:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 1010cec:	e0fff717 	ldw	r3,-36(fp)
 1010cf0:	e13ff917 	ldw	r4,-28(fp)
 1010cf4:	1905c83a 	sub	r2,r3,r4
 1010cf8:	e0bff415 	stw	r2,-48(fp)
 1010cfc:	e0fff417 	ldw	r3,-48(fp)
 1010d00:	1804403a 	cmpge	r2,r3,zero
 1010d04:	1000031e 	bne	r2,zero,1010d14 <alt_up_pixel_buffer_dma_draw_line+0x220>
 1010d08:	e13ff417 	ldw	r4,-48(fp)
 1010d0c:	0109c83a 	sub	r4,zero,r4
 1010d10:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 1010d14:	e0fff517 	ldw	r3,-44(fp)
 1010d18:	1804d7fa 	srli	r2,r3,31
 1010d1c:	e13ff517 	ldw	r4,-44(fp)
 1010d20:	1105883a 	add	r2,r2,r4
 1010d24:	1005d07a 	srai	r2,r2,1
 1010d28:	0085c83a 	sub	r2,zero,r2
 1010d2c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 1010d30:	e0bff917 	ldw	r2,-28(fp)
 1010d34:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 1010d38:	e0fff917 	ldw	r3,-28(fp)
 1010d3c:	e13ff717 	ldw	r4,-36(fp)
 1010d40:	1900030e 	bge	r3,r4,1010d50 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 1010d44:	00800044 	movi	r2,1
 1010d48:	e0bff215 	stw	r2,-56(fp)
 1010d4c:	00000206 	br	1010d58 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 1010d50:	00ffffc4 	movi	r3,-1
 1010d54:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 1010d58:	e13ff603 	ldbu	r4,-40(fp)
 1010d5c:	20803fcc 	andi	r2,r4,255
 1010d60:	1080201c 	xori	r2,r2,128
 1010d64:	10bfe004 	addi	r2,r2,-128
 1010d68:	10800058 	cmpnei	r2,r2,1
 1010d6c:	1000221e 	bne	r2,zero,1010df8 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 1010d70:	e0bffa17 	ldw	r2,-24(fp)
 1010d74:	e0bff115 	stw	r2,-60(fp)
 1010d78:	00001b06 	br	1010de8 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 1010d7c:	e0ffee17 	ldw	r3,-72(fp)
 1010d80:	d8c00015 	stw	r3,0(sp)
 1010d84:	e13fef17 	ldw	r4,-68(fp)
 1010d88:	d9000115 	stw	r4,4(sp)
 1010d8c:	e13fed17 	ldw	r4,-76(fp)
 1010d90:	e17fec17 	ldw	r5,-80(fp)
 1010d94:	e1bff017 	ldw	r6,-64(fp)
 1010d98:	e1fff117 	ldw	r7,-60(fp)
 1010d9c:	1010a1c0 	call	1010a1c <helper_plot_pixel>
			error = error + deltay;
 1010da0:	e0bff317 	ldw	r2,-52(fp)
 1010da4:	e0fff417 	ldw	r3,-48(fp)
 1010da8:	10c5883a 	add	r2,r2,r3
 1010dac:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 1010db0:	e13ff317 	ldw	r4,-52(fp)
 1010db4:	20800050 	cmplti	r2,r4,1
 1010db8:	1000081e 	bne	r2,zero,1010ddc <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 1010dbc:	e0bff017 	ldw	r2,-64(fp)
 1010dc0:	e0fff217 	ldw	r3,-56(fp)
 1010dc4:	10c5883a 	add	r2,r2,r3
 1010dc8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 1010dcc:	e13ff317 	ldw	r4,-52(fp)
 1010dd0:	e0bff517 	ldw	r2,-44(fp)
 1010dd4:	2089c83a 	sub	r4,r4,r2
 1010dd8:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1010ddc:	e0fff117 	ldw	r3,-60(fp)
 1010de0:	18c00044 	addi	r3,r3,1
 1010de4:	e0fff115 	stw	r3,-60(fp)
 1010de8:	e13ff817 	ldw	r4,-32(fp)
 1010dec:	e0bff117 	ldw	r2,-60(fp)
 1010df0:	20bfe20e 	bge	r4,r2,1010d7c <alt_up_pixel_buffer_dma_draw_line+0x288>
 1010df4:	00002106 	br	1010e7c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1010df8:	e0fffa17 	ldw	r3,-24(fp)
 1010dfc:	e0fff115 	stw	r3,-60(fp)
 1010e00:	00001b06 	br	1010e70 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1010e04:	e13fee17 	ldw	r4,-72(fp)
 1010e08:	d9000015 	stw	r4,0(sp)
 1010e0c:	e0bfef17 	ldw	r2,-68(fp)
 1010e10:	d8800115 	stw	r2,4(sp)
 1010e14:	e13fed17 	ldw	r4,-76(fp)
 1010e18:	e17fec17 	ldw	r5,-80(fp)
 1010e1c:	e1bff117 	ldw	r6,-60(fp)
 1010e20:	e1fff017 	ldw	r7,-64(fp)
 1010e24:	1010a1c0 	call	1010a1c <helper_plot_pixel>
			error = error + deltay;
 1010e28:	e0fff317 	ldw	r3,-52(fp)
 1010e2c:	e13ff417 	ldw	r4,-48(fp)
 1010e30:	1907883a 	add	r3,r3,r4
 1010e34:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1010e38:	e0fff317 	ldw	r3,-52(fp)
 1010e3c:	18800050 	cmplti	r2,r3,1
 1010e40:	1000081e 	bne	r2,zero,1010e64 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1010e44:	e13ff017 	ldw	r4,-64(fp)
 1010e48:	e0bff217 	ldw	r2,-56(fp)
 1010e4c:	2089883a 	add	r4,r4,r2
 1010e50:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1010e54:	e0fff317 	ldw	r3,-52(fp)
 1010e58:	e13ff517 	ldw	r4,-44(fp)
 1010e5c:	1907c83a 	sub	r3,r3,r4
 1010e60:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1010e64:	e0bff117 	ldw	r2,-60(fp)
 1010e68:	10800044 	addi	r2,r2,1
 1010e6c:	e0bff115 	stw	r2,-60(fp)
 1010e70:	e0fff817 	ldw	r3,-32(fp)
 1010e74:	e13ff117 	ldw	r4,-60(fp)
 1010e78:	193fe20e 	bge	r3,r4,1010e04 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1010e7c:	e037883a 	mov	sp,fp
 1010e80:	dfc00117 	ldw	ra,4(sp)
 1010e84:	df000017 	ldw	fp,0(sp)
 1010e88:	dec00204 	addi	sp,sp,8
 1010e8c:	f800283a 	ret

01010e90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1010e90:	defff404 	addi	sp,sp,-48
 1010e94:	df000b15 	stw	fp,44(sp)
 1010e98:	df000b04 	addi	fp,sp,44
 1010e9c:	e13ffb15 	stw	r4,-20(fp)
 1010ea0:	e17ffc15 	stw	r5,-16(fp)
 1010ea4:	e1bffd15 	stw	r6,-12(fp)
 1010ea8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1010eac:	e03ff915 	stw	zero,-28(fp)
 1010eb0:	00804074 	movhi	r2,257
 1010eb4:	10983904 	addi	r2,r2,24804
 1010eb8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1010ebc:	1005003a 	cmpeq	r2,r2,zero
 1010ec0:	1000411e 	bne	r2,zero,1010fc8 <alt_alarm_start+0x138>
  {
    if (alarm)
 1010ec4:	e0bffb17 	ldw	r2,-20(fp)
 1010ec8:	1005003a 	cmpeq	r2,r2,zero
 1010ecc:	10003b1e 	bne	r2,zero,1010fbc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1010ed0:	e0fffb17 	ldw	r3,-20(fp)
 1010ed4:	e0bffd17 	ldw	r2,-12(fp)
 1010ed8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1010edc:	e0fffb17 	ldw	r3,-20(fp)
 1010ee0:	e0bffe17 	ldw	r2,-8(fp)
 1010ee4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010ee8:	0005303a 	rdctl	r2,status
 1010eec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010ef0:	e0fff817 	ldw	r3,-32(fp)
 1010ef4:	00bfff84 	movi	r2,-2
 1010ef8:	1884703a 	and	r2,r3,r2
 1010efc:	1001703a 	wrctl	status,r2
  
  return context;
 1010f00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1010f04:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1010f08:	00804074 	movhi	r2,257
 1010f0c:	10983a04 	addi	r2,r2,24808
 1010f10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1010f14:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1010f18:	e0fffc17 	ldw	r3,-16(fp)
 1010f1c:	e0bff917 	ldw	r2,-28(fp)
 1010f20:	1885883a 	add	r2,r3,r2
 1010f24:	10c00044 	addi	r3,r2,1
 1010f28:	e0bffb17 	ldw	r2,-20(fp)
 1010f2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010f30:	e0bffb17 	ldw	r2,-20(fp)
 1010f34:	10c00217 	ldw	r3,8(r2)
 1010f38:	e0bff917 	ldw	r2,-28(fp)
 1010f3c:	1880042e 	bgeu	r3,r2,1010f50 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1010f40:	e0fffb17 	ldw	r3,-20(fp)
 1010f44:	00800044 	movi	r2,1
 1010f48:	18800405 	stb	r2,16(r3)
 1010f4c:	00000206 	br	1010f58 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1010f50:	e0bffb17 	ldw	r2,-20(fp)
 1010f54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010f58:	e0fffb17 	ldw	r3,-20(fp)
 1010f5c:	00804074 	movhi	r2,257
 1010f60:	10916304 	addi	r2,r2,17804
 1010f64:	e0bff615 	stw	r2,-40(fp)
 1010f68:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010f6c:	e0fff717 	ldw	r3,-36(fp)
 1010f70:	e0bff617 	ldw	r2,-40(fp)
 1010f74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010f78:	e0bff617 	ldw	r2,-40(fp)
 1010f7c:	10c00017 	ldw	r3,0(r2)
 1010f80:	e0bff717 	ldw	r2,-36(fp)
 1010f84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010f88:	e0bff617 	ldw	r2,-40(fp)
 1010f8c:	10c00017 	ldw	r3,0(r2)
 1010f90:	e0bff717 	ldw	r2,-36(fp)
 1010f94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010f98:	e0fff617 	ldw	r3,-40(fp)
 1010f9c:	e0bff717 	ldw	r2,-36(fp)
 1010fa0:	18800015 	stw	r2,0(r3)
 1010fa4:	e0bffa17 	ldw	r2,-24(fp)
 1010fa8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010fac:	e0bff517 	ldw	r2,-44(fp)
 1010fb0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1010fb4:	e03fff15 	stw	zero,-4(fp)
 1010fb8:	00000506 	br	1010fd0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1010fbc:	00bffa84 	movi	r2,-22
 1010fc0:	e0bfff15 	stw	r2,-4(fp)
 1010fc4:	00000206 	br	1010fd0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1010fc8:	00bfde84 	movi	r2,-134
 1010fcc:	e0bfff15 	stw	r2,-4(fp)
 1010fd0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1010fd4:	e037883a 	mov	sp,fp
 1010fd8:	df000017 	ldw	fp,0(sp)
 1010fdc:	dec00104 	addi	sp,sp,4
 1010fe0:	f800283a 	ret

01010fe4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1010fe4:	defffa04 	addi	sp,sp,-24
 1010fe8:	dfc00515 	stw	ra,20(sp)
 1010fec:	df000415 	stw	fp,16(sp)
 1010ff0:	df000404 	addi	fp,sp,16
 1010ff4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1010ff8:	008000c4 	movi	r2,3
 1010ffc:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 1011000:	e13ffc17 	ldw	r4,-16(fp)
 1011004:	014003f4 	movhi	r5,15
 1011008:	29509004 	addi	r5,r5,16960
 101100c:	100476c0 	call	100476c <__mulsi3>
 1011010:	100b883a 	mov	r5,r2
 1011014:	0100bef4 	movhi	r4,763
 1011018:	213c2004 	addi	r4,r4,-3968
 101101c:	100475c0 	call	100475c <__udivsi3>
 1011020:	100b883a 	mov	r5,r2
 1011024:	01200034 	movhi	r4,32768
 1011028:	213fffc4 	addi	r4,r4,-1
 101102c:	100475c0 	call	100475c <__udivsi3>
 1011030:	100b883a 	mov	r5,r2
 1011034:	e13fff17 	ldw	r4,-4(fp)
 1011038:	100475c0 	call	100475c <__udivsi3>
 101103c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1011040:	e0bffd17 	ldw	r2,-12(fp)
 1011044:	1005003a 	cmpeq	r2,r2,zero
 1011048:	10002a1e 	bne	r2,zero,10110f4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 101104c:	e03ffe15 	stw	zero,-8(fp)
 1011050:	00001706 	br	10110b0 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1011054:	00a00034 	movhi	r2,32768
 1011058:	10bfffc4 	addi	r2,r2,-1
 101105c:	10bfffc4 	addi	r2,r2,-1
 1011060:	103ffe1e 	bne	r2,zero,101105c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1011064:	e13ffc17 	ldw	r4,-16(fp)
 1011068:	014003f4 	movhi	r5,15
 101106c:	29509004 	addi	r5,r5,16960
 1011070:	100476c0 	call	100476c <__mulsi3>
 1011074:	100b883a 	mov	r5,r2
 1011078:	0100bef4 	movhi	r4,763
 101107c:	213c2004 	addi	r4,r4,-3968
 1011080:	100475c0 	call	100475c <__udivsi3>
 1011084:	100b883a 	mov	r5,r2
 1011088:	01200034 	movhi	r4,32768
 101108c:	213fffc4 	addi	r4,r4,-1
 1011090:	100475c0 	call	100475c <__udivsi3>
 1011094:	1007883a 	mov	r3,r2
 1011098:	e0bfff17 	ldw	r2,-4(fp)
 101109c:	10c5c83a 	sub	r2,r2,r3
 10110a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10110a4:	e0bffe17 	ldw	r2,-8(fp)
 10110a8:	10800044 	addi	r2,r2,1
 10110ac:	e0bffe15 	stw	r2,-8(fp)
 10110b0:	e0fffe17 	ldw	r3,-8(fp)
 10110b4:	e0bffd17 	ldw	r2,-12(fp)
 10110b8:	18bfe616 	blt	r3,r2,1011054 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10110bc:	e13ffc17 	ldw	r4,-16(fp)
 10110c0:	014003f4 	movhi	r5,15
 10110c4:	29509004 	addi	r5,r5,16960
 10110c8:	100476c0 	call	100476c <__mulsi3>
 10110cc:	100b883a 	mov	r5,r2
 10110d0:	0100bef4 	movhi	r4,763
 10110d4:	213c2004 	addi	r4,r4,-3968
 10110d8:	100475c0 	call	100475c <__udivsi3>
 10110dc:	1009883a 	mov	r4,r2
 10110e0:	e17fff17 	ldw	r5,-4(fp)
 10110e4:	100476c0 	call	100476c <__mulsi3>
 10110e8:	10bfffc4 	addi	r2,r2,-1
 10110ec:	103ffe1e 	bne	r2,zero,10110e8 <alt_busy_sleep+0x104>
 10110f0:	00000d06 	br	1011128 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10110f4:	e13ffc17 	ldw	r4,-16(fp)
 10110f8:	014003f4 	movhi	r5,15
 10110fc:	29509004 	addi	r5,r5,16960
 1011100:	100476c0 	call	100476c <__mulsi3>
 1011104:	100b883a 	mov	r5,r2
 1011108:	0100bef4 	movhi	r4,763
 101110c:	213c2004 	addi	r4,r4,-3968
 1011110:	100475c0 	call	100475c <__udivsi3>
 1011114:	1009883a 	mov	r4,r2
 1011118:	e17fff17 	ldw	r5,-4(fp)
 101111c:	100476c0 	call	100476c <__mulsi3>
 1011120:	10bfffc4 	addi	r2,r2,-1
 1011124:	00bffe16 	blt	zero,r2,1011120 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1011128:	0005883a 	mov	r2,zero
}
 101112c:	e037883a 	mov	sp,fp
 1011130:	dfc00117 	ldw	ra,4(sp)
 1011134:	df000017 	ldw	fp,0(sp)
 1011138:	dec00204 	addi	sp,sp,8
 101113c:	f800283a 	ret

01011140 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1011140:	deffff04 	addi	sp,sp,-4
 1011144:	df000015 	stw	fp,0(sp)
 1011148:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101114c:	e037883a 	mov	sp,fp
 1011150:	df000017 	ldw	fp,0(sp)
 1011154:	dec00104 	addi	sp,sp,4
 1011158:	f800283a 	ret

0101115c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101115c:	defff904 	addi	sp,sp,-28
 1011160:	dfc00615 	stw	ra,24(sp)
 1011164:	df000515 	stw	fp,20(sp)
 1011168:	df000504 	addi	fp,sp,20
 101116c:	e13ffd15 	stw	r4,-12(fp)
 1011170:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1011174:	e0bffd17 	ldw	r2,-12(fp)
 1011178:	1005003a 	cmpeq	r2,r2,zero
 101117c:	1000041e 	bne	r2,zero,1011190 <alt_dev_llist_insert+0x34>
 1011180:	e0bffd17 	ldw	r2,-12(fp)
 1011184:	10800217 	ldw	r2,8(r2)
 1011188:	1004c03a 	cmpne	r2,r2,zero
 101118c:	1000071e 	bne	r2,zero,10111ac <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1011190:	10112100 	call	1011210 <alt_get_errno>
 1011194:	1007883a 	mov	r3,r2
 1011198:	00800584 	movi	r2,22
 101119c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10111a0:	00bffa84 	movi	r2,-22
 10111a4:	e0bfff15 	stw	r2,-4(fp)
 10111a8:	00001306 	br	10111f8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10111ac:	e0fffd17 	ldw	r3,-12(fp)
 10111b0:	e0bffe17 	ldw	r2,-8(fp)
 10111b4:	e0bffb15 	stw	r2,-20(fp)
 10111b8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10111bc:	e0fffc17 	ldw	r3,-16(fp)
 10111c0:	e0bffb17 	ldw	r2,-20(fp)
 10111c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10111c8:	e0bffb17 	ldw	r2,-20(fp)
 10111cc:	10c00017 	ldw	r3,0(r2)
 10111d0:	e0bffc17 	ldw	r2,-16(fp)
 10111d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10111d8:	e0bffb17 	ldw	r2,-20(fp)
 10111dc:	10c00017 	ldw	r3,0(r2)
 10111e0:	e0bffc17 	ldw	r2,-16(fp)
 10111e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10111e8:	e0fffb17 	ldw	r3,-20(fp)
 10111ec:	e0bffc17 	ldw	r2,-16(fp)
 10111f0:	18800015 	stw	r2,0(r3)

  return 0;  
 10111f4:	e03fff15 	stw	zero,-4(fp)
 10111f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10111fc:	e037883a 	mov	sp,fp
 1011200:	dfc00117 	ldw	ra,4(sp)
 1011204:	df000017 	ldw	fp,0(sp)
 1011208:	dec00204 	addi	sp,sp,8
 101120c:	f800283a 	ret

01011210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011210:	defffd04 	addi	sp,sp,-12
 1011214:	dfc00215 	stw	ra,8(sp)
 1011218:	df000115 	stw	fp,4(sp)
 101121c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011220:	00804074 	movhi	r2,257
 1011224:	10916004 	addi	r2,r2,17792
 1011228:	10800017 	ldw	r2,0(r2)
 101122c:	1005003a 	cmpeq	r2,r2,zero
 1011230:	1000061e 	bne	r2,zero,101124c <alt_get_errno+0x3c>
 1011234:	00804074 	movhi	r2,257
 1011238:	10916004 	addi	r2,r2,17792
 101123c:	10800017 	ldw	r2,0(r2)
 1011240:	103ee83a 	callr	r2
 1011244:	e0bfff15 	stw	r2,-4(fp)
 1011248:	00000306 	br	1011258 <alt_get_errno+0x48>
 101124c:	00804074 	movhi	r2,257
 1011250:	10983104 	addi	r2,r2,24772
 1011254:	e0bfff15 	stw	r2,-4(fp)
 1011258:	e0bfff17 	ldw	r2,-4(fp)
}
 101125c:	e037883a 	mov	sp,fp
 1011260:	dfc00117 	ldw	ra,4(sp)
 1011264:	df000017 	ldw	fp,0(sp)
 1011268:	dec00204 	addi	sp,sp,8
 101126c:	f800283a 	ret

01011270 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1011270:	defffd04 	addi	sp,sp,-12
 1011274:	dfc00215 	stw	ra,8(sp)
 1011278:	df000115 	stw	fp,4(sp)
 101127c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1011280:	00bfff04 	movi	r2,-4
 1011284:	00c04074 	movhi	r3,257
 1011288:	18c8ee04 	addi	r3,r3,9144
 101128c:	1885883a 	add	r2,r3,r2
 1011290:	e0bfff15 	stw	r2,-4(fp)
 1011294:	00000606 	br	10112b0 <_do_ctors+0x40>
        (*ctor) (); 
 1011298:	e0bfff17 	ldw	r2,-4(fp)
 101129c:	10800017 	ldw	r2,0(r2)
 10112a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10112a4:	e0bfff17 	ldw	r2,-4(fp)
 10112a8:	10bfff04 	addi	r2,r2,-4
 10112ac:	e0bfff15 	stw	r2,-4(fp)
 10112b0:	e0ffff17 	ldw	r3,-4(fp)
 10112b4:	00804074 	movhi	r2,257
 10112b8:	1088ed04 	addi	r2,r2,9140
 10112bc:	18bff62e 	bgeu	r3,r2,1011298 <_do_ctors+0x28>
        (*ctor) (); 
}
 10112c0:	e037883a 	mov	sp,fp
 10112c4:	dfc00117 	ldw	ra,4(sp)
 10112c8:	df000017 	ldw	fp,0(sp)
 10112cc:	dec00204 	addi	sp,sp,8
 10112d0:	f800283a 	ret

010112d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10112d4:	defffd04 	addi	sp,sp,-12
 10112d8:	dfc00215 	stw	ra,8(sp)
 10112dc:	df000115 	stw	fp,4(sp)
 10112e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10112e4:	00bfff04 	movi	r2,-4
 10112e8:	00c04074 	movhi	r3,257
 10112ec:	18c8ee04 	addi	r3,r3,9144
 10112f0:	1885883a 	add	r2,r3,r2
 10112f4:	e0bfff15 	stw	r2,-4(fp)
 10112f8:	00000606 	br	1011314 <_do_dtors+0x40>
        (*dtor) (); 
 10112fc:	e0bfff17 	ldw	r2,-4(fp)
 1011300:	10800017 	ldw	r2,0(r2)
 1011304:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1011308:	e0bfff17 	ldw	r2,-4(fp)
 101130c:	10bfff04 	addi	r2,r2,-4
 1011310:	e0bfff15 	stw	r2,-4(fp)
 1011314:	e0ffff17 	ldw	r3,-4(fp)
 1011318:	00804074 	movhi	r2,257
 101131c:	1088ee04 	addi	r2,r2,9144
 1011320:	18bff62e 	bgeu	r3,r2,10112fc <_do_dtors+0x28>
        (*dtor) (); 
}
 1011324:	e037883a 	mov	sp,fp
 1011328:	dfc00117 	ldw	ra,4(sp)
 101132c:	df000017 	ldw	fp,0(sp)
 1011330:	dec00204 	addi	sp,sp,8
 1011334:	f800283a 	ret

01011338 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1011338:	defff904 	addi	sp,sp,-28
 101133c:	dfc00615 	stw	ra,24(sp)
 1011340:	df000515 	stw	fp,20(sp)
 1011344:	df000504 	addi	fp,sp,20
 1011348:	e13ffd15 	stw	r4,-12(fp)
 101134c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1011350:	e0bffe17 	ldw	r2,-8(fp)
 1011354:	10800017 	ldw	r2,0(r2)
 1011358:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101135c:	e13ffd17 	ldw	r4,-12(fp)
 1011360:	1005a300 	call	1005a30 <strlen>
 1011364:	10800044 	addi	r2,r2,1
 1011368:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101136c:	00000d06 	br	10113a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1011370:	e0bffc17 	ldw	r2,-16(fp)
 1011374:	11000217 	ldw	r4,8(r2)
 1011378:	e1bffb17 	ldw	r6,-20(fp)
 101137c:	e17ffd17 	ldw	r5,-12(fp)
 1011380:	1011f8c0 	call	1011f8c <memcmp>
 1011384:	1004c03a 	cmpne	r2,r2,zero
 1011388:	1000031e 	bne	r2,zero,1011398 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101138c:	e0bffc17 	ldw	r2,-16(fp)
 1011390:	e0bfff15 	stw	r2,-4(fp)
 1011394:	00000706 	br	10113b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1011398:	e0bffc17 	ldw	r2,-16(fp)
 101139c:	10800017 	ldw	r2,0(r2)
 10113a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10113a4:	e0fffe17 	ldw	r3,-8(fp)
 10113a8:	e0bffc17 	ldw	r2,-16(fp)
 10113ac:	10fff01e 	bne	r2,r3,1011370 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10113b0:	e03fff15 	stw	zero,-4(fp)
 10113b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10113b8:	e037883a 	mov	sp,fp
 10113bc:	dfc00117 	ldw	ra,4(sp)
 10113c0:	df000017 	ldw	fp,0(sp)
 10113c4:	dec00204 	addi	sp,sp,8
 10113c8:	f800283a 	ret

010113cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10113cc:	defffe04 	addi	sp,sp,-8
 10113d0:	dfc00115 	stw	ra,4(sp)
 10113d4:	df000015 	stw	fp,0(sp)
 10113d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 10113dc:	0009883a 	mov	r4,zero
 10113e0:	01440004 	movi	r5,4096
 10113e4:	1011eb00 	call	1011eb0 <alt_icache_flush>
#endif
}
 10113e8:	e037883a 	mov	sp,fp
 10113ec:	dfc00117 	ldw	ra,4(sp)
 10113f0:	df000017 	ldw	fp,0(sp)
 10113f4:	dec00204 	addi	sp,sp,8
 10113f8:	f800283a 	ret

010113fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10113fc:	defff904 	addi	sp,sp,-28
 1011400:	dfc00615 	stw	ra,24(sp)
 1011404:	df000515 	stw	fp,20(sp)
 1011408:	df000504 	addi	fp,sp,20
 101140c:	e13ffc15 	stw	r4,-16(fp)
 1011410:	e17ffd15 	stw	r5,-12(fp)
 1011414:	e1bffe15 	stw	r6,-8(fp)
 1011418:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 101141c:	e0800217 	ldw	r2,8(fp)
 1011420:	d8800015 	stw	r2,0(sp)
 1011424:	e13ffc17 	ldw	r4,-16(fp)
 1011428:	e17ffd17 	ldw	r5,-12(fp)
 101142c:	e1bffe17 	ldw	r6,-8(fp)
 1011430:	e1ffff17 	ldw	r7,-4(fp)
 1011434:	10115d00 	call	10115d0 <alt_iic_isr_register>
}  
 1011438:	e037883a 	mov	sp,fp
 101143c:	dfc00117 	ldw	ra,4(sp)
 1011440:	df000017 	ldw	fp,0(sp)
 1011444:	dec00204 	addi	sp,sp,8
 1011448:	f800283a 	ret

0101144c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 101144c:	defff904 	addi	sp,sp,-28
 1011450:	df000615 	stw	fp,24(sp)
 1011454:	df000604 	addi	fp,sp,24
 1011458:	e13ffe15 	stw	r4,-8(fp)
 101145c:	e17fff15 	stw	r5,-4(fp)
 1011460:	e0bfff17 	ldw	r2,-4(fp)
 1011464:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011468:	0005303a 	rdctl	r2,status
 101146c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011470:	e0fffb17 	ldw	r3,-20(fp)
 1011474:	00bfff84 	movi	r2,-2
 1011478:	1884703a 	and	r2,r3,r2
 101147c:	1001703a 	wrctl	status,r2
  
  return context;
 1011480:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1011484:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1011488:	e0fffc17 	ldw	r3,-16(fp)
 101148c:	00800044 	movi	r2,1
 1011490:	10c4983a 	sll	r2,r2,r3
 1011494:	1007883a 	mov	r3,r2
 1011498:	00804074 	movhi	r2,257
 101149c:	10983804 	addi	r2,r2,24800
 10114a0:	10800017 	ldw	r2,0(r2)
 10114a4:	1886b03a 	or	r3,r3,r2
 10114a8:	00804074 	movhi	r2,257
 10114ac:	10983804 	addi	r2,r2,24800
 10114b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10114b4:	00804074 	movhi	r2,257
 10114b8:	10983804 	addi	r2,r2,24800
 10114bc:	10800017 	ldw	r2,0(r2)
 10114c0:	100170fa 	wrctl	ienable,r2
 10114c4:	e0bffd17 	ldw	r2,-12(fp)
 10114c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10114cc:	e0bffa17 	ldw	r2,-24(fp)
 10114d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10114d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 10114d8:	e037883a 	mov	sp,fp
 10114dc:	df000017 	ldw	fp,0(sp)
 10114e0:	dec00104 	addi	sp,sp,4
 10114e4:	f800283a 	ret

010114e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 10114e8:	defff904 	addi	sp,sp,-28
 10114ec:	df000615 	stw	fp,24(sp)
 10114f0:	df000604 	addi	fp,sp,24
 10114f4:	e13ffe15 	stw	r4,-8(fp)
 10114f8:	e17fff15 	stw	r5,-4(fp)
 10114fc:	e0bfff17 	ldw	r2,-4(fp)
 1011500:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011504:	0005303a 	rdctl	r2,status
 1011508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101150c:	e0fffb17 	ldw	r3,-20(fp)
 1011510:	00bfff84 	movi	r2,-2
 1011514:	1884703a 	and	r2,r3,r2
 1011518:	1001703a 	wrctl	status,r2
  
  return context;
 101151c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1011520:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1011524:	e0fffc17 	ldw	r3,-16(fp)
 1011528:	00800044 	movi	r2,1
 101152c:	10c4983a 	sll	r2,r2,r3
 1011530:	0084303a 	nor	r2,zero,r2
 1011534:	1007883a 	mov	r3,r2
 1011538:	00804074 	movhi	r2,257
 101153c:	10983804 	addi	r2,r2,24800
 1011540:	10800017 	ldw	r2,0(r2)
 1011544:	1886703a 	and	r3,r3,r2
 1011548:	00804074 	movhi	r2,257
 101154c:	10983804 	addi	r2,r2,24800
 1011550:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1011554:	00804074 	movhi	r2,257
 1011558:	10983804 	addi	r2,r2,24800
 101155c:	10800017 	ldw	r2,0(r2)
 1011560:	100170fa 	wrctl	ienable,r2
 1011564:	e0bffd17 	ldw	r2,-12(fp)
 1011568:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101156c:	e0bffa17 	ldw	r2,-24(fp)
 1011570:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1011574:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1011578:	e037883a 	mov	sp,fp
 101157c:	df000017 	ldw	fp,0(sp)
 1011580:	dec00104 	addi	sp,sp,4
 1011584:	f800283a 	ret

01011588 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1011588:	defffc04 	addi	sp,sp,-16
 101158c:	df000315 	stw	fp,12(sp)
 1011590:	df000304 	addi	fp,sp,12
 1011594:	e13ffe15 	stw	r4,-8(fp)
 1011598:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 101159c:	000530fa 	rdctl	r2,ienable
 10115a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10115a4:	e0ffff17 	ldw	r3,-4(fp)
 10115a8:	00800044 	movi	r2,1
 10115ac:	10c4983a 	sll	r2,r2,r3
 10115b0:	1007883a 	mov	r3,r2
 10115b4:	e0bffd17 	ldw	r2,-12(fp)
 10115b8:	1884703a 	and	r2,r3,r2
 10115bc:	1004c03a 	cmpne	r2,r2,zero
}
 10115c0:	e037883a 	mov	sp,fp
 10115c4:	df000017 	ldw	fp,0(sp)
 10115c8:	dec00104 	addi	sp,sp,4
 10115cc:	f800283a 	ret

010115d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10115d0:	defff404 	addi	sp,sp,-48
 10115d4:	dfc00b15 	stw	ra,44(sp)
 10115d8:	df000a15 	stw	fp,40(sp)
 10115dc:	df000a04 	addi	fp,sp,40
 10115e0:	e13ffb15 	stw	r4,-20(fp)
 10115e4:	e17ffc15 	stw	r5,-16(fp)
 10115e8:	e1bffd15 	stw	r6,-12(fp)
 10115ec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 10115f0:	00bffa84 	movi	r2,-22
 10115f4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10115f8:	e0bffc17 	ldw	r2,-16(fp)
 10115fc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1011600:	e0bff917 	ldw	r2,-28(fp)
 1011604:	10800808 	cmpgei	r2,r2,32
 1011608:	1000291e 	bne	r2,zero,10116b0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101160c:	0005303a 	rdctl	r2,status
 1011610:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011614:	e0fff717 	ldw	r3,-36(fp)
 1011618:	00bfff84 	movi	r2,-2
 101161c:	1884703a 	and	r2,r3,r2
 1011620:	1001703a 	wrctl	status,r2
  
  return context;
 1011624:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1011628:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 101162c:	e0bff917 	ldw	r2,-28(fp)
 1011630:	00c04074 	movhi	r3,257
 1011634:	18d84504 	addi	r3,r3,24852
 1011638:	100490fa 	slli	r2,r2,3
 101163c:	10c7883a 	add	r3,r2,r3
 1011640:	e0bffd17 	ldw	r2,-12(fp)
 1011644:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1011648:	e0bff917 	ldw	r2,-28(fp)
 101164c:	00c04074 	movhi	r3,257
 1011650:	18d84504 	addi	r3,r3,24852
 1011654:	100490fa 	slli	r2,r2,3
 1011658:	10c5883a 	add	r2,r2,r3
 101165c:	10c00104 	addi	r3,r2,4
 1011660:	e0bffe17 	ldw	r2,-8(fp)
 1011664:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1011668:	e0bffd17 	ldw	r2,-12(fp)
 101166c:	1005003a 	cmpeq	r2,r2,zero
 1011670:	1000051e 	bne	r2,zero,1011688 <alt_iic_isr_register+0xb8>
 1011674:	e17ff917 	ldw	r5,-28(fp)
 1011678:	e13ffb17 	ldw	r4,-20(fp)
 101167c:	101144c0 	call	101144c <alt_ic_irq_enable>
 1011680:	e0bfff15 	stw	r2,-4(fp)
 1011684:	00000406 	br	1011698 <alt_iic_isr_register+0xc8>
 1011688:	e17ff917 	ldw	r5,-28(fp)
 101168c:	e13ffb17 	ldw	r4,-20(fp)
 1011690:	10114e80 	call	10114e8 <alt_ic_irq_disable>
 1011694:	e0bfff15 	stw	r2,-4(fp)
 1011698:	e0bfff17 	ldw	r2,-4(fp)
 101169c:	e0bffa15 	stw	r2,-24(fp)
 10116a0:	e0bff817 	ldw	r2,-32(fp)
 10116a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10116a8:	e0bff617 	ldw	r2,-40(fp)
 10116ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10116b0:	e0bffa17 	ldw	r2,-24(fp)
}
 10116b4:	e037883a 	mov	sp,fp
 10116b8:	dfc00117 	ldw	ra,4(sp)
 10116bc:	df000017 	ldw	fp,0(sp)
 10116c0:	dec00204 	addi	sp,sp,8
 10116c4:	f800283a 	ret

010116c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10116c8:	defff804 	addi	sp,sp,-32
 10116cc:	dfc00715 	stw	ra,28(sp)
 10116d0:	df000615 	stw	fp,24(sp)
 10116d4:	dc000515 	stw	r16,20(sp)
 10116d8:	df000504 	addi	fp,sp,20
 10116dc:	e13ffc15 	stw	r4,-16(fp)
 10116e0:	e17ffd15 	stw	r5,-12(fp)
 10116e4:	e1bffe15 	stw	r6,-8(fp)
 10116e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10116ec:	e13ffd17 	ldw	r4,-12(fp)
 10116f0:	e17ffe17 	ldw	r5,-8(fp)
 10116f4:	e1bfff17 	ldw	r6,-4(fp)
 10116f8:	10119100 	call	1011910 <open>
 10116fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1011700:	e0bffb17 	ldw	r2,-20(fp)
 1011704:	1004803a 	cmplt	r2,r2,zero
 1011708:	10001f1e 	bne	r2,zero,1011788 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101170c:	e13ffb17 	ldw	r4,-20(fp)
 1011710:	04004074 	movhi	r16,257
 1011714:	840cab04 	addi	r16,r16,12972
 1011718:	01400304 	movi	r5,12
 101171c:	100476c0 	call	100476c <__mulsi3>
 1011720:	1405883a 	add	r2,r2,r16
 1011724:	10c00017 	ldw	r3,0(r2)
 1011728:	e0bffc17 	ldw	r2,-16(fp)
 101172c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1011730:	e13ffb17 	ldw	r4,-20(fp)
 1011734:	04004074 	movhi	r16,257
 1011738:	840cab04 	addi	r16,r16,12972
 101173c:	01400304 	movi	r5,12
 1011740:	100476c0 	call	100476c <__mulsi3>
 1011744:	1405883a 	add	r2,r2,r16
 1011748:	10800104 	addi	r2,r2,4
 101174c:	10c00017 	ldw	r3,0(r2)
 1011750:	e0bffc17 	ldw	r2,-16(fp)
 1011754:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1011758:	e13ffb17 	ldw	r4,-20(fp)
 101175c:	04004074 	movhi	r16,257
 1011760:	840cab04 	addi	r16,r16,12972
 1011764:	01400304 	movi	r5,12
 1011768:	100476c0 	call	100476c <__mulsi3>
 101176c:	1405883a 	add	r2,r2,r16
 1011770:	10800204 	addi	r2,r2,8
 1011774:	10c00017 	ldw	r3,0(r2)
 1011778:	e0bffc17 	ldw	r2,-16(fp)
 101177c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1011780:	e13ffb17 	ldw	r4,-20(fp)
 1011784:	100dfac0 	call	100dfac <alt_release_fd>
  }
} 
 1011788:	e037883a 	mov	sp,fp
 101178c:	dfc00217 	ldw	ra,8(sp)
 1011790:	df000117 	ldw	fp,4(sp)
 1011794:	dc000017 	ldw	r16,0(sp)
 1011798:	dec00304 	addi	sp,sp,12
 101179c:	f800283a 	ret

010117a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10117a0:	defffb04 	addi	sp,sp,-20
 10117a4:	dfc00415 	stw	ra,16(sp)
 10117a8:	df000315 	stw	fp,12(sp)
 10117ac:	df000304 	addi	fp,sp,12
 10117b0:	e13ffd15 	stw	r4,-12(fp)
 10117b4:	e17ffe15 	stw	r5,-8(fp)
 10117b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10117bc:	01004074 	movhi	r4,257
 10117c0:	210cae04 	addi	r4,r4,12984
 10117c4:	e17ffd17 	ldw	r5,-12(fp)
 10117c8:	01800044 	movi	r6,1
 10117cc:	01c07fc4 	movi	r7,511
 10117d0:	10116c80 	call	10116c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10117d4:	01004074 	movhi	r4,257
 10117d8:	210cab04 	addi	r4,r4,12972
 10117dc:	e17ffe17 	ldw	r5,-8(fp)
 10117e0:	000d883a 	mov	r6,zero
 10117e4:	01c07fc4 	movi	r7,511
 10117e8:	10116c80 	call	10116c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10117ec:	01004074 	movhi	r4,257
 10117f0:	210cb104 	addi	r4,r4,12996
 10117f4:	e17fff17 	ldw	r5,-4(fp)
 10117f8:	01800044 	movi	r6,1
 10117fc:	01c07fc4 	movi	r7,511
 1011800:	10116c80 	call	10116c8 <alt_open_fd>
}  
 1011804:	e037883a 	mov	sp,fp
 1011808:	dfc00117 	ldw	ra,4(sp)
 101180c:	df000017 	ldw	fp,0(sp)
 1011810:	dec00204 	addi	sp,sp,8
 1011814:	f800283a 	ret

01011818 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1011818:	defffa04 	addi	sp,sp,-24
 101181c:	dfc00515 	stw	ra,20(sp)
 1011820:	df000415 	stw	fp,16(sp)
 1011824:	dc000315 	stw	r16,12(sp)
 1011828:	df000304 	addi	fp,sp,12
 101182c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1011830:	e0bffe17 	ldw	r2,-8(fp)
 1011834:	10800217 	ldw	r2,8(r2)
 1011838:	10d00034 	orhi	r3,r2,16384
 101183c:	e0bffe17 	ldw	r2,-8(fp)
 1011840:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1011844:	e03ffd15 	stw	zero,-12(fp)
 1011848:	00002306 	br	10118d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101184c:	e13ffd17 	ldw	r4,-12(fp)
 1011850:	04004074 	movhi	r16,257
 1011854:	840cab04 	addi	r16,r16,12972
 1011858:	01400304 	movi	r5,12
 101185c:	100476c0 	call	100476c <__mulsi3>
 1011860:	1405883a 	add	r2,r2,r16
 1011864:	10c00017 	ldw	r3,0(r2)
 1011868:	e0bffe17 	ldw	r2,-8(fp)
 101186c:	10800017 	ldw	r2,0(r2)
 1011870:	1880161e 	bne	r3,r2,10118cc <alt_file_locked+0xb4>
 1011874:	e13ffd17 	ldw	r4,-12(fp)
 1011878:	04004074 	movhi	r16,257
 101187c:	840cab04 	addi	r16,r16,12972
 1011880:	01400304 	movi	r5,12
 1011884:	100476c0 	call	100476c <__mulsi3>
 1011888:	1405883a 	add	r2,r2,r16
 101188c:	10800204 	addi	r2,r2,8
 1011890:	10800017 	ldw	r2,0(r2)
 1011894:	1004403a 	cmpge	r2,r2,zero
 1011898:	10000c1e 	bne	r2,zero,10118cc <alt_file_locked+0xb4>
 101189c:	e13ffd17 	ldw	r4,-12(fp)
 10118a0:	01400304 	movi	r5,12
 10118a4:	100476c0 	call	100476c <__mulsi3>
 10118a8:	1007883a 	mov	r3,r2
 10118ac:	00804074 	movhi	r2,257
 10118b0:	108cab04 	addi	r2,r2,12972
 10118b4:	1887883a 	add	r3,r3,r2
 10118b8:	e0bffe17 	ldw	r2,-8(fp)
 10118bc:	18800326 	beq	r3,r2,10118cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10118c0:	00bffcc4 	movi	r2,-13
 10118c4:	e0bfff15 	stw	r2,-4(fp)
 10118c8:	00000a06 	br	10118f4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10118cc:	e0bffd17 	ldw	r2,-12(fp)
 10118d0:	10800044 	addi	r2,r2,1
 10118d4:	e0bffd15 	stw	r2,-12(fp)
 10118d8:	00804074 	movhi	r2,257
 10118dc:	10915f04 	addi	r2,r2,17788
 10118e0:	10800017 	ldw	r2,0(r2)
 10118e4:	1007883a 	mov	r3,r2
 10118e8:	e0bffd17 	ldw	r2,-12(fp)
 10118ec:	18bfd72e 	bgeu	r3,r2,101184c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10118f0:	e03fff15 	stw	zero,-4(fp)
 10118f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10118f8:	e037883a 	mov	sp,fp
 10118fc:	dfc00217 	ldw	ra,8(sp)
 1011900:	df000117 	ldw	fp,4(sp)
 1011904:	dc000017 	ldw	r16,0(sp)
 1011908:	dec00304 	addi	sp,sp,12
 101190c:	f800283a 	ret

01011910 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1011910:	defff404 	addi	sp,sp,-48
 1011914:	dfc00b15 	stw	ra,44(sp)
 1011918:	df000a15 	stw	fp,40(sp)
 101191c:	df000a04 	addi	fp,sp,40
 1011920:	e13ffb15 	stw	r4,-20(fp)
 1011924:	e17ffc15 	stw	r5,-16(fp)
 1011928:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101192c:	00bfffc4 	movi	r2,-1
 1011930:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1011934:	00bffb44 	movi	r2,-19
 1011938:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101193c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1011940:	e13ffb17 	ldw	r4,-20(fp)
 1011944:	01404074 	movhi	r5,257
 1011948:	29515d04 	addi	r5,r5,17780
 101194c:	10113380 	call	1011338 <alt_find_dev>
 1011950:	e0bffa15 	stw	r2,-24(fp)
 1011954:	e0bffa17 	ldw	r2,-24(fp)
 1011958:	1004c03a 	cmpne	r2,r2,zero
 101195c:	1000051e 	bne	r2,zero,1011974 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1011960:	e13ffb17 	ldw	r4,-20(fp)
 1011964:	1011cc00 	call	1011cc0 <alt_find_file>
 1011968:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101196c:	00800044 	movi	r2,1
 1011970:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1011974:	e0bffa17 	ldw	r2,-24(fp)
 1011978:	1005003a 	cmpeq	r2,r2,zero
 101197c:	1000311e 	bne	r2,zero,1011a44 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1011980:	e13ffa17 	ldw	r4,-24(fp)
 1011984:	1011de00 	call	1011de0 <alt_get_fd>
 1011988:	e0bff815 	stw	r2,-32(fp)
 101198c:	e0bff817 	ldw	r2,-32(fp)
 1011990:	1004403a 	cmpge	r2,r2,zero
 1011994:	1000031e 	bne	r2,zero,10119a4 <open+0x94>
    {
      status = index;
 1011998:	e0bff817 	ldw	r2,-32(fp)
 101199c:	e0bff715 	stw	r2,-36(fp)
 10119a0:	00002a06 	br	1011a4c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 10119a4:	e13ff817 	ldw	r4,-32(fp)
 10119a8:	01400304 	movi	r5,12
 10119ac:	100476c0 	call	100476c <__mulsi3>
 10119b0:	1007883a 	mov	r3,r2
 10119b4:	00804074 	movhi	r2,257
 10119b8:	108cab04 	addi	r2,r2,12972
 10119bc:	1885883a 	add	r2,r3,r2
 10119c0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10119c4:	e0fffc17 	ldw	r3,-16(fp)
 10119c8:	00900034 	movhi	r2,16384
 10119cc:	10bfffc4 	addi	r2,r2,-1
 10119d0:	1886703a 	and	r3,r3,r2
 10119d4:	e0bff917 	ldw	r2,-28(fp)
 10119d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10119dc:	e0bff617 	ldw	r2,-40(fp)
 10119e0:	1004c03a 	cmpne	r2,r2,zero
 10119e4:	1000061e 	bne	r2,zero,1011a00 <open+0xf0>
 10119e8:	e13ff917 	ldw	r4,-28(fp)
 10119ec:	10118180 	call	1011818 <alt_file_locked>
 10119f0:	e0bff715 	stw	r2,-36(fp)
 10119f4:	e0bff717 	ldw	r2,-36(fp)
 10119f8:	1004803a 	cmplt	r2,r2,zero
 10119fc:	1000131e 	bne	r2,zero,1011a4c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1011a00:	e0bffa17 	ldw	r2,-24(fp)
 1011a04:	10800317 	ldw	r2,12(r2)
 1011a08:	1005003a 	cmpeq	r2,r2,zero
 1011a0c:	1000091e 	bne	r2,zero,1011a34 <open+0x124>
 1011a10:	e0bffa17 	ldw	r2,-24(fp)
 1011a14:	10800317 	ldw	r2,12(r2)
 1011a18:	e13ff917 	ldw	r4,-28(fp)
 1011a1c:	e17ffb17 	ldw	r5,-20(fp)
 1011a20:	e1bffc17 	ldw	r6,-16(fp)
 1011a24:	e1fffd17 	ldw	r7,-12(fp)
 1011a28:	103ee83a 	callr	r2
 1011a2c:	e0bfff15 	stw	r2,-4(fp)
 1011a30:	00000106 	br	1011a38 <open+0x128>
 1011a34:	e03fff15 	stw	zero,-4(fp)
 1011a38:	e0bfff17 	ldw	r2,-4(fp)
 1011a3c:	e0bff715 	stw	r2,-36(fp)
 1011a40:	00000206 	br	1011a4c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1011a44:	00bffb44 	movi	r2,-19
 1011a48:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1011a4c:	e0bff717 	ldw	r2,-36(fp)
 1011a50:	1004403a 	cmpge	r2,r2,zero
 1011a54:	1000091e 	bne	r2,zero,1011a7c <open+0x16c>
  {
    alt_release_fd (index);  
 1011a58:	e13ff817 	ldw	r4,-32(fp)
 1011a5c:	100dfac0 	call	100dfac <alt_release_fd>
    ALT_ERRNO = -status;
 1011a60:	1011a9c0 	call	1011a9c <alt_get_errno>
 1011a64:	e0fff717 	ldw	r3,-36(fp)
 1011a68:	00c7c83a 	sub	r3,zero,r3
 1011a6c:	10c00015 	stw	r3,0(r2)
    return -1;
 1011a70:	00bfffc4 	movi	r2,-1
 1011a74:	e0bffe15 	stw	r2,-8(fp)
 1011a78:	00000206 	br	1011a84 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1011a7c:	e0bff817 	ldw	r2,-32(fp)
 1011a80:	e0bffe15 	stw	r2,-8(fp)
 1011a84:	e0bffe17 	ldw	r2,-8(fp)
}
 1011a88:	e037883a 	mov	sp,fp
 1011a8c:	dfc00117 	ldw	ra,4(sp)
 1011a90:	df000017 	ldw	fp,0(sp)
 1011a94:	dec00204 	addi	sp,sp,8
 1011a98:	f800283a 	ret

01011a9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011a9c:	defffd04 	addi	sp,sp,-12
 1011aa0:	dfc00215 	stw	ra,8(sp)
 1011aa4:	df000115 	stw	fp,4(sp)
 1011aa8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011aac:	00804074 	movhi	r2,257
 1011ab0:	10916004 	addi	r2,r2,17792
 1011ab4:	10800017 	ldw	r2,0(r2)
 1011ab8:	1005003a 	cmpeq	r2,r2,zero
 1011abc:	1000061e 	bne	r2,zero,1011ad8 <alt_get_errno+0x3c>
 1011ac0:	00804074 	movhi	r2,257
 1011ac4:	10916004 	addi	r2,r2,17792
 1011ac8:	10800017 	ldw	r2,0(r2)
 1011acc:	103ee83a 	callr	r2
 1011ad0:	e0bfff15 	stw	r2,-4(fp)
 1011ad4:	00000306 	br	1011ae4 <alt_get_errno+0x48>
 1011ad8:	00804074 	movhi	r2,257
 1011adc:	10983104 	addi	r2,r2,24772
 1011ae0:	e0bfff15 	stw	r2,-4(fp)
 1011ae4:	e0bfff17 	ldw	r2,-4(fp)
}
 1011ae8:	e037883a 	mov	sp,fp
 1011aec:	dfc00117 	ldw	ra,4(sp)
 1011af0:	df000017 	ldw	fp,0(sp)
 1011af4:	dec00204 	addi	sp,sp,8
 1011af8:	f800283a 	ret

01011afc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011afc:	defffa04 	addi	sp,sp,-24
 1011b00:	df000515 	stw	fp,20(sp)
 1011b04:	df000504 	addi	fp,sp,20
 1011b08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011b0c:	0005303a 	rdctl	r2,status
 1011b10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011b14:	e0fffd17 	ldw	r3,-12(fp)
 1011b18:	00bfff84 	movi	r2,-2
 1011b1c:	1884703a 	and	r2,r3,r2
 1011b20:	1001703a 	wrctl	status,r2
  
  return context;
 1011b24:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1011b28:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1011b2c:	e0bfff17 	ldw	r2,-4(fp)
 1011b30:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1011b34:	e0bffc17 	ldw	r2,-16(fp)
 1011b38:	10c00017 	ldw	r3,0(r2)
 1011b3c:	e0bffc17 	ldw	r2,-16(fp)
 1011b40:	10800117 	ldw	r2,4(r2)
 1011b44:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1011b48:	e0bffc17 	ldw	r2,-16(fp)
 1011b4c:	10c00117 	ldw	r3,4(r2)
 1011b50:	e0bffc17 	ldw	r2,-16(fp)
 1011b54:	10800017 	ldw	r2,0(r2)
 1011b58:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1011b5c:	e0fffc17 	ldw	r3,-16(fp)
 1011b60:	e0bffc17 	ldw	r2,-16(fp)
 1011b64:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1011b68:	e0fffc17 	ldw	r3,-16(fp)
 1011b6c:	e0bffc17 	ldw	r2,-16(fp)
 1011b70:	18800015 	stw	r2,0(r3)
 1011b74:	e0bffe17 	ldw	r2,-8(fp)
 1011b78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011b7c:	e0bffb17 	ldw	r2,-20(fp)
 1011b80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1011b84:	e037883a 	mov	sp,fp
 1011b88:	df000017 	ldw	fp,0(sp)
 1011b8c:	dec00104 	addi	sp,sp,4
 1011b90:	f800283a 	ret

01011b94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1011b94:	defffb04 	addi	sp,sp,-20
 1011b98:	dfc00415 	stw	ra,16(sp)
 1011b9c:	df000315 	stw	fp,12(sp)
 1011ba0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1011ba4:	d0a00e17 	ldw	r2,-32712(gp)
 1011ba8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1011bac:	d0a6e517 	ldw	r2,-25708(gp)
 1011bb0:	10800044 	addi	r2,r2,1
 1011bb4:	d0a6e515 	stw	r2,-25708(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011bb8:	00003106 	br	1011c80 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1011bbc:	e0bffe17 	ldw	r2,-8(fp)
 1011bc0:	10800017 	ldw	r2,0(r2)
 1011bc4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011bc8:	e0bffe17 	ldw	r2,-8(fp)
 1011bcc:	10800403 	ldbu	r2,16(r2)
 1011bd0:	10803fcc 	andi	r2,r2,255
 1011bd4:	1005003a 	cmpeq	r2,r2,zero
 1011bd8:	1000051e 	bne	r2,zero,1011bf0 <alt_tick+0x5c>
 1011bdc:	d0a6e517 	ldw	r2,-25708(gp)
 1011be0:	1004c03a 	cmpne	r2,r2,zero
 1011be4:	1000021e 	bne	r2,zero,1011bf0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1011be8:	e0bffe17 	ldw	r2,-8(fp)
 1011bec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011bf0:	e0bffe17 	ldw	r2,-8(fp)
 1011bf4:	10c00217 	ldw	r3,8(r2)
 1011bf8:	d0a6e517 	ldw	r2,-25708(gp)
 1011bfc:	10c01e36 	bltu	r2,r3,1011c78 <alt_tick+0xe4>
 1011c00:	e0bffe17 	ldw	r2,-8(fp)
 1011c04:	10800403 	ldbu	r2,16(r2)
 1011c08:	10803fcc 	andi	r2,r2,255
 1011c0c:	1004c03a 	cmpne	r2,r2,zero
 1011c10:	1000191e 	bne	r2,zero,1011c78 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011c14:	e0bffe17 	ldw	r2,-8(fp)
 1011c18:	10c00317 	ldw	r3,12(r2)
 1011c1c:	e0bffe17 	ldw	r2,-8(fp)
 1011c20:	11000517 	ldw	r4,20(r2)
 1011c24:	183ee83a 	callr	r3
 1011c28:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1011c2c:	e0bffd17 	ldw	r2,-12(fp)
 1011c30:	1004c03a 	cmpne	r2,r2,zero
 1011c34:	1000031e 	bne	r2,zero,1011c44 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1011c38:	e13ffe17 	ldw	r4,-8(fp)
 1011c3c:	1011afc0 	call	1011afc <alt_alarm_stop>
 1011c40:	00000d06 	br	1011c78 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1011c44:	e0bffe17 	ldw	r2,-8(fp)
 1011c48:	10c00217 	ldw	r3,8(r2)
 1011c4c:	e0bffd17 	ldw	r2,-12(fp)
 1011c50:	1887883a 	add	r3,r3,r2
 1011c54:	e0bffe17 	ldw	r2,-8(fp)
 1011c58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1011c5c:	e0bffe17 	ldw	r2,-8(fp)
 1011c60:	10c00217 	ldw	r3,8(r2)
 1011c64:	d0a6e517 	ldw	r2,-25708(gp)
 1011c68:	1880032e 	bgeu	r3,r2,1011c78 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1011c6c:	e0fffe17 	ldw	r3,-8(fp)
 1011c70:	00800044 	movi	r2,1
 1011c74:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1011c78:	e0bfff17 	ldw	r2,-4(fp)
 1011c7c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011c80:	d0e00e04 	addi	r3,gp,-32712
 1011c84:	e0bffe17 	ldw	r2,-8(fp)
 1011c88:	10ffcc1e 	bne	r2,r3,1011bbc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1011c8c:	e037883a 	mov	sp,fp
 1011c90:	dfc00117 	ldw	ra,4(sp)
 1011c94:	df000017 	ldw	fp,0(sp)
 1011c98:	dec00204 	addi	sp,sp,8
 1011c9c:	f800283a 	ret

01011ca0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1011ca0:	deffff04 	addi	sp,sp,-4
 1011ca4:	df000015 	stw	fp,0(sp)
 1011ca8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011cac:	000170fa 	wrctl	ienable,zero
}
 1011cb0:	e037883a 	mov	sp,fp
 1011cb4:	df000017 	ldw	fp,0(sp)
 1011cb8:	dec00104 	addi	sp,sp,4
 1011cbc:	f800283a 	ret

01011cc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1011cc0:	defffa04 	addi	sp,sp,-24
 1011cc4:	dfc00515 	stw	ra,20(sp)
 1011cc8:	df000415 	stw	fp,16(sp)
 1011ccc:	df000404 	addi	fp,sp,16
 1011cd0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011cd4:	00804074 	movhi	r2,257
 1011cd8:	10915b04 	addi	r2,r2,17772
 1011cdc:	10800017 	ldw	r2,0(r2)
 1011ce0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011ce4:	00003306 	br	1011db4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1011ce8:	e0bffd17 	ldw	r2,-12(fp)
 1011cec:	11000217 	ldw	r4,8(r2)
 1011cf0:	1005a300 	call	1005a30 <strlen>
 1011cf4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1011cf8:	e0bffd17 	ldw	r2,-12(fp)
 1011cfc:	10c00217 	ldw	r3,8(r2)
 1011d00:	e0bffc17 	ldw	r2,-16(fp)
 1011d04:	1885883a 	add	r2,r3,r2
 1011d08:	10bfffc4 	addi	r2,r2,-1
 1011d0c:	10800003 	ldbu	r2,0(r2)
 1011d10:	10803fcc 	andi	r2,r2,255
 1011d14:	1080201c 	xori	r2,r2,128
 1011d18:	10bfe004 	addi	r2,r2,-128
 1011d1c:	10800bd8 	cmpnei	r2,r2,47
 1011d20:	1000031e 	bne	r2,zero,1011d30 <alt_find_file+0x70>
    {
      len -= 1;
 1011d24:	e0bffc17 	ldw	r2,-16(fp)
 1011d28:	10bfffc4 	addi	r2,r2,-1
 1011d2c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011d30:	e0bffc17 	ldw	r2,-16(fp)
 1011d34:	1007883a 	mov	r3,r2
 1011d38:	e0bffe17 	ldw	r2,-8(fp)
 1011d3c:	1885883a 	add	r2,r3,r2
 1011d40:	10800003 	ldbu	r2,0(r2)
 1011d44:	10803fcc 	andi	r2,r2,255
 1011d48:	1080201c 	xori	r2,r2,128
 1011d4c:	10bfe004 	addi	r2,r2,-128
 1011d50:	10800be0 	cmpeqi	r2,r2,47
 1011d54:	10000a1e 	bne	r2,zero,1011d80 <alt_find_file+0xc0>
 1011d58:	e0bffc17 	ldw	r2,-16(fp)
 1011d5c:	1007883a 	mov	r3,r2
 1011d60:	e0bffe17 	ldw	r2,-8(fp)
 1011d64:	1885883a 	add	r2,r3,r2
 1011d68:	10800003 	ldbu	r2,0(r2)
 1011d6c:	10803fcc 	andi	r2,r2,255
 1011d70:	1080201c 	xori	r2,r2,128
 1011d74:	10bfe004 	addi	r2,r2,-128
 1011d78:	1004c03a 	cmpne	r2,r2,zero
 1011d7c:	10000a1e 	bne	r2,zero,1011da8 <alt_find_file+0xe8>
 1011d80:	e0bffd17 	ldw	r2,-12(fp)
 1011d84:	11000217 	ldw	r4,8(r2)
 1011d88:	e1bffc17 	ldw	r6,-16(fp)
 1011d8c:	e17ffe17 	ldw	r5,-8(fp)
 1011d90:	1011f8c0 	call	1011f8c <memcmp>
 1011d94:	1004c03a 	cmpne	r2,r2,zero
 1011d98:	1000031e 	bne	r2,zero,1011da8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1011d9c:	e0bffd17 	ldw	r2,-12(fp)
 1011da0:	e0bfff15 	stw	r2,-4(fp)
 1011da4:	00000806 	br	1011dc8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1011da8:	e0bffd17 	ldw	r2,-12(fp)
 1011dac:	10800017 	ldw	r2,0(r2)
 1011db0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011db4:	00c04074 	movhi	r3,257
 1011db8:	18d15b04 	addi	r3,r3,17772
 1011dbc:	e0bffd17 	ldw	r2,-12(fp)
 1011dc0:	10ffc91e 	bne	r2,r3,1011ce8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1011dc4:	e03fff15 	stw	zero,-4(fp)
 1011dc8:	e0bfff17 	ldw	r2,-4(fp)
}
 1011dcc:	e037883a 	mov	sp,fp
 1011dd0:	dfc00117 	ldw	ra,4(sp)
 1011dd4:	df000017 	ldw	fp,0(sp)
 1011dd8:	dec00204 	addi	sp,sp,8
 1011ddc:	f800283a 	ret

01011de0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1011de0:	defffa04 	addi	sp,sp,-24
 1011de4:	dfc00515 	stw	ra,20(sp)
 1011de8:	df000415 	stw	fp,16(sp)
 1011dec:	dc000315 	stw	r16,12(sp)
 1011df0:	df000304 	addi	fp,sp,12
 1011df4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011df8:	00bffa04 	movi	r2,-24
 1011dfc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011e00:	e03ffe15 	stw	zero,-8(fp)
 1011e04:	00002006 	br	1011e88 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1011e08:	e13ffe17 	ldw	r4,-8(fp)
 1011e0c:	04004074 	movhi	r16,257
 1011e10:	840cab04 	addi	r16,r16,12972
 1011e14:	01400304 	movi	r5,12
 1011e18:	100476c0 	call	100476c <__mulsi3>
 1011e1c:	1405883a 	add	r2,r2,r16
 1011e20:	10800017 	ldw	r2,0(r2)
 1011e24:	1004c03a 	cmpne	r2,r2,zero
 1011e28:	1000141e 	bne	r2,zero,1011e7c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1011e2c:	e13ffe17 	ldw	r4,-8(fp)
 1011e30:	04004074 	movhi	r16,257
 1011e34:	840cab04 	addi	r16,r16,12972
 1011e38:	01400304 	movi	r5,12
 1011e3c:	100476c0 	call	100476c <__mulsi3>
 1011e40:	1407883a 	add	r3,r2,r16
 1011e44:	e0bfff17 	ldw	r2,-4(fp)
 1011e48:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1011e4c:	00804074 	movhi	r2,257
 1011e50:	10915f04 	addi	r2,r2,17788
 1011e54:	10c00017 	ldw	r3,0(r2)
 1011e58:	e0bffe17 	ldw	r2,-8(fp)
 1011e5c:	1880040e 	bge	r3,r2,1011e70 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1011e60:	00c04074 	movhi	r3,257
 1011e64:	18d15f04 	addi	r3,r3,17788
 1011e68:	e0bffe17 	ldw	r2,-8(fp)
 1011e6c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1011e70:	e0bffe17 	ldw	r2,-8(fp)
 1011e74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1011e78:	00000606 	br	1011e94 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011e7c:	e0bffe17 	ldw	r2,-8(fp)
 1011e80:	10800044 	addi	r2,r2,1
 1011e84:	e0bffe15 	stw	r2,-8(fp)
 1011e88:	e0bffe17 	ldw	r2,-8(fp)
 1011e8c:	10800810 	cmplti	r2,r2,32
 1011e90:	103fdd1e 	bne	r2,zero,1011e08 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1011e94:	e0bffd17 	ldw	r2,-12(fp)
}
 1011e98:	e037883a 	mov	sp,fp
 1011e9c:	dfc00217 	ldw	ra,8(sp)
 1011ea0:	df000117 	ldw	fp,4(sp)
 1011ea4:	dc000017 	ldw	r16,0(sp)
 1011ea8:	dec00304 	addi	sp,sp,12
 1011eac:	f800283a 	ret

01011eb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1011eb0:	defffb04 	addi	sp,sp,-20
 1011eb4:	df000415 	stw	fp,16(sp)
 1011eb8:	df000404 	addi	fp,sp,16
 1011ebc:	e13ffe15 	stw	r4,-8(fp)
 1011ec0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1011ec4:	e0bfff17 	ldw	r2,-4(fp)
 1011ec8:	10840070 	cmpltui	r2,r2,4097
 1011ecc:	1000021e 	bne	r2,zero,1011ed8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1011ed0:	00840004 	movi	r2,4096
 1011ed4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1011ed8:	e0fffe17 	ldw	r3,-8(fp)
 1011edc:	e0bfff17 	ldw	r2,-4(fp)
 1011ee0:	1885883a 	add	r2,r3,r2
 1011ee4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1011ee8:	e0bffe17 	ldw	r2,-8(fp)
 1011eec:	e0bffd15 	stw	r2,-12(fp)
 1011ef0:	00000506 	br	1011f08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1011ef4:	e0bffd17 	ldw	r2,-12(fp)
 1011ef8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1011efc:	e0bffd17 	ldw	r2,-12(fp)
 1011f00:	10800804 	addi	r2,r2,32
 1011f04:	e0bffd15 	stw	r2,-12(fp)
 1011f08:	e0fffd17 	ldw	r3,-12(fp)
 1011f0c:	e0bffc17 	ldw	r2,-16(fp)
 1011f10:	18bff836 	bltu	r3,r2,1011ef4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1011f14:	e0bffe17 	ldw	r2,-8(fp)
 1011f18:	108007cc 	andi	r2,r2,31
 1011f1c:	1005003a 	cmpeq	r2,r2,zero
 1011f20:	1000021e 	bne	r2,zero,1011f2c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1011f24:	e0bffd17 	ldw	r2,-12(fp)
 1011f28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1011f2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1011f30:	e037883a 	mov	sp,fp
 1011f34:	df000017 	ldw	fp,0(sp)
 1011f38:	dec00104 	addi	sp,sp,4
 1011f3c:	f800283a 	ret

01011f40 <atexit>:
 1011f40:	200b883a 	mov	r5,r4
 1011f44:	000d883a 	mov	r6,zero
 1011f48:	0009883a 	mov	r4,zero
 1011f4c:	000f883a 	mov	r7,zero
 1011f50:	10120001 	jmpi	1012000 <__register_exitproc>

01011f54 <exit>:
 1011f54:	defffe04 	addi	sp,sp,-8
 1011f58:	000b883a 	mov	r5,zero
 1011f5c:	dc000015 	stw	r16,0(sp)
 1011f60:	dfc00115 	stw	ra,4(sp)
 1011f64:	2021883a 	mov	r16,r4
 1011f68:	10121380 	call	1012138 <__call_exitprocs>
 1011f6c:	00804074 	movhi	r2,257
 1011f70:	10915804 	addi	r2,r2,17760
 1011f74:	11000017 	ldw	r4,0(r2)
 1011f78:	20800f17 	ldw	r2,60(r4)
 1011f7c:	10000126 	beq	r2,zero,1011f84 <exit+0x30>
 1011f80:	103ee83a 	callr	r2
 1011f84:	8009883a 	mov	r4,r16
 1011f88:	10123280 	call	1012328 <_exit>

01011f8c <memcmp>:
 1011f8c:	00c000c4 	movi	r3,3
 1011f90:	1980032e 	bgeu	r3,r6,1011fa0 <memcmp+0x14>
 1011f94:	2144b03a 	or	r2,r4,r5
 1011f98:	10c4703a 	and	r2,r2,r3
 1011f9c:	10000f26 	beq	r2,zero,1011fdc <memcmp+0x50>
 1011fa0:	31ffffc4 	addi	r7,r6,-1
 1011fa4:	3000061e 	bne	r6,zero,1011fc0 <memcmp+0x34>
 1011fa8:	00000a06 	br	1011fd4 <memcmp+0x48>
 1011fac:	39ffffc4 	addi	r7,r7,-1
 1011fb0:	00bfffc4 	movi	r2,-1
 1011fb4:	21000044 	addi	r4,r4,1
 1011fb8:	29400044 	addi	r5,r5,1
 1011fbc:	38800526 	beq	r7,r2,1011fd4 <memcmp+0x48>
 1011fc0:	20c00003 	ldbu	r3,0(r4)
 1011fc4:	28800003 	ldbu	r2,0(r5)
 1011fc8:	18bff826 	beq	r3,r2,1011fac <memcmp+0x20>
 1011fcc:	1885c83a 	sub	r2,r3,r2
 1011fd0:	f800283a 	ret
 1011fd4:	0005883a 	mov	r2,zero
 1011fd8:	f800283a 	ret
 1011fdc:	180f883a 	mov	r7,r3
 1011fe0:	20c00017 	ldw	r3,0(r4)
 1011fe4:	28800017 	ldw	r2,0(r5)
 1011fe8:	18bfed1e 	bne	r3,r2,1011fa0 <memcmp+0x14>
 1011fec:	31bfff04 	addi	r6,r6,-4
 1011ff0:	21000104 	addi	r4,r4,4
 1011ff4:	29400104 	addi	r5,r5,4
 1011ff8:	39bff936 	bltu	r7,r6,1011fe0 <memcmp+0x54>
 1011ffc:	003fe806 	br	1011fa0 <memcmp+0x14>

01012000 <__register_exitproc>:
 1012000:	defffa04 	addi	sp,sp,-24
 1012004:	00804074 	movhi	r2,257
 1012008:	10915804 	addi	r2,r2,17760
 101200c:	dc000015 	stw	r16,0(sp)
 1012010:	14000017 	ldw	r16,0(r2)
 1012014:	dd000415 	stw	r20,16(sp)
 1012018:	2829883a 	mov	r20,r5
 101201c:	81405217 	ldw	r5,328(r16)
 1012020:	dcc00315 	stw	r19,12(sp)
 1012024:	dc800215 	stw	r18,8(sp)
 1012028:	dc400115 	stw	r17,4(sp)
 101202c:	dfc00515 	stw	ra,20(sp)
 1012030:	2023883a 	mov	r17,r4
 1012034:	3027883a 	mov	r19,r6
 1012038:	3825883a 	mov	r18,r7
 101203c:	28002526 	beq	r5,zero,10120d4 <__register_exitproc+0xd4>
 1012040:	29000117 	ldw	r4,4(r5)
 1012044:	008007c4 	movi	r2,31
 1012048:	11002716 	blt	r2,r4,10120e8 <__register_exitproc+0xe8>
 101204c:	8800101e 	bne	r17,zero,1012090 <__register_exitproc+0x90>
 1012050:	2105883a 	add	r2,r4,r4
 1012054:	1085883a 	add	r2,r2,r2
 1012058:	20c00044 	addi	r3,r4,1
 101205c:	1145883a 	add	r2,r2,r5
 1012060:	0009883a 	mov	r4,zero
 1012064:	15000215 	stw	r20,8(r2)
 1012068:	28c00115 	stw	r3,4(r5)
 101206c:	2005883a 	mov	r2,r4
 1012070:	dfc00517 	ldw	ra,20(sp)
 1012074:	dd000417 	ldw	r20,16(sp)
 1012078:	dcc00317 	ldw	r19,12(sp)
 101207c:	dc800217 	ldw	r18,8(sp)
 1012080:	dc400117 	ldw	r17,4(sp)
 1012084:	dc000017 	ldw	r16,0(sp)
 1012088:	dec00604 	addi	sp,sp,24
 101208c:	f800283a 	ret
 1012090:	29802204 	addi	r6,r5,136
 1012094:	00800044 	movi	r2,1
 1012098:	110e983a 	sll	r7,r2,r4
 101209c:	30c04017 	ldw	r3,256(r6)
 10120a0:	2105883a 	add	r2,r4,r4
 10120a4:	1085883a 	add	r2,r2,r2
 10120a8:	1185883a 	add	r2,r2,r6
 10120ac:	19c6b03a 	or	r3,r3,r7
 10120b0:	14802015 	stw	r18,128(r2)
 10120b4:	14c00015 	stw	r19,0(r2)
 10120b8:	00800084 	movi	r2,2
 10120bc:	30c04015 	stw	r3,256(r6)
 10120c0:	88bfe31e 	bne	r17,r2,1012050 <__register_exitproc+0x50>
 10120c4:	30804117 	ldw	r2,260(r6)
 10120c8:	11c4b03a 	or	r2,r2,r7
 10120cc:	30804115 	stw	r2,260(r6)
 10120d0:	003fdf06 	br	1012050 <__register_exitproc+0x50>
 10120d4:	00804074 	movhi	r2,257
 10120d8:	10988504 	addi	r2,r2,25108
 10120dc:	100b883a 	mov	r5,r2
 10120e0:	80805215 	stw	r2,328(r16)
 10120e4:	003fd606 	br	1012040 <__register_exitproc+0x40>
 10120e8:	00804034 	movhi	r2,256
 10120ec:	10945004 	addi	r2,r2,20800
 10120f0:	1000021e 	bne	r2,zero,10120fc <__register_exitproc+0xfc>
 10120f4:	013fffc4 	movi	r4,-1
 10120f8:	003fdc06 	br	101206c <__register_exitproc+0x6c>
 10120fc:	01006404 	movi	r4,400
 1012100:	103ee83a 	callr	r2
 1012104:	1007883a 	mov	r3,r2
 1012108:	103ffa26 	beq	r2,zero,10120f4 <__register_exitproc+0xf4>
 101210c:	80805217 	ldw	r2,328(r16)
 1012110:	180b883a 	mov	r5,r3
 1012114:	18000115 	stw	zero,4(r3)
 1012118:	18800015 	stw	r2,0(r3)
 101211c:	80c05215 	stw	r3,328(r16)
 1012120:	18006215 	stw	zero,392(r3)
 1012124:	18006315 	stw	zero,396(r3)
 1012128:	0009883a 	mov	r4,zero
 101212c:	883fc826 	beq	r17,zero,1012050 <__register_exitproc+0x50>
 1012130:	003fd706 	br	1012090 <__register_exitproc+0x90>

01012134 <register_fini>:
 1012134:	f800283a 	ret

01012138 <__call_exitprocs>:
 1012138:	00804074 	movhi	r2,257
 101213c:	10915804 	addi	r2,r2,17760
 1012140:	10800017 	ldw	r2,0(r2)
 1012144:	defff304 	addi	sp,sp,-52
 1012148:	df000b15 	stw	fp,44(sp)
 101214c:	d8800115 	stw	r2,4(sp)
 1012150:	00804034 	movhi	r2,256
 1012154:	10944b04 	addi	r2,r2,20780
 1012158:	1005003a 	cmpeq	r2,r2,zero
 101215c:	d8800215 	stw	r2,8(sp)
 1012160:	d8800117 	ldw	r2,4(sp)
 1012164:	dd400815 	stw	r21,32(sp)
 1012168:	dd000715 	stw	r20,28(sp)
 101216c:	10805204 	addi	r2,r2,328
 1012170:	dfc00c15 	stw	ra,48(sp)
 1012174:	ddc00a15 	stw	r23,40(sp)
 1012178:	dd800915 	stw	r22,36(sp)
 101217c:	dcc00615 	stw	r19,24(sp)
 1012180:	dc800515 	stw	r18,20(sp)
 1012184:	dc400415 	stw	r17,16(sp)
 1012188:	dc000315 	stw	r16,12(sp)
 101218c:	282b883a 	mov	r21,r5
 1012190:	2039883a 	mov	fp,r4
 1012194:	d8800015 	stw	r2,0(sp)
 1012198:	2829003a 	cmpeq	r20,r5,zero
 101219c:	d8800117 	ldw	r2,4(sp)
 10121a0:	14405217 	ldw	r17,328(r2)
 10121a4:	88001026 	beq	r17,zero,10121e8 <__call_exitprocs+0xb0>
 10121a8:	ddc00017 	ldw	r23,0(sp)
 10121ac:	88800117 	ldw	r2,4(r17)
 10121b0:	8c802204 	addi	r18,r17,136
 10121b4:	143fffc4 	addi	r16,r2,-1
 10121b8:	80000916 	blt	r16,zero,10121e0 <__call_exitprocs+0xa8>
 10121bc:	05bfffc4 	movi	r22,-1
 10121c0:	a000151e 	bne	r20,zero,1012218 <__call_exitprocs+0xe0>
 10121c4:	8409883a 	add	r4,r16,r16
 10121c8:	2105883a 	add	r2,r4,r4
 10121cc:	1485883a 	add	r2,r2,r18
 10121d0:	10c02017 	ldw	r3,128(r2)
 10121d4:	a8c01126 	beq	r21,r3,101221c <__call_exitprocs+0xe4>
 10121d8:	843fffc4 	addi	r16,r16,-1
 10121dc:	85bff81e 	bne	r16,r22,10121c0 <__call_exitprocs+0x88>
 10121e0:	d8800217 	ldw	r2,8(sp)
 10121e4:	10003126 	beq	r2,zero,10122ac <__call_exitprocs+0x174>
 10121e8:	dfc00c17 	ldw	ra,48(sp)
 10121ec:	df000b17 	ldw	fp,44(sp)
 10121f0:	ddc00a17 	ldw	r23,40(sp)
 10121f4:	dd800917 	ldw	r22,36(sp)
 10121f8:	dd400817 	ldw	r21,32(sp)
 10121fc:	dd000717 	ldw	r20,28(sp)
 1012200:	dcc00617 	ldw	r19,24(sp)
 1012204:	dc800517 	ldw	r18,20(sp)
 1012208:	dc400417 	ldw	r17,16(sp)
 101220c:	dc000317 	ldw	r16,12(sp)
 1012210:	dec00d04 	addi	sp,sp,52
 1012214:	f800283a 	ret
 1012218:	8409883a 	add	r4,r16,r16
 101221c:	88c00117 	ldw	r3,4(r17)
 1012220:	2105883a 	add	r2,r4,r4
 1012224:	1445883a 	add	r2,r2,r17
 1012228:	18ffffc4 	addi	r3,r3,-1
 101222c:	11800217 	ldw	r6,8(r2)
 1012230:	1c001526 	beq	r3,r16,1012288 <__call_exitprocs+0x150>
 1012234:	10000215 	stw	zero,8(r2)
 1012238:	303fe726 	beq	r6,zero,10121d8 <__call_exitprocs+0xa0>
 101223c:	00c00044 	movi	r3,1
 1012240:	1c06983a 	sll	r3,r3,r16
 1012244:	90804017 	ldw	r2,256(r18)
 1012248:	8cc00117 	ldw	r19,4(r17)
 101224c:	1884703a 	and	r2,r3,r2
 1012250:	10001426 	beq	r2,zero,10122a4 <__call_exitprocs+0x16c>
 1012254:	90804117 	ldw	r2,260(r18)
 1012258:	1884703a 	and	r2,r3,r2
 101225c:	10000c1e 	bne	r2,zero,1012290 <__call_exitprocs+0x158>
 1012260:	2105883a 	add	r2,r4,r4
 1012264:	1485883a 	add	r2,r2,r18
 1012268:	11400017 	ldw	r5,0(r2)
 101226c:	e009883a 	mov	r4,fp
 1012270:	303ee83a 	callr	r6
 1012274:	88800117 	ldw	r2,4(r17)
 1012278:	98bfc81e 	bne	r19,r2,101219c <__call_exitprocs+0x64>
 101227c:	b8800017 	ldw	r2,0(r23)
 1012280:	147fd526 	beq	r2,r17,10121d8 <__call_exitprocs+0xa0>
 1012284:	003fc506 	br	101219c <__call_exitprocs+0x64>
 1012288:	8c000115 	stw	r16,4(r17)
 101228c:	003fea06 	br	1012238 <__call_exitprocs+0x100>
 1012290:	2105883a 	add	r2,r4,r4
 1012294:	1485883a 	add	r2,r2,r18
 1012298:	11000017 	ldw	r4,0(r2)
 101229c:	303ee83a 	callr	r6
 10122a0:	003ff406 	br	1012274 <__call_exitprocs+0x13c>
 10122a4:	303ee83a 	callr	r6
 10122a8:	003ff206 	br	1012274 <__call_exitprocs+0x13c>
 10122ac:	88800117 	ldw	r2,4(r17)
 10122b0:	1000081e 	bne	r2,zero,10122d4 <__call_exitprocs+0x19c>
 10122b4:	89000017 	ldw	r4,0(r17)
 10122b8:	20000726 	beq	r4,zero,10122d8 <__call_exitprocs+0x1a0>
 10122bc:	b9000015 	stw	r4,0(r23)
 10122c0:	8809883a 	mov	r4,r17
 10122c4:	100512c0 	call	100512c <free>
 10122c8:	bc400017 	ldw	r17,0(r23)
 10122cc:	883fb71e 	bne	r17,zero,10121ac <__call_exitprocs+0x74>
 10122d0:	003fc506 	br	10121e8 <__call_exitprocs+0xb0>
 10122d4:	89000017 	ldw	r4,0(r17)
 10122d8:	882f883a 	mov	r23,r17
 10122dc:	2023883a 	mov	r17,r4
 10122e0:	883fb21e 	bne	r17,zero,10121ac <__call_exitprocs+0x74>
 10122e4:	003fc006 	br	10121e8 <__call_exitprocs+0xb0>

010122e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10122e8:	defffd04 	addi	sp,sp,-12
 10122ec:	df000215 	stw	fp,8(sp)
 10122f0:	df000204 	addi	fp,sp,8
 10122f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10122f8:	e0bfff17 	ldw	r2,-4(fp)
 10122fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1012300:	e0bffe17 	ldw	r2,-8(fp)
 1012304:	1005003a 	cmpeq	r2,r2,zero
 1012308:	1000021e 	bne	r2,zero,1012314 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 101230c:	002af070 	cmpltui	zero,zero,43969
 1012310:	00000106 	br	1012318 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1012314:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1012318:	e037883a 	mov	sp,fp
 101231c:	df000017 	ldw	fp,0(sp)
 1012320:	dec00104 	addi	sp,sp,4
 1012324:	f800283a 	ret

01012328 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1012328:	defffd04 	addi	sp,sp,-12
 101232c:	dfc00215 	stw	ra,8(sp)
 1012330:	df000115 	stw	fp,4(sp)
 1012334:	df000104 	addi	fp,sp,4
 1012338:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 101233c:	e13fff17 	ldw	r4,-4(fp)
 1012340:	10122e80 	call	10122e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1012344:	003fff06 	br	1012344 <_exit+0x1c>
 1012348:	00000010 	cmplti	zero,zero,0
 101234c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1012350:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_0+0x527a0>
 1012354:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_0+0x11f7c0>
 1012358:	001b0c0b 	ldhu	zero,27696(zero)
 101235c:	00000028 	cmpgeui	zero,zero,0
 1012360:	00000018 	cmpnei	zero,zero,0
 1012364:	0100c58c 	andi	r4,zero,790
 1012368:	0000066c 	andhi	zero,zero,25
 101236c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 1012370:	910a9074 	orhi	r4,r18,10817
 1012374:	94089209 	0x94089209
 1012378:	97049606 	br	10135d4 <jtag_uart_0+0x1a8>
 101237c:	93019f03 	ldbu	r12,1660(r18)
 1012380:	9c059507 	ldb	r16,5716(r19)
 1012384:	00000002 	0x2
 1012388:	00000028 	cmpgeui	zero,zero,0
 101238c:	00000044 	movi	zero,1
 1012390:	0100cbf8 	rdprs	r4,zero,815
 1012394:	00000660 	cmpeqi	zero,zero,25
 1012398:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 101239c:	92099170 	cmpltui	r8,r18,9797
 10123a0:	96069408 	cmpgei	et,r18,6736
 10123a4:	9c039704 	addi	r16,r19,3676
 10123a8:	90019f02 	0x90019f02
 10123ac:	9507930a 	0x9507930a
 10123b0:	00000005 	stb	zero,0(zero)
 10123b4:	01012134 	movhi	r4,1156
