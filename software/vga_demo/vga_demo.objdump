
vga_demo.elf:     file format elf32-littlenios2
vga_demo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000121d0 memsz 0x000121d0 flags r-x
    LOAD off    0x000131f0 vaddr 0x010121f0 paddr 0x01013ccc align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x000157a8 vaddr 0x010157a8 paddr 0x010157a8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011a34  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000608  01011be8  01011be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  010121f0  01013ccc  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  010157a8  010157a8  000157a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014ccc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  00014cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a3a  00000000  00000000  00015c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027cbd  00000000  00000000  0001768a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000917c  00000000  00000000  0003f347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018174  00000000  00000000  000484c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fbc  00000000  00000000  00060638  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002890  00000000  00000000  000625f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dff6  00000000  00000000  00064e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00072e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a98  00000000  00000000  00072ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007727b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0007727e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007728d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007728e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007728f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007729a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000772a5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000772b0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  000772bb  2**0
                  CONTENTS, READONLY
 26 .jdi          00005b37  00000000  00000000  000772e5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005be86  00000000  00000000  0007ce1c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01011be8 l    d  .rodata	00000000 .rodata
010121f0 l    d  .rwdata	00000000 .rwdata
010157a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 queue_type.c
00000000 l    df *ABS*	00000000 vga_demo.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
01011d14 l     O .rodata	00000108 two_over_pi
01011c94 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
01011e1c l     O .rodata	00000010 init_jk
01011e2c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
01003224 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
010035a8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01004210 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01005694 l     F .text	00000058 __sprint_r
01012002 l     O .rodata	00000010 blanks.3452
01011ff2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01007710 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01009138 l     F .text	00000058 std
01009244 l     F .text	00000008 __fp_lock
0100924c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010125f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
01013ca0 l     O .rwdata	00000004 charset
01012038 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01012180 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100d444 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100d4a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100d5a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100d6cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100d7ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100d90c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100db3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01013cbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100de24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01012bac l     O .rwdata	00001060 jtag_uart_0
01013c0c l     O .rwdata	0000002c character_lcd_0
01013c38 l     O .rwdata	00000054 pixel_buffer_dma
0100e10c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100e34c l     F .text	00000228 altera_avalon_jtag_uart_irq
0100e574 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01010a40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010ef8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01011048 l     F .text	000000f8 alt_file_locked
010112cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01011964 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01011b18 l     F .text	00000040 alt_sim_halt
0100a7e8 g     F .text	00000094 _mprec_log10
0100a8d4 g     F .text	00000088 __any_on
0100c01c g     F .text	00000070 _isatty_r
01012158 g     O .rodata	00000028 __mprec_tinytens
0100d96c g     F .text	0000006c alt_main
0100fdb0 g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
010054fc g     F .text	000000a0 _puts_r
01015804 g     O .bss	00000100 alt_irq
01002de4 g     F .text	00000018 fabs
0100c08c g     F .text	00000078 _lseek_r
01013ccc g       *ABS*	00000000 __flash_rwdata_start
0100ec6c g     F .text	00000034 alt_up_character_lcd_send_cmd
01003e70 g     F .text	00000088 __eqdf2
01000674 g     F .text	00000140 pulsing_box
01015a94 g       *ABS*	00000000 __alt_heap_start
01005484 g     F .text	00000044 printf
0100bad4 g     F .text	00000068 __sseek
010091a0 g     F .text	000000a4 __sinit
01009eac g     F .text	00000084 _setlocale_r
010092a0 g     F .text	0000009c __sfmoreglue
0100d9f8 g     F .text	00000020 __malloc_unlock
01000400 g     F .text	00000048 is_full
0100a264 g     F .text	000000e0 memmove
01009290 g     F .text	00000010 _cleanup
0100a95c g     F .text	000000bc _Balloc
0100060c g     F .text	00000068 verbose_dequeue
01000588 g     F .text	00000084 verbose_enqueue
0100f160 g     F .text	000001ac alt_up_pixel_buffer_dma_draw
01003ef8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100ebf0 g     F .text	0000007c get_DDRAM_addr
0100f120 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100bfa8 g     F .text	00000074 _fstat_r
010157b4 g     O .bss	00000004 errno
010041d8 g     F .text	00000038 __make_dp
01002dfc g     F .text	00000224 floor
0100048c g     F .text	000000fc print_queue
010157c8 g     O .bss	00000004 alt_argv
0101bc8c g       *ABS*	00000000 _gp
0100dcd0 g     F .text	00000030 usleep
01003408 g     F .text	00000070 __subsf3
0100f30c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
01012a2c g     O .rwdata	00000180 alt_fd_list
01000ef4 g     F .text	00000828 __ieee754_rem_pio2
01010b68 g     F .text	00000094 alt_find_dev
0100a1c4 g     F .text	000000a0 memcpy
0100ee04 g     F .text	0000004c alt_up_character_lcd_write_fd
01009284 g     F .text	0000000c _cleanup_r
01004008 g     F .text	000000f8 __floatsidf
01010fd0 g     F .text	00000078 alt_io_redirect
0100d128 g     F .text	00000088 __ltdf2
01011be8 g       *ABS*	00000000 __DTOR_END__
0100559c g     F .text	00000014 puts
010007b4 g     F .text	00000404 spinner
0100a738 g     F .text	000000b0 __ratio
0100f3bc g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0100e78c g     F .text	00000224 altera_avalon_jtag_uart_read
01004d30 g     F .text	00000014 malloc
010054c8 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100434c g     F .text	00000008 __udivsi3
0100d608 g     F .text	000000c4 isatty
01012068 g     O .rodata	000000c8 __mprec_tens
0100fa58 g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
01009e88 g     F .text	00000008 __locale_charset
0100171c g     F .text	0000052c __kernel_cos
010116e0 g     F .text	00000090 alt_icache_flush
010157a8 g     O .bss	00000004 __malloc_top_pad
01013c9c g     O .rwdata	00000004 __mb_cur_max
01009e90 g     F .text	0000000c _localeconv_r
0100b0c0 g     F .text	0000003c __i2b
0100986c g     F .text	0000049c __sfvwrite_r
010055b0 g     F .text	00000070 _sbrk_r
0101024c g     F .text	000000d8 helper_plot_pixel
0100c104 g     F .text	00000078 _read_r
010129f8 g     O .rwdata	0000000c __lc_ctype
01013cb4 g     O .rwdata	00000004 alt_max_fd
01004b1c g     F .text	00000138 __unpack_d
0100be84 g     F .text	00000110 _fclose_r
01009104 g     F .text	00000034 fflush
010157ac g     O .bss	00000004 __malloc_max_sbrked_mem
01002acc g     F .text	00000318 __kernel_sin
01003554 g     F .text	00000054 __extendsfdf2
01003a38 g     F .text	00000074 __adddf3
0100a618 g     F .text	00000120 __b2d
0100f3f0 g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
0100c7e8 g     F .text	00000660 __umoddi3
0100d818 g     F .text	000000f4 lseek
01013c98 g     O .rwdata	00000004 _global_impure_ptr
0100b468 g     F .text	000005f4 _realloc_r
01015a94 g       *ABS*	00000000 __bss_end
01010e00 g     F .text	000000f8 alt_iic_isr_register
0100f55c g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
010113c4 g     F .text	0000010c alt_tick
0100c17c g     F .text	0000066c __udivdi3
01012130 g     O .rodata	00000028 __mprec_bigtens
0100b348 g     F .text	00000120 __s2b
0100d1b0 g     F .text	00000194 __floatunsidf
0100a538 g     F .text	00000060 __mcmp
0100926c g     F .text	00000018 __fp_lock_all
01010db8 g     F .text	00000048 alt_ic_irq_enabled
0101132c g     F .text	00000098 alt_alarm_stop
010157d0 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01012a04 g     O .rwdata	00000028 alt_dev_null
01001c48 g     F .text	00000e84 __kernel_rem_pio2
01000448 g     F .text	00000044 is_empty
01004698 g     F .text	000000c8 __unpack_f
0100f0ec g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01010970 g     F .text	0000001c alt_dcache_flush_all
0100a404 g     F .text	00000070 __hi0bits
01010188 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01004100 g     F .text	000000d8 __fixdfsi
01013ccc g       *ABS*	00000000 __ram_rwdata_end
01013cac g     O .rwdata	00000008 alt_dev_list
0100dd00 g     F .text	00000124 write
01010324 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
010121f0 g       *ABS*	00000000 __ram_rodata_end
0100d4d0 g     F .text	000000d8 fstat
0100b228 g     F .text	00000120 __pow5mult
010157b8 g     O .bss	00000004 __nlocale_changed
01004354 g     F .text	00000008 __umodsi3
01015a94 g       *ABS*	00000000 end
01004538 g     F .text	00000160 __pack_f
0100e28c g     F .text	000000c0 altera_avalon_jtag_uart_init
01011be4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010044b8 g     F .text	00000080 __clzsi2
0100e9b0 g     F .text	00000240 altera_avalon_jtag_uart_write
01000c20 g     F .text	00000168 cos
01009190 g     F .text	00000004 __sfp_lock_acquire
0100a0e0 g     F .text	000000e4 memchr
0100ed14 g     F .text	00000078 alt_up_character_lcd_write
010056ec g     F .text	00001ec4 ___vfprintf_internal_r
01009558 g     F .text	00000314 _free_r
01011968 g     F .text	000001b0 __call_exitprocs
010157bc g     O .bss	00000004 __mlocale_changed
01013c90 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010157d4 g     O .bss	00000004 _alt_tick_rate
01000d88 g     F .text	0000016c sin
0100ad20 g     F .text	0000014c __lshift
010157d8 g     O .bss	00000004 _alt_nticks
0100da18 g     F .text	00000124 read
0100deb8 g     F .text	00000254 alt_sys_init
0100ef78 g     F .text	000000b0 alt_up_character_lcd_shift_display
01011830 g     F .text	00000134 __register_exitproc
0100ae6c g     F .text	00000254 __multiply
0100f028 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100e624 g     F .text	00000074 altera_avalon_jtag_uart_close
0100435c g     F .text	00000038 __mulsi3
010121f0 g       *ABS*	00000000 __ram_rwdata_start
01011be8 g       *ABS*	00000000 __ram_rodata_start
010157dc g     O .bss	00000028 __malloc_current_mallinfo
0100aa18 g     F .text	0000017c __d2b
0100e144 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01011610 g     F .text	000000d0 alt_get_fd
01010814 g     F .text	0000015c alt_busy_sleep
01004c54 g     F .text	000000c8 __fpcmp_parts_d
0100be14 g     F .text	00000070 _close_r
010117bc g     F .text	00000074 memcmp
0100e1f4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01015a94 g       *ABS*	00000000 __alt_stack_base
0100e23c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010075d4 g     F .text	0000013c __swsetup_r
0100ce48 g     F .text	00000258 __divdf3
0100933c g     F .text	000000f0 __sfp
0100a87c g     F .text	00000058 __copybits
010121f0 g     O .rwdata	00000408 __malloc_av_
0100919c g     F .text	00000004 __sinit_lock_release
01003aac g     F .text	000003c4 __muldf3
0100bbb8 g     F .text	00000060 __sread
01011e6c g     O .rodata	00000010 __thenan_sf
010114f0 g     F .text	00000120 alt_find_file
0101098c g     F .text	000000b4 alt_dev_llist_insert
0100d9d8 g     F .text	00000020 __malloc_lock
0100dc14 g     F .text	000000bc sbrk
01008f08 g     F .text	000001fc _fflush_r
0100bd4c g     F .text	000000c8 _calloc_r
010157a8 g       *ABS*	00000000 __bss_start
0100a344 g     F .text	00000098 memset
01000bb8 g     F .text	00000068 main
010157cc g     O .bss	00000004 alt_envp
010157b0 g     O .bss	00000004 __malloc_max_total_mem
0100f364 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0100e19c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
010034dc g     F .text	00000078 __ltsf2
0100eec8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100bacc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100bf94 g     F .text	00000014 fclose
01015904 g     O .bss	00000190 _atexit0
01007954 g     F .text	000015b4 _dtoa_r
01004d44 g     F .text	00000740 _malloc_r
01013cb8 g     O .rwdata	00000004 alt_errno
01009dd0 g     F .text	000000b8 _fwalk
0100428c g     F .text	00000060 __divsi3
01011e7c g     O .rodata	00000014 __thenan_df
0100ecd4 g     F .text	00000040 alt_up_character_lcd_open_dev
0100942c g     F .text	0000012c _malloc_trim_r
01011be8 g       *ABS*	00000000 __CTOR_END__
0100eca0 g     F .text	00000034 alt_up_character_lcd_init
0100bc18 g     F .text	000000bc strcmp
01011be8 g       *ABS*	00000000 __flash_rodata_start
01011be8 g       *ABS*	00000000 __DTOR_LIST__
01003200 g     F .text	00000024 copysign
0100d0a0 g     F .text	00000088 __nedf2
0100de84 g     F .text	00000034 alt_irq_init
0100db9c g     F .text	00000078 alt_release_fd
0100f0b8 g     F .text	00000034 alt_up_character_lcd_cursor_off
01011e90 g     O .rodata	00000100 __clz_tab
010157c0 g     O .bss	00000004 _PathLocale
01011770 g     F .text	00000014 atexit
0100bcd4 g     F .text	00000078 _write_r
01009f30 g     F .text	0000001c setlocale
01013c94 g     O .rwdata	00000004 _impure_ptr
010157c4 g     O .bss	00000004 alt_argc
01003020 g     F .text	000001e0 scalbn
01010b04 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
0100a598 g     F .text	00000080 __ulp
0100ba5c g     F .text	00000040 __isinfd
01009254 g     F .text	00000018 __fp_unlock_all
01013ca4 g     O .rwdata	00000008 alt_fs_list
0100026c g     F .text	000000cc enqueue
01000020 g       *ABS*	00000000 __ram_exceptions_start
01009e9c g     F .text	00000010 localeconv
01010c2c g     F .text	00000050 alt_ic_isr_register
01000338 g     F .text	000000c8 dequeue
01013ccc g       *ABS*	00000000 _edata
01015a94 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100e698 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01010d18 g     F .text	000000a0 alt_ic_irq_disable
0100bb3c g     F .text	0000007c __swrite
01013c8c g     O .rwdata	00000004 __malloc_trim_threshold
010114d0 g     F .text	00000020 altera_nios2_qsys_irq_init
01011784 g     F .text	00000038 exit
01009d08 g     F .text	000000c8 _fwalk_reent
0100ab94 g     F .text	0000018c __mdiff
010042ec g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01009194 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100ed8c g     F .text	00000078 alt_up_character_lcd_string
01004760 g     F .text	000000a8 __fpcmp_parts_f
01011b58 g     F .text	00000020 _exit
0100ba9c g     F .text	00000030 __isnand
010106c0 g     F .text	00000154 alt_alarm_start
01004394 g     F .text	00000124 __muldi3
01009f4c g     F .text	00000194 __smakebuf_r
01005620 g     F .text	00000074 strlen
01011140 g     F .text	0000018c open
01003f80 g     F .text	00000088 __gedf2
01010bfc g     F .text	00000030 alt_icache_flush_all
0100ee50 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01013cc0 g     O .rwdata	00000004 alt_priority_mask
01010c7c g     F .text	0000009c alt_ic_irq_enable
010001f0 g     F .text	0000007c queue_new
010075b0 g     F .text	00000024 __vfprintf_internal
010039b8 g     F .text	00000080 __subdf3
0100a474 g     F .text	000000c4 __lo0bits
01013cc4 g     O .rwdata	00000008 alt_alarm_list
01010aa0 g     F .text	00000064 _do_ctors
0100d344 g     F .text	00000100 close
01003478 g     F .text	00000064 __addsf3
0100d72c g     F .text	00000080 alt_load
01004808 g     F .text	00000314 __pack_d
01004d1c g     F .text	00000014 free
01009198 g     F .text	00000004 __sinit_lock_acquire
0100b0fc g     F .text	0000012c __multadd
0100a3dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18d60104 	addi	r3,r3,22532
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18d60104 	addi	r3,r3,22532
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6af2314 	ori	gp,gp,48268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	1095ea14 	ori	r2,r2,22440

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18d6a514 	ori	r3,r3,23188

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100d72c0 	call	100d72c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100d96c0 	call	100d96c <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <queue_new>:
#include <stdio.h>
#include <stdlib.h>
#include "queue_type.h"

Queue *queue_new(int capacity) {
 10001f0:	defffc04 	addi	sp,sp,-16
 10001f4:	dfc00315 	stw	ra,12(sp)
 10001f8:	df000215 	stw	fp,8(sp)
 10001fc:	df000204 	addi	fp,sp,8
 1000200:	e13fff15 	stw	r4,-4(fp)
    Queue *queue = malloc(sizeof(Queue));
 1000204:	01000504 	movi	r4,20
 1000208:	1004d300 	call	1004d30 <malloc>
 100020c:	e0bffe15 	stw	r2,-8(fp)
    queue->front = 0;
 1000210:	e0bffe17 	ldw	r2,-8(fp)
 1000214:	10000015 	stw	zero,0(r2)
    queue->back = 0;
 1000218:	e0bffe17 	ldw	r2,-8(fp)
 100021c:	10000115 	stw	zero,4(r2)
    queue->capacity = capacity;
 1000220:	e0fffe17 	ldw	r3,-8(fp)
 1000224:	e0bfff17 	ldw	r2,-4(fp)
 1000228:	18800215 	stw	r2,8(r3)
    queue->size = 0;
 100022c:	e0bffe17 	ldw	r2,-8(fp)
 1000230:	10000315 	stw	zero,12(r2)

    queue->array = malloc(capacity * sizeof(int));
 1000234:	e0bfff17 	ldw	r2,-4(fp)
 1000238:	1085883a 	add	r2,r2,r2
 100023c:	1085883a 	add	r2,r2,r2
 1000240:	1009883a 	mov	r4,r2
 1000244:	1004d300 	call	1004d30 <malloc>
 1000248:	1007883a 	mov	r3,r2
 100024c:	e0bffe17 	ldw	r2,-8(fp)
 1000250:	10c00415 	stw	r3,16(r2)

    return queue;
 1000254:	e0bffe17 	ldw	r2,-8(fp)
}
 1000258:	e037883a 	mov	sp,fp
 100025c:	dfc00117 	ldw	ra,4(sp)
 1000260:	df000017 	ldw	fp,0(sp)
 1000264:	dec00204 	addi	sp,sp,8
 1000268:	f800283a 	ret

0100026c <enqueue>:

int enqueue(Queue * queue, int value) {
 100026c:	defffb04 	addi	sp,sp,-20
 1000270:	dfc00415 	stw	ra,16(sp)
 1000274:	df000315 	stw	fp,12(sp)
 1000278:	df000304 	addi	fp,sp,12
 100027c:	e13ffd15 	stw	r4,-12(fp)
 1000280:	e17ffe15 	stw	r5,-8(fp)
    if (!is_full(queue)) {
 1000284:	e13ffd17 	ldw	r4,-12(fp)
 1000288:	10004000 	call	1000400 <is_full>
 100028c:	1004c03a 	cmpne	r2,r2,zero
 1000290:	1000221e 	bne	r2,zero,100031c <enqueue+0xb0>
        if (!is_empty(queue)) {
 1000294:	e13ffd17 	ldw	r4,-12(fp)
 1000298:	10004480 	call	1000448 <is_empty>
 100029c:	1004c03a 	cmpne	r2,r2,zero
 10002a0:	10000d1e 	bne	r2,zero,10002d8 <enqueue+0x6c>
            queue->back++;
 10002a4:	e0bffd17 	ldw	r2,-12(fp)
 10002a8:	10800117 	ldw	r2,4(r2)
 10002ac:	10c00044 	addi	r3,r2,1
 10002b0:	e0bffd17 	ldw	r2,-12(fp)
 10002b4:	10c00115 	stw	r3,4(r2)
            queue->back %= queue->capacity;
 10002b8:	e0bffd17 	ldw	r2,-12(fp)
 10002bc:	11000117 	ldw	r4,4(r2)
 10002c0:	e0bffd17 	ldw	r2,-12(fp)
 10002c4:	11400217 	ldw	r5,8(r2)
 10002c8:	10042ec0 	call	10042ec <__modsi3>
 10002cc:	1007883a 	mov	r3,r2
 10002d0:	e0bffd17 	ldw	r2,-12(fp)
 10002d4:	10c00115 	stw	r3,4(r2)
        }
        queue->array[queue->back] = value;
 10002d8:	e0bffd17 	ldw	r2,-12(fp)
 10002dc:	10c00417 	ldw	r3,16(r2)
 10002e0:	e0bffd17 	ldw	r2,-12(fp)
 10002e4:	10800117 	ldw	r2,4(r2)
 10002e8:	1085883a 	add	r2,r2,r2
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	1887883a 	add	r3,r3,r2
 10002f4:	e0bffe17 	ldw	r2,-8(fp)
 10002f8:	18800015 	stw	r2,0(r3)
        queue->size++;
 10002fc:	e0bffd17 	ldw	r2,-12(fp)
 1000300:	10800317 	ldw	r2,12(r2)
 1000304:	10c00044 	addi	r3,r2,1
 1000308:	e0bffd17 	ldw	r2,-12(fp)
 100030c:	10c00315 	stw	r3,12(r2)
        return 1;
 1000310:	00800044 	movi	r2,1
 1000314:	e0bfff15 	stw	r2,-4(fp)
 1000318:	00000106 	br	1000320 <enqueue+0xb4>
    } else
        return 0;
 100031c:	e03fff15 	stw	zero,-4(fp)
 1000320:	e0bfff17 	ldw	r2,-4(fp)
}
 1000324:	e037883a 	mov	sp,fp
 1000328:	dfc00117 	ldw	ra,4(sp)
 100032c:	df000017 	ldw	fp,0(sp)
 1000330:	dec00204 	addi	sp,sp,8
 1000334:	f800283a 	ret

01000338 <dequeue>:

int dequeue(Queue * queue) {
 1000338:	defffb04 	addi	sp,sp,-20
 100033c:	dfc00415 	stw	ra,16(sp)
 1000340:	df000315 	stw	fp,12(sp)
 1000344:	df000304 	addi	fp,sp,12
 1000348:	e13ffe15 	stw	r4,-8(fp)
    if (!is_empty(queue)) {
 100034c:	e13ffe17 	ldw	r4,-8(fp)
 1000350:	10004480 	call	1000448 <is_empty>
 1000354:	1004c03a 	cmpne	r2,r2,zero
 1000358:	1000221e 	bne	r2,zero,10003e4 <dequeue+0xac>
        int dequeued = queue->array[queue->front];
 100035c:	e0bffe17 	ldw	r2,-8(fp)
 1000360:	10c00417 	ldw	r3,16(r2)
 1000364:	e0bffe17 	ldw	r2,-8(fp)
 1000368:	10800017 	ldw	r2,0(r2)
 100036c:	1085883a 	add	r2,r2,r2
 1000370:	1085883a 	add	r2,r2,r2
 1000374:	1885883a 	add	r2,r3,r2
 1000378:	10800017 	ldw	r2,0(r2)
 100037c:	e0bffd15 	stw	r2,-12(fp)
        queue->size--;
 1000380:	e0bffe17 	ldw	r2,-8(fp)
 1000384:	10800317 	ldw	r2,12(r2)
 1000388:	10ffffc4 	addi	r3,r2,-1
 100038c:	e0bffe17 	ldw	r2,-8(fp)
 1000390:	10c00315 	stw	r3,12(r2)
        if (!is_empty(queue)) {
 1000394:	e13ffe17 	ldw	r4,-8(fp)
 1000398:	10004480 	call	1000448 <is_empty>
 100039c:	1004c03a 	cmpne	r2,r2,zero
 10003a0:	10000d1e 	bne	r2,zero,10003d8 <dequeue+0xa0>
            queue->front++;
 10003a4:	e0bffe17 	ldw	r2,-8(fp)
 10003a8:	10800017 	ldw	r2,0(r2)
 10003ac:	10c00044 	addi	r3,r2,1
 10003b0:	e0bffe17 	ldw	r2,-8(fp)
 10003b4:	10c00015 	stw	r3,0(r2)
            queue->front %= queue->capacity;
 10003b8:	e0bffe17 	ldw	r2,-8(fp)
 10003bc:	11000017 	ldw	r4,0(r2)
 10003c0:	e0bffe17 	ldw	r2,-8(fp)
 10003c4:	11400217 	ldw	r5,8(r2)
 10003c8:	10042ec0 	call	10042ec <__modsi3>
 10003cc:	1007883a 	mov	r3,r2
 10003d0:	e0bffe17 	ldw	r2,-8(fp)
 10003d4:	10c00015 	stw	r3,0(r2)
        }
        return dequeued;
 10003d8:	e0bffd17 	ldw	r2,-12(fp)
 10003dc:	e0bfff15 	stw	r2,-4(fp)
 10003e0:	00000106 	br	10003e8 <dequeue+0xb0>
    }
    else
        return 0;
 10003e4:	e03fff15 	stw	zero,-4(fp)
 10003e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10003ec:	e037883a 	mov	sp,fp
 10003f0:	dfc00117 	ldw	ra,4(sp)
 10003f4:	df000017 	ldw	fp,0(sp)
 10003f8:	dec00204 	addi	sp,sp,8
 10003fc:	f800283a 	ret

01000400 <is_full>:

int is_full(Queue * queue) {
 1000400:	defffd04 	addi	sp,sp,-12
 1000404:	df000215 	stw	fp,8(sp)
 1000408:	df000204 	addi	fp,sp,8
 100040c:	e13ffe15 	stw	r4,-8(fp)
    if (queue->size >= queue->capacity)
 1000410:	e0bffe17 	ldw	r2,-8(fp)
 1000414:	10c00317 	ldw	r3,12(r2)
 1000418:	e0bffe17 	ldw	r2,-8(fp)
 100041c:	10800217 	ldw	r2,8(r2)
 1000420:	18800316 	blt	r3,r2,1000430 <is_full+0x30>
        return 1;
 1000424:	00800044 	movi	r2,1
 1000428:	e0bfff15 	stw	r2,-4(fp)
 100042c:	00000106 	br	1000434 <is_full+0x34>
    else
        return 0;
 1000430:	e03fff15 	stw	zero,-4(fp)
 1000434:	e0bfff17 	ldw	r2,-4(fp)
}
 1000438:	e037883a 	mov	sp,fp
 100043c:	df000017 	ldw	fp,0(sp)
 1000440:	dec00104 	addi	sp,sp,4
 1000444:	f800283a 	ret

01000448 <is_empty>:

int is_empty(Queue * queue) {
 1000448:	defffd04 	addi	sp,sp,-12
 100044c:	df000215 	stw	fp,8(sp)
 1000450:	df000204 	addi	fp,sp,8
 1000454:	e13ffe15 	stw	r4,-8(fp)
    if (queue->size == 0)
 1000458:	e0bffe17 	ldw	r2,-8(fp)
 100045c:	10800317 	ldw	r2,12(r2)
 1000460:	1004c03a 	cmpne	r2,r2,zero
 1000464:	1000031e 	bne	r2,zero,1000474 <is_empty+0x2c>
        return 1;
 1000468:	00800044 	movi	r2,1
 100046c:	e0bfff15 	stw	r2,-4(fp)
 1000470:	00000106 	br	1000478 <is_empty+0x30>
    else
        return 0;
 1000474:	e03fff15 	stw	zero,-4(fp)
 1000478:	e0bfff17 	ldw	r2,-4(fp)
}
 100047c:	e037883a 	mov	sp,fp
 1000480:	df000017 	ldw	fp,0(sp)
 1000484:	dec00104 	addi	sp,sp,4
 1000488:	f800283a 	ret

0100048c <print_queue>:

void print_queue(Queue * queue) {
 100048c:	defffb04 	addi	sp,sp,-20
 1000490:	dfc00415 	stw	ra,16(sp)
 1000494:	df000315 	stw	fp,12(sp)
 1000498:	df000304 	addi	fp,sp,12
 100049c:	e13fff15 	stw	r4,-4(fp)
    printf("Front: %d\n", queue->front);
 10004a0:	e0bfff17 	ldw	r2,-4(fp)
 10004a4:	11400017 	ldw	r5,0(r2)
 10004a8:	01004074 	movhi	r4,257
 10004ac:	2106fa04 	addi	r4,r4,7144
 10004b0:	10054840 	call	1005484 <printf>
    printf("Back: %d\n", queue->back);
 10004b4:	e0bfff17 	ldw	r2,-4(fp)
 10004b8:	11400117 	ldw	r5,4(r2)
 10004bc:	01004074 	movhi	r4,257
 10004c0:	2106fd04 	addi	r4,r4,7156
 10004c4:	10054840 	call	1005484 <printf>
    int i;
    printf("Current List: ");
 10004c8:	01004074 	movhi	r4,257
 10004cc:	21070004 	addi	r4,r4,7168
 10004d0:	10054840 	call	1005484 <printf>
    if (queue->size == 0)
 10004d4:	e0bfff17 	ldw	r2,-4(fp)
 10004d8:	10800317 	ldw	r2,12(r2)
 10004dc:	1004c03a 	cmpne	r2,r2,zero
 10004e0:	1000041e 	bne	r2,zero,10004f4 <print_queue+0x68>
        printf("Empty");
 10004e4:	01004074 	movhi	r4,257
 10004e8:	21070404 	addi	r4,r4,7184
 10004ec:	10054840 	call	1005484 <printf>
 10004f0:	00001d06 	br	1000568 <print_queue+0xdc>
    else
        for (i = 0; i < queue->size; i++) {
 10004f4:	e03ffe15 	stw	zero,-8(fp)
 10004f8:	00001706 	br	1000558 <print_queue+0xcc>
            int index = queue->front + i;
 10004fc:	e0bfff17 	ldw	r2,-4(fp)
 1000500:	10c00017 	ldw	r3,0(r2)
 1000504:	e0bffe17 	ldw	r2,-8(fp)
 1000508:	1885883a 	add	r2,r3,r2
 100050c:	e0bffd15 	stw	r2,-12(fp)
            index %= queue->capacity;
 1000510:	e0bfff17 	ldw	r2,-4(fp)
 1000514:	11400217 	ldw	r5,8(r2)
 1000518:	e13ffd17 	ldw	r4,-12(fp)
 100051c:	10042ec0 	call	10042ec <__modsi3>
 1000520:	e0bffd15 	stw	r2,-12(fp)
            printf("%d ", queue->array[index]);
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10c00417 	ldw	r3,16(r2)
 100052c:	e0bffd17 	ldw	r2,-12(fp)
 1000530:	1085883a 	add	r2,r2,r2
 1000534:	1085883a 	add	r2,r2,r2
 1000538:	1885883a 	add	r2,r3,r2
 100053c:	11400017 	ldw	r5,0(r2)
 1000540:	01004074 	movhi	r4,257
 1000544:	21070604 	addi	r4,r4,7192
 1000548:	10054840 	call	1005484 <printf>
    int i;
    printf("Current List: ");
    if (queue->size == 0)
        printf("Empty");
    else
        for (i = 0; i < queue->size; i++) {
 100054c:	e0bffe17 	ldw	r2,-8(fp)
 1000550:	10800044 	addi	r2,r2,1
 1000554:	e0bffe15 	stw	r2,-8(fp)
 1000558:	e0bfff17 	ldw	r2,-4(fp)
 100055c:	10c00317 	ldw	r3,12(r2)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	10ffe516 	blt	r2,r3,10004fc <print_queue+0x70>
            int index = queue->front + i;
            index %= queue->capacity;
            printf("%d ", queue->array[index]);
        }
    printf("\n\n");
 1000568:	01004074 	movhi	r4,257
 100056c:	21070704 	addi	r4,r4,7196
 1000570:	100559c0 	call	100559c <puts>
}
 1000574:	e037883a 	mov	sp,fp
 1000578:	dfc00117 	ldw	ra,4(sp)
 100057c:	df000017 	ldw	fp,0(sp)
 1000580:	dec00204 	addi	sp,sp,8
 1000584:	f800283a 	ret

01000588 <verbose_enqueue>:

void verbose_enqueue(Queue * queue, int value) {
 1000588:	defffc04 	addi	sp,sp,-16
 100058c:	dfc00315 	stw	ra,12(sp)
 1000590:	df000215 	stw	fp,8(sp)
 1000594:	df000204 	addi	fp,sp,8
 1000598:	e13ffe15 	stw	r4,-8(fp)
 100059c:	e17fff15 	stw	r5,-4(fp)
    if (enqueue(queue, value)) printf("Enqueued %d\n", queue->array[queue->back]);
 10005a0:	e13ffe17 	ldw	r4,-8(fp)
 10005a4:	e17fff17 	ldw	r5,-4(fp)
 10005a8:	100026c0 	call	100026c <enqueue>
 10005ac:	1005003a 	cmpeq	r2,r2,zero
 10005b0:	10000c1e 	bne	r2,zero,10005e4 <verbose_enqueue+0x5c>
 10005b4:	e0bffe17 	ldw	r2,-8(fp)
 10005b8:	10c00417 	ldw	r3,16(r2)
 10005bc:	e0bffe17 	ldw	r2,-8(fp)
 10005c0:	10800117 	ldw	r2,4(r2)
 10005c4:	1085883a 	add	r2,r2,r2
 10005c8:	1085883a 	add	r2,r2,r2
 10005cc:	1885883a 	add	r2,r3,r2
 10005d0:	11400017 	ldw	r5,0(r2)
 10005d4:	01004074 	movhi	r4,257
 10005d8:	21070804 	addi	r4,r4,7200
 10005dc:	10054840 	call	1005484 <printf>
 10005e0:	00000306 	br	10005f0 <verbose_enqueue+0x68>
    else printf("Failed to enqueue\n");
 10005e4:	01004074 	movhi	r4,257
 10005e8:	21070c04 	addi	r4,r4,7216
 10005ec:	100559c0 	call	100559c <puts>

    print_queue(queue);
 10005f0:	e13ffe17 	ldw	r4,-8(fp)
 10005f4:	100048c0 	call	100048c <print_queue>
}
 10005f8:	e037883a 	mov	sp,fp
 10005fc:	dfc00117 	ldw	ra,4(sp)
 1000600:	df000017 	ldw	fp,0(sp)
 1000604:	dec00204 	addi	sp,sp,8
 1000608:	f800283a 	ret

0100060c <verbose_dequeue>:

void verbose_dequeue(Queue * queue) {
 100060c:	defffc04 	addi	sp,sp,-16
 1000610:	dfc00315 	stw	ra,12(sp)
 1000614:	df000215 	stw	fp,8(sp)
 1000618:	df000204 	addi	fp,sp,8
 100061c:	e13fff15 	stw	r4,-4(fp)
    int dequeued = dequeue(queue);
 1000620:	e13fff17 	ldw	r4,-4(fp)
 1000624:	10003380 	call	1000338 <dequeue>
 1000628:	e0bffe15 	stw	r2,-8(fp)
    if (dequeued) printf("Dequeued %d\n", dequeued);
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	1005003a 	cmpeq	r2,r2,zero
 1000634:	1000051e 	bne	r2,zero,100064c <verbose_dequeue+0x40>
 1000638:	01004074 	movhi	r4,257
 100063c:	21071104 	addi	r4,r4,7236
 1000640:	e17ffe17 	ldw	r5,-8(fp)
 1000644:	10054840 	call	1005484 <printf>
 1000648:	00000306 	br	1000658 <verbose_dequeue+0x4c>
    else printf("Failed to dequeue\n");
 100064c:	01004074 	movhi	r4,257
 1000650:	21071504 	addi	r4,r4,7252
 1000654:	100559c0 	call	100559c <puts>

    print_queue(queue);
 1000658:	e13fff17 	ldw	r4,-4(fp)
 100065c:	100048c0 	call	100048c <print_queue>
}
 1000660:	e037883a 	mov	sp,fp
 1000664:	dfc00117 	ldw	ra,4(sp)
 1000668:	df000017 	ldw	fp,0(sp)
 100066c:	dec00204 	addi	sp,sp,8
 1000670:	f800283a 	ret

01000674 <pulsing_box>:

int pulsing_box(alt_up_pixel_buffer_dma_dev *pixel_buffer);

int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer);

int pulsing_box(alt_up_pixel_buffer_dma_dev *pixel_buffer) {
 1000674:	defff404 	addi	sp,sp,-48
 1000678:	dfc00b15 	stw	ra,44(sp)
 100067c:	df000a15 	stw	fp,40(sp)
 1000680:	df000a04 	addi	fp,sp,40
 1000684:	e13fff15 	stw	r4,-4(fp)
    int x0 = X_OFFSET, y0 = Y_OFFSET, x1 = WIDTH, y1 = HEIGHT, i, color = 0;
 1000688:	00800184 	movi	r2,6
 100068c:	e0bffe15 	stw	r2,-8(fp)
 1000690:	e03ffd15 	stw	zero,-12(fp)
 1000694:	00805004 	movi	r2,320
 1000698:	e0bffc15 	stw	r2,-16(fp)
 100069c:	00803c04 	movi	r2,240
 10006a0:	e0bffb15 	stw	r2,-20(fp)
 10006a4:	e03ff915 	stw	zero,-28(fp)

    for (i = 0; i < HEIGHT / 2; i++) {
 10006a8:	e03ffa15 	stw	zero,-24(fp)
 10006ac:	00001a06 	br	1000718 <pulsing_box+0xa4>
        color += COLOR_INC;
 10006b0:	e0bff917 	ldw	r2,-28(fp)
 10006b4:	10808884 	addi	r2,r2,546
 10006b8:	e0bff915 	stw	r2,-28(fp)
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
 10006bc:	e0fffe17 	ldw	r3,-8(fp)
 10006c0:	e0bffa17 	ldw	r2,-24(fp)
 10006c4:	188b883a 	add	r5,r3,r2
 10006c8:	e0fffd17 	ldw	r3,-12(fp)
 10006cc:	e0bffa17 	ldw	r2,-24(fp)
 10006d0:	188d883a 	add	r6,r3,r2
 10006d4:	e0fffc17 	ldw	r3,-16(fp)
 10006d8:	e0bffa17 	ldw	r2,-24(fp)
 10006dc:	188fc83a 	sub	r7,r3,r2
 10006e0:	e0fffb17 	ldw	r3,-20(fp)
 10006e4:	e0bffa17 	ldw	r2,-24(fp)
 10006e8:	1885c83a 	sub	r2,r3,r2
 10006ec:	d8800015 	stw	r2,0(sp)
 10006f0:	e0bff917 	ldw	r2,-28(fp)
 10006f4:	d8800115 	stw	r2,4(sp)
 10006f8:	d8000215 	stw	zero,8(sp)
 10006fc:	e13fff17 	ldw	r4,-4(fp)
 1000700:	10101880 	call	1010188 <alt_up_pixel_buffer_dma_draw_rectangle>
        usleep(SLEEP);
 1000704:	010f4244 	movi	r4,15625
 1000708:	100dcd00 	call	100dcd0 <usleep>
int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer);

int pulsing_box(alt_up_pixel_buffer_dma_dev *pixel_buffer) {
    int x0 = X_OFFSET, y0 = Y_OFFSET, x1 = WIDTH, y1 = HEIGHT, i, color = 0;

    for (i = 0; i < HEIGHT / 2; i++) {
 100070c:	e0bffa17 	ldw	r2,-24(fp)
 1000710:	10800044 	addi	r2,r2,1
 1000714:	e0bffa15 	stw	r2,-24(fp)
 1000718:	e0bffa17 	ldw	r2,-24(fp)
 100071c:	10801e10 	cmplti	r2,r2,120
 1000720:	103fe31e 	bne	r2,zero,10006b0 <pulsing_box+0x3c>
        color += COLOR_INC;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }
    for (i = HEIGHT / 2; i >= 0; i--) {
 1000724:	00801e04 	movi	r2,120
 1000728:	e0bffa15 	stw	r2,-24(fp)
 100072c:	00001806 	br	1000790 <pulsing_box+0x11c>
        color = 0x0000;
 1000730:	e03ff915 	stw	zero,-28(fp)
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
 1000734:	e0fffe17 	ldw	r3,-8(fp)
 1000738:	e0bffa17 	ldw	r2,-24(fp)
 100073c:	188b883a 	add	r5,r3,r2
 1000740:	e0fffd17 	ldw	r3,-12(fp)
 1000744:	e0bffa17 	ldw	r2,-24(fp)
 1000748:	188d883a 	add	r6,r3,r2
 100074c:	e0fffc17 	ldw	r3,-16(fp)
 1000750:	e0bffa17 	ldw	r2,-24(fp)
 1000754:	188fc83a 	sub	r7,r3,r2
 1000758:	e0fffb17 	ldw	r3,-20(fp)
 100075c:	e0bffa17 	ldw	r2,-24(fp)
 1000760:	1885c83a 	sub	r2,r3,r2
 1000764:	d8800015 	stw	r2,0(sp)
 1000768:	e0bff917 	ldw	r2,-28(fp)
 100076c:	d8800115 	stw	r2,4(sp)
 1000770:	d8000215 	stw	zero,8(sp)
 1000774:	e13fff17 	ldw	r4,-4(fp)
 1000778:	10101880 	call	1010188 <alt_up_pixel_buffer_dma_draw_rectangle>
        usleep(SLEEP);
 100077c:	010f4244 	movi	r4,15625
 1000780:	100dcd00 	call	100dcd0 <usleep>
    for (i = 0; i < HEIGHT / 2; i++) {
        color += COLOR_INC;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }
    for (i = HEIGHT / 2; i >= 0; i--) {
 1000784:	e0bffa17 	ldw	r2,-24(fp)
 1000788:	10bfffc4 	addi	r2,r2,-1
 100078c:	e0bffa15 	stw	r2,-24(fp)
 1000790:	e0bffa17 	ldw	r2,-24(fp)
 1000794:	1004403a 	cmpge	r2,r2,zero
 1000798:	103fe51e 	bne	r2,zero,1000730 <pulsing_box+0xbc>
        color = 0x0000;
        alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer, x0 + i, y0 + i, x1 - i, y1 - i, color, 0);
        usleep(SLEEP);
    }

    return 0;
 100079c:	0005883a 	mov	r2,zero
}
 10007a0:	e037883a 	mov	sp,fp
 10007a4:	dfc00117 	ldw	ra,4(sp)
 10007a8:	df000017 	ldw	fp,0(sp)
 10007ac:	dec00204 	addi	sp,sp,8
 10007b0:	f800283a 	ret

010007b4 <spinner>:

int spinner(alt_up_pixel_buffer_dma_dev *pixel_buffer) {
 10007b4:	deffea04 	addi	sp,sp,-88
 10007b8:	dfc01515 	stw	ra,84(sp)
 10007bc:	df001415 	stw	fp,80(sp)
 10007c0:	dc401315 	stw	r17,76(sp)
 10007c4:	dc001215 	stw	r16,72(sp)
 10007c8:	df001204 	addi	fp,sp,72
 10007cc:	e13fff15 	stw	r4,-4(fp)
    // int x0 = -40, y0 = 120, x1 = 360, y1 = 120;
    float theta = 0.0, r = 200.0, inc = 0.01745, pi = 3.14159;
 10007d0:	e03ffe15 	stw	zero,-8(fp)
 10007d4:	0090d234 	movhi	r2,17224
 10007d8:	e0bffd15 	stw	r2,-12(fp)
 10007dc:	008f23f4 	movhi	r2,15503
 10007e0:	10bcd344 	addi	r2,r2,-3251
 10007e4:	e0bffc15 	stw	r2,-16(fp)
 10007e8:	00901274 	movhi	r2,16457
 10007ec:	1083f404 	addi	r2,r2,4048
 10007f0:	e0bffb15 	stw	r2,-20(fp)
    int x0 = 0, y0 = 0, x1 = 0, y1 = 0;
 10007f4:	e03ffa15 	stw	zero,-24(fp)
 10007f8:	e03ff915 	stw	zero,-28(fp)
 10007fc:	e03ff815 	stw	zero,-32(fp)
 1000800:	e03ff715 	stw	zero,-36(fp)
    int color = 0;
 1000804:	e03ff615 	stw	zero,-40(fp)
    int delay = 9;
 1000808:	00800244 	movi	r2,9
 100080c:	e0bff515 	stw	r2,-44(fp)

    Queue * x0_queue = queue_new(10);
 1000810:	01000284 	movi	r4,10
 1000814:	10001f00 	call	10001f0 <queue_new>
 1000818:	e0bff415 	stw	r2,-48(fp)
    Queue * y0_queue = queue_new(10);
 100081c:	01000284 	movi	r4,10
 1000820:	10001f00 	call	10001f0 <queue_new>
 1000824:	e0bff315 	stw	r2,-52(fp)
    Queue * x1_queue = queue_new(10);
 1000828:	01000284 	movi	r4,10
 100082c:	10001f00 	call	10001f0 <queue_new>
 1000830:	e0bff215 	stw	r2,-56(fp)
    Queue * y1_queue = queue_new(10);
 1000834:	01000284 	movi	r4,10
 1000838:	10001f00 	call	10001f0 <queue_new>
 100083c:	e0bff115 	stw	r2,-60(fp)

    while (theta < pi) {
 1000840:	0000aa06 	br	1000aec <spinner+0x338>
        //Rectangular coordinates unsuitable
        // y0 = 120 + (int)sqrt(-pow(x0, 2) + 320 * x0 + 14400);
        // y1 = 120 - (int)sqrt(-pow(x1, 2) + 320 * x1 + 14400);

        //Use polar instead, I don't know the cost of calculation
        x0 = (int)(r * cos(theta)) + WIDTH / 2;
 1000844:	e13ffd17 	ldw	r4,-12(fp)
 1000848:	10035540 	call	1003554 <__extendsfdf2>
 100084c:	1021883a 	mov	r16,r2
 1000850:	1823883a 	mov	r17,r3
 1000854:	e13ffe17 	ldw	r4,-8(fp)
 1000858:	10035540 	call	1003554 <__extendsfdf2>
 100085c:	100b883a 	mov	r5,r2
 1000860:	180d883a 	mov	r6,r3
 1000864:	2809883a 	mov	r4,r5
 1000868:	300b883a 	mov	r5,r6
 100086c:	1000c200 	call	1000c20 <cos>
 1000870:	100f883a 	mov	r7,r2
 1000874:	1811883a 	mov	r8,r3
 1000878:	8009883a 	mov	r4,r16
 100087c:	880b883a 	mov	r5,r17
 1000880:	380d883a 	mov	r6,r7
 1000884:	400f883a 	mov	r7,r8
 1000888:	1003aac0 	call	1003aac <__muldf3>
 100088c:	1009883a 	mov	r4,r2
 1000890:	180b883a 	mov	r5,r3
 1000894:	2005883a 	mov	r2,r4
 1000898:	2807883a 	mov	r3,r5
 100089c:	1009883a 	mov	r4,r2
 10008a0:	180b883a 	mov	r5,r3
 10008a4:	10041000 	call	1004100 <__fixdfsi>
 10008a8:	10802804 	addi	r2,r2,160
 10008ac:	e0bffa15 	stw	r2,-24(fp)
        y0 = (int)(r * sin(theta)) + HEIGHT / 2;
 10008b0:	e13ffd17 	ldw	r4,-12(fp)
 10008b4:	10035540 	call	1003554 <__extendsfdf2>
 10008b8:	1021883a 	mov	r16,r2
 10008bc:	1823883a 	mov	r17,r3
 10008c0:	e13ffe17 	ldw	r4,-8(fp)
 10008c4:	10035540 	call	1003554 <__extendsfdf2>
 10008c8:	100b883a 	mov	r5,r2
 10008cc:	180d883a 	mov	r6,r3
 10008d0:	2809883a 	mov	r4,r5
 10008d4:	300b883a 	mov	r5,r6
 10008d8:	1000d880 	call	1000d88 <sin>
 10008dc:	100f883a 	mov	r7,r2
 10008e0:	1811883a 	mov	r8,r3
 10008e4:	8009883a 	mov	r4,r16
 10008e8:	880b883a 	mov	r5,r17
 10008ec:	380d883a 	mov	r6,r7
 10008f0:	400f883a 	mov	r7,r8
 10008f4:	1003aac0 	call	1003aac <__muldf3>
 10008f8:	1009883a 	mov	r4,r2
 10008fc:	180b883a 	mov	r5,r3
 1000900:	2005883a 	mov	r2,r4
 1000904:	2807883a 	mov	r3,r5
 1000908:	1009883a 	mov	r4,r2
 100090c:	180b883a 	mov	r5,r3
 1000910:	10041000 	call	1004100 <__fixdfsi>
 1000914:	10801e04 	addi	r2,r2,120
 1000918:	e0bff915 	stw	r2,-28(fp)

        x1 = (int)(r * cos(theta + pi)) + WIDTH / 2;
 100091c:	e13ffd17 	ldw	r4,-12(fp)
 1000920:	10035540 	call	1003554 <__extendsfdf2>
 1000924:	1021883a 	mov	r16,r2
 1000928:	1823883a 	mov	r17,r3
 100092c:	e13ffe17 	ldw	r4,-8(fp)
 1000930:	e17ffb17 	ldw	r5,-20(fp)
 1000934:	10034780 	call	1003478 <__addsf3>
 1000938:	1009883a 	mov	r4,r2
 100093c:	10035540 	call	1003554 <__extendsfdf2>
 1000940:	100b883a 	mov	r5,r2
 1000944:	180d883a 	mov	r6,r3
 1000948:	2809883a 	mov	r4,r5
 100094c:	300b883a 	mov	r5,r6
 1000950:	1000c200 	call	1000c20 <cos>
 1000954:	100f883a 	mov	r7,r2
 1000958:	1811883a 	mov	r8,r3
 100095c:	8009883a 	mov	r4,r16
 1000960:	880b883a 	mov	r5,r17
 1000964:	380d883a 	mov	r6,r7
 1000968:	400f883a 	mov	r7,r8
 100096c:	1003aac0 	call	1003aac <__muldf3>
 1000970:	1009883a 	mov	r4,r2
 1000974:	180b883a 	mov	r5,r3
 1000978:	2005883a 	mov	r2,r4
 100097c:	2807883a 	mov	r3,r5
 1000980:	1009883a 	mov	r4,r2
 1000984:	180b883a 	mov	r5,r3
 1000988:	10041000 	call	1004100 <__fixdfsi>
 100098c:	10802804 	addi	r2,r2,160
 1000990:	e0bff815 	stw	r2,-32(fp)
        y1 = (int)(r * sin(theta + pi)) + HEIGHT / 2;
 1000994:	e13ffd17 	ldw	r4,-12(fp)
 1000998:	10035540 	call	1003554 <__extendsfdf2>
 100099c:	1021883a 	mov	r16,r2
 10009a0:	1823883a 	mov	r17,r3
 10009a4:	e13ffe17 	ldw	r4,-8(fp)
 10009a8:	e17ffb17 	ldw	r5,-20(fp)
 10009ac:	10034780 	call	1003478 <__addsf3>
 10009b0:	1009883a 	mov	r4,r2
 10009b4:	10035540 	call	1003554 <__extendsfdf2>
 10009b8:	100b883a 	mov	r5,r2
 10009bc:	180d883a 	mov	r6,r3
 10009c0:	2809883a 	mov	r4,r5
 10009c4:	300b883a 	mov	r5,r6
 10009c8:	1000d880 	call	1000d88 <sin>
 10009cc:	100f883a 	mov	r7,r2
 10009d0:	1811883a 	mov	r8,r3
 10009d4:	8009883a 	mov	r4,r16
 10009d8:	880b883a 	mov	r5,r17
 10009dc:	380d883a 	mov	r6,r7
 10009e0:	400f883a 	mov	r7,r8
 10009e4:	1003aac0 	call	1003aac <__muldf3>
 10009e8:	1009883a 	mov	r4,r2
 10009ec:	180b883a 	mov	r5,r3
 10009f0:	2005883a 	mov	r2,r4
 10009f4:	2807883a 	mov	r3,r5
 10009f8:	1009883a 	mov	r4,r2
 10009fc:	180b883a 	mov	r5,r3
 1000a00:	10041000 	call	1004100 <__fixdfsi>
 1000a04:	10801e04 	addi	r2,r2,120
 1000a08:	e0bff715 	stw	r2,-36(fp)

        enqueue(x0_queue, x0);
 1000a0c:	e13ff417 	ldw	r4,-48(fp)
 1000a10:	e17ffa17 	ldw	r5,-24(fp)
 1000a14:	100026c0 	call	100026c <enqueue>
        enqueue(y0_queue, y0);
 1000a18:	e13ff317 	ldw	r4,-52(fp)
 1000a1c:	e17ff917 	ldw	r5,-28(fp)
 1000a20:	100026c0 	call	100026c <enqueue>
        enqueue(x1_queue, x1);
 1000a24:	e13ff217 	ldw	r4,-56(fp)
 1000a28:	e17ff817 	ldw	r5,-32(fp)
 1000a2c:	100026c0 	call	100026c <enqueue>
        enqueue(y1_queue, y1);
 1000a30:	e13ff117 	ldw	r4,-60(fp)
 1000a34:	e17ff717 	ldw	r5,-36(fp)
 1000a38:	100026c0 	call	100026c <enqueue>

        theta += inc;
 1000a3c:	e13ffe17 	ldw	r4,-8(fp)
 1000a40:	e17ffc17 	ldw	r5,-16(fp)
 1000a44:	10034780 	call	1003478 <__addsf3>
 1000a48:	e0bffe15 	stw	r2,-8(fp)

        //color += COLOR_INC;
        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 0);
 1000a4c:	e0bff717 	ldw	r2,-36(fp)
 1000a50:	d8800015 	stw	r2,0(sp)
 1000a54:	e0bff617 	ldw	r2,-40(fp)
 1000a58:	d8800115 	stw	r2,4(sp)
 1000a5c:	d8000215 	stw	zero,8(sp)
 1000a60:	e13fff17 	ldw	r4,-4(fp)
 1000a64:	e17ffa17 	ldw	r5,-24(fp)
 1000a68:	e1bff917 	ldw	r6,-28(fp)
 1000a6c:	e1fff817 	ldw	r7,-32(fp)
 1000a70:	10103240 	call	1010324 <alt_up_pixel_buffer_dma_draw_line>

        if (delay == 0) {
 1000a74:	e0bff517 	ldw	r2,-44(fp)
 1000a78:	1004c03a 	cmpne	r2,r2,zero
 1000a7c:	1000161e 	bne	r2,zero,1000ad8 <spinner+0x324>
            x0 = dequeue(x0_queue);
 1000a80:	e13ff417 	ldw	r4,-48(fp)
 1000a84:	10003380 	call	1000338 <dequeue>
 1000a88:	e0bffa15 	stw	r2,-24(fp)
            y0 = dequeue(y0_queue);
 1000a8c:	e13ff317 	ldw	r4,-52(fp)
 1000a90:	10003380 	call	1000338 <dequeue>
 1000a94:	e0bff915 	stw	r2,-28(fp)

            x1 = dequeue(x1_queue);
 1000a98:	e13ff217 	ldw	r4,-56(fp)
 1000a9c:	10003380 	call	1000338 <dequeue>
 1000aa0:	e0bff815 	stw	r2,-32(fp)
            y1 = dequeue(y1_queue);
 1000aa4:	e13ff117 	ldw	r4,-60(fp)
 1000aa8:	10003380 	call	1000338 <dequeue>
 1000aac:	e0bff715 	stw	r2,-36(fp)

            alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
 1000ab0:	e0bff717 	ldw	r2,-36(fp)
 1000ab4:	d8800015 	stw	r2,0(sp)
 1000ab8:	d8000115 	stw	zero,4(sp)
 1000abc:	d8000215 	stw	zero,8(sp)
 1000ac0:	e13fff17 	ldw	r4,-4(fp)
 1000ac4:	e17ffa17 	ldw	r5,-24(fp)
 1000ac8:	e1bff917 	ldw	r6,-28(fp)
 1000acc:	e1fff817 	ldw	r7,-32(fp)
 1000ad0:	10103240 	call	1010324 <alt_up_pixel_buffer_dma_draw_line>
 1000ad4:	00000306 	br	1000ae4 <spinner+0x330>
        }
        else
            delay--;
 1000ad8:	e0bff517 	ldw	r2,-44(fp)
 1000adc:	10bfffc4 	addi	r2,r2,-1
 1000ae0:	e0bff515 	stw	r2,-44(fp)

        usleep(SLEEP);
 1000ae4:	010f4244 	movi	r4,15625
 1000ae8:	100dcd00 	call	100dcd0 <usleep>
    Queue * x0_queue = queue_new(10);
    Queue * y0_queue = queue_new(10);
    Queue * x1_queue = queue_new(10);
    Queue * y1_queue = queue_new(10);

    while (theta < pi) {
 1000aec:	e13ffe17 	ldw	r4,-8(fp)
 1000af0:	e17ffb17 	ldw	r5,-20(fp)
 1000af4:	10034dc0 	call	10034dc <__ltsf2>
 1000af8:	1004803a 	cmplt	r2,r2,zero
 1000afc:	103f511e 	bne	r2,zero,1000844 <spinner+0x90>

        usleep(SLEEP);
    }

    //Clean out the cleaning buffer
    while(!is_empty(x0_queue) || !is_empty(y0_queue) || !is_empty(x1_queue) || !is_empty(y1_queue)) {
 1000b00:	00001506 	br	1000b58 <spinner+0x3a4>
        x0 = dequeue(x0_queue);
 1000b04:	e13ff417 	ldw	r4,-48(fp)
 1000b08:	10003380 	call	1000338 <dequeue>
 1000b0c:	e0bffa15 	stw	r2,-24(fp)
        y0 = dequeue(y0_queue);
 1000b10:	e13ff317 	ldw	r4,-52(fp)
 1000b14:	10003380 	call	1000338 <dequeue>
 1000b18:	e0bff915 	stw	r2,-28(fp)

        x1 = dequeue(x1_queue);
 1000b1c:	e13ff217 	ldw	r4,-56(fp)
 1000b20:	10003380 	call	1000338 <dequeue>
 1000b24:	e0bff815 	stw	r2,-32(fp)
        y1 = dequeue(y1_queue);
 1000b28:	e13ff117 	ldw	r4,-60(fp)
 1000b2c:	10003380 	call	1000338 <dequeue>
 1000b30:	e0bff715 	stw	r2,-36(fp)

        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
 1000b34:	e0bff717 	ldw	r2,-36(fp)
 1000b38:	d8800015 	stw	r2,0(sp)
 1000b3c:	d8000115 	stw	zero,4(sp)
 1000b40:	d8000215 	stw	zero,8(sp)
 1000b44:	e13fff17 	ldw	r4,-4(fp)
 1000b48:	e17ffa17 	ldw	r5,-24(fp)
 1000b4c:	e1bff917 	ldw	r6,-28(fp)
 1000b50:	e1fff817 	ldw	r7,-32(fp)
 1000b54:	10103240 	call	1010324 <alt_up_pixel_buffer_dma_draw_line>

        usleep(SLEEP);
    }

    //Clean out the cleaning buffer
    while(!is_empty(x0_queue) || !is_empty(y0_queue) || !is_empty(x1_queue) || !is_empty(y1_queue)) {
 1000b58:	e13ff417 	ldw	r4,-48(fp)
 1000b5c:	10004480 	call	1000448 <is_empty>
 1000b60:	1005003a 	cmpeq	r2,r2,zero
 1000b64:	103fe71e 	bne	r2,zero,1000b04 <spinner+0x350>
 1000b68:	e13ff317 	ldw	r4,-52(fp)
 1000b6c:	10004480 	call	1000448 <is_empty>
 1000b70:	1005003a 	cmpeq	r2,r2,zero
 1000b74:	103fe31e 	bne	r2,zero,1000b04 <spinner+0x350>
 1000b78:	e13ff217 	ldw	r4,-56(fp)
 1000b7c:	10004480 	call	1000448 <is_empty>
 1000b80:	1005003a 	cmpeq	r2,r2,zero
 1000b84:	103fdf1e 	bne	r2,zero,1000b04 <spinner+0x350>
 1000b88:	e13ff117 	ldw	r4,-60(fp)
 1000b8c:	10004480 	call	1000448 <is_empty>
 1000b90:	1005003a 	cmpeq	r2,r2,zero
 1000b94:	103fdb1e 	bne	r2,zero,1000b04 <spinner+0x350>
        y1 = dequeue(y1_queue);

        alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, 0, 0);
    }

    return 0;
 1000b98:	0005883a 	mov	r2,zero
}
 1000b9c:	e037883a 	mov	sp,fp
 1000ba0:	dfc00317 	ldw	ra,12(sp)
 1000ba4:	df000217 	ldw	fp,8(sp)
 1000ba8:	dc400117 	ldw	r17,4(sp)
 1000bac:	dc000017 	ldw	r16,0(sp)
 1000bb0:	dec00404 	addi	sp,sp,16
 1000bb4:	f800283a 	ret

01000bb8 <main>:

int main(void) {
 1000bb8:	defffd04 	addi	sp,sp,-12
 1000bbc:	dfc00215 	stw	ra,8(sp)
 1000bc0:	df000115 	stw	fp,4(sp)
 1000bc4:	df000104 	addi	fp,sp,4
    printf("Hello from Nios II!\n");
 1000bc8:	01004074 	movhi	r4,257
 1000bcc:	21071a04 	addi	r4,r4,7272
 1000bd0:	100559c0 	call	100559c <puts>

    alt_up_pixel_buffer_dma_dev * pixel_buffer;

    //Opens the pixel buffer device specified by /dev/pixel_buffer_dma
    pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
 1000bd4:	01004074 	movhi	r4,257
 1000bd8:	21071f04 	addi	r4,r4,7292
 1000bdc:	100f1200 	call	100f120 <alt_up_pixel_buffer_dma_open_dev>
 1000be0:	e0bfff15 	stw	r2,-4(fp)

    //Set the background buffer address - Although we don't use the background, they only provide a function to change the background buffer address, so we must set that, and then swap it to the foreground
    //Changes the back buffer's start address
    alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
 1000be4:	e13fff17 	ldw	r4,-4(fp)
 1000be8:	01400234 	movhi	r5,8
 1000bec:	100f30c0 	call	100f30c <alt_up_pixel_buffer_dma_change_back_buffer_address>

    //Swap background and foreground buffers
    alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000bf0:	e13fff17 	ldw	r4,-4(fp)
 1000bf4:	100f3640 	call	100f364 <alt_up_pixel_buffer_dma_swap_buffers>

    //Wait for the swap to complete
    while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 1000bf8:	e13fff17 	ldw	r4,-4(fp)
 1000bfc:	100f3bc0 	call	100f3bc <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000c00:	1004c03a 	cmpne	r2,r2,zero
 1000c04:	103ffc1e 	bne	r2,zero,1000bf8 <main+0x40>

    //Clear the screen
    alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1000c08:	e13fff17 	ldw	r4,-4(fp)
 1000c0c:	000b883a 	mov	r5,zero
 1000c10:	100f3f00 	call	100f3f0 <alt_up_pixel_buffer_dma_clear_screen>

    //Do your thing
    while(1)
        spinner(pixel_buffer);
 1000c14:	e13fff17 	ldw	r4,-4(fp)
 1000c18:	10007b40 	call	10007b4 <spinner>
 1000c1c:	003ffd06 	br	1000c14 <main+0x5c>

01000c20 <cos>:
 1000c20:	00a00034 	movhi	r2,32768
 1000c24:	10bfffc4 	addi	r2,r2,-1
 1000c28:	defffa04 	addi	sp,sp,-24
 1000c2c:	114c703a 	and	r6,r2,r5
 1000c30:	008ffa74 	movhi	r2,16361
 1000c34:	10887ec4 	addi	r2,r2,8699
 1000c38:	dfc00515 	stw	ra,20(sp)
 1000c3c:	2011883a 	mov	r8,r4
 1000c40:	1180210e 	bge	r2,r6,1000cc8 <cos+0xa8>
 1000c44:	009ffc34 	movhi	r2,32752
 1000c48:	10bfffc4 	addi	r2,r2,-1
 1000c4c:	11800a0e 	bge	r2,r6,1000c78 <cos+0x58>
 1000c50:	280f883a 	mov	r7,r5
 1000c54:	400d883a 	mov	r6,r8
 1000c58:	10039b80 	call	10039b8 <__subdf3>
 1000c5c:	100d883a 	mov	r6,r2
 1000c60:	180f883a 	mov	r7,r3
 1000c64:	3005883a 	mov	r2,r6
 1000c68:	3807883a 	mov	r3,r7
 1000c6c:	dfc00517 	ldw	ra,20(sp)
 1000c70:	dec00604 	addi	sp,sp,24
 1000c74:	f800283a 	ret
 1000c78:	d9800104 	addi	r6,sp,4
 1000c7c:	1000ef40 	call	1000ef4 <__ieee754_rem_pio2>
 1000c80:	10c000cc 	andi	r3,r2,3
 1000c84:	01000044 	movi	r4,1
 1000c88:	19001926 	beq	r3,r4,1000cf0 <cos+0xd0>
 1000c8c:	00800084 	movi	r2,2
 1000c90:	18803126 	beq	r3,r2,1000d58 <cos+0x138>
 1000c94:	1800231e 	bne	r3,zero,1000d24 <cos+0x104>
 1000c98:	d8800117 	ldw	r2,4(sp)
 1000c9c:	da000317 	ldw	r8,12(sp)
 1000ca0:	d8c00217 	ldw	r3,8(sp)
 1000ca4:	da400417 	ldw	r9,16(sp)
 1000ca8:	400d883a 	mov	r6,r8
 1000cac:	180b883a 	mov	r5,r3
 1000cb0:	480f883a 	mov	r7,r9
 1000cb4:	1009883a 	mov	r4,r2
 1000cb8:	100171c0 	call	100171c <__kernel_cos>
 1000cbc:	100d883a 	mov	r6,r2
 1000cc0:	180f883a 	mov	r7,r3
 1000cc4:	003fe706 	br	1000c64 <cos+0x44>
 1000cc8:	000d883a 	mov	r6,zero
 1000ccc:	000f883a 	mov	r7,zero
 1000cd0:	100171c0 	call	100171c <__kernel_cos>
 1000cd4:	100d883a 	mov	r6,r2
 1000cd8:	180f883a 	mov	r7,r3
 1000cdc:	3005883a 	mov	r2,r6
 1000ce0:	3807883a 	mov	r3,r7
 1000ce4:	dfc00517 	ldw	ra,20(sp)
 1000ce8:	dec00604 	addi	sp,sp,24
 1000cec:	f800283a 	ret
 1000cf0:	d8800117 	ldw	r2,4(sp)
 1000cf4:	da000317 	ldw	r8,12(sp)
 1000cf8:	d8c00217 	ldw	r3,8(sp)
 1000cfc:	da400417 	ldw	r9,16(sp)
 1000d00:	d9000015 	stw	r4,0(sp)
 1000d04:	400d883a 	mov	r6,r8
 1000d08:	480f883a 	mov	r7,r9
 1000d0c:	180b883a 	mov	r5,r3
 1000d10:	1009883a 	mov	r4,r2
 1000d14:	1002acc0 	call	1002acc <__kernel_sin>
 1000d18:	100d883a 	mov	r6,r2
 1000d1c:	19e0003c 	xorhi	r7,r3,32768
 1000d20:	003fd006 	br	1000c64 <cos+0x44>
 1000d24:	d8800117 	ldw	r2,4(sp)
 1000d28:	da000317 	ldw	r8,12(sp)
 1000d2c:	d8c00217 	ldw	r3,8(sp)
 1000d30:	da400417 	ldw	r9,16(sp)
 1000d34:	d9000015 	stw	r4,0(sp)
 1000d38:	400d883a 	mov	r6,r8
 1000d3c:	480f883a 	mov	r7,r9
 1000d40:	180b883a 	mov	r5,r3
 1000d44:	1009883a 	mov	r4,r2
 1000d48:	1002acc0 	call	1002acc <__kernel_sin>
 1000d4c:	100d883a 	mov	r6,r2
 1000d50:	180f883a 	mov	r7,r3
 1000d54:	003fc306 	br	1000c64 <cos+0x44>
 1000d58:	d8800117 	ldw	r2,4(sp)
 1000d5c:	da000317 	ldw	r8,12(sp)
 1000d60:	d8c00217 	ldw	r3,8(sp)
 1000d64:	da400417 	ldw	r9,16(sp)
 1000d68:	400d883a 	mov	r6,r8
 1000d6c:	180b883a 	mov	r5,r3
 1000d70:	480f883a 	mov	r7,r9
 1000d74:	1009883a 	mov	r4,r2
 1000d78:	100171c0 	call	100171c <__kernel_cos>
 1000d7c:	100d883a 	mov	r6,r2
 1000d80:	19e0003c 	xorhi	r7,r3,32768
 1000d84:	003fb706 	br	1000c64 <cos+0x44>

01000d88 <sin>:
 1000d88:	00a00034 	movhi	r2,32768
 1000d8c:	10bfffc4 	addi	r2,r2,-1
 1000d90:	defffa04 	addi	sp,sp,-24
 1000d94:	114c703a 	and	r6,r2,r5
 1000d98:	008ffa74 	movhi	r2,16361
 1000d9c:	10887ec4 	addi	r2,r2,8699
 1000da0:	dfc00515 	stw	ra,20(sp)
 1000da4:	2011883a 	mov	r8,r4
 1000da8:	1180220e 	bge	r2,r6,1000e34 <sin+0xac>
 1000dac:	009ffc34 	movhi	r2,32752
 1000db0:	10bfffc4 	addi	r2,r2,-1
 1000db4:	11800a0e 	bge	r2,r6,1000de0 <sin+0x58>
 1000db8:	280f883a 	mov	r7,r5
 1000dbc:	400d883a 	mov	r6,r8
 1000dc0:	10039b80 	call	10039b8 <__subdf3>
 1000dc4:	100d883a 	mov	r6,r2
 1000dc8:	180f883a 	mov	r7,r3
 1000dcc:	3005883a 	mov	r2,r6
 1000dd0:	3807883a 	mov	r3,r7
 1000dd4:	dfc00517 	ldw	ra,20(sp)
 1000dd8:	dec00604 	addi	sp,sp,24
 1000ddc:	f800283a 	ret
 1000de0:	d9800104 	addi	r6,sp,4
 1000de4:	1000ef40 	call	1000ef4 <__ieee754_rem_pio2>
 1000de8:	10c000cc 	andi	r3,r2,3
 1000dec:	01000044 	movi	r4,1
 1000df0:	19001b26 	beq	r3,r4,1000e60 <sin+0xd8>
 1000df4:	00800084 	movi	r2,2
 1000df8:	18803126 	beq	r3,r2,1000ec0 <sin+0x138>
 1000dfc:	1800241e 	bne	r3,zero,1000e90 <sin+0x108>
 1000e00:	d8800117 	ldw	r2,4(sp)
 1000e04:	da000317 	ldw	r8,12(sp)
 1000e08:	d8c00217 	ldw	r3,8(sp)
 1000e0c:	da400417 	ldw	r9,16(sp)
 1000e10:	d9000015 	stw	r4,0(sp)
 1000e14:	400d883a 	mov	r6,r8
 1000e18:	480f883a 	mov	r7,r9
 1000e1c:	180b883a 	mov	r5,r3
 1000e20:	1009883a 	mov	r4,r2
 1000e24:	1002acc0 	call	1002acc <__kernel_sin>
 1000e28:	100d883a 	mov	r6,r2
 1000e2c:	180f883a 	mov	r7,r3
 1000e30:	003fe606 	br	1000dcc <sin+0x44>
 1000e34:	000d883a 	mov	r6,zero
 1000e38:	000f883a 	mov	r7,zero
 1000e3c:	d8000015 	stw	zero,0(sp)
 1000e40:	1002acc0 	call	1002acc <__kernel_sin>
 1000e44:	100d883a 	mov	r6,r2
 1000e48:	180f883a 	mov	r7,r3
 1000e4c:	3005883a 	mov	r2,r6
 1000e50:	3807883a 	mov	r3,r7
 1000e54:	dfc00517 	ldw	ra,20(sp)
 1000e58:	dec00604 	addi	sp,sp,24
 1000e5c:	f800283a 	ret
 1000e60:	d8800117 	ldw	r2,4(sp)
 1000e64:	da000317 	ldw	r8,12(sp)
 1000e68:	d8c00217 	ldw	r3,8(sp)
 1000e6c:	da400417 	ldw	r9,16(sp)
 1000e70:	400d883a 	mov	r6,r8
 1000e74:	180b883a 	mov	r5,r3
 1000e78:	480f883a 	mov	r7,r9
 1000e7c:	1009883a 	mov	r4,r2
 1000e80:	100171c0 	call	100171c <__kernel_cos>
 1000e84:	100d883a 	mov	r6,r2
 1000e88:	180f883a 	mov	r7,r3
 1000e8c:	003fcf06 	br	1000dcc <sin+0x44>
 1000e90:	d8800117 	ldw	r2,4(sp)
 1000e94:	da000317 	ldw	r8,12(sp)
 1000e98:	d8c00217 	ldw	r3,8(sp)
 1000e9c:	da400417 	ldw	r9,16(sp)
 1000ea0:	400d883a 	mov	r6,r8
 1000ea4:	180b883a 	mov	r5,r3
 1000ea8:	480f883a 	mov	r7,r9
 1000eac:	1009883a 	mov	r4,r2
 1000eb0:	100171c0 	call	100171c <__kernel_cos>
 1000eb4:	100d883a 	mov	r6,r2
 1000eb8:	19e0003c 	xorhi	r7,r3,32768
 1000ebc:	003fc306 	br	1000dcc <sin+0x44>
 1000ec0:	d8800117 	ldw	r2,4(sp)
 1000ec4:	da000317 	ldw	r8,12(sp)
 1000ec8:	d8c00217 	ldw	r3,8(sp)
 1000ecc:	da400417 	ldw	r9,16(sp)
 1000ed0:	d9000015 	stw	r4,0(sp)
 1000ed4:	400d883a 	mov	r6,r8
 1000ed8:	480f883a 	mov	r7,r9
 1000edc:	180b883a 	mov	r5,r3
 1000ee0:	1009883a 	mov	r4,r2
 1000ee4:	1002acc0 	call	1002acc <__kernel_sin>
 1000ee8:	100d883a 	mov	r6,r2
 1000eec:	19e0003c 	xorhi	r7,r3,32768
 1000ef0:	003fb606 	br	1000dcc <sin+0x44>

01000ef4 <__ieee754_rem_pio2>:
 1000ef4:	deffe304 	addi	sp,sp,-116
 1000ef8:	00a00034 	movhi	r2,32768
 1000efc:	10bfffc4 	addi	r2,r2,-1
 1000f00:	dd801915 	stw	r22,100(sp)
 1000f04:	28ac703a 	and	r22,r5,r2
 1000f08:	008ffa74 	movhi	r2,16361
 1000f0c:	10887ec4 	addi	r2,r2,8699
 1000f10:	df001b15 	stw	fp,108(sp)
 1000f14:	dfc01c15 	stw	ra,112(sp)
 1000f18:	ddc01a15 	stw	r23,104(sp)
 1000f1c:	dd401815 	stw	r21,96(sp)
 1000f20:	dd001715 	stw	r20,92(sp)
 1000f24:	dcc01615 	stw	r19,88(sp)
 1000f28:	dc801515 	stw	r18,84(sp)
 1000f2c:	dc401415 	stw	r17,80(sp)
 1000f30:	dc001315 	stw	r16,76(sp)
 1000f34:	2013883a 	mov	r9,r4
 1000f38:	d9400a15 	stw	r5,40(sp)
 1000f3c:	3039883a 	mov	fp,r6
 1000f40:	15801216 	blt	r2,r22,1000f8c <__ieee754_rem_pio2+0x98>
 1000f44:	e1400115 	stw	r5,4(fp)
 1000f48:	30000315 	stw	zero,12(r6)
 1000f4c:	e1000015 	stw	r4,0(fp)
 1000f50:	d8000b15 	stw	zero,44(sp)
 1000f54:	30000215 	stw	zero,8(r6)
 1000f58:	d8800b17 	ldw	r2,44(sp)
 1000f5c:	dfc01c17 	ldw	ra,112(sp)
 1000f60:	df001b17 	ldw	fp,108(sp)
 1000f64:	ddc01a17 	ldw	r23,104(sp)
 1000f68:	dd801917 	ldw	r22,100(sp)
 1000f6c:	dd401817 	ldw	r21,96(sp)
 1000f70:	dd001717 	ldw	r20,92(sp)
 1000f74:	dcc01617 	ldw	r19,88(sp)
 1000f78:	dc801517 	ldw	r18,84(sp)
 1000f7c:	dc401417 	ldw	r17,80(sp)
 1000f80:	dc001317 	ldw	r16,76(sp)
 1000f84:	dec01d04 	addi	sp,sp,116
 1000f88:	f800283a 	ret
 1000f8c:	009000f4 	movhi	r2,16387
 1000f90:	10b65ec4 	addi	r2,r2,-9861
 1000f94:	15800f0e 	bge	r2,r22,1000fd4 <__ieee754_rem_pio2+0xe0>
 1000f98:	00904e74 	movhi	r2,16697
 1000f9c:	10887ec4 	addi	r2,r2,8699
 1000fa0:	1580330e 	bge	r2,r22,1001070 <__ieee754_rem_pio2+0x17c>
 1000fa4:	009ffc34 	movhi	r2,32752
 1000fa8:	10bfffc4 	addi	r2,r2,-1
 1000fac:	1580fe0e 	bge	r2,r22,10013a8 <__ieee754_rem_pio2+0x4b4>
 1000fb0:	280f883a 	mov	r7,r5
 1000fb4:	480d883a 	mov	r6,r9
 1000fb8:	10039b80 	call	10039b8 <__subdf3>
 1000fbc:	e0c00115 	stw	r3,4(fp)
 1000fc0:	d8000b15 	stw	zero,44(sp)
 1000fc4:	e0800015 	stw	r2,0(fp)
 1000fc8:	e0800215 	stw	r2,8(fp)
 1000fcc:	e0c00315 	stw	r3,12(fp)
 1000fd0:	003fe106 	br	1000f58 <__ieee754_rem_pio2+0x64>
 1000fd4:	d9000a17 	ldw	r4,40(sp)
 1000fd8:	0100ce0e 	bge	zero,r4,1001314 <__ieee754_rem_pio2+0x420>
 1000fdc:	04151034 	movhi	r16,21568
 1000fe0:	044ffe74 	movhi	r17,16377
 1000fe4:	8c487ec4 	addi	r17,r17,8699
 1000fe8:	4809883a 	mov	r4,r9
 1000fec:	800d883a 	mov	r6,r16
 1000ff0:	880f883a 	mov	r7,r17
 1000ff4:	10039b80 	call	10039b8 <__subdf3>
 1000ff8:	1025883a 	mov	r18,r2
 1000ffc:	1827883a 	mov	r19,r3
 1001000:	b4413c26 	beq	r22,r17,10014f4 <__ieee754_rem_pio2+0x600>
 1001004:	040698b4 	movhi	r16,6754
 1001008:	8418cc44 	addi	r16,r16,25393
 100100c:	044f7474 	movhi	r17,15825
 1001010:	8c6d1844 	addi	r17,r17,-19359
 1001014:	1009883a 	mov	r4,r2
 1001018:	180b883a 	mov	r5,r3
 100101c:	800d883a 	mov	r6,r16
 1001020:	880f883a 	mov	r7,r17
 1001024:	10039b80 	call	10039b8 <__subdf3>
 1001028:	100d883a 	mov	r6,r2
 100102c:	9009883a 	mov	r4,r18
 1001030:	980b883a 	mov	r5,r19
 1001034:	180f883a 	mov	r7,r3
 1001038:	e0800015 	stw	r2,0(fp)
 100103c:	e0c00115 	stw	r3,4(fp)
 1001040:	10039b80 	call	10039b8 <__subdf3>
 1001044:	1009883a 	mov	r4,r2
 1001048:	800d883a 	mov	r6,r16
 100104c:	880f883a 	mov	r7,r17
 1001050:	180b883a 	mov	r5,r3
 1001054:	10039b80 	call	10039b8 <__subdf3>
 1001058:	1009883a 	mov	r4,r2
 100105c:	00800044 	movi	r2,1
 1001060:	d8800b15 	stw	r2,44(sp)
 1001064:	e0c00315 	stw	r3,12(fp)
 1001068:	e1000215 	stw	r4,8(fp)
 100106c:	003fba06 	br	1000f58 <__ieee754_rem_pio2+0x64>
 1001070:	1002de40 	call	1002de4 <fabs>
 1001074:	021b72b4 	movhi	r8,28106
 1001078:	423220c4 	addi	r8,r8,-14205
 100107c:	024ff934 	movhi	r9,16356
 1001080:	4a57cc04 	addi	r9,r9,24368
 1001084:	480f883a 	mov	r7,r9
 1001088:	400d883a 	mov	r6,r8
 100108c:	1009883a 	mov	r4,r2
 1001090:	180b883a 	mov	r5,r3
 1001094:	1025883a 	mov	r18,r2
 1001098:	1827883a 	mov	r19,r3
 100109c:	1003aac0 	call	1003aac <__muldf3>
 10010a0:	0011883a 	mov	r8,zero
 10010a4:	024ff834 	movhi	r9,16352
 10010a8:	480f883a 	mov	r7,r9
 10010ac:	400d883a 	mov	r6,r8
 10010b0:	180b883a 	mov	r5,r3
 10010b4:	1009883a 	mov	r4,r2
 10010b8:	1003a380 	call	1003a38 <__adddf3>
 10010bc:	180b883a 	mov	r5,r3
 10010c0:	1009883a 	mov	r4,r2
 10010c4:	10041000 	call	1004100 <__fixdfsi>
 10010c8:	1009883a 	mov	r4,r2
 10010cc:	d8800b15 	stw	r2,44(sp)
 10010d0:	10040080 	call	1004008 <__floatsidf>
 10010d4:	1823883a 	mov	r17,r3
 10010d8:	1009883a 	mov	r4,r2
 10010dc:	d8800c15 	stw	r2,48(sp)
 10010e0:	00effe74 	movhi	r3,49145
 10010e4:	18c87ec4 	addi	r3,r3,8699
 10010e8:	00951034 	movhi	r2,21568
 10010ec:	880b883a 	mov	r5,r17
 10010f0:	180f883a 	mov	r7,r3
 10010f4:	100d883a 	mov	r6,r2
 10010f8:	dc400d15 	stw	r17,52(sp)
 10010fc:	1003aac0 	call	1003aac <__muldf3>
 1001100:	180f883a 	mov	r7,r3
 1001104:	980b883a 	mov	r5,r19
 1001108:	9009883a 	mov	r4,r18
 100110c:	100d883a 	mov	r6,r2
 1001110:	1003a380 	call	1003a38 <__adddf3>
 1001114:	d9000c17 	ldw	r4,48(sp)
 1001118:	020698b4 	movhi	r8,6754
 100111c:	4218cc44 	addi	r8,r8,25393
 1001120:	024f7474 	movhi	r9,15825
 1001124:	4a6d1844 	addi	r9,r9,-19359
 1001128:	880b883a 	mov	r5,r17
 100112c:	480f883a 	mov	r7,r9
 1001130:	400d883a 	mov	r6,r8
 1001134:	1025883a 	mov	r18,r2
 1001138:	1827883a 	mov	r19,r3
 100113c:	1003aac0 	call	1003aac <__muldf3>
 1001140:	d9000b17 	ldw	r4,44(sp)
 1001144:	100f883a 	mov	r7,r2
 1001148:	1811883a 	mov	r8,r3
 100114c:	008007c4 	movi	r2,31
 1001150:	dc800e15 	stw	r18,56(sp)
 1001154:	3821883a 	mov	r16,r7
 1001158:	dcc00f15 	stw	r19,60(sp)
 100115c:	4023883a 	mov	r17,r8
 1001160:	11010a0e 	bge	r2,r4,100158c <__ieee754_rem_pio2+0x698>
 1001164:	d9000e17 	ldw	r4,56(sp)
 1001168:	d9400f17 	ldw	r5,60(sp)
 100116c:	800d883a 	mov	r6,r16
 1001170:	880f883a 	mov	r7,r17
 1001174:	10039b80 	call	10039b8 <__subdf3>
 1001178:	1810d53a 	srli	r8,r3,20
 100117c:	b02dd53a 	srai	r22,r22,20
 1001180:	1009883a 	mov	r4,r2
 1001184:	4201ffcc 	andi	r8,r8,2047
 1001188:	180b883a 	mov	r5,r3
 100118c:	b211c83a 	sub	r8,r22,r8
 1001190:	00800404 	movi	r2,16
 1001194:	dd801015 	stw	r22,64(sp)
 1001198:	e1000015 	stw	r4,0(fp)
 100119c:	e1400115 	stw	r5,4(fp)
 10011a0:	1200430e 	bge	r2,r8,10012b0 <__ieee754_rem_pio2+0x3bc>
 10011a4:	d9000c17 	ldw	r4,48(sp)
 10011a8:	d9400d17 	ldw	r5,52(sp)
 10011ac:	00869834 	movhi	r2,6752
 10011b0:	00cf7474 	movhi	r3,15825
 10011b4:	18ed1844 	addi	r3,r3,-19359
 10011b8:	180f883a 	mov	r7,r3
 10011bc:	100d883a 	mov	r6,r2
 10011c0:	1003aac0 	call	1003aac <__muldf3>
 10011c4:	d9000e17 	ldw	r4,56(sp)
 10011c8:	d9400f17 	ldw	r5,60(sp)
 10011cc:	100d883a 	mov	r6,r2
 10011d0:	180f883a 	mov	r7,r3
 10011d4:	1025883a 	mov	r18,r2
 10011d8:	1827883a 	mov	r19,r3
 10011dc:	10039b80 	call	10039b8 <__subdf3>
 10011e0:	d9000c17 	ldw	r4,48(sp)
 10011e4:	d9400d17 	ldw	r5,52(sp)
 10011e8:	058b80f4 	movhi	r22,11779
 10011ec:	b59c1cc4 	addi	r22,r22,28787
 10011f0:	05cee8f4 	movhi	r23,15267
 10011f4:	bdc66284 	addi	r23,r23,6538
 10011f8:	b00d883a 	mov	r6,r22
 10011fc:	b80f883a 	mov	r7,r23
 1001200:	d8801115 	stw	r2,68(sp)
 1001204:	d8c01215 	stw	r3,72(sp)
 1001208:	d8800815 	stw	r2,32(sp)
 100120c:	1003aac0 	call	1003aac <__muldf3>
 1001210:	d9001217 	ldw	r4,72(sp)
 1001214:	d9400f17 	ldw	r5,60(sp)
 1001218:	d9800817 	ldw	r6,32(sp)
 100121c:	d9000915 	stw	r4,36(sp)
 1001220:	d9c01217 	ldw	r7,72(sp)
 1001224:	d9000e17 	ldw	r4,56(sp)
 1001228:	1021883a 	mov	r16,r2
 100122c:	1823883a 	mov	r17,r3
 1001230:	10039b80 	call	10039b8 <__subdf3>
 1001234:	180b883a 	mov	r5,r3
 1001238:	900d883a 	mov	r6,r18
 100123c:	980f883a 	mov	r7,r19
 1001240:	1009883a 	mov	r4,r2
 1001244:	10039b80 	call	10039b8 <__subdf3>
 1001248:	180f883a 	mov	r7,r3
 100124c:	880b883a 	mov	r5,r17
 1001250:	8009883a 	mov	r4,r16
 1001254:	100d883a 	mov	r6,r2
 1001258:	10039b80 	call	10039b8 <__subdf3>
 100125c:	d9000817 	ldw	r4,32(sp)
 1001260:	d9401217 	ldw	r5,72(sp)
 1001264:	180f883a 	mov	r7,r3
 1001268:	100d883a 	mov	r6,r2
 100126c:	1021883a 	mov	r16,r2
 1001270:	1823883a 	mov	r17,r3
 1001274:	10039b80 	call	10039b8 <__subdf3>
 1001278:	1810d53a 	srli	r8,r3,20
 100127c:	1009883a 	mov	r4,r2
 1001280:	d8801017 	ldw	r2,64(sp)
 1001284:	4201ffcc 	andi	r8,r8,2047
 1001288:	180b883a 	mov	r5,r3
 100128c:	1211c83a 	sub	r8,r2,r8
 1001290:	00800c44 	movi	r2,49
 1001294:	e1000015 	stw	r4,0(fp)
 1001298:	e1400115 	stw	r5,4(fp)
 100129c:	1200f016 	blt	r2,r8,1001660 <__ieee754_rem_pio2+0x76c>
 10012a0:	d8c00817 	ldw	r3,32(sp)
 10012a4:	d9001217 	ldw	r4,72(sp)
 10012a8:	d8c00e15 	stw	r3,56(sp)
 10012ac:	d9000f15 	stw	r4,60(sp)
 10012b0:	e1800017 	ldw	r6,0(fp)
 10012b4:	e1c00117 	ldw	r7,4(fp)
 10012b8:	d9400f17 	ldw	r5,60(sp)
 10012bc:	d9000e17 	ldw	r4,56(sp)
 10012c0:	10039b80 	call	10039b8 <__subdf3>
 10012c4:	180b883a 	mov	r5,r3
 10012c8:	800d883a 	mov	r6,r16
 10012cc:	880f883a 	mov	r7,r17
 10012d0:	1009883a 	mov	r4,r2
 10012d4:	10039b80 	call	10039b8 <__subdf3>
 10012d8:	d9400a17 	ldw	r5,40(sp)
 10012dc:	e0800215 	stw	r2,8(fp)
 10012e0:	e1800204 	addi	r6,fp,8
 10012e4:	30c00115 	stw	r3,4(r6)
 10012e8:	283f1b0e 	bge	r5,zero,1000f58 <__ieee754_rem_pio2+0x64>
 10012ec:	e0c00117 	ldw	r3,4(fp)
 10012f0:	d8800b17 	ldw	r2,44(sp)
 10012f4:	18e0003c 	xorhi	r3,r3,32768
 10012f8:	0085c83a 	sub	r2,zero,r2
 10012fc:	e0c00115 	stw	r3,4(fp)
 1001300:	d8800b15 	stw	r2,44(sp)
 1001304:	30800117 	ldw	r2,4(r6)
 1001308:	10a0003c 	xorhi	r2,r2,32768
 100130c:	30800115 	stw	r2,4(r6)
 1001310:	003f1106 	br	1000f58 <__ieee754_rem_pio2+0x64>
 1001314:	04151034 	movhi	r16,21568
 1001318:	044ffe74 	movhi	r17,16377
 100131c:	8c487ec4 	addi	r17,r17,8699
 1001320:	4809883a 	mov	r4,r9
 1001324:	800d883a 	mov	r6,r16
 1001328:	880f883a 	mov	r7,r17
 100132c:	1003a380 	call	1003a38 <__adddf3>
 1001330:	1025883a 	mov	r18,r2
 1001334:	1827883a 	mov	r19,r3
 1001338:	b440a326 	beq	r22,r17,10015c8 <__ieee754_rem_pio2+0x6d4>
 100133c:	040698b4 	movhi	r16,6754
 1001340:	8418cc44 	addi	r16,r16,25393
 1001344:	044f7474 	movhi	r17,15825
 1001348:	8c6d1844 	addi	r17,r17,-19359
 100134c:	1009883a 	mov	r4,r2
 1001350:	180b883a 	mov	r5,r3
 1001354:	800d883a 	mov	r6,r16
 1001358:	880f883a 	mov	r7,r17
 100135c:	1003a380 	call	1003a38 <__adddf3>
 1001360:	100d883a 	mov	r6,r2
 1001364:	9009883a 	mov	r4,r18
 1001368:	980b883a 	mov	r5,r19
 100136c:	180f883a 	mov	r7,r3
 1001370:	e0800015 	stw	r2,0(fp)
 1001374:	e0c00115 	stw	r3,4(fp)
 1001378:	10039b80 	call	10039b8 <__subdf3>
 100137c:	1009883a 	mov	r4,r2
 1001380:	800d883a 	mov	r6,r16
 1001384:	880f883a 	mov	r7,r17
 1001388:	180b883a 	mov	r5,r3
 100138c:	1003a380 	call	1003a38 <__adddf3>
 1001390:	1009883a 	mov	r4,r2
 1001394:	00bfffc4 	movi	r2,-1
 1001398:	d8800b15 	stw	r2,44(sp)
 100139c:	e0c00315 	stw	r3,12(fp)
 10013a0:	e1000215 	stw	r4,8(fp)
 10013a4:	003eec06 	br	1000f58 <__ieee754_rem_pio2+0x64>
 10013a8:	b005d53a 	srai	r2,r22,20
 10013ac:	4821883a 	mov	r16,r9
 10013b0:	05505c34 	movhi	r21,16752
 10013b4:	15fefa84 	addi	r23,r2,-1046
 10013b8:	b826953a 	slli	r19,r23,20
 10013bc:	0029883a 	mov	r20,zero
 10013c0:	048000c4 	movi	r18,3
 10013c4:	b4e7c83a 	sub	r19,r22,r19
 10013c8:	980b883a 	mov	r5,r19
 10013cc:	10041000 	call	1004100 <__fixdfsi>
 10013d0:	1009883a 	mov	r4,r2
 10013d4:	10040080 	call	1004008 <__floatsidf>
 10013d8:	980b883a 	mov	r5,r19
 10013dc:	8009883a 	mov	r4,r16
 10013e0:	180f883a 	mov	r7,r3
 10013e4:	100d883a 	mov	r6,r2
 10013e8:	d8800215 	stw	r2,8(sp)
 10013ec:	d8c00315 	stw	r3,12(sp)
 10013f0:	10039b80 	call	10039b8 <__subdf3>
 10013f4:	180b883a 	mov	r5,r3
 10013f8:	a00d883a 	mov	r6,r20
 10013fc:	a80f883a 	mov	r7,r21
 1001400:	1009883a 	mov	r4,r2
 1001404:	1003aac0 	call	1003aac <__muldf3>
 1001408:	180b883a 	mov	r5,r3
 100140c:	1009883a 	mov	r4,r2
 1001410:	1823883a 	mov	r17,r3
 1001414:	1021883a 	mov	r16,r2
 1001418:	10041000 	call	1004100 <__fixdfsi>
 100141c:	1009883a 	mov	r4,r2
 1001420:	10040080 	call	1004008 <__floatsidf>
 1001424:	880b883a 	mov	r5,r17
 1001428:	8009883a 	mov	r4,r16
 100142c:	180f883a 	mov	r7,r3
 1001430:	100d883a 	mov	r6,r2
 1001434:	d8800415 	stw	r2,16(sp)
 1001438:	d8c00515 	stw	r3,20(sp)
 100143c:	10039b80 	call	10039b8 <__subdf3>
 1001440:	180b883a 	mov	r5,r3
 1001444:	000d883a 	mov	r6,zero
 1001448:	a80f883a 	mov	r7,r21
 100144c:	1009883a 	mov	r4,r2
 1001450:	1003aac0 	call	1003aac <__muldf3>
 1001454:	d8c00715 	stw	r3,28(sp)
 1001458:	d8800615 	stw	r2,24(sp)
 100145c:	00000106 	br	1001464 <__ieee754_rem_pio2+0x570>
 1001460:	8025883a 	mov	r18,r16
 1001464:	943fffc4 	addi	r16,r18,-1
 1001468:	800890fa 	slli	r4,r16,3
 100146c:	d9400204 	addi	r5,sp,8
 1001470:	000d883a 	mov	r6,zero
 1001474:	2149883a 	add	r4,r4,r5
 1001478:	20c00117 	ldw	r3,4(r4)
 100147c:	20800017 	ldw	r2,0(r4)
 1001480:	000f883a 	mov	r7,zero
 1001484:	180b883a 	mov	r5,r3
 1001488:	1009883a 	mov	r4,r2
 100148c:	1003e700 	call	1003e70 <__eqdf2>
 1001490:	103ff326 	beq	r2,zero,1001460 <__ieee754_rem_pio2+0x56c>
 1001494:	00800084 	movi	r2,2
 1001498:	00c04074 	movhi	r3,257
 100149c:	18c74504 	addi	r3,r3,7444
 10014a0:	b80d883a 	mov	r6,r23
 10014a4:	900f883a 	mov	r7,r18
 10014a8:	d9000204 	addi	r4,sp,8
 10014ac:	e00b883a 	mov	r5,fp
 10014b0:	d8800015 	stw	r2,0(sp)
 10014b4:	d8c00115 	stw	r3,4(sp)
 10014b8:	1001c480 	call	1001c48 <__kernel_rem_pio2>
 10014bc:	d8800b15 	stw	r2,44(sp)
 10014c0:	d8800a17 	ldw	r2,40(sp)
 10014c4:	103ea40e 	bge	r2,zero,1000f58 <__ieee754_rem_pio2+0x64>
 10014c8:	e0800117 	ldw	r2,4(fp)
 10014cc:	d8c00b17 	ldw	r3,44(sp)
 10014d0:	e1000204 	addi	r4,fp,8
 10014d4:	10a0003c 	xorhi	r2,r2,32768
 10014d8:	00c7c83a 	sub	r3,zero,r3
 10014dc:	e0800115 	stw	r2,4(fp)
 10014e0:	d8c00b15 	stw	r3,44(sp)
 10014e4:	20c00117 	ldw	r3,4(r4)
 10014e8:	18e0003c 	xorhi	r3,r3,32768
 10014ec:	20c00115 	stw	r3,4(r4)
 10014f0:	003e9906 	br	1000f58 <__ieee754_rem_pio2+0x64>
 10014f4:	00869834 	movhi	r2,6752
 10014f8:	00cf7474 	movhi	r3,15825
 10014fc:	18ed1844 	addi	r3,r3,-19359
 1001500:	9009883a 	mov	r4,r18
 1001504:	980b883a 	mov	r5,r19
 1001508:	180f883a 	mov	r7,r3
 100150c:	100d883a 	mov	r6,r2
 1001510:	10039b80 	call	10039b8 <__subdf3>
 1001514:	048b80f4 	movhi	r18,11779
 1001518:	949c1cc4 	addi	r18,r18,28787
 100151c:	04cee8f4 	movhi	r19,15267
 1001520:	9cc66284 	addi	r19,r19,6538
 1001524:	1009883a 	mov	r4,r2
 1001528:	180b883a 	mov	r5,r3
 100152c:	900d883a 	mov	r6,r18
 1001530:	980f883a 	mov	r7,r19
 1001534:	1021883a 	mov	r16,r2
 1001538:	1823883a 	mov	r17,r3
 100153c:	10039b80 	call	10039b8 <__subdf3>
 1001540:	100d883a 	mov	r6,r2
 1001544:	8009883a 	mov	r4,r16
 1001548:	880b883a 	mov	r5,r17
 100154c:	180f883a 	mov	r7,r3
 1001550:	e0800015 	stw	r2,0(fp)
 1001554:	e0c00115 	stw	r3,4(fp)
 1001558:	10039b80 	call	10039b8 <__subdf3>
 100155c:	180b883a 	mov	r5,r3
 1001560:	1009883a 	mov	r4,r2
 1001564:	900d883a 	mov	r6,r18
 1001568:	980f883a 	mov	r7,r19
 100156c:	10039b80 	call	10039b8 <__subdf3>
 1001570:	180b883a 	mov	r5,r3
 1001574:	1009883a 	mov	r4,r2
 1001578:	00c00044 	movi	r3,1
 100157c:	d8c00b15 	stw	r3,44(sp)
 1001580:	e1400315 	stw	r5,12(fp)
 1001584:	e1000215 	stw	r4,8(fp)
 1001588:	003e7306 	br	1000f58 <__ieee754_rem_pio2+0x64>
 100158c:	2105883a 	add	r2,r4,r4
 1001590:	1085883a 	add	r2,r2,r2
 1001594:	00c04074 	movhi	r3,257
 1001598:	18c72504 	addi	r3,r3,7316
 100159c:	10c5883a 	add	r2,r2,r3
 10015a0:	113fff17 	ldw	r4,-4(r2)
 10015a4:	b13eef26 	beq	r22,r4,1001164 <__ieee754_rem_pio2+0x270>
 10015a8:	980b883a 	mov	r5,r19
 10015ac:	400f883a 	mov	r7,r8
 10015b0:	9009883a 	mov	r4,r18
 10015b4:	800d883a 	mov	r6,r16
 10015b8:	10039b80 	call	10039b8 <__subdf3>
 10015bc:	e0c00115 	stw	r3,4(fp)
 10015c0:	e0800015 	stw	r2,0(fp)
 10015c4:	003f3a06 	br	10012b0 <__ieee754_rem_pio2+0x3bc>
 10015c8:	00869834 	movhi	r2,6752
 10015cc:	00cf7474 	movhi	r3,15825
 10015d0:	18ed1844 	addi	r3,r3,-19359
 10015d4:	9009883a 	mov	r4,r18
 10015d8:	980b883a 	mov	r5,r19
 10015dc:	180f883a 	mov	r7,r3
 10015e0:	100d883a 	mov	r6,r2
 10015e4:	1003a380 	call	1003a38 <__adddf3>
 10015e8:	048b80f4 	movhi	r18,11779
 10015ec:	949c1cc4 	addi	r18,r18,28787
 10015f0:	04cee8f4 	movhi	r19,15267
 10015f4:	9cc66284 	addi	r19,r19,6538
 10015f8:	1009883a 	mov	r4,r2
 10015fc:	180b883a 	mov	r5,r3
 1001600:	900d883a 	mov	r6,r18
 1001604:	980f883a 	mov	r7,r19
 1001608:	1021883a 	mov	r16,r2
 100160c:	1823883a 	mov	r17,r3
 1001610:	1003a380 	call	1003a38 <__adddf3>
 1001614:	100d883a 	mov	r6,r2
 1001618:	8009883a 	mov	r4,r16
 100161c:	880b883a 	mov	r5,r17
 1001620:	180f883a 	mov	r7,r3
 1001624:	e0800015 	stw	r2,0(fp)
 1001628:	e0c00115 	stw	r3,4(fp)
 100162c:	10039b80 	call	10039b8 <__subdf3>
 1001630:	180b883a 	mov	r5,r3
 1001634:	1009883a 	mov	r4,r2
 1001638:	900d883a 	mov	r6,r18
 100163c:	980f883a 	mov	r7,r19
 1001640:	1003a380 	call	1003a38 <__adddf3>
 1001644:	180b883a 	mov	r5,r3
 1001648:	1009883a 	mov	r4,r2
 100164c:	00ffffc4 	movi	r3,-1
 1001650:	d8c00b15 	stw	r3,44(sp)
 1001654:	e1400315 	stw	r5,12(fp)
 1001658:	e1000215 	stw	r4,8(fp)
 100165c:	003e3e06 	br	1000f58 <__ieee754_rem_pio2+0x64>
 1001660:	d9000c17 	ldw	r4,48(sp)
 1001664:	d9400d17 	ldw	r5,52(sp)
 1001668:	018b8034 	movhi	r6,11776
 100166c:	b80f883a 	mov	r7,r23
 1001670:	1003aac0 	call	1003aac <__muldf3>
 1001674:	d9000817 	ldw	r4,32(sp)
 1001678:	d9401217 	ldw	r5,72(sp)
 100167c:	100d883a 	mov	r6,r2
 1001680:	180f883a 	mov	r7,r3
 1001684:	1025883a 	mov	r18,r2
 1001688:	1827883a 	mov	r19,r3
 100168c:	10039b80 	call	10039b8 <__subdf3>
 1001690:	d9400d17 	ldw	r5,52(sp)
 1001694:	d9000c17 	ldw	r4,48(sp)
 1001698:	02094834 	movhi	r8,9504
 100169c:	42127044 	addi	r8,r8,18881
 10016a0:	024e5f34 	movhi	r9,14716
 10016a4:	4a60e684 	addi	r9,r9,-31846
 10016a8:	480f883a 	mov	r7,r9
 10016ac:	400d883a 	mov	r6,r8
 10016b0:	182b883a 	mov	r21,r3
 10016b4:	d8800e15 	stw	r2,56(sp)
 10016b8:	1003aac0 	call	1003aac <__muldf3>
 10016bc:	d9000817 	ldw	r4,32(sp)
 10016c0:	d9401217 	ldw	r5,72(sp)
 10016c4:	d9800e17 	ldw	r6,56(sp)
 10016c8:	a80f883a 	mov	r7,r21
 10016cc:	1021883a 	mov	r16,r2
 10016d0:	1823883a 	mov	r17,r3
 10016d4:	dd400f15 	stw	r21,60(sp)
 10016d8:	10039b80 	call	10039b8 <__subdf3>
 10016dc:	180b883a 	mov	r5,r3
 10016e0:	900d883a 	mov	r6,r18
 10016e4:	980f883a 	mov	r7,r19
 10016e8:	1009883a 	mov	r4,r2
 10016ec:	10039b80 	call	10039b8 <__subdf3>
 10016f0:	180f883a 	mov	r7,r3
 10016f4:	880b883a 	mov	r5,r17
 10016f8:	8009883a 	mov	r4,r16
 10016fc:	100d883a 	mov	r6,r2
 1001700:	10039b80 	call	10039b8 <__subdf3>
 1001704:	d9000e17 	ldw	r4,56(sp)
 1001708:	1021883a 	mov	r16,r2
 100170c:	1823883a 	mov	r17,r3
 1001710:	a80b883a 	mov	r5,r21
 1001714:	180f883a 	mov	r7,r3
 1001718:	003fa606 	br	10015b4 <__ieee754_rem_pio2+0x6c0>

0100171c <__kernel_cos>:
 100171c:	defff104 	addi	sp,sp,-60
 1001720:	00a00034 	movhi	r2,32768
 1001724:	10bfffc4 	addi	r2,r2,-1
 1001728:	dd800c15 	stw	r22,48(sp)
 100172c:	116c703a 	and	r22,r2,r5
 1001730:	0005883a 	mov	r2,zero
 1001734:	dd000a15 	stw	r20,40(sp)
 1001738:	d8800215 	stw	r2,8(sp)
 100173c:	2029883a 	mov	r20,r4
 1001740:	008f9034 	movhi	r2,15936
 1001744:	10bfffc4 	addi	r2,r2,-1
 1001748:	0009883a 	mov	r4,zero
 100174c:	dd400b15 	stw	r21,44(sp)
 1001750:	dfc00e15 	stw	ra,56(sp)
 1001754:	ddc00d15 	stw	r23,52(sp)
 1001758:	dcc00915 	stw	r19,36(sp)
 100175c:	dc800815 	stw	r18,32(sp)
 1001760:	dc400715 	stw	r17,28(sp)
 1001764:	dc000615 	stw	r16,24(sp)
 1001768:	282b883a 	mov	r21,r5
 100176c:	d9800415 	stw	r6,16(sp)
 1001770:	d9c00515 	stw	r7,20(sp)
 1001774:	d9000315 	stw	r4,12(sp)
 1001778:	15809216 	blt	r2,r22,10019c4 <__kernel_cos+0x2a8>
 100177c:	a009883a 	mov	r4,r20
 1001780:	10041000 	call	1004100 <__fixdfsi>
 1001784:	10011c26 	beq	r2,zero,1001bf8 <__kernel_cos+0x4dc>
 1001788:	a009883a 	mov	r4,r20
 100178c:	a80b883a 	mov	r5,r21
 1001790:	a00d883a 	mov	r6,r20
 1001794:	a80f883a 	mov	r7,r21
 1001798:	1003aac0 	call	1003aac <__muldf3>
 100179c:	1021883a 	mov	r16,r2
 10017a0:	1823883a 	mov	r17,r3
 10017a4:	1025883a 	mov	r18,r2
 10017a8:	1827883a 	mov	r19,r3
 10017ac:	00afa234 	movhi	r2,48776
 10017b0:	108e3504 	addi	r2,r2,14548
 10017b4:	00ef6a74 	movhi	r3,48553
 10017b8:	18feba44 	addi	r3,r3,-1303
 10017bc:	8009883a 	mov	r4,r16
 10017c0:	880b883a 	mov	r5,r17
 10017c4:	180f883a 	mov	r7,r3
 10017c8:	100d883a 	mov	r6,r2
 10017cc:	1003aac0 	call	1003aac <__muldf3>
 10017d0:	022f6d74 	movhi	r8,48565
 10017d4:	422c7104 	addi	r8,r8,-20028
 10017d8:	024f88b4 	movhi	r9,15906
 10017dc:	4a7ba784 	addi	r9,r9,-4450
 10017e0:	480f883a 	mov	r7,r9
 10017e4:	400d883a 	mov	r6,r8
 10017e8:	180b883a 	mov	r5,r3
 10017ec:	1009883a 	mov	r4,r2
 10017f0:	1003a380 	call	1003a38 <__adddf3>
 10017f4:	180f883a 	mov	r7,r3
 10017f8:	8009883a 	mov	r4,r16
 10017fc:	880b883a 	mov	r5,r17
 1001800:	100d883a 	mov	r6,r2
 1001804:	1003aac0 	call	1003aac <__muldf3>
 1001808:	02202734 	movhi	r8,32924
 100180c:	4214ab44 	addi	r8,r8,21165
 1001810:	024fa4b4 	movhi	r9,16018
 1001814:	4a5f93c4 	addi	r9,r9,32335
 1001818:	480f883a 	mov	r7,r9
 100181c:	400d883a 	mov	r6,r8
 1001820:	180b883a 	mov	r5,r3
 1001824:	1009883a 	mov	r4,r2
 1001828:	10039b80 	call	10039b8 <__subdf3>
 100182c:	180f883a 	mov	r7,r3
 1001830:	8009883a 	mov	r4,r16
 1001834:	880b883a 	mov	r5,r17
 1001838:	100d883a 	mov	r6,r2
 100183c:	1003aac0 	call	1003aac <__muldf3>
 1001840:	020672f4 	movhi	r8,6603
 1001844:	42056404 	addi	r8,r8,5520
 1001848:	024fbeb4 	movhi	r9,16122
 100184c:	4a406804 	addi	r9,r9,416
 1001850:	480f883a 	mov	r7,r9
 1001854:	400d883a 	mov	r6,r8
 1001858:	180b883a 	mov	r5,r3
 100185c:	1009883a 	mov	r4,r2
 1001860:	1003a380 	call	1003a38 <__adddf3>
 1001864:	180f883a 	mov	r7,r3
 1001868:	8009883a 	mov	r4,r16
 100186c:	880b883a 	mov	r5,r17
 1001870:	100d883a 	mov	r6,r2
 1001874:	1003aac0 	call	1003aac <__muldf3>
 1001878:	0205b074 	movhi	r8,5825
 100187c:	42145dc4 	addi	r8,r8,20855
 1001880:	024fd5f4 	movhi	r9,16215
 1001884:	4a705b04 	addi	r9,r9,-16020
 1001888:	480f883a 	mov	r7,r9
 100188c:	400d883a 	mov	r6,r8
 1001890:	180b883a 	mov	r5,r3
 1001894:	1009883a 	mov	r4,r2
 1001898:	10039b80 	call	10039b8 <__subdf3>
 100189c:	180f883a 	mov	r7,r3
 10018a0:	8009883a 	mov	r4,r16
 10018a4:	880b883a 	mov	r5,r17
 10018a8:	100d883a 	mov	r6,r2
 10018ac:	1003aac0 	call	1003aac <__muldf3>
 10018b0:	02155574 	movhi	r8,21845
 10018b4:	42155304 	addi	r8,r8,21836
 10018b8:	024fe974 	movhi	r9,16293
 10018bc:	4a555544 	addi	r9,r9,21845
 10018c0:	480f883a 	mov	r7,r9
 10018c4:	400d883a 	mov	r6,r8
 10018c8:	180b883a 	mov	r5,r3
 10018cc:	1009883a 	mov	r4,r2
 10018d0:	1003a380 	call	1003a38 <__adddf3>
 10018d4:	180f883a 	mov	r7,r3
 10018d8:	880b883a 	mov	r5,r17
 10018dc:	8009883a 	mov	r4,r16
 10018e0:	100d883a 	mov	r6,r2
 10018e4:	1003aac0 	call	1003aac <__muldf3>
 10018e8:	1021883a 	mov	r16,r2
 10018ec:	1823883a 	mov	r17,r3
 10018f0:	0005883a 	mov	r2,zero
 10018f4:	00cff834 	movhi	r3,16352
 10018f8:	9009883a 	mov	r4,r18
 10018fc:	980b883a 	mov	r5,r19
 1001900:	180f883a 	mov	r7,r3
 1001904:	100d883a 	mov	r6,r2
 1001908:	1003aac0 	call	1003aac <__muldf3>
 100190c:	980b883a 	mov	r5,r19
 1001910:	880f883a 	mov	r7,r17
 1001914:	9009883a 	mov	r4,r18
 1001918:	800d883a 	mov	r6,r16
 100191c:	1025883a 	mov	r18,r2
 1001920:	1827883a 	mov	r19,r3
 1001924:	1003aac0 	call	1003aac <__muldf3>
 1001928:	d9c00517 	ldw	r7,20(sp)
 100192c:	d9800417 	ldw	r6,16(sp)
 1001930:	a80b883a 	mov	r5,r21
 1001934:	a009883a 	mov	r4,r20
 1001938:	1021883a 	mov	r16,r2
 100193c:	1823883a 	mov	r17,r3
 1001940:	1003aac0 	call	1003aac <__muldf3>
 1001944:	180f883a 	mov	r7,r3
 1001948:	880b883a 	mov	r5,r17
 100194c:	8009883a 	mov	r4,r16
 1001950:	100d883a 	mov	r6,r2
 1001954:	10039b80 	call	10039b8 <__subdf3>
 1001958:	180f883a 	mov	r7,r3
 100195c:	980b883a 	mov	r5,r19
 1001960:	9009883a 	mov	r4,r18
 1001964:	100d883a 	mov	r6,r2
 1001968:	10039b80 	call	10039b8 <__subdf3>
 100196c:	0011883a 	mov	r8,zero
 1001970:	024ffc34 	movhi	r9,16368
 1001974:	480b883a 	mov	r5,r9
 1001978:	180f883a 	mov	r7,r3
 100197c:	4009883a 	mov	r4,r8
 1001980:	100d883a 	mov	r6,r2
 1001984:	10039b80 	call	10039b8 <__subdf3>
 1001988:	100d883a 	mov	r6,r2
 100198c:	180f883a 	mov	r7,r3
 1001990:	3005883a 	mov	r2,r6
 1001994:	3807883a 	mov	r3,r7
 1001998:	dfc00e17 	ldw	ra,56(sp)
 100199c:	ddc00d17 	ldw	r23,52(sp)
 10019a0:	dd800c17 	ldw	r22,48(sp)
 10019a4:	dd400b17 	ldw	r21,44(sp)
 10019a8:	dd000a17 	ldw	r20,40(sp)
 10019ac:	dcc00917 	ldw	r19,36(sp)
 10019b0:	dc800817 	ldw	r18,32(sp)
 10019b4:	dc400717 	ldw	r17,28(sp)
 10019b8:	dc000617 	ldw	r16,24(sp)
 10019bc:	dec00f04 	addi	sp,sp,60
 10019c0:	f800283a 	ret
 10019c4:	280f883a 	mov	r7,r5
 10019c8:	a009883a 	mov	r4,r20
 10019cc:	a00d883a 	mov	r6,r20
 10019d0:	1003aac0 	call	1003aac <__muldf3>
 10019d4:	1021883a 	mov	r16,r2
 10019d8:	1823883a 	mov	r17,r3
 10019dc:	1025883a 	mov	r18,r2
 10019e0:	1827883a 	mov	r19,r3
 10019e4:	00afa234 	movhi	r2,48776
 10019e8:	108e3504 	addi	r2,r2,14548
 10019ec:	00ef6a74 	movhi	r3,48553
 10019f0:	18feba44 	addi	r3,r3,-1303
 10019f4:	8009883a 	mov	r4,r16
 10019f8:	880b883a 	mov	r5,r17
 10019fc:	180f883a 	mov	r7,r3
 1001a00:	100d883a 	mov	r6,r2
 1001a04:	1003aac0 	call	1003aac <__muldf3>
 1001a08:	022f6d74 	movhi	r8,48565
 1001a0c:	422c7104 	addi	r8,r8,-20028
 1001a10:	024f88b4 	movhi	r9,15906
 1001a14:	4a7ba784 	addi	r9,r9,-4450
 1001a18:	480f883a 	mov	r7,r9
 1001a1c:	400d883a 	mov	r6,r8
 1001a20:	180b883a 	mov	r5,r3
 1001a24:	1009883a 	mov	r4,r2
 1001a28:	1003a380 	call	1003a38 <__adddf3>
 1001a2c:	180f883a 	mov	r7,r3
 1001a30:	8009883a 	mov	r4,r16
 1001a34:	880b883a 	mov	r5,r17
 1001a38:	100d883a 	mov	r6,r2
 1001a3c:	1003aac0 	call	1003aac <__muldf3>
 1001a40:	02202734 	movhi	r8,32924
 1001a44:	4214ab44 	addi	r8,r8,21165
 1001a48:	024fa4b4 	movhi	r9,16018
 1001a4c:	4a5f93c4 	addi	r9,r9,32335
 1001a50:	480f883a 	mov	r7,r9
 1001a54:	400d883a 	mov	r6,r8
 1001a58:	180b883a 	mov	r5,r3
 1001a5c:	1009883a 	mov	r4,r2
 1001a60:	10039b80 	call	10039b8 <__subdf3>
 1001a64:	180f883a 	mov	r7,r3
 1001a68:	8009883a 	mov	r4,r16
 1001a6c:	880b883a 	mov	r5,r17
 1001a70:	100d883a 	mov	r6,r2
 1001a74:	1003aac0 	call	1003aac <__muldf3>
 1001a78:	020672f4 	movhi	r8,6603
 1001a7c:	42056404 	addi	r8,r8,5520
 1001a80:	024fbeb4 	movhi	r9,16122
 1001a84:	4a406804 	addi	r9,r9,416
 1001a88:	480f883a 	mov	r7,r9
 1001a8c:	400d883a 	mov	r6,r8
 1001a90:	180b883a 	mov	r5,r3
 1001a94:	1009883a 	mov	r4,r2
 1001a98:	1003a380 	call	1003a38 <__adddf3>
 1001a9c:	180f883a 	mov	r7,r3
 1001aa0:	8009883a 	mov	r4,r16
 1001aa4:	880b883a 	mov	r5,r17
 1001aa8:	100d883a 	mov	r6,r2
 1001aac:	1003aac0 	call	1003aac <__muldf3>
 1001ab0:	0205b074 	movhi	r8,5825
 1001ab4:	42145dc4 	addi	r8,r8,20855
 1001ab8:	024fd5f4 	movhi	r9,16215
 1001abc:	4a705b04 	addi	r9,r9,-16020
 1001ac0:	480f883a 	mov	r7,r9
 1001ac4:	400d883a 	mov	r6,r8
 1001ac8:	180b883a 	mov	r5,r3
 1001acc:	1009883a 	mov	r4,r2
 1001ad0:	10039b80 	call	10039b8 <__subdf3>
 1001ad4:	180f883a 	mov	r7,r3
 1001ad8:	8009883a 	mov	r4,r16
 1001adc:	880b883a 	mov	r5,r17
 1001ae0:	100d883a 	mov	r6,r2
 1001ae4:	1003aac0 	call	1003aac <__muldf3>
 1001ae8:	02155574 	movhi	r8,21845
 1001aec:	42155304 	addi	r8,r8,21836
 1001af0:	024fe974 	movhi	r9,16293
 1001af4:	4a555544 	addi	r9,r9,21845
 1001af8:	480f883a 	mov	r7,r9
 1001afc:	400d883a 	mov	r6,r8
 1001b00:	180b883a 	mov	r5,r3
 1001b04:	1009883a 	mov	r4,r2
 1001b08:	1003a380 	call	1003a38 <__adddf3>
 1001b0c:	180f883a 	mov	r7,r3
 1001b10:	880b883a 	mov	r5,r17
 1001b14:	8009883a 	mov	r4,r16
 1001b18:	100d883a 	mov	r6,r2
 1001b1c:	1003aac0 	call	1003aac <__muldf3>
 1001b20:	1021883a 	mov	r16,r2
 1001b24:	008ff4f4 	movhi	r2,16339
 1001b28:	108ccc84 	addi	r2,r2,13106
 1001b2c:	1823883a 	mov	r17,r3
 1001b30:	15bf6f0e 	bge	r2,r22,10018f0 <__kernel_cos+0x1d4>
 1001b34:	008ffa74 	movhi	r2,16361
 1001b38:	1580320e 	bge	r2,r22,1001c04 <__kernel_cos+0x4e8>
 1001b3c:	0005883a 	mov	r2,zero
 1001b40:	010ff9f4 	movhi	r4,16359
 1001b44:	002d883a 	mov	r22,zero
 1001b48:	d8800015 	stw	r2,0(sp)
 1001b4c:	05cff4b4 	movhi	r23,16338
 1001b50:	d9000115 	stw	r4,4(sp)
 1001b54:	0005883a 	mov	r2,zero
 1001b58:	00cff834 	movhi	r3,16352
 1001b5c:	9009883a 	mov	r4,r18
 1001b60:	980b883a 	mov	r5,r19
 1001b64:	180f883a 	mov	r7,r3
 1001b68:	100d883a 	mov	r6,r2
 1001b6c:	1003aac0 	call	1003aac <__muldf3>
 1001b70:	180b883a 	mov	r5,r3
 1001b74:	b80f883a 	mov	r7,r23
 1001b78:	1009883a 	mov	r4,r2
 1001b7c:	b00d883a 	mov	r6,r22
 1001b80:	10039b80 	call	10039b8 <__subdf3>
 1001b84:	980b883a 	mov	r5,r19
 1001b88:	880f883a 	mov	r7,r17
 1001b8c:	9009883a 	mov	r4,r18
 1001b90:	800d883a 	mov	r6,r16
 1001b94:	1025883a 	mov	r18,r2
 1001b98:	1827883a 	mov	r19,r3
 1001b9c:	1003aac0 	call	1003aac <__muldf3>
 1001ba0:	d9c00517 	ldw	r7,20(sp)
 1001ba4:	d9800417 	ldw	r6,16(sp)
 1001ba8:	a80b883a 	mov	r5,r21
 1001bac:	a009883a 	mov	r4,r20
 1001bb0:	1021883a 	mov	r16,r2
 1001bb4:	1823883a 	mov	r17,r3
 1001bb8:	1003aac0 	call	1003aac <__muldf3>
 1001bbc:	180f883a 	mov	r7,r3
 1001bc0:	880b883a 	mov	r5,r17
 1001bc4:	8009883a 	mov	r4,r16
 1001bc8:	100d883a 	mov	r6,r2
 1001bcc:	10039b80 	call	10039b8 <__subdf3>
 1001bd0:	180f883a 	mov	r7,r3
 1001bd4:	980b883a 	mov	r5,r19
 1001bd8:	9009883a 	mov	r4,r18
 1001bdc:	100d883a 	mov	r6,r2
 1001be0:	10039b80 	call	10039b8 <__subdf3>
 1001be4:	d9400117 	ldw	r5,4(sp)
 1001be8:	d9000017 	ldw	r4,0(sp)
 1001bec:	180f883a 	mov	r7,r3
 1001bf0:	100d883a 	mov	r6,r2
 1001bf4:	003f6306 	br	1001984 <__kernel_cos+0x268>
 1001bf8:	000d883a 	mov	r6,zero
 1001bfc:	01cffc34 	movhi	r7,16368
 1001c00:	003f6306 	br	1001990 <__kernel_cos+0x274>
 1001c04:	00bff834 	movhi	r2,65504
 1001c08:	b0ad883a 	add	r22,r22,r2
 1001c0c:	dd800315 	stw	r22,12(sp)
 1001c10:	d9000317 	ldw	r4,12(sp)
 1001c14:	0005883a 	mov	r2,zero
 1001c18:	00cffc34 	movhi	r3,16368
 1001c1c:	002d883a 	mov	r22,zero
 1001c20:	200f883a 	mov	r7,r4
 1001c24:	202f883a 	mov	r23,r4
 1001c28:	180b883a 	mov	r5,r3
 1001c2c:	1009883a 	mov	r4,r2
 1001c30:	b00d883a 	mov	r6,r22
 1001c34:	d8800215 	stw	r2,8(sp)
 1001c38:	10039b80 	call	10039b8 <__subdf3>
 1001c3c:	d8800015 	stw	r2,0(sp)
 1001c40:	d8c00115 	stw	r3,4(sp)
 1001c44:	003fc306 	br	1001b54 <__kernel_cos+0x438>

01001c48 <__kernel_rem_pio2>:
 1001c48:	deff5304 	addi	sp,sp,-692
 1001c4c:	d880ad17 	ldw	r2,692(sp)
 1001c50:	d9009615 	stw	r4,600(sp)
 1001c54:	d9409715 	stw	r5,604(sp)
 1001c58:	1087883a 	add	r3,r2,r2
 1001c5c:	18c7883a 	add	r3,r3,r3
 1001c60:	00804074 	movhi	r2,257
 1001c64:	10878704 	addi	r2,r2,7708
 1001c68:	1887883a 	add	r3,r3,r2
 1001c6c:	18c00017 	ldw	r3,0(r3)
 1001c70:	313fff44 	addi	r4,r6,-3
 1001c74:	01400604 	movi	r5,24
 1001c78:	df00ab15 	stw	fp,684(sp)
 1001c7c:	dc00a315 	stw	r16,652(sp)
 1001c80:	d8c09515 	stw	r3,596(sp)
 1001c84:	dfc0ac15 	stw	ra,688(sp)
 1001c88:	ddc0aa15 	stw	r23,680(sp)
 1001c8c:	dd80a915 	stw	r22,676(sp)
 1001c90:	dd40a815 	stw	r21,672(sp)
 1001c94:	dd00a715 	stw	r20,668(sp)
 1001c98:	dcc0a615 	stw	r19,664(sp)
 1001c9c:	dc80a515 	stw	r18,660(sp)
 1001ca0:	dc40a415 	stw	r17,656(sp)
 1001ca4:	3021883a 	mov	r16,r6
 1001ca8:	d9c09815 	stw	r7,608(sp)
 1001cac:	100428c0 	call	100428c <__divsi3>
 1001cb0:	d8c09817 	ldw	r3,608(sp)
 1001cb4:	d8808c15 	stw	r2,560(sp)
 1001cb8:	1f3fffc4 	addi	fp,r3,-1
 1001cbc:	10031a16 	blt	r2,zero,1002928 <__kernel_rem_pio2+0xce0>
 1001cc0:	d9008c17 	ldw	r4,560(sp)
 1001cc4:	017ffa04 	movi	r5,-24
 1001cc8:	100435c0 	call	100435c <__mulsi3>
 1001ccc:	d9009517 	ldw	r4,596(sp)
 1001cd0:	8085883a 	add	r2,r16,r2
 1001cd4:	10bffa04 	addi	r2,r2,-24
 1001cd8:	2707883a 	add	r3,r4,fp
 1001cdc:	d8809315 	stw	r2,588(sp)
 1001ce0:	18001616 	blt	r3,zero,1001d3c <__kernel_rem_pio2+0xf4>
 1001ce4:	d9408c17 	ldw	r5,560(sp)
 1001ce8:	d980ae17 	ldw	r6,696(sp)
 1001cec:	dc801404 	addi	r18,sp,80
 1001cf0:	2f21c83a 	sub	r16,r5,fp
 1001cf4:	8405883a 	add	r2,r16,r16
 1001cf8:	1085883a 	add	r2,r2,r2
 1001cfc:	30a3883a 	add	r17,r6,r2
 1001d00:	80e7883a 	add	r19,r16,r3
 1001d04:	00000106 	br	1001d0c <__kernel_rem_pio2+0xc4>
 1001d08:	84000044 	addi	r16,r16,1
 1001d0c:	0009883a 	mov	r4,zero
 1001d10:	000b883a 	mov	r5,zero
 1001d14:	80000416 	blt	r16,zero,1001d28 <__kernel_rem_pio2+0xe0>
 1001d18:	89000017 	ldw	r4,0(r17)
 1001d1c:	10040080 	call	1004008 <__floatsidf>
 1001d20:	1009883a 	mov	r4,r2
 1001d24:	180b883a 	mov	r5,r3
 1001d28:	91400115 	stw	r5,4(r18)
 1001d2c:	91000015 	stw	r4,0(r18)
 1001d30:	8c400104 	addi	r17,r17,4
 1001d34:	94800204 	addi	r18,r18,8
 1001d38:	84fff31e 	bne	r16,r19,1001d08 <__kernel_rem_pio2+0xc0>
 1001d3c:	d9c09517 	ldw	r7,596(sp)
 1001d40:	38002416 	blt	r7,zero,1001dd4 <__kernel_rem_pio2+0x18c>
 1001d44:	da809817 	ldw	r10,608(sp)
 1001d48:	e029883a 	mov	r20,fp
 1001d4c:	dd406404 	addi	r21,sp,400
 1001d50:	3aaf883a 	add	r23,r7,r10
 1001d54:	e02c403a 	cmpge	r22,fp,zero
 1001d58:	b0023e26 	beq	r22,zero,1002654 <__kernel_rem_pio2+0xa0c>
 1001d5c:	dcc09617 	ldw	r19,600(sp)
 1001d60:	0021883a 	mov	r16,zero
 1001d64:	0025883a 	mov	r18,zero
 1001d68:	0023883a 	mov	r17,zero
 1001d6c:	a489c83a 	sub	r4,r20,r18
 1001d70:	200890fa 	slli	r4,r4,3
 1001d74:	99800017 	ldw	r6,0(r19)
 1001d78:	99c00117 	ldw	r7,4(r19)
 1001d7c:	26c9883a 	add	r4,r4,sp
 1001d80:	20c01517 	ldw	r3,84(r4)
 1001d84:	20801417 	ldw	r2,80(r4)
 1001d88:	94800044 	addi	r18,r18,1
 1001d8c:	180b883a 	mov	r5,r3
 1001d90:	1009883a 	mov	r4,r2
 1001d94:	1003aac0 	call	1003aac <__muldf3>
 1001d98:	180f883a 	mov	r7,r3
 1001d9c:	880b883a 	mov	r5,r17
 1001da0:	8009883a 	mov	r4,r16
 1001da4:	100d883a 	mov	r6,r2
 1001da8:	1003a380 	call	1003a38 <__adddf3>
 1001dac:	1021883a 	mov	r16,r2
 1001db0:	d8809817 	ldw	r2,608(sp)
 1001db4:	9cc00204 	addi	r19,r19,8
 1001db8:	1823883a 	mov	r17,r3
 1001dbc:	14bfeb1e 	bne	r2,r18,1001d6c <__kernel_rem_pio2+0x124>
 1001dc0:	a5000044 	addi	r20,r20,1
 1001dc4:	ac400115 	stw	r17,4(r21)
 1001dc8:	ac000015 	stw	r16,0(r21)
 1001dcc:	ad400204 	addi	r21,r21,8
 1001dd0:	a5ffe11e 	bne	r20,r23,1001d58 <__kernel_rem_pio2+0x110>
 1001dd4:	d8c09517 	ldw	r3,596(sp)
 1001dd8:	d9409317 	ldw	r5,588(sp)
 1001ddc:	e038403a 	cmpge	fp,fp,zero
 1001de0:	d8c08d15 	stw	r3,564(sp)
 1001de4:	d9008d17 	ldw	r4,564(sp)
 1001de8:	18c5883a 	add	r2,r3,r3
 1001dec:	10c7883a 	add	r3,r2,r3
 1001df0:	1907883a 	add	r3,r3,r4
 1001df4:	1085883a 	add	r2,r2,r2
 1001df8:	16c5883a 	add	r2,r2,sp
 1001dfc:	1ec7883a 	add	r3,r3,sp
 1001e00:	29400050 	cmplti	r5,r5,1
 1001e04:	df00a215 	stw	fp,648(sp)
 1001e08:	d8809915 	stw	r2,612(sp)
 1001e0c:	d8c0a115 	stw	r3,644(sp)
 1001e10:	d940a015 	stw	r5,640(sp)
 1001e14:	d9808d17 	ldw	r6,564(sp)
 1001e18:	300490fa 	slli	r2,r6,3
 1001e1c:	16c5883a 	add	r2,r2,sp
 1001e20:	15006417 	ldw	r20,400(r2)
 1001e24:	15406517 	ldw	r21,404(r2)
 1001e28:	01802e0e 	bge	zero,r6,1001ee4 <__kernel_rem_pio2+0x29c>
 1001e2c:	102d883a 	mov	r22,r2
 1001e30:	302f883a 	mov	r23,r6
 1001e34:	d839883a 	mov	fp,sp
 1001e38:	0005883a 	mov	r2,zero
 1001e3c:	00cf9c34 	movhi	r3,15984
 1001e40:	180f883a 	mov	r7,r3
 1001e44:	100d883a 	mov	r6,r2
 1001e48:	a009883a 	mov	r4,r20
 1001e4c:	a80b883a 	mov	r5,r21
 1001e50:	1003aac0 	call	1003aac <__muldf3>
 1001e54:	180b883a 	mov	r5,r3
 1001e58:	1009883a 	mov	r4,r2
 1001e5c:	10041000 	call	1004100 <__fixdfsi>
 1001e60:	1009883a 	mov	r4,r2
 1001e64:	10040080 	call	1004008 <__floatsidf>
 1001e68:	1021883a 	mov	r16,r2
 1001e6c:	1823883a 	mov	r17,r3
 1001e70:	0005883a 	mov	r2,zero
 1001e74:	00f05c34 	movhi	r3,49520
 1001e78:	180f883a 	mov	r7,r3
 1001e7c:	8009883a 	mov	r4,r16
 1001e80:	880b883a 	mov	r5,r17
 1001e84:	100d883a 	mov	r6,r2
 1001e88:	1003aac0 	call	1003aac <__muldf3>
 1001e8c:	180b883a 	mov	r5,r3
 1001e90:	a80f883a 	mov	r7,r21
 1001e94:	a00d883a 	mov	r6,r20
 1001e98:	1009883a 	mov	r4,r2
 1001e9c:	1003a380 	call	1003a38 <__adddf3>
 1001ea0:	180b883a 	mov	r5,r3
 1001ea4:	1009883a 	mov	r4,r2
 1001ea8:	10041000 	call	1004100 <__fixdfsi>
 1001eac:	e0800015 	stw	r2,0(fp)
 1001eb0:	b5bffe04 	addi	r22,r22,-8
 1001eb4:	b0806417 	ldw	r2,400(r22)
 1001eb8:	b0c06517 	ldw	r3,404(r22)
 1001ebc:	8009883a 	mov	r4,r16
 1001ec0:	880b883a 	mov	r5,r17
 1001ec4:	180f883a 	mov	r7,r3
 1001ec8:	100d883a 	mov	r6,r2
 1001ecc:	1003a380 	call	1003a38 <__adddf3>
 1001ed0:	bdffffc4 	addi	r23,r23,-1
 1001ed4:	e7000104 	addi	fp,fp,4
 1001ed8:	1029883a 	mov	r20,r2
 1001edc:	182b883a 	mov	r21,r3
 1001ee0:	b83fd51e 	bne	r23,zero,1001e38 <__kernel_rem_pio2+0x1f0>
 1001ee4:	d9809317 	ldw	r6,588(sp)
 1001ee8:	a80b883a 	mov	r5,r21
 1001eec:	a009883a 	mov	r4,r20
 1001ef0:	10030200 	call	1003020 <scalbn>
 1001ef4:	0009883a 	mov	r4,zero
 1001ef8:	014ff034 	movhi	r5,16320
 1001efc:	280f883a 	mov	r7,r5
 1001f00:	200d883a 	mov	r6,r4
 1001f04:	180b883a 	mov	r5,r3
 1001f08:	1009883a 	mov	r4,r2
 1001f0c:	1021883a 	mov	r16,r2
 1001f10:	1823883a 	mov	r17,r3
 1001f14:	1003aac0 	call	1003aac <__muldf3>
 1001f18:	180b883a 	mov	r5,r3
 1001f1c:	1009883a 	mov	r4,r2
 1001f20:	1002dfc0 	call	1002dfc <floor>
 1001f24:	0011883a 	mov	r8,zero
 1001f28:	02700834 	movhi	r9,49184
 1001f2c:	480f883a 	mov	r7,r9
 1001f30:	400d883a 	mov	r6,r8
 1001f34:	180b883a 	mov	r5,r3
 1001f38:	1009883a 	mov	r4,r2
 1001f3c:	1003aac0 	call	1003aac <__muldf3>
 1001f40:	180f883a 	mov	r7,r3
 1001f44:	100d883a 	mov	r6,r2
 1001f48:	880b883a 	mov	r5,r17
 1001f4c:	8009883a 	mov	r4,r16
 1001f50:	1003a380 	call	1003a38 <__adddf3>
 1001f54:	180b883a 	mov	r5,r3
 1001f58:	1009883a 	mov	r4,r2
 1001f5c:	1823883a 	mov	r17,r3
 1001f60:	1021883a 	mov	r16,r2
 1001f64:	10041000 	call	1004100 <__fixdfsi>
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	d8809415 	stw	r2,592(sp)
 1001f70:	10040080 	call	1004008 <__floatsidf>
 1001f74:	880b883a 	mov	r5,r17
 1001f78:	8009883a 	mov	r4,r16
 1001f7c:	180f883a 	mov	r7,r3
 1001f80:	100d883a 	mov	r6,r2
 1001f84:	10039b80 	call	10039b8 <__subdf3>
 1001f88:	d9c0a017 	ldw	r7,640(sp)
 1001f8c:	180d883a 	mov	r6,r3
 1001f90:	1021883a 	mov	r16,r2
 1001f94:	1823883a 	mov	r17,r3
 1001f98:	38017d1e 	bne	r7,zero,1002590 <__kernel_rem_pio2+0x948>
 1001f9c:	da808d17 	ldw	r10,564(sp)
 1001fa0:	d9009317 	ldw	r4,588(sp)
 1001fa4:	00c00604 	movi	r3,24
 1001fa8:	50bfffc4 	addi	r2,r10,-1
 1001fac:	1085883a 	add	r2,r2,r2
 1001fb0:	1085883a 	add	r2,r2,r2
 1001fb4:	16c5883a 	add	r2,r2,sp
 1001fb8:	11400017 	ldw	r5,0(r2)
 1001fbc:	1907c83a 	sub	r3,r3,r4
 1001fc0:	d9c09317 	ldw	r7,588(sp)
 1001fc4:	28cdd83a 	sra	r6,r5,r3
 1001fc8:	010005c4 	movi	r4,23
 1001fcc:	da809417 	ldw	r10,592(sp)
 1001fd0:	30c6983a 	sll	r3,r6,r3
 1001fd4:	21c9c83a 	sub	r4,r4,r7
 1001fd8:	5195883a 	add	r10,r10,r6
 1001fdc:	28cbc83a 	sub	r5,r5,r3
 1001fe0:	2909d83a 	sra	r4,r5,r4
 1001fe4:	da809415 	stw	r10,592(sp)
 1001fe8:	11400015 	stw	r5,0(r2)
 1001fec:	d9009215 	stw	r4,584(sp)
 1001ff0:	d9409217 	ldw	r5,584(sp)
 1001ff4:	0140270e 	bge	zero,r5,1002094 <__kernel_rem_pio2+0x44c>
 1001ff8:	d9809417 	ldw	r6,592(sp)
 1001ffc:	d9c08d17 	ldw	r7,564(sp)
 1002000:	31800044 	addi	r6,r6,1
 1002004:	d9809415 	stw	r6,592(sp)
 1002008:	01c1a50e 	bge	zero,r7,10026a0 <__kernel_rem_pio2+0xa58>
 100200c:	002d883a 	mov	r22,zero
 1002010:	000b883a 	mov	r5,zero
 1002014:	d809883a 	mov	r4,sp
 1002018:	01c04034 	movhi	r7,256
 100201c:	01804034 	movhi	r6,256
 1002020:	31bfffc4 	addi	r6,r6,-1
 1002024:	00000806 	br	1002048 <__kernel_rem_pio2+0x400>
 1002028:	38c5c83a 	sub	r2,r7,r3
 100202c:	18000226 	beq	r3,zero,1002038 <__kernel_rem_pio2+0x3f0>
 1002030:	05800044 	movi	r22,1
 1002034:	20800015 	stw	r2,0(r4)
 1002038:	da808d17 	ldw	r10,564(sp)
 100203c:	29400044 	addi	r5,r5,1
 1002040:	21000104 	addi	r4,r4,4
 1002044:	51400926 	beq	r10,r5,100206c <__kernel_rem_pio2+0x424>
 1002048:	b004c03a 	cmpne	r2,r22,zero
 100204c:	20c00017 	ldw	r3,0(r4)
 1002050:	103ff526 	beq	r2,zero,1002028 <__kernel_rem_pio2+0x3e0>
 1002054:	da808d17 	ldw	r10,564(sp)
 1002058:	30c5c83a 	sub	r2,r6,r3
 100205c:	29400044 	addi	r5,r5,1
 1002060:	20800015 	stw	r2,0(r4)
 1002064:	21000104 	addi	r4,r4,4
 1002068:	517ff71e 	bne	r10,r5,1002048 <__kernel_rem_pio2+0x400>
 100206c:	d880a017 	ldw	r2,640(sp)
 1002070:	1000051e 	bne	r2,zero,1002088 <__kernel_rem_pio2+0x440>
 1002074:	d8c09317 	ldw	r3,588(sp)
 1002078:	00800044 	movi	r2,1
 100207c:	18814e26 	beq	r3,r2,10025b8 <__kernel_rem_pio2+0x970>
 1002080:	00800084 	movi	r2,2
 1002084:	18815826 	beq	r3,r2,10025e8 <__kernel_rem_pio2+0x9a0>
 1002088:	d9c09217 	ldw	r7,584(sp)
 100208c:	00800084 	movi	r2,2
 1002090:	38806926 	beq	r7,r2,1002238 <__kernel_rem_pio2+0x5f0>
 1002094:	000d883a 	mov	r6,zero
 1002098:	000f883a 	mov	r7,zero
 100209c:	8009883a 	mov	r4,r16
 10020a0:	880b883a 	mov	r5,r17
 10020a4:	1003e700 	call	1003e70 <__eqdf2>
 10020a8:	1000811e 	bne	r2,zero,10022b0 <__kernel_rem_pio2+0x668>
 10020ac:	da808d17 	ldw	r10,564(sp)
 10020b0:	d8809517 	ldw	r2,596(sp)
 10020b4:	51bfffc4 	addi	r6,r10,-1
 10020b8:	30800c16 	blt	r6,r2,10020ec <__kernel_rem_pio2+0x4a4>
 10020bc:	3185883a 	add	r2,r6,r6
 10020c0:	1085883a 	add	r2,r2,r2
 10020c4:	16c9883a 	add	r4,r2,sp
 10020c8:	3007883a 	mov	r3,r6
 10020cc:	000b883a 	mov	r5,zero
 10020d0:	20800017 	ldw	r2,0(r4)
 10020d4:	d9c09517 	ldw	r7,596(sp)
 10020d8:	18ffffc4 	addi	r3,r3,-1
 10020dc:	213fff04 	addi	r4,r4,-4
 10020e0:	288ab03a 	or	r5,r5,r2
 10020e4:	19fffa0e 	bge	r3,r7,10020d0 <__kernel_rem_pio2+0x488>
 10020e8:	2800791e 	bne	r5,zero,10022d0 <__kernel_rem_pio2+0x688>
 10020ec:	da809917 	ldw	r10,612(sp)
 10020f0:	50bfff17 	ldw	r2,-4(r10)
 10020f4:	1001511e 	bne	r2,zero,100263c <__kernel_rem_pio2+0x9f4>
 10020f8:	d880a117 	ldw	r2,644(sp)
 10020fc:	01000044 	movi	r4,1
 1002100:	10ffff04 	addi	r3,r2,-4
 1002104:	18ffff04 	addi	r3,r3,-4
 1002108:	18800017 	ldw	r2,0(r3)
 100210c:	21000044 	addi	r4,r4,1
 1002110:	103ffc26 	beq	r2,zero,1002104 <__kernel_rem_pio2+0x4bc>
 1002114:	d8c08d17 	ldw	r3,564(sp)
 1002118:	192f883a 	add	r23,r3,r4
 100211c:	1f000044 	addi	fp,r3,1
 1002120:	bf00020e 	bge	r23,fp,100212c <__kernel_rem_pio2+0x4e4>
 1002124:	ddc08d15 	stw	r23,564(sp)
 1002128:	003f3a06 	br	1001e14 <__kernel_rem_pio2+0x1cc>
 100212c:	d9408c17 	ldw	r5,560(sp)
 1002130:	d9009817 	ldw	r4,608(sp)
 1002134:	da80ae17 	ldw	r10,696(sp)
 1002138:	1945883a 	add	r2,r3,r5
 100213c:	190f883a 	add	r7,r3,r4
 1002140:	1085883a 	add	r2,r2,r2
 1002144:	380a90fa 	slli	r5,r7,3
 1002148:	e00c90fa 	slli	r6,fp,3
 100214c:	1085883a 	add	r2,r2,r2
 1002150:	5085883a 	add	r2,r10,r2
 1002154:	d8c01404 	addi	r3,sp,80
 1002158:	d9006404 	addi	r4,sp,400
 100215c:	10800104 	addi	r2,r2,4
 1002160:	196b883a 	add	r21,r3,r5
 1002164:	21a1883a 	add	r16,r4,r6
 1002168:	d8809115 	stw	r2,580(sp)
 100216c:	d9c09015 	stw	r7,576(sp)
 1002170:	d8809117 	ldw	r2,580(sp)
 1002174:	11000017 	ldw	r4,0(r2)
 1002178:	10040080 	call	1004008 <__floatsidf>
 100217c:	a8c00115 	stw	r3,4(r21)
 1002180:	d8c0a217 	ldw	r3,648(sp)
 1002184:	a8800015 	stw	r2,0(r21)
 1002188:	18002826 	beq	r3,zero,100222c <__kernel_rem_pio2+0x5e4>
 100218c:	d9009017 	ldw	r4,576(sp)
 1002190:	dd009617 	ldw	r20,600(sp)
 1002194:	0023883a 	mov	r17,zero
 1002198:	200490fa 	slli	r2,r4,3
 100219c:	002d883a 	mov	r22,zero
 10021a0:	0025883a 	mov	r18,zero
 10021a4:	16e7883a 	add	r19,r2,sp
 10021a8:	98801417 	ldw	r2,80(r19)
 10021ac:	98c01517 	ldw	r3,84(r19)
 10021b0:	a1800017 	ldw	r6,0(r20)
 10021b4:	a1c00117 	ldw	r7,4(r20)
 10021b8:	180b883a 	mov	r5,r3
 10021bc:	1009883a 	mov	r4,r2
 10021c0:	1003aac0 	call	1003aac <__muldf3>
 10021c4:	180f883a 	mov	r7,r3
 10021c8:	900b883a 	mov	r5,r18
 10021cc:	8809883a 	mov	r4,r17
 10021d0:	100d883a 	mov	r6,r2
 10021d4:	1003a380 	call	1003a38 <__adddf3>
 10021d8:	d9409817 	ldw	r5,608(sp)
 10021dc:	b5800044 	addi	r22,r22,1
 10021e0:	9cfffe04 	addi	r19,r19,-8
 10021e4:	1023883a 	mov	r17,r2
 10021e8:	1825883a 	mov	r18,r3
 10021ec:	a5000204 	addi	r20,r20,8
 10021f0:	2dbfed1e 	bne	r5,r22,10021a8 <__kernel_rem_pio2+0x560>
 10021f4:	d9809117 	ldw	r6,580(sp)
 10021f8:	d9c09017 	ldw	r7,576(sp)
 10021fc:	e7000044 	addi	fp,fp,1
 1002200:	31800104 	addi	r6,r6,4
 1002204:	39c00044 	addi	r7,r7,1
 1002208:	84800115 	stw	r18,4(r16)
 100220c:	84400015 	stw	r17,0(r16)
 1002210:	d9809115 	stw	r6,580(sp)
 1002214:	ad400204 	addi	r21,r21,8
 1002218:	84000204 	addi	r16,r16,8
 100221c:	d9c09015 	stw	r7,576(sp)
 1002220:	bf3fd30e 	bge	r23,fp,1002170 <__kernel_rem_pio2+0x528>
 1002224:	ddc08d15 	stw	r23,564(sp)
 1002228:	003efa06 	br	1001e14 <__kernel_rem_pio2+0x1cc>
 100222c:	0023883a 	mov	r17,zero
 1002230:	0025883a 	mov	r18,zero
 1002234:	003fef06 	br	10021f4 <__kernel_rem_pio2+0x5ac>
 1002238:	0029883a 	mov	r20,zero
 100223c:	054ffc34 	movhi	r21,16368
 1002240:	880f883a 	mov	r7,r17
 1002244:	800d883a 	mov	r6,r16
 1002248:	a009883a 	mov	r4,r20
 100224c:	a80b883a 	mov	r5,r21
 1002250:	10039b80 	call	10039b8 <__subdf3>
 1002254:	1025883a 	mov	r18,r2
 1002258:	b005003a 	cmpeq	r2,r22,zero
 100225c:	1827883a 	mov	r19,r3
 1002260:	9021883a 	mov	r16,r18
 1002264:	1823883a 	mov	r17,r3
 1002268:	103f8a1e 	bne	r2,zero,1002094 <__kernel_rem_pio2+0x44c>
 100226c:	d9809317 	ldw	r6,588(sp)
 1002270:	0009883a 	mov	r4,zero
 1002274:	a80b883a 	mov	r5,r21
 1002278:	10030200 	call	1003020 <scalbn>
 100227c:	180f883a 	mov	r7,r3
 1002280:	9009883a 	mov	r4,r18
 1002284:	980b883a 	mov	r5,r19
 1002288:	100d883a 	mov	r6,r2
 100228c:	10039b80 	call	10039b8 <__subdf3>
 1002290:	1021883a 	mov	r16,r2
 1002294:	1823883a 	mov	r17,r3
 1002298:	000d883a 	mov	r6,zero
 100229c:	000f883a 	mov	r7,zero
 10022a0:	8009883a 	mov	r4,r16
 10022a4:	880b883a 	mov	r5,r17
 10022a8:	1003e700 	call	1003e70 <__eqdf2>
 10022ac:	103f7f26 	beq	r2,zero,10020ac <__kernel_rem_pio2+0x464>
 10022b0:	000d883a 	mov	r6,zero
 10022b4:	000f883a 	mov	r7,zero
 10022b8:	8009883a 	mov	r4,r16
 10022bc:	880b883a 	mov	r5,r17
 10022c0:	1003e700 	call	1003e70 <__eqdf2>
 10022c4:	10019a1e 	bne	r2,zero,1002930 <__kernel_rem_pio2+0xce8>
 10022c8:	da808d17 	ldw	r10,564(sp)
 10022cc:	51bfffc4 	addi	r6,r10,-1
 10022d0:	3185883a 	add	r2,r6,r6
 10022d4:	1085883a 	add	r2,r2,r2
 10022d8:	d9009317 	ldw	r4,588(sp)
 10022dc:	16c5883a 	add	r2,r2,sp
 10022e0:	10c00017 	ldw	r3,0(r2)
 10022e4:	213ffa04 	addi	r4,r4,-24
 10022e8:	d9009315 	stw	r4,588(sp)
 10022ec:	1801d41e 	bne	r3,zero,1002a40 <__kernel_rem_pio2+0xdf8>
 10022f0:	d9808d15 	stw	r6,564(sp)
 10022f4:	1007883a 	mov	r3,r2
 10022f8:	d9408d17 	ldw	r5,564(sp)
 10022fc:	d9809317 	ldw	r6,588(sp)
 1002300:	18ffff04 	addi	r3,r3,-4
 1002304:	18800017 	ldw	r2,0(r3)
 1002308:	297fffc4 	addi	r5,r5,-1
 100230c:	31bffa04 	addi	r6,r6,-24
 1002310:	d9408d15 	stw	r5,564(sp)
 1002314:	d9809315 	stw	r6,588(sp)
 1002318:	103ff726 	beq	r2,zero,10022f8 <__kernel_rem_pio2+0x6b0>
 100231c:	d9809317 	ldw	r6,588(sp)
 1002320:	0005883a 	mov	r2,zero
 1002324:	00cffc34 	movhi	r3,16368
 1002328:	180b883a 	mov	r5,r3
 100232c:	1009883a 	mov	r4,r2
 1002330:	10030200 	call	1003020 <scalbn>
 1002334:	d9808d17 	ldw	r6,564(sp)
 1002338:	1021883a 	mov	r16,r2
 100233c:	1823883a 	mov	r17,r3
 1002340:	30004616 	blt	r6,zero,100245c <__kernel_rem_pio2+0x814>
 1002344:	300690fa 	slli	r3,r6,3
 1002348:	3185883a 	add	r2,r6,r6
 100234c:	1085883a 	add	r2,r2,r2
 1002350:	16e9883a 	add	r20,r2,sp
 1002354:	1ee5883a 	add	r18,r3,sp
 1002358:	3027883a 	mov	r19,r6
 100235c:	057fffc4 	movi	r21,-1
 1002360:	a1000017 	ldw	r4,0(r20)
 1002364:	9cffffc4 	addi	r19,r19,-1
 1002368:	a53fff04 	addi	r20,r20,-4
 100236c:	10040080 	call	1004008 <__floatsidf>
 1002370:	800d883a 	mov	r6,r16
 1002374:	880f883a 	mov	r7,r17
 1002378:	180b883a 	mov	r5,r3
 100237c:	1009883a 	mov	r4,r2
 1002380:	1003aac0 	call	1003aac <__muldf3>
 1002384:	0015883a 	mov	r10,zero
 1002388:	02cf9c34 	movhi	r11,15984
 100238c:	880b883a 	mov	r5,r17
 1002390:	8009883a 	mov	r4,r16
 1002394:	90c06515 	stw	r3,404(r18)
 1002398:	90806415 	stw	r2,400(r18)
 100239c:	580f883a 	mov	r7,r11
 10023a0:	500d883a 	mov	r6,r10
 10023a4:	1003aac0 	call	1003aac <__muldf3>
 10023a8:	1021883a 	mov	r16,r2
 10023ac:	1823883a 	mov	r17,r3
 10023b0:	94bffe04 	addi	r18,r18,-8
 10023b4:	9d7fea1e 	bne	r19,r21,1002360 <__kernel_rem_pio2+0x718>
 10023b8:	d9c09517 	ldw	r7,596(sp)
 10023bc:	dd808d17 	ldw	r22,564(sp)
 10023c0:	002b883a 	mov	r21,zero
 10023c4:	382e403a 	cmpge	r23,r7,zero
 10023c8:	b800aa26 	beq	r23,zero,1002674 <__kernel_rem_pio2+0xa2c>
 10023cc:	a800a916 	blt	r21,zero,1002674 <__kernel_rem_pio2+0xa2c>
 10023d0:	b00690fa 	slli	r3,r22,3
 10023d4:	d8806404 	addi	r2,sp,400
 10023d8:	0021883a 	mov	r16,zero
 10023dc:	10e9883a 	add	r20,r2,r3
 10023e0:	0027883a 	mov	r19,zero
 10023e4:	0023883a 	mov	r17,zero
 10023e8:	04804074 	movhi	r18,257
 10023ec:	94878b04 	addi	r18,r18,7724
 10023f0:	00000106 	br	10023f8 <__kernel_rem_pio2+0x7b0>
 10023f4:	acc01116 	blt	r21,r19,100243c <__kernel_rem_pio2+0x7f4>
 10023f8:	91000017 	ldw	r4,0(r18)
 10023fc:	91400117 	ldw	r5,4(r18)
 1002400:	a1800017 	ldw	r6,0(r20)
 1002404:	a1c00117 	ldw	r7,4(r20)
 1002408:	9cc00044 	addi	r19,r19,1
 100240c:	94800204 	addi	r18,r18,8
 1002410:	1003aac0 	call	1003aac <__muldf3>
 1002414:	180f883a 	mov	r7,r3
 1002418:	880b883a 	mov	r5,r17
 100241c:	8009883a 	mov	r4,r16
 1002420:	100d883a 	mov	r6,r2
 1002424:	1003a380 	call	1003a38 <__adddf3>
 1002428:	da809517 	ldw	r10,596(sp)
 100242c:	a5000204 	addi	r20,r20,8
 1002430:	1021883a 	mov	r16,r2
 1002434:	1823883a 	mov	r17,r3
 1002438:	54ffee0e 	bge	r10,r19,10023f4 <__kernel_rem_pio2+0x7ac>
 100243c:	a80490fa 	slli	r2,r21,3
 1002440:	b5bfffc4 	addi	r22,r22,-1
 1002444:	ad400044 	addi	r21,r21,1
 1002448:	16c5883a 	add	r2,r2,sp
 100244c:	14403d15 	stw	r17,244(r2)
 1002450:	14003c15 	stw	r16,240(r2)
 1002454:	00bfffc4 	movi	r2,-1
 1002458:	b0bfdb1e 	bne	r22,r2,10023c8 <__kernel_rem_pio2+0x780>
 100245c:	d8c0ad17 	ldw	r3,692(sp)
 1002460:	00800084 	movi	r2,2
 1002464:	10c09316 	blt	r2,r3,10026b4 <__kernel_rem_pio2+0xa6c>
 1002468:	00c1120e 	bge	zero,r3,10028b4 <__kernel_rem_pio2+0xc6c>
 100246c:	d9808d17 	ldw	r6,564(sp)
 1002470:	30018d16 	blt	r6,zero,1002aa8 <__kernel_rem_pio2+0xe60>
 1002474:	d8c08d17 	ldw	r3,564(sp)
 1002478:	0011883a 	mov	r8,zero
 100247c:	0013883a 	mov	r9,zero
 1002480:	180490fa 	slli	r2,r3,3
 1002484:	1823883a 	mov	r17,r3
 1002488:	04bfffc4 	movi	r18,-1
 100248c:	16e1883a 	add	r16,r2,sp
 1002490:	80803c17 	ldw	r2,240(r16)
 1002494:	80c03d17 	ldw	r3,244(r16)
 1002498:	480b883a 	mov	r5,r9
 100249c:	4009883a 	mov	r4,r8
 10024a0:	180f883a 	mov	r7,r3
 10024a4:	100d883a 	mov	r6,r2
 10024a8:	1003a380 	call	1003a38 <__adddf3>
 10024ac:	8c7fffc4 	addi	r17,r17,-1
 10024b0:	843ffe04 	addi	r16,r16,-8
 10024b4:	1011883a 	mov	r8,r2
 10024b8:	1813883a 	mov	r9,r3
 10024bc:	8cbff41e 	bne	r17,r18,1002490 <__kernel_rem_pio2+0x848>
 10024c0:	d9009217 	ldw	r4,584(sp)
 10024c4:	20015b1e 	bne	r4,zero,1002a34 <__kernel_rem_pio2+0xdec>
 10024c8:	4009883a 	mov	r4,r8
 10024cc:	480b883a 	mov	r5,r9
 10024d0:	d9809717 	ldw	r6,604(sp)
 10024d4:	d8803c17 	ldw	r2,240(sp)
 10024d8:	480f883a 	mov	r7,r9
 10024dc:	31400115 	stw	r5,4(r6)
 10024e0:	31000015 	stw	r4,0(r6)
 10024e4:	d8c03d17 	ldw	r3,244(sp)
 10024e8:	400d883a 	mov	r6,r8
 10024ec:	1009883a 	mov	r4,r2
 10024f0:	180b883a 	mov	r5,r3
 10024f4:	10039b80 	call	10039b8 <__subdf3>
 10024f8:	d9c08d17 	ldw	r7,564(sp)
 10024fc:	1011883a 	mov	r8,r2
 1002500:	1813883a 	mov	r9,r3
 1002504:	01c00d0e 	bge	zero,r7,100253c <__kernel_rem_pio2+0x8f4>
 1002508:	0023883a 	mov	r17,zero
 100250c:	dc003e04 	addi	r16,sp,248
 1002510:	81800017 	ldw	r6,0(r16)
 1002514:	81c00117 	ldw	r7,4(r16)
 1002518:	480b883a 	mov	r5,r9
 100251c:	4009883a 	mov	r4,r8
 1002520:	1003a380 	call	1003a38 <__adddf3>
 1002524:	da808d17 	ldw	r10,564(sp)
 1002528:	8c400044 	addi	r17,r17,1
 100252c:	1011883a 	mov	r8,r2
 1002530:	1813883a 	mov	r9,r3
 1002534:	84000204 	addi	r16,r16,8
 1002538:	8abff51e 	bne	r17,r10,1002510 <__kernel_rem_pio2+0x8c8>
 100253c:	d8809217 	ldw	r2,584(sp)
 1002540:	10000226 	beq	r2,zero,100254c <__kernel_rem_pio2+0x904>
 1002544:	48e0003c 	xorhi	r3,r9,32768
 1002548:	1813883a 	mov	r9,r3
 100254c:	d8c09717 	ldw	r3,604(sp)
 1002550:	1a400315 	stw	r9,12(r3)
 1002554:	1a000215 	stw	r8,8(r3)
 1002558:	d8c09417 	ldw	r3,592(sp)
 100255c:	188001cc 	andi	r2,r3,7
 1002560:	dfc0ac17 	ldw	ra,688(sp)
 1002564:	df00ab17 	ldw	fp,684(sp)
 1002568:	ddc0aa17 	ldw	r23,680(sp)
 100256c:	dd80a917 	ldw	r22,676(sp)
 1002570:	dd40a817 	ldw	r21,672(sp)
 1002574:	dd00a717 	ldw	r20,668(sp)
 1002578:	dcc0a617 	ldw	r19,664(sp)
 100257c:	dc80a517 	ldw	r18,660(sp)
 1002580:	dc40a417 	ldw	r17,656(sp)
 1002584:	dc00a317 	ldw	r16,652(sp)
 1002588:	dec0ad04 	addi	sp,sp,692
 100258c:	f800283a 	ret
 1002590:	d8809317 	ldw	r2,588(sp)
 1002594:	10001f1e 	bne	r2,zero,1002614 <__kernel_rem_pio2+0x9cc>
 1002598:	d8c08d17 	ldw	r3,564(sp)
 100259c:	18c5883a 	add	r2,r3,r3
 10025a0:	1085883a 	add	r2,r2,r2
 10025a4:	16c5883a 	add	r2,r2,sp
 10025a8:	10ffff17 	ldw	r3,-4(r2)
 10025ac:	1807d5fa 	srai	r3,r3,23
 10025b0:	d8c09215 	stw	r3,584(sp)
 10025b4:	003e8e06 	br	1001ff0 <__kernel_rem_pio2+0x3a8>
 10025b8:	d9008d17 	ldw	r4,564(sp)
 10025bc:	d9409317 	ldw	r5,588(sp)
 10025c0:	2145c83a 	sub	r2,r4,r5
 10025c4:	1085883a 	add	r2,r2,r2
 10025c8:	1085883a 	add	r2,r2,r2
 10025cc:	16c5883a 	add	r2,r2,sp
 10025d0:	10c00017 	ldw	r3,0(r2)
 10025d4:	01002034 	movhi	r4,128
 10025d8:	213fffc4 	addi	r4,r4,-1
 10025dc:	1906703a 	and	r3,r3,r4
 10025e0:	10c00015 	stw	r3,0(r2)
 10025e4:	003ea806 	br	1002088 <__kernel_rem_pio2+0x440>
 10025e8:	d9808d17 	ldw	r6,564(sp)
 10025ec:	01001034 	movhi	r4,64
 10025f0:	213fffc4 	addi	r4,r4,-1
 10025f4:	30bfffc4 	addi	r2,r6,-1
 10025f8:	1085883a 	add	r2,r2,r2
 10025fc:	1085883a 	add	r2,r2,r2
 1002600:	16c5883a 	add	r2,r2,sp
 1002604:	10c00017 	ldw	r3,0(r2)
 1002608:	1906703a 	and	r3,r3,r4
 100260c:	10c00015 	stw	r3,0(r2)
 1002610:	003e9d06 	br	1002088 <__kernel_rem_pio2+0x440>
 1002614:	0005883a 	mov	r2,zero
 1002618:	00cff834 	movhi	r3,16352
 100261c:	300b883a 	mov	r5,r6
 1002620:	180f883a 	mov	r7,r3
 1002624:	8009883a 	mov	r4,r16
 1002628:	100d883a 	mov	r6,r2
 100262c:	1003f800 	call	1003f80 <__gedf2>
 1002630:	10001d0e 	bge	r2,zero,10026a8 <__kernel_rem_pio2+0xa60>
 1002634:	d8009215 	stw	zero,584(sp)
 1002638:	003e9606 	br	1002094 <__kernel_rem_pio2+0x44c>
 100263c:	d8c08d17 	ldw	r3,564(sp)
 1002640:	01000044 	movi	r4,1
 1002644:	192f883a 	add	r23,r3,r4
 1002648:	1f000044 	addi	fp,r3,1
 100264c:	bf3eb516 	blt	r23,fp,1002124 <__kernel_rem_pio2+0x4dc>
 1002650:	003eb606 	br	100212c <__kernel_rem_pio2+0x4e4>
 1002654:	0021883a 	mov	r16,zero
 1002658:	0023883a 	mov	r17,zero
 100265c:	a5000044 	addi	r20,r20,1
 1002660:	ac400115 	stw	r17,4(r21)
 1002664:	ac000015 	stw	r16,0(r21)
 1002668:	ad400204 	addi	r21,r21,8
 100266c:	a5fdba1e 	bne	r20,r23,1001d58 <__kernel_rem_pio2+0x110>
 1002670:	003dd806 	br	1001dd4 <__kernel_rem_pio2+0x18c>
 1002674:	a80490fa 	slli	r2,r21,3
 1002678:	0021883a 	mov	r16,zero
 100267c:	0023883a 	mov	r17,zero
 1002680:	16c5883a 	add	r2,r2,sp
 1002684:	14403d15 	stw	r17,244(r2)
 1002688:	14003c15 	stw	r16,240(r2)
 100268c:	b5bfffc4 	addi	r22,r22,-1
 1002690:	00bfffc4 	movi	r2,-1
 1002694:	ad400044 	addi	r21,r21,1
 1002698:	b0bf4b1e 	bne	r22,r2,10023c8 <__kernel_rem_pio2+0x780>
 100269c:	003f6f06 	br	100245c <__kernel_rem_pio2+0x814>
 10026a0:	002d883a 	mov	r22,zero
 10026a4:	003e7106 	br	100206c <__kernel_rem_pio2+0x424>
 10026a8:	01000084 	movi	r4,2
 10026ac:	d9009215 	stw	r4,584(sp)
 10026b0:	003e5106 	br	1001ff8 <__kernel_rem_pio2+0x3b0>
 10026b4:	d900ad17 	ldw	r4,692(sp)
 10026b8:	008000c4 	movi	r2,3
 10026bc:	20bfa61e 	bne	r4,r2,1002558 <__kernel_rem_pio2+0x910>
 10026c0:	d9c08d17 	ldw	r7,564(sp)
 10026c4:	01c02c0e 	bge	zero,r7,1002778 <__kernel_rem_pio2+0xb30>
 10026c8:	3805883a 	mov	r2,r7
 10026cc:	00000106 	br	10026d4 <__kernel_rem_pio2+0xa8c>
 10026d0:	d8808e17 	ldw	r2,568(sp)
 10026d4:	113fffc4 	addi	r4,r2,-1
 10026d8:	100690fa 	slli	r3,r2,3
 10026dc:	200490fa 	slli	r2,r4,3
 10026e0:	d9008e15 	stw	r4,568(sp)
 10026e4:	1ef9883a 	add	fp,r3,sp
 10026e8:	16c5883a 	add	r2,r2,sp
 10026ec:	d8809a15 	stw	r2,616(sp)
 10026f0:	11403c04 	addi	r5,r2,240
 10026f4:	e1803c04 	addi	r6,fp,240
 10026f8:	14003c17 	ldw	r16,240(r2)
 10026fc:	e5003c17 	ldw	r20,240(fp)
 1002700:	d9409b15 	stw	r5,620(sp)
 1002704:	d9809c15 	stw	r6,624(sp)
 1002708:	35400117 	ldw	r21,4(r6)
 100270c:	2c400117 	ldw	r17,4(r5)
 1002710:	8009883a 	mov	r4,r16
 1002714:	a00d883a 	mov	r6,r20
 1002718:	880b883a 	mov	r5,r17
 100271c:	a80f883a 	mov	r7,r21
 1002720:	1003a380 	call	1003a38 <__adddf3>
 1002724:	100d883a 	mov	r6,r2
 1002728:	880b883a 	mov	r5,r17
 100272c:	8009883a 	mov	r4,r16
 1002730:	180f883a 	mov	r7,r3
 1002734:	1025883a 	mov	r18,r2
 1002738:	1827883a 	mov	r19,r3
 100273c:	10039b80 	call	10039b8 <__subdf3>
 1002740:	180f883a 	mov	r7,r3
 1002744:	a80b883a 	mov	r5,r21
 1002748:	a009883a 	mov	r4,r20
 100274c:	100d883a 	mov	r6,r2
 1002750:	1003a380 	call	1003a38 <__adddf3>
 1002754:	e0803c15 	stw	r2,240(fp)
 1002758:	d9c09c17 	ldw	r7,624(sp)
 100275c:	38c00115 	stw	r3,4(r7)
 1002760:	da809a17 	ldw	r10,616(sp)
 1002764:	54803c15 	stw	r18,240(r10)
 1002768:	d8809b17 	ldw	r2,620(sp)
 100276c:	14c00115 	stw	r19,4(r2)
 1002770:	d8c08e17 	ldw	r3,568(sp)
 1002774:	183fd61e 	bne	r3,zero,10026d0 <__kernel_rem_pio2+0xa88>
 1002778:	d9008d17 	ldw	r4,564(sp)
 100277c:	00800044 	movi	r2,1
 1002780:	1100cc0e 	bge	r2,r4,1002ab4 <__kernel_rem_pio2+0xe6c>
 1002784:	d8808d17 	ldw	r2,564(sp)
 1002788:	117fffc4 	addi	r5,r2,-1
 100278c:	100690fa 	slli	r3,r2,3
 1002790:	280490fa 	slli	r2,r5,3
 1002794:	d9408f15 	stw	r5,572(sp)
 1002798:	1ef9883a 	add	fp,r3,sp
 100279c:	16c5883a 	add	r2,r2,sp
 10027a0:	d8809d15 	stw	r2,628(sp)
 10027a4:	11803c04 	addi	r6,r2,240
 10027a8:	e1c03c04 	addi	r7,fp,240
 10027ac:	14003c17 	ldw	r16,240(r2)
 10027b0:	e5003c17 	ldw	r20,240(fp)
 10027b4:	d9809e15 	stw	r6,632(sp)
 10027b8:	d9c09f15 	stw	r7,636(sp)
 10027bc:	34400117 	ldw	r17,4(r6)
 10027c0:	3d400117 	ldw	r21,4(r7)
 10027c4:	8009883a 	mov	r4,r16
 10027c8:	880b883a 	mov	r5,r17
 10027cc:	a00d883a 	mov	r6,r20
 10027d0:	a80f883a 	mov	r7,r21
 10027d4:	1003a380 	call	1003a38 <__adddf3>
 10027d8:	100d883a 	mov	r6,r2
 10027dc:	880b883a 	mov	r5,r17
 10027e0:	8009883a 	mov	r4,r16
 10027e4:	180f883a 	mov	r7,r3
 10027e8:	1025883a 	mov	r18,r2
 10027ec:	1827883a 	mov	r19,r3
 10027f0:	10039b80 	call	10039b8 <__subdf3>
 10027f4:	180f883a 	mov	r7,r3
 10027f8:	a80b883a 	mov	r5,r21
 10027fc:	a009883a 	mov	r4,r20
 1002800:	100d883a 	mov	r6,r2
 1002804:	1003a380 	call	1003a38 <__adddf3>
 1002808:	e0803c15 	stw	r2,240(fp)
 100280c:	da809f17 	ldw	r10,636(sp)
 1002810:	50c00115 	stw	r3,4(r10)
 1002814:	d8c09d17 	ldw	r3,628(sp)
 1002818:	d8808f17 	ldw	r2,572(sp)
 100281c:	1c803c15 	stw	r18,240(r3)
 1002820:	d9009e17 	ldw	r4,632(sp)
 1002824:	00c00044 	movi	r3,1
 1002828:	24c00115 	stw	r19,4(r4)
 100282c:	d9408f17 	ldw	r5,572(sp)
 1002830:	28ffd51e 	bne	r5,r3,1002788 <__kernel_rem_pio2+0xb40>
 1002834:	dc008d17 	ldw	r16,564(sp)
 1002838:	0011883a 	mov	r8,zero
 100283c:	1825883a 	mov	r18,r3
 1002840:	800490fa 	slli	r2,r16,3
 1002844:	0013883a 	mov	r9,zero
 1002848:	16e3883a 	add	r17,r2,sp
 100284c:	88803c17 	ldw	r2,240(r17)
 1002850:	88c03d17 	ldw	r3,244(r17)
 1002854:	480b883a 	mov	r5,r9
 1002858:	4009883a 	mov	r4,r8
 100285c:	180f883a 	mov	r7,r3
 1002860:	100d883a 	mov	r6,r2
 1002864:	1003a380 	call	1003a38 <__adddf3>
 1002868:	843fffc4 	addi	r16,r16,-1
 100286c:	8c7ffe04 	addi	r17,r17,-8
 1002870:	1011883a 	mov	r8,r2
 1002874:	1813883a 	mov	r9,r3
 1002878:	84bff41e 	bne	r16,r18,100284c <__kernel_rem_pio2+0xc04>
 100287c:	d9809217 	ldw	r6,584(sp)
 1002880:	30007a1e 	bne	r6,zero,1002a6c <__kernel_rem_pio2+0xe24>
 1002884:	d9c09717 	ldw	r7,604(sp)
 1002888:	d8803c17 	ldw	r2,240(sp)
 100288c:	d9003e17 	ldw	r4,248(sp)
 1002890:	3a400515 	stw	r9,20(r7)
 1002894:	d8c03d17 	ldw	r3,244(sp)
 1002898:	d9403f17 	ldw	r5,252(sp)
 100289c:	3a000415 	stw	r8,16(r7)
 10028a0:	38c00115 	stw	r3,4(r7)
 10028a4:	39400315 	stw	r5,12(r7)
 10028a8:	38800015 	stw	r2,0(r7)
 10028ac:	39000215 	stw	r4,8(r7)
 10028b0:	003f2906 	br	1002558 <__kernel_rem_pio2+0x910>
 10028b4:	183f281e 	bne	r3,zero,1002558 <__kernel_rem_pio2+0x910>
 10028b8:	d9408d17 	ldw	r5,564(sp)
 10028bc:	28008016 	blt	r5,zero,1002ac0 <__kernel_rem_pio2+0xe78>
 10028c0:	dc008d17 	ldw	r16,564(sp)
 10028c4:	000d883a 	mov	r6,zero
 10028c8:	000f883a 	mov	r7,zero
 10028cc:	800490fa 	slli	r2,r16,3
 10028d0:	04bfffc4 	movi	r18,-1
 10028d4:	16e3883a 	add	r17,r2,sp
 10028d8:	88803c17 	ldw	r2,240(r17)
 10028dc:	88c03d17 	ldw	r3,244(r17)
 10028e0:	380b883a 	mov	r5,r7
 10028e4:	3009883a 	mov	r4,r6
 10028e8:	180f883a 	mov	r7,r3
 10028ec:	100d883a 	mov	r6,r2
 10028f0:	1003a380 	call	1003a38 <__adddf3>
 10028f4:	843fffc4 	addi	r16,r16,-1
 10028f8:	8c7ffe04 	addi	r17,r17,-8
 10028fc:	100d883a 	mov	r6,r2
 1002900:	180f883a 	mov	r7,r3
 1002904:	84bff41e 	bne	r16,r18,10028d8 <__kernel_rem_pio2+0xc90>
 1002908:	da809217 	ldw	r10,584(sp)
 100290c:	50000226 	beq	r10,zero,1002918 <__kernel_rem_pio2+0xcd0>
 1002910:	38e0003c 	xorhi	r3,r7,32768
 1002914:	180f883a 	mov	r7,r3
 1002918:	d8809717 	ldw	r2,604(sp)
 100291c:	11c00115 	stw	r7,4(r2)
 1002920:	11800015 	stw	r6,0(r2)
 1002924:	003f0c06 	br	1002558 <__kernel_rem_pio2+0x910>
 1002928:	d8008c15 	stw	zero,560(sp)
 100292c:	003ce406 	br	1001cc0 <__kernel_rem_pio2+0x78>
 1002930:	d9c09317 	ldw	r7,588(sp)
 1002934:	880b883a 	mov	r5,r17
 1002938:	8009883a 	mov	r4,r16
 100293c:	01cdc83a 	sub	r6,zero,r7
 1002940:	10030200 	call	1003020 <scalbn>
 1002944:	0011883a 	mov	r8,zero
 1002948:	02505c34 	movhi	r9,16752
 100294c:	480f883a 	mov	r7,r9
 1002950:	1009883a 	mov	r4,r2
 1002954:	180b883a 	mov	r5,r3
 1002958:	400d883a 	mov	r6,r8
 100295c:	102d883a 	mov	r22,r2
 1002960:	182f883a 	mov	r23,r3
 1002964:	1003f800 	call	1003f80 <__gedf2>
 1002968:	10003716 	blt	r2,zero,1002a48 <__kernel_rem_pio2+0xe00>
 100296c:	0005883a 	mov	r2,zero
 1002970:	00cf9c34 	movhi	r3,15984
 1002974:	180f883a 	mov	r7,r3
 1002978:	100d883a 	mov	r6,r2
 100297c:	b009883a 	mov	r4,r22
 1002980:	b80b883a 	mov	r5,r23
 1002984:	1003aac0 	call	1003aac <__muldf3>
 1002988:	180b883a 	mov	r5,r3
 100298c:	1009883a 	mov	r4,r2
 1002990:	10041000 	call	1004100 <__fixdfsi>
 1002994:	1009883a 	mov	r4,r2
 1002998:	10040080 	call	1004008 <__floatsidf>
 100299c:	da808d17 	ldw	r10,564(sp)
 10029a0:	1023883a 	mov	r17,r2
 10029a4:	1825883a 	mov	r18,r3
 10029a8:	0005883a 	mov	r2,zero
 10029ac:	00f05c34 	movhi	r3,49520
 10029b0:	180f883a 	mov	r7,r3
 10029b4:	8809883a 	mov	r4,r17
 10029b8:	900b883a 	mov	r5,r18
 10029bc:	100d883a 	mov	r6,r2
 10029c0:	52ab883a 	add	r21,r10,r10
 10029c4:	1003aac0 	call	1003aac <__muldf3>
 10029c8:	180f883a 	mov	r7,r3
 10029cc:	b80b883a 	mov	r5,r23
 10029d0:	100d883a 	mov	r6,r2
 10029d4:	b009883a 	mov	r4,r22
 10029d8:	1003a380 	call	1003a38 <__adddf3>
 10029dc:	100d883a 	mov	r6,r2
 10029e0:	d8808d17 	ldw	r2,564(sp)
 10029e4:	180b883a 	mov	r5,r3
 10029e8:	3009883a 	mov	r4,r6
 10029ec:	10800044 	addi	r2,r2,1
 10029f0:	ad6b883a 	add	r21,r21,r21
 10029f4:	d8808d15 	stw	r2,564(sp)
 10029f8:	10041000 	call	1004100 <__fixdfsi>
 10029fc:	d8c08d17 	ldw	r3,564(sp)
 1002a00:	aeeb883a 	add	r21,r21,sp
 1002a04:	8809883a 	mov	r4,r17
 1002a08:	900b883a 	mov	r5,r18
 1002a0c:	a8800015 	stw	r2,0(r21)
 1002a10:	18e1883a 	add	r16,r3,r3
 1002a14:	10041000 	call	1004100 <__fixdfsi>
 1002a18:	d9009317 	ldw	r4,588(sp)
 1002a1c:	8421883a 	add	r16,r16,r16
 1002a20:	86e1883a 	add	r16,r16,sp
 1002a24:	21000604 	addi	r4,r4,24
 1002a28:	d9009315 	stw	r4,588(sp)
 1002a2c:	80800015 	stw	r2,0(r16)
 1002a30:	003e3a06 	br	100231c <__kernel_rem_pio2+0x6d4>
 1002a34:	4009883a 	mov	r4,r8
 1002a38:	4960003c 	xorhi	r5,r9,32768
 1002a3c:	003ea406 	br	10024d0 <__kernel_rem_pio2+0x888>
 1002a40:	d9808d15 	stw	r6,564(sp)
 1002a44:	003e3506 	br	100231c <__kernel_rem_pio2+0x6d4>
 1002a48:	d9408d17 	ldw	r5,564(sp)
 1002a4c:	b009883a 	mov	r4,r22
 1002a50:	2961883a 	add	r16,r5,r5
 1002a54:	8421883a 	add	r16,r16,r16
 1002a58:	b80b883a 	mov	r5,r23
 1002a5c:	86e1883a 	add	r16,r16,sp
 1002a60:	10041000 	call	1004100 <__fixdfsi>
 1002a64:	80800015 	stw	r2,0(r16)
 1002a68:	003e2c06 	br	100231c <__kernel_rem_pio2+0x6d4>
 1002a6c:	d8c03d17 	ldw	r3,244(sp)
 1002a70:	d9403f17 	ldw	r5,252(sp)
 1002a74:	da809717 	ldw	r10,604(sp)
 1002a78:	d8803c17 	ldw	r2,240(sp)
 1002a7c:	d9003e17 	ldw	r4,248(sp)
 1002a80:	49e0003c 	xorhi	r7,r9,32768
 1002a84:	51c00515 	stw	r7,20(r10)
 1002a88:	19a0003c 	xorhi	r6,r3,32768
 1002a8c:	29e0003c 	xorhi	r7,r5,32768
 1002a90:	51800115 	stw	r6,4(r10)
 1002a94:	51c00315 	stw	r7,12(r10)
 1002a98:	50800015 	stw	r2,0(r10)
 1002a9c:	51000215 	stw	r4,8(r10)
 1002aa0:	52000415 	stw	r8,16(r10)
 1002aa4:	003eac06 	br	1002558 <__kernel_rem_pio2+0x910>
 1002aa8:	0011883a 	mov	r8,zero
 1002aac:	0013883a 	mov	r9,zero
 1002ab0:	003e8306 	br	10024c0 <__kernel_rem_pio2+0x878>
 1002ab4:	0011883a 	mov	r8,zero
 1002ab8:	0013883a 	mov	r9,zero
 1002abc:	003f6f06 	br	100287c <__kernel_rem_pio2+0xc34>
 1002ac0:	000d883a 	mov	r6,zero
 1002ac4:	000f883a 	mov	r7,zero
 1002ac8:	003f8f06 	br	1002908 <__kernel_rem_pio2+0xcc0>

01002acc <__kernel_sin>:
 1002acc:	00a00034 	movhi	r2,32768
 1002ad0:	10bfffc4 	addi	r2,r2,-1
 1002ad4:	deffef04 	addi	sp,sp,-68
 1002ad8:	1144703a 	and	r2,r2,r5
 1002adc:	00cf9034 	movhi	r3,15936
 1002ae0:	18ffffc4 	addi	r3,r3,-1
 1002ae4:	dd400d15 	stw	r21,52(sp)
 1002ae8:	dd000c15 	stw	r20,48(sp)
 1002aec:	dfc01015 	stw	ra,64(sp)
 1002af0:	ddc00f15 	stw	r23,60(sp)
 1002af4:	dd800e15 	stw	r22,56(sp)
 1002af8:	dcc00b15 	stw	r19,44(sp)
 1002afc:	dc800a15 	stw	r18,40(sp)
 1002b00:	dc400915 	stw	r17,36(sp)
 1002b04:	dc000815 	stw	r16,32(sp)
 1002b08:	2029883a 	mov	r20,r4
 1002b0c:	282b883a 	mov	r21,r5
 1002b10:	d9800415 	stw	r6,16(sp)
 1002b14:	d9c00515 	stw	r7,20(sp)
 1002b18:	18800216 	blt	r3,r2,1002b24 <__kernel_sin+0x58>
 1002b1c:	10041000 	call	1004100 <__fixdfsi>
 1002b20:	10008826 	beq	r2,zero,1002d44 <__kernel_sin+0x278>
 1002b24:	a009883a 	mov	r4,r20
 1002b28:	a80b883a 	mov	r5,r21
 1002b2c:	a00d883a 	mov	r6,r20
 1002b30:	a80f883a 	mov	r7,r21
 1002b34:	1003aac0 	call	1003aac <__muldf3>
 1002b38:	102d883a 	mov	r22,r2
 1002b3c:	a009883a 	mov	r4,r20
 1002b40:	a80b883a 	mov	r5,r21
 1002b44:	b00d883a 	mov	r6,r22
 1002b48:	180f883a 	mov	r7,r3
 1002b4c:	182f883a 	mov	r23,r3
 1002b50:	d8800215 	stw	r2,8(sp)
 1002b54:	d8c00315 	stw	r3,12(sp)
 1002b58:	1003aac0 	call	1003aac <__muldf3>
 1002b5c:	d9000217 	ldw	r4,8(sp)
 1002b60:	0216b434 	movhi	r8,23248
 1002b64:	42355f04 	addi	r8,r8,-10884
 1002b68:	024f79b4 	movhi	r9,15846
 1002b6c:	4a764e84 	addi	r9,r9,-9926
 1002b70:	480f883a 	mov	r7,r9
 1002b74:	400d883a 	mov	r6,r8
 1002b78:	b80b883a 	mov	r5,r23
 1002b7c:	d8800615 	stw	r2,24(sp)
 1002b80:	d8c00715 	stw	r3,28(sp)
 1002b84:	1003aac0 	call	1003aac <__muldf3>
 1002b88:	02228b34 	movhi	r8,35372
 1002b8c:	42273ac4 	addi	r8,r8,-25365
 1002b90:	024f96f4 	movhi	r9,15963
 1002b94:	4a797984 	addi	r9,r9,-6682
 1002b98:	480f883a 	mov	r7,r9
 1002b9c:	400d883a 	mov	r6,r8
 1002ba0:	180b883a 	mov	r5,r3
 1002ba4:	1009883a 	mov	r4,r2
 1002ba8:	10039b80 	call	10039b8 <__subdf3>
 1002bac:	d9000217 	ldw	r4,8(sp)
 1002bb0:	180f883a 	mov	r7,r3
 1002bb4:	b80b883a 	mov	r5,r23
 1002bb8:	100d883a 	mov	r6,r2
 1002bbc:	1003aac0 	call	1003aac <__muldf3>
 1002bc0:	0215ecb4 	movhi	r8,22450
 1002bc4:	423f9f44 	addi	r8,r8,-387
 1002bc8:	024fb1f4 	movhi	r9,16071
 1002bcc:	4a4778c4 	addi	r9,r9,7651
 1002bd0:	480f883a 	mov	r7,r9
 1002bd4:	400d883a 	mov	r6,r8
 1002bd8:	180b883a 	mov	r5,r3
 1002bdc:	1009883a 	mov	r4,r2
 1002be0:	1003a380 	call	1003a38 <__adddf3>
 1002be4:	d9000217 	ldw	r4,8(sp)
 1002be8:	180f883a 	mov	r7,r3
 1002bec:	b80b883a 	mov	r5,r23
 1002bf0:	100d883a 	mov	r6,r2
 1002bf4:	1003aac0 	call	1003aac <__muldf3>
 1002bf8:	02067074 	movhi	r8,6593
 1002bfc:	42187544 	addi	r8,r8,25045
 1002c00:	024fcab4 	movhi	r9,16170
 1002c04:	4a406804 	addi	r9,r9,416
 1002c08:	480f883a 	mov	r7,r9
 1002c0c:	400d883a 	mov	r6,r8
 1002c10:	180b883a 	mov	r5,r3
 1002c14:	1009883a 	mov	r4,r2
 1002c18:	10039b80 	call	10039b8 <__subdf3>
 1002c1c:	d9000217 	ldw	r4,8(sp)
 1002c20:	180f883a 	mov	r7,r3
 1002c24:	b80b883a 	mov	r5,r23
 1002c28:	100d883a 	mov	r6,r2
 1002c2c:	1003aac0 	call	1003aac <__muldf3>
 1002c30:	02044474 	movhi	r8,4369
 1002c34:	423e2984 	addi	r8,r8,-1882
 1002c38:	024fe074 	movhi	r9,16257
 1002c3c:	4a444444 	addi	r9,r9,4369
 1002c40:	180b883a 	mov	r5,r3
 1002c44:	480f883a 	mov	r7,r9
 1002c48:	1009883a 	mov	r4,r2
 1002c4c:	400d883a 	mov	r6,r8
 1002c50:	1003a380 	call	1003a38 <__adddf3>
 1002c54:	1021883a 	mov	r16,r2
 1002c58:	d8800617 	ldw	r2,24(sp)
 1002c5c:	1823883a 	mov	r17,r3
 1002c60:	d8800015 	stw	r2,0(sp)
 1002c64:	d8800717 	ldw	r2,28(sp)
 1002c68:	d8800115 	stw	r2,4(sp)
 1002c6c:	d8801117 	ldw	r2,68(sp)
 1002c70:	10004126 	beq	r2,zero,1002d78 <__kernel_sin+0x2ac>
 1002c74:	d9000417 	ldw	r4,16(sp)
 1002c78:	d9400517 	ldw	r5,20(sp)
 1002c7c:	0005883a 	mov	r2,zero
 1002c80:	00cff834 	movhi	r3,16352
 1002c84:	180f883a 	mov	r7,r3
 1002c88:	100d883a 	mov	r6,r2
 1002c8c:	1003aac0 	call	1003aac <__muldf3>
 1002c90:	d9000017 	ldw	r4,0(sp)
 1002c94:	d9400717 	ldw	r5,28(sp)
 1002c98:	800d883a 	mov	r6,r16
 1002c9c:	880f883a 	mov	r7,r17
 1002ca0:	1021883a 	mov	r16,r2
 1002ca4:	1823883a 	mov	r17,r3
 1002ca8:	1003aac0 	call	1003aac <__muldf3>
 1002cac:	180f883a 	mov	r7,r3
 1002cb0:	880b883a 	mov	r5,r17
 1002cb4:	8009883a 	mov	r4,r16
 1002cb8:	100d883a 	mov	r6,r2
 1002cbc:	10039b80 	call	10039b8 <__subdf3>
 1002cc0:	d9000217 	ldw	r4,8(sp)
 1002cc4:	b80b883a 	mov	r5,r23
 1002cc8:	180f883a 	mov	r7,r3
 1002ccc:	100d883a 	mov	r6,r2
 1002cd0:	1003aac0 	call	1003aac <__muldf3>
 1002cd4:	d9c00517 	ldw	r7,20(sp)
 1002cd8:	d9800417 	ldw	r6,16(sp)
 1002cdc:	180b883a 	mov	r5,r3
 1002ce0:	1009883a 	mov	r4,r2
 1002ce4:	10039b80 	call	10039b8 <__subdf3>
 1002ce8:	d9000017 	ldw	r4,0(sp)
 1002cec:	d9400717 	ldw	r5,28(sp)
 1002cf0:	02155574 	movhi	r8,21845
 1002cf4:	42155244 	addi	r8,r8,21833
 1002cf8:	024ff174 	movhi	r9,16325
 1002cfc:	4a555544 	addi	r9,r9,21845
 1002d00:	480f883a 	mov	r7,r9
 1002d04:	400d883a 	mov	r6,r8
 1002d08:	1021883a 	mov	r16,r2
 1002d0c:	1823883a 	mov	r17,r3
 1002d10:	1003aac0 	call	1003aac <__muldf3>
 1002d14:	180f883a 	mov	r7,r3
 1002d18:	880b883a 	mov	r5,r17
 1002d1c:	8009883a 	mov	r4,r16
 1002d20:	100d883a 	mov	r6,r2
 1002d24:	1003a380 	call	1003a38 <__adddf3>
 1002d28:	180f883a 	mov	r7,r3
 1002d2c:	a80b883a 	mov	r5,r21
 1002d30:	a009883a 	mov	r4,r20
 1002d34:	100d883a 	mov	r6,r2
 1002d38:	10039b80 	call	10039b8 <__subdf3>
 1002d3c:	1029883a 	mov	r20,r2
 1002d40:	182b883a 	mov	r21,r3
 1002d44:	a005883a 	mov	r2,r20
 1002d48:	a807883a 	mov	r3,r21
 1002d4c:	dfc01017 	ldw	ra,64(sp)
 1002d50:	ddc00f17 	ldw	r23,60(sp)
 1002d54:	dd800e17 	ldw	r22,56(sp)
 1002d58:	dd400d17 	ldw	r21,52(sp)
 1002d5c:	dd000c17 	ldw	r20,48(sp)
 1002d60:	dcc00b17 	ldw	r19,44(sp)
 1002d64:	dc800a17 	ldw	r18,40(sp)
 1002d68:	dc400917 	ldw	r17,36(sp)
 1002d6c:	dc000817 	ldw	r16,32(sp)
 1002d70:	dec01104 	addi	sp,sp,68
 1002d74:	f800283a 	ret
 1002d78:	d9000217 	ldw	r4,8(sp)
 1002d7c:	b80b883a 	mov	r5,r23
 1002d80:	800d883a 	mov	r6,r16
 1002d84:	180f883a 	mov	r7,r3
 1002d88:	1003aac0 	call	1003aac <__muldf3>
 1002d8c:	02155574 	movhi	r8,21845
 1002d90:	42155244 	addi	r8,r8,21833
 1002d94:	024ff174 	movhi	r9,16325
 1002d98:	4a555544 	addi	r9,r9,21845
 1002d9c:	480f883a 	mov	r7,r9
 1002da0:	400d883a 	mov	r6,r8
 1002da4:	180b883a 	mov	r5,r3
 1002da8:	1009883a 	mov	r4,r2
 1002dac:	10039b80 	call	10039b8 <__subdf3>
 1002db0:	d9000017 	ldw	r4,0(sp)
 1002db4:	d9400717 	ldw	r5,28(sp)
 1002db8:	180f883a 	mov	r7,r3
 1002dbc:	100d883a 	mov	r6,r2
 1002dc0:	1003aac0 	call	1003aac <__muldf3>
 1002dc4:	180f883a 	mov	r7,r3
 1002dc8:	a80b883a 	mov	r5,r21
 1002dcc:	a009883a 	mov	r4,r20
 1002dd0:	100d883a 	mov	r6,r2
 1002dd4:	1003a380 	call	1003a38 <__adddf3>
 1002dd8:	1029883a 	mov	r20,r2
 1002ddc:	182b883a 	mov	r21,r3
 1002de0:	003fd806 	br	1002d44 <__kernel_sin+0x278>

01002de4 <fabs>:
 1002de4:	01e00034 	movhi	r7,32768
 1002de8:	39ffffc4 	addi	r7,r7,-1
 1002dec:	394e703a 	and	r7,r7,r5
 1002df0:	2005883a 	mov	r2,r4
 1002df4:	3807883a 	mov	r3,r7
 1002df8:	f800283a 	ret

01002dfc <floor>:
 1002dfc:	2805d53a 	srai	r2,r5,20
 1002e00:	defff604 	addi	sp,sp,-40
 1002e04:	dd800615 	stw	r22,24(sp)
 1002e08:	10c1ffcc 	andi	r3,r2,2047
 1002e0c:	1dbf0044 	addi	r22,r3,-1023
 1002e10:	008004c4 	movi	r2,19
 1002e14:	ddc00715 	stw	r23,28(sp)
 1002e18:	dc800215 	stw	r18,8(sp)
 1002e1c:	dc400115 	stw	r17,4(sp)
 1002e20:	dc000015 	stw	r16,0(sp)
 1002e24:	dfc00915 	stw	ra,36(sp)
 1002e28:	df000815 	stw	fp,32(sp)
 1002e2c:	dd400515 	stw	r21,20(sp)
 1002e30:	dd000415 	stw	r20,16(sp)
 1002e34:	dcc00315 	stw	r19,12(sp)
 1002e38:	2021883a 	mov	r16,r4
 1002e3c:	2823883a 	mov	r17,r5
 1002e40:	282f883a 	mov	r23,r5
 1002e44:	2025883a 	mov	r18,r4
 1002e48:	15802916 	blt	r2,r22,1002ef0 <floor+0xf4>
 1002e4c:	b0004816 	blt	r22,zero,1002f70 <floor+0x174>
 1002e50:	00800434 	movhi	r2,16
 1002e54:	10bfffc4 	addi	r2,r2,-1
 1002e58:	15b9d83a 	sra	fp,r2,r22
 1002e5c:	282f883a 	mov	r23,r5
 1002e60:	e144703a 	and	r2,fp,r5
 1002e64:	1104b03a 	or	r2,r2,r4
 1002e68:	10001326 	beq	r2,zero,1002eb8 <floor+0xbc>
 1002e6c:	00a20034 	movhi	r2,34816
 1002e70:	109d6704 	addi	r2,r2,30108
 1002e74:	00df8e34 	movhi	r3,32312
 1002e78:	18f90f04 	addi	r3,r3,-7108
 1002e7c:	180f883a 	mov	r7,r3
 1002e80:	100d883a 	mov	r6,r2
 1002e84:	1003a380 	call	1003a38 <__adddf3>
 1002e88:	180b883a 	mov	r5,r3
 1002e8c:	000d883a 	mov	r6,zero
 1002e90:	000f883a 	mov	r7,zero
 1002e94:	1009883a 	mov	r4,r2
 1002e98:	1003ef80 	call	1003ef8 <__gtdf2>
 1002e9c:	0080040e 	bge	zero,r2,1002eb0 <floor+0xb4>
 1002ea0:	88004416 	blt	r17,zero,1002fb4 <floor+0x1b8>
 1002ea4:	0704303a 	nor	r2,zero,fp
 1002ea8:	b8ae703a 	and	r23,r23,r2
 1002eac:	0025883a 	mov	r18,zero
 1002eb0:	9021883a 	mov	r16,r18
 1002eb4:	b823883a 	mov	r17,r23
 1002eb8:	8005883a 	mov	r2,r16
 1002ebc:	8807883a 	mov	r3,r17
 1002ec0:	dfc00917 	ldw	ra,36(sp)
 1002ec4:	df000817 	ldw	fp,32(sp)
 1002ec8:	ddc00717 	ldw	r23,28(sp)
 1002ecc:	dd800617 	ldw	r22,24(sp)
 1002ed0:	dd400517 	ldw	r21,20(sp)
 1002ed4:	dd000417 	ldw	r20,16(sp)
 1002ed8:	dcc00317 	ldw	r19,12(sp)
 1002edc:	dc800217 	ldw	r18,8(sp)
 1002ee0:	dc400117 	ldw	r17,4(sp)
 1002ee4:	dc000017 	ldw	r16,0(sp)
 1002ee8:	dec00a04 	addi	sp,sp,40
 1002eec:	f800283a 	ret
 1002ef0:	00800cc4 	movi	r2,51
 1002ef4:	15801616 	blt	r2,r22,1002f50 <floor+0x154>
 1002ef8:	18befb44 	addi	r2,r3,-1043
 1002efc:	00ffffc4 	movi	r3,-1
 1002f00:	18b8d83a 	srl	fp,r3,r2
 1002f04:	e104703a 	and	r2,fp,r4
 1002f08:	103feb26 	beq	r2,zero,1002eb8 <floor+0xbc>
 1002f0c:	00a20034 	movhi	r2,34816
 1002f10:	109d6704 	addi	r2,r2,30108
 1002f14:	00df8e34 	movhi	r3,32312
 1002f18:	18f90f04 	addi	r3,r3,-7108
 1002f1c:	180f883a 	mov	r7,r3
 1002f20:	100d883a 	mov	r6,r2
 1002f24:	1003a380 	call	1003a38 <__adddf3>
 1002f28:	180b883a 	mov	r5,r3
 1002f2c:	000d883a 	mov	r6,zero
 1002f30:	000f883a 	mov	r7,zero
 1002f34:	1009883a 	mov	r4,r2
 1002f38:	1003ef80 	call	1003ef8 <__gtdf2>
 1002f3c:	0080210e 	bge	zero,r2,1002fc4 <floor+0x1c8>
 1002f40:	88002216 	blt	r17,zero,1002fcc <floor+0x1d0>
 1002f44:	0704303a 	nor	r2,zero,fp
 1002f48:	90a4703a 	and	r18,r18,r2
 1002f4c:	003fd806 	br	1002eb0 <floor+0xb4>
 1002f50:	00810004 	movi	r2,1024
 1002f54:	b0bfd81e 	bne	r22,r2,1002eb8 <floor+0xbc>
 1002f58:	800d883a 	mov	r6,r16
 1002f5c:	280f883a 	mov	r7,r5
 1002f60:	1003a380 	call	1003a38 <__adddf3>
 1002f64:	1021883a 	mov	r16,r2
 1002f68:	1823883a 	mov	r17,r3
 1002f6c:	003fd206 	br	1002eb8 <floor+0xbc>
 1002f70:	00a20034 	movhi	r2,34816
 1002f74:	109d6704 	addi	r2,r2,30108
 1002f78:	00df8e34 	movhi	r3,32312
 1002f7c:	18f90f04 	addi	r3,r3,-7108
 1002f80:	180f883a 	mov	r7,r3
 1002f84:	100d883a 	mov	r6,r2
 1002f88:	1003a380 	call	1003a38 <__adddf3>
 1002f8c:	180b883a 	mov	r5,r3
 1002f90:	000d883a 	mov	r6,zero
 1002f94:	000f883a 	mov	r7,zero
 1002f98:	1009883a 	mov	r4,r2
 1002f9c:	1003ef80 	call	1003ef8 <__gtdf2>
 1002fa0:	00bfc30e 	bge	zero,r2,1002eb0 <floor+0xb4>
 1002fa4:	88001416 	blt	r17,zero,1002ff8 <floor+0x1fc>
 1002fa8:	002f883a 	mov	r23,zero
 1002fac:	0025883a 	mov	r18,zero
 1002fb0:	003fbf06 	br	1002eb0 <floor+0xb4>
 1002fb4:	00800434 	movhi	r2,16
 1002fb8:	1585d83a 	sra	r2,r2,r22
 1002fbc:	88af883a 	add	r23,r17,r2
 1002fc0:	003fb806 	br	1002ea4 <floor+0xa8>
 1002fc4:	882f883a 	mov	r23,r17
 1002fc8:	003fb906 	br	1002eb0 <floor+0xb4>
 1002fcc:	00800504 	movi	r2,20
 1002fd0:	b0801126 	beq	r22,r2,1003018 <floor+0x21c>
 1002fd4:	00c00d04 	movi	r3,52
 1002fd8:	1d87c83a 	sub	r3,r3,r22
 1002fdc:	00800044 	movi	r2,1
 1002fe0:	10c4983a 	sll	r2,r2,r3
 1002fe4:	8085883a 	add	r2,r16,r2
 1002fe8:	1400012e 	bgeu	r2,r16,1002ff0 <floor+0x1f4>
 1002fec:	8dc00044 	addi	r23,r17,1
 1002ff0:	1025883a 	mov	r18,r2
 1002ff4:	003fd306 	br	1002f44 <floor+0x148>
 1002ff8:	00a00034 	movhi	r2,32768
 1002ffc:	10bfffc4 	addi	r2,r2,-1
 1003000:	8884703a 	and	r2,r17,r2
 1003004:	8084b03a 	or	r2,r16,r2
 1003008:	103fee26 	beq	r2,zero,1002fc4 <floor+0x1c8>
 100300c:	05effc34 	movhi	r23,49136
 1003010:	0025883a 	mov	r18,zero
 1003014:	003fa606 	br	1002eb0 <floor+0xb4>
 1003018:	8dc00044 	addi	r23,r17,1
 100301c:	003fc906 	br	1002f44 <floor+0x148>

01003020 <scalbn>:
 1003020:	2011883a 	mov	r8,r4
 1003024:	291ffc2c 	andhi	r4,r5,32752
 1003028:	2009d53a 	srai	r4,r4,20
 100302c:	defffd04 	addi	sp,sp,-12
 1003030:	dc000015 	stw	r16,0(sp)
 1003034:	dfc00215 	stw	ra,8(sp)
 1003038:	dc400115 	stw	r17,4(sp)
 100303c:	2813883a 	mov	r9,r5
 1003040:	2815883a 	mov	r10,r5
 1003044:	3021883a 	mov	r16,r6
 1003048:	2000281e 	bne	r4,zero,10030ec <scalbn+0xcc>
 100304c:	00a00034 	movhi	r2,32768
 1003050:	10bfffc4 	addi	r2,r2,-1
 1003054:	2884703a 	and	r2,r5,r2
 1003058:	4084b03a 	or	r2,r8,r2
 100305c:	10001826 	beq	r2,zero,10030c0 <scalbn+0xa0>
 1003060:	0005883a 	mov	r2,zero
 1003064:	00d0d434 	movhi	r3,17232
 1003068:	4009883a 	mov	r4,r8
 100306c:	100d883a 	mov	r6,r2
 1003070:	180f883a 	mov	r7,r3
 1003074:	1003aac0 	call	1003aac <__muldf3>
 1003078:	100b883a 	mov	r5,r2
 100307c:	1011883a 	mov	r8,r2
 1003080:	00bffff4 	movhi	r2,65535
 1003084:	108f2c04 	addi	r2,r2,15536
 1003088:	180d883a 	mov	r6,r3
 100308c:	1813883a 	mov	r9,r3
 1003090:	8080120e 	bge	r16,r2,10030dc <scalbn+0xbc>
 1003094:	00b0be74 	movhi	r2,49913
 1003098:	10bcd644 	addi	r2,r2,-3239
 100309c:	00c06974 	movhi	r3,421
 10030a0:	18db87c4 	addi	r3,r3,28191
 10030a4:	2809883a 	mov	r4,r5
 10030a8:	180f883a 	mov	r7,r3
 10030ac:	300b883a 	mov	r5,r6
 10030b0:	100d883a 	mov	r6,r2
 10030b4:	1003aac0 	call	1003aac <__muldf3>
 10030b8:	1011883a 	mov	r8,r2
 10030bc:	1813883a 	mov	r9,r3
 10030c0:	4005883a 	mov	r2,r8
 10030c4:	4807883a 	mov	r3,r9
 10030c8:	dfc00217 	ldw	ra,8(sp)
 10030cc:	dc400117 	ldw	r17,4(sp)
 10030d0:	dc000017 	ldw	r16,0(sp)
 10030d4:	dec00304 	addi	sp,sp,12
 10030d8:	f800283a 	ret
 10030dc:	189ffc2c 	andhi	r2,r3,32752
 10030e0:	1005d53a 	srai	r2,r2,20
 10030e4:	1815883a 	mov	r10,r3
 10030e8:	113ff284 	addi	r4,r2,-54
 10030ec:	0081ffc4 	movi	r2,2047
 10030f0:	20801126 	beq	r4,r2,1003138 <scalbn+0x118>
 10030f4:	2409883a 	add	r4,r4,r16
 10030f8:	0081ff84 	movi	r2,2046
 10030fc:	11001c16 	blt	r2,r4,1003170 <scalbn+0x150>
 1003100:	0100290e 	bge	zero,r4,10031a8 <scalbn+0x188>
 1003104:	200a953a 	slli	r5,r4,20
 1003108:	01200434 	movhi	r4,32784
 100310c:	213fffc4 	addi	r4,r4,-1
 1003110:	5108703a 	and	r4,r10,r4
 1003114:	2148b03a 	or	r4,r4,r5
 1003118:	2013883a 	mov	r9,r4
 100311c:	4005883a 	mov	r2,r8
 1003120:	4807883a 	mov	r3,r9
 1003124:	dfc00217 	ldw	ra,8(sp)
 1003128:	dc400117 	ldw	r17,4(sp)
 100312c:	dc000017 	ldw	r16,0(sp)
 1003130:	dec00304 	addi	sp,sp,12
 1003134:	f800283a 	ret
 1003138:	480f883a 	mov	r7,r9
 100313c:	4009883a 	mov	r4,r8
 1003140:	480b883a 	mov	r5,r9
 1003144:	400d883a 	mov	r6,r8
 1003148:	1003a380 	call	1003a38 <__adddf3>
 100314c:	1011883a 	mov	r8,r2
 1003150:	1813883a 	mov	r9,r3
 1003154:	4005883a 	mov	r2,r8
 1003158:	4807883a 	mov	r3,r9
 100315c:	dfc00217 	ldw	ra,8(sp)
 1003160:	dc400117 	ldw	r17,4(sp)
 1003164:	dc000017 	ldw	r16,0(sp)
 1003168:	dec00304 	addi	sp,sp,12
 100316c:	f800283a 	ret
 1003170:	04220034 	movhi	r16,34816
 1003174:	841d6704 	addi	r16,r16,30108
 1003178:	045f8e34 	movhi	r17,32312
 100317c:	8c790f04 	addi	r17,r17,-7108
 1003180:	480f883a 	mov	r7,r9
 1003184:	400d883a 	mov	r6,r8
 1003188:	8009883a 	mov	r4,r16
 100318c:	880b883a 	mov	r5,r17
 1003190:	10032000 	call	1003200 <copysign>
 1003194:	180b883a 	mov	r5,r3
 1003198:	800d883a 	mov	r6,r16
 100319c:	880f883a 	mov	r7,r17
 10031a0:	1009883a 	mov	r4,r2
 10031a4:	003fc306 	br	10030b4 <scalbn+0x94>
 10031a8:	00bff284 	movi	r2,-54
 10031ac:	11000716 	blt	r2,r4,10031cc <scalbn+0x1ac>
 10031b0:	00b0d414 	movui	r2,50000
 10031b4:	143fee16 	blt	r2,r16,1003170 <scalbn+0x150>
 10031b8:	0430be74 	movhi	r16,49913
 10031bc:	843cd644 	addi	r16,r16,-3239
 10031c0:	04406974 	movhi	r17,421
 10031c4:	8c5b87c4 	addi	r17,r17,28191
 10031c8:	003fed06 	br	1003180 <scalbn+0x160>
 10031cc:	21000d84 	addi	r4,r4,54
 10031d0:	2008953a 	slli	r4,r4,20
 10031d4:	01e00434 	movhi	r7,32784
 10031d8:	39ffffc4 	addi	r7,r7,-1
 10031dc:	51ce703a 	and	r7,r10,r7
 10031e0:	390eb03a 	or	r7,r7,r4
 10031e4:	024f2434 	movhi	r9,15504
 10031e8:	4009883a 	mov	r4,r8
 10031ec:	0011883a 	mov	r8,zero
 10031f0:	380b883a 	mov	r5,r7
 10031f4:	400d883a 	mov	r6,r8
 10031f8:	480f883a 	mov	r7,r9
 10031fc:	003fad06 	br	10030b4 <scalbn+0x94>

01003200 <copysign>:
 1003200:	3813883a 	mov	r9,r7
 1003204:	01e00034 	movhi	r7,32768
 1003208:	39ffffc4 	addi	r7,r7,-1
 100320c:	394e703a 	and	r7,r7,r5
 1003210:	4aa0002c 	andhi	r10,r9,32768
 1003214:	3a8eb03a 	or	r7,r7,r10
 1003218:	2005883a 	mov	r2,r4
 100321c:	3807883a 	mov	r3,r7
 1003220:	f800283a 	ret

01003224 <_fpadd_parts>:
 1003224:	21c00017 	ldw	r7,0(r4)
 1003228:	02000044 	movi	r8,1
 100322c:	41c0332e 	bgeu	r8,r7,10032fc <_fpadd_parts+0xd8>
 1003230:	28800017 	ldw	r2,0(r5)
 1003234:	4080462e 	bgeu	r8,r2,1003350 <_fpadd_parts+0x12c>
 1003238:	00c00104 	movi	r3,4
 100323c:	38c06b26 	beq	r7,r3,10033ec <_fpadd_parts+0x1c8>
 1003240:	10c04326 	beq	r2,r3,1003350 <_fpadd_parts+0x12c>
 1003244:	00c00084 	movi	r3,2
 1003248:	10c02e26 	beq	r2,r3,1003304 <_fpadd_parts+0xe0>
 100324c:	38c04026 	beq	r7,r3,1003350 <_fpadd_parts+0x12c>
 1003250:	22800217 	ldw	r10,8(r4)
 1003254:	28c00217 	ldw	r3,8(r5)
 1003258:	23000317 	ldw	r12,12(r4)
 100325c:	2a400317 	ldw	r9,12(r5)
 1003260:	50cfc83a 	sub	r7,r10,r3
 1003264:	3817883a 	mov	r11,r7
 1003268:	38004f16 	blt	r7,zero,10033a8 <_fpadd_parts+0x184>
 100326c:	008007c4 	movi	r2,31
 1003270:	11c03316 	blt	r2,r7,1003340 <_fpadd_parts+0x11c>
 1003274:	02c0540e 	bge	zero,r11,10033c8 <_fpadd_parts+0x1a4>
 1003278:	41c4983a 	sll	r2,r8,r7
 100327c:	49c6d83a 	srl	r3,r9,r7
 1003280:	10bfffc4 	addi	r2,r2,-1
 1003284:	4884703a 	and	r2,r9,r2
 1003288:	1004c03a 	cmpne	r2,r2,zero
 100328c:	1892b03a 	or	r9,r3,r2
 1003290:	20c00117 	ldw	r3,4(r4)
 1003294:	28800117 	ldw	r2,4(r5)
 1003298:	18803c26 	beq	r3,r2,100338c <_fpadd_parts+0x168>
 100329c:	18002f26 	beq	r3,zero,100335c <_fpadd_parts+0x138>
 10032a0:	4b05c83a 	sub	r2,r9,r12
 10032a4:	10004216 	blt	r2,zero,10033b0 <_fpadd_parts+0x18c>
 10032a8:	32800215 	stw	r10,8(r6)
 10032ac:	30800315 	stw	r2,12(r6)
 10032b0:	30000115 	stw	zero,4(r6)
 10032b4:	31000317 	ldw	r4,12(r6)
 10032b8:	01d00034 	movhi	r7,16384
 10032bc:	39ffff84 	addi	r7,r7,-2
 10032c0:	20bfffc4 	addi	r2,r4,-1
 10032c4:	2007883a 	mov	r3,r4
 10032c8:	38800836 	bltu	r7,r2,10032ec <_fpadd_parts+0xc8>
 10032cc:	31400217 	ldw	r5,8(r6)
 10032d0:	18c9883a 	add	r4,r3,r3
 10032d4:	20bfffc4 	addi	r2,r4,-1
 10032d8:	297fffc4 	addi	r5,r5,-1
 10032dc:	2007883a 	mov	r3,r4
 10032e0:	38bffb2e 	bgeu	r7,r2,10032d0 <_fpadd_parts+0xac>
 10032e4:	31400215 	stw	r5,8(r6)
 10032e8:	31000315 	stw	r4,12(r6)
 10032ec:	008000c4 	movi	r2,3
 10032f0:	30800015 	stw	r2,0(r6)
 10032f4:	20001b16 	blt	r4,zero,1003364 <_fpadd_parts+0x140>
 10032f8:	3009883a 	mov	r4,r6
 10032fc:	2005883a 	mov	r2,r4
 1003300:	f800283a 	ret
 1003304:	38fffd1e 	bne	r7,r3,10032fc <_fpadd_parts+0xd8>
 1003308:	31c00015 	stw	r7,0(r6)
 100330c:	20800117 	ldw	r2,4(r4)
 1003310:	30800115 	stw	r2,4(r6)
 1003314:	20c00217 	ldw	r3,8(r4)
 1003318:	30c00215 	stw	r3,8(r6)
 100331c:	20800317 	ldw	r2,12(r4)
 1003320:	30800315 	stw	r2,12(r6)
 1003324:	20c00117 	ldw	r3,4(r4)
 1003328:	28800117 	ldw	r2,4(r5)
 100332c:	3009883a 	mov	r4,r6
 1003330:	1886703a 	and	r3,r3,r2
 1003334:	2005883a 	mov	r2,r4
 1003338:	30c00115 	stw	r3,4(r6)
 100333c:	f800283a 	ret
 1003340:	1a801716 	blt	r3,r10,10033a0 <_fpadd_parts+0x17c>
 1003344:	1815883a 	mov	r10,r3
 1003348:	0019883a 	mov	r12,zero
 100334c:	003fd006 	br	1003290 <_fpadd_parts+0x6c>
 1003350:	2809883a 	mov	r4,r5
 1003354:	2005883a 	mov	r2,r4
 1003358:	f800283a 	ret
 100335c:	6245c83a 	sub	r2,r12,r9
 1003360:	003fd006 	br	10032a4 <_fpadd_parts+0x80>
 1003364:	30800217 	ldw	r2,8(r6)
 1003368:	2006d07a 	srli	r3,r4,1
 100336c:	2100004c 	andi	r4,r4,1
 1003370:	10800044 	addi	r2,r2,1
 1003374:	1906b03a 	or	r3,r3,r4
 1003378:	3009883a 	mov	r4,r6
 100337c:	30800215 	stw	r2,8(r6)
 1003380:	2005883a 	mov	r2,r4
 1003384:	30c00315 	stw	r3,12(r6)
 1003388:	f800283a 	ret
 100338c:	4b09883a 	add	r4,r9,r12
 1003390:	30c00115 	stw	r3,4(r6)
 1003394:	32800215 	stw	r10,8(r6)
 1003398:	31000315 	stw	r4,12(r6)
 100339c:	003fd306 	br	10032ec <_fpadd_parts+0xc8>
 10033a0:	0013883a 	mov	r9,zero
 10033a4:	003fba06 	br	1003290 <_fpadd_parts+0x6c>
 10033a8:	01cfc83a 	sub	r7,zero,r7
 10033ac:	003faf06 	br	100326c <_fpadd_parts+0x48>
 10033b0:	0089c83a 	sub	r4,zero,r2
 10033b4:	00800044 	movi	r2,1
 10033b8:	30800115 	stw	r2,4(r6)
 10033bc:	32800215 	stw	r10,8(r6)
 10033c0:	31000315 	stw	r4,12(r6)
 10033c4:	003fbb06 	br	10032b4 <_fpadd_parts+0x90>
 10033c8:	583fb126 	beq	r11,zero,1003290 <_fpadd_parts+0x6c>
 10033cc:	41c4983a 	sll	r2,r8,r7
 10033d0:	61c6d83a 	srl	r3,r12,r7
 10033d4:	51d5883a 	add	r10,r10,r7
 10033d8:	10bfffc4 	addi	r2,r2,-1
 10033dc:	6084703a 	and	r2,r12,r2
 10033e0:	1004c03a 	cmpne	r2,r2,zero
 10033e4:	1898b03a 	or	r12,r3,r2
 10033e8:	003fa906 	br	1003290 <_fpadd_parts+0x6c>
 10033ec:	11ffc31e 	bne	r2,r7,10032fc <_fpadd_parts+0xd8>
 10033f0:	28c00117 	ldw	r3,4(r5)
 10033f4:	20800117 	ldw	r2,4(r4)
 10033f8:	10ffc026 	beq	r2,r3,10032fc <_fpadd_parts+0xd8>
 10033fc:	01004074 	movhi	r4,257
 1003400:	21079b04 	addi	r4,r4,7788
 1003404:	003fbd06 	br	10032fc <_fpadd_parts+0xd8>

01003408 <__subsf3>:
 1003408:	deffef04 	addi	sp,sp,-68
 100340c:	dcc00f15 	stw	r19,60(sp)
 1003410:	dcc00204 	addi	r19,sp,8
 1003414:	dc400e15 	stw	r17,56(sp)
 1003418:	d9000015 	stw	r4,0(sp)
 100341c:	d9400115 	stw	r5,4(sp)
 1003420:	d809883a 	mov	r4,sp
 1003424:	980b883a 	mov	r5,r19
 1003428:	dc400604 	addi	r17,sp,24
 100342c:	dfc01015 	stw	ra,64(sp)
 1003430:	10046980 	call	1004698 <__unpack_f>
 1003434:	d9000104 	addi	r4,sp,4
 1003438:	880b883a 	mov	r5,r17
 100343c:	10046980 	call	1004698 <__unpack_f>
 1003440:	d8800717 	ldw	r2,28(sp)
 1003444:	9809883a 	mov	r4,r19
 1003448:	880b883a 	mov	r5,r17
 100344c:	d9800a04 	addi	r6,sp,40
 1003450:	1080005c 	xori	r2,r2,1
 1003454:	d8800715 	stw	r2,28(sp)
 1003458:	10032240 	call	1003224 <_fpadd_parts>
 100345c:	1009883a 	mov	r4,r2
 1003460:	10045380 	call	1004538 <__pack_f>
 1003464:	dfc01017 	ldw	ra,64(sp)
 1003468:	dcc00f17 	ldw	r19,60(sp)
 100346c:	dc400e17 	ldw	r17,56(sp)
 1003470:	dec01104 	addi	sp,sp,68
 1003474:	f800283a 	ret

01003478 <__addsf3>:
 1003478:	deffef04 	addi	sp,sp,-68
 100347c:	dcc00f15 	stw	r19,60(sp)
 1003480:	dcc00204 	addi	r19,sp,8
 1003484:	dc400e15 	stw	r17,56(sp)
 1003488:	d9000015 	stw	r4,0(sp)
 100348c:	d9400115 	stw	r5,4(sp)
 1003490:	d809883a 	mov	r4,sp
 1003494:	980b883a 	mov	r5,r19
 1003498:	dc400604 	addi	r17,sp,24
 100349c:	dfc01015 	stw	ra,64(sp)
 10034a0:	10046980 	call	1004698 <__unpack_f>
 10034a4:	d9000104 	addi	r4,sp,4
 10034a8:	880b883a 	mov	r5,r17
 10034ac:	10046980 	call	1004698 <__unpack_f>
 10034b0:	d9800a04 	addi	r6,sp,40
 10034b4:	9809883a 	mov	r4,r19
 10034b8:	880b883a 	mov	r5,r17
 10034bc:	10032240 	call	1003224 <_fpadd_parts>
 10034c0:	1009883a 	mov	r4,r2
 10034c4:	10045380 	call	1004538 <__pack_f>
 10034c8:	dfc01017 	ldw	ra,64(sp)
 10034cc:	dcc00f17 	ldw	r19,60(sp)
 10034d0:	dc400e17 	ldw	r17,56(sp)
 10034d4:	dec01104 	addi	sp,sp,68
 10034d8:	f800283a 	ret

010034dc <__ltsf2>:
 10034dc:	defff304 	addi	sp,sp,-52
 10034e0:	dc400b15 	stw	r17,44(sp)
 10034e4:	dc400204 	addi	r17,sp,8
 10034e8:	dc000a15 	stw	r16,40(sp)
 10034ec:	d9000015 	stw	r4,0(sp)
 10034f0:	d9400115 	stw	r5,4(sp)
 10034f4:	d809883a 	mov	r4,sp
 10034f8:	880b883a 	mov	r5,r17
 10034fc:	dc000604 	addi	r16,sp,24
 1003500:	dfc00c15 	stw	ra,48(sp)
 1003504:	10046980 	call	1004698 <__unpack_f>
 1003508:	d9000104 	addi	r4,sp,4
 100350c:	800b883a 	mov	r5,r16
 1003510:	10046980 	call	1004698 <__unpack_f>
 1003514:	d8800217 	ldw	r2,8(sp)
 1003518:	00c00044 	movi	r3,1
 100351c:	180d883a 	mov	r6,r3
 1003520:	1880062e 	bgeu	r3,r2,100353c <__ltsf2+0x60>
 1003524:	d8800617 	ldw	r2,24(sp)
 1003528:	8809883a 	mov	r4,r17
 100352c:	800b883a 	mov	r5,r16
 1003530:	1880022e 	bgeu	r3,r2,100353c <__ltsf2+0x60>
 1003534:	10047600 	call	1004760 <__fpcmp_parts_f>
 1003538:	100d883a 	mov	r6,r2
 100353c:	3005883a 	mov	r2,r6
 1003540:	dfc00c17 	ldw	ra,48(sp)
 1003544:	dc400b17 	ldw	r17,44(sp)
 1003548:	dc000a17 	ldw	r16,40(sp)
 100354c:	dec00d04 	addi	sp,sp,52
 1003550:	f800283a 	ret

01003554 <__extendsfdf2>:
 1003554:	defff904 	addi	sp,sp,-28
 1003558:	d9000115 	stw	r4,4(sp)
 100355c:	d9400204 	addi	r5,sp,8
 1003560:	d9000104 	addi	r4,sp,4
 1003564:	dfc00615 	stw	ra,24(sp)
 1003568:	10046980 	call	1004698 <__unpack_f>
 100356c:	d9c00517 	ldw	r7,20(sp)
 1003570:	0011883a 	mov	r8,zero
 1003574:	400697ba 	slli	r3,r8,30
 1003578:	3812d0ba 	srli	r9,r7,2
 100357c:	380497ba 	slli	r2,r7,30
 1003580:	d9000217 	ldw	r4,8(sp)
 1003584:	d9400317 	ldw	r5,12(sp)
 1003588:	d9800417 	ldw	r6,16(sp)
 100358c:	48c6b03a 	or	r3,r9,r3
 1003590:	100f883a 	mov	r7,r2
 1003594:	d8c00015 	stw	r3,0(sp)
 1003598:	10041d80 	call	10041d8 <__make_dp>
 100359c:	dfc00617 	ldw	ra,24(sp)
 10035a0:	dec00704 	addi	sp,sp,28
 10035a4:	f800283a 	ret

010035a8 <_fpadd_parts>:
 10035a8:	defff804 	addi	sp,sp,-32
 10035ac:	dcc00315 	stw	r19,12(sp)
 10035b0:	2027883a 	mov	r19,r4
 10035b4:	21000017 	ldw	r4,0(r4)
 10035b8:	00c00044 	movi	r3,1
 10035bc:	dd400515 	stw	r21,20(sp)
 10035c0:	dd000415 	stw	r20,16(sp)
 10035c4:	ddc00715 	stw	r23,28(sp)
 10035c8:	dd800615 	stw	r22,24(sp)
 10035cc:	dc800215 	stw	r18,8(sp)
 10035d0:	dc400115 	stw	r17,4(sp)
 10035d4:	dc000015 	stw	r16,0(sp)
 10035d8:	282b883a 	mov	r21,r5
 10035dc:	3029883a 	mov	r20,r6
 10035e0:	1900632e 	bgeu	r3,r4,1003770 <_fpadd_parts+0x1c8>
 10035e4:	28800017 	ldw	r2,0(r5)
 10035e8:	1880812e 	bgeu	r3,r2,10037f0 <_fpadd_parts+0x248>
 10035ec:	00c00104 	movi	r3,4
 10035f0:	20c0dc26 	beq	r4,r3,1003964 <_fpadd_parts+0x3bc>
 10035f4:	10c07e26 	beq	r2,r3,10037f0 <_fpadd_parts+0x248>
 10035f8:	00c00084 	movi	r3,2
 10035fc:	10c06726 	beq	r2,r3,100379c <_fpadd_parts+0x1f4>
 1003600:	20c07b26 	beq	r4,r3,10037f0 <_fpadd_parts+0x248>
 1003604:	9dc00217 	ldw	r23,8(r19)
 1003608:	28c00217 	ldw	r3,8(r5)
 100360c:	9c400317 	ldw	r17,12(r19)
 1003610:	2bc00317 	ldw	r15,12(r5)
 1003614:	b8cdc83a 	sub	r6,r23,r3
 1003618:	9c800417 	ldw	r18,16(r19)
 100361c:	2c000417 	ldw	r16,16(r5)
 1003620:	3009883a 	mov	r4,r6
 1003624:	30009716 	blt	r6,zero,1003884 <_fpadd_parts+0x2dc>
 1003628:	00800fc4 	movi	r2,63
 100362c:	11806b16 	blt	r2,r6,10037dc <_fpadd_parts+0x234>
 1003630:	0100a40e 	bge	zero,r4,10038c4 <_fpadd_parts+0x31c>
 1003634:	35bff804 	addi	r22,r6,-32
 1003638:	b000bc16 	blt	r22,zero,100392c <_fpadd_parts+0x384>
 100363c:	8596d83a 	srl	r11,r16,r22
 1003640:	0019883a 	mov	r12,zero
 1003644:	0013883a 	mov	r9,zero
 1003648:	01000044 	movi	r4,1
 100364c:	0015883a 	mov	r10,zero
 1003650:	b000be16 	blt	r22,zero,100394c <_fpadd_parts+0x3a4>
 1003654:	2590983a 	sll	r8,r4,r22
 1003658:	000f883a 	mov	r7,zero
 100365c:	00bfffc4 	movi	r2,-1
 1003660:	3889883a 	add	r4,r7,r2
 1003664:	408b883a 	add	r5,r8,r2
 1003668:	21cd803a 	cmpltu	r6,r4,r7
 100366c:	314b883a 	add	r5,r6,r5
 1003670:	7904703a 	and	r2,r15,r4
 1003674:	8146703a 	and	r3,r16,r5
 1003678:	10c4b03a 	or	r2,r2,r3
 100367c:	10000226 	beq	r2,zero,1003688 <_fpadd_parts+0xe0>
 1003680:	02400044 	movi	r9,1
 1003684:	0015883a 	mov	r10,zero
 1003688:	5a5eb03a 	or	r15,r11,r9
 100368c:	62a0b03a 	or	r16,r12,r10
 1003690:	99400117 	ldw	r5,4(r19)
 1003694:	a8800117 	ldw	r2,4(r21)
 1003698:	28806e26 	beq	r5,r2,1003854 <_fpadd_parts+0x2ac>
 100369c:	28006626 	beq	r5,zero,1003838 <_fpadd_parts+0x290>
 10036a0:	7c45c83a 	sub	r2,r15,r17
 10036a4:	7889803a 	cmpltu	r4,r15,r2
 10036a8:	8487c83a 	sub	r3,r16,r18
 10036ac:	1909c83a 	sub	r4,r3,r4
 10036b0:	100d883a 	mov	r6,r2
 10036b4:	200f883a 	mov	r7,r4
 10036b8:	38007716 	blt	r7,zero,1003898 <_fpadd_parts+0x2f0>
 10036bc:	a5c00215 	stw	r23,8(r20)
 10036c0:	a1c00415 	stw	r7,16(r20)
 10036c4:	a0000115 	stw	zero,4(r20)
 10036c8:	a1800315 	stw	r6,12(r20)
 10036cc:	a2000317 	ldw	r8,12(r20)
 10036d0:	a2400417 	ldw	r9,16(r20)
 10036d4:	00bfffc4 	movi	r2,-1
 10036d8:	408b883a 	add	r5,r8,r2
 10036dc:	2a09803a 	cmpltu	r4,r5,r8
 10036e0:	488d883a 	add	r6,r9,r2
 10036e4:	01c40034 	movhi	r7,4096
 10036e8:	39ffffc4 	addi	r7,r7,-1
 10036ec:	218d883a 	add	r6,r4,r6
 10036f0:	39801736 	bltu	r7,r6,1003750 <_fpadd_parts+0x1a8>
 10036f4:	31c06526 	beq	r6,r7,100388c <_fpadd_parts+0x2e4>
 10036f8:	a3000217 	ldw	r12,8(r20)
 10036fc:	4209883a 	add	r4,r8,r8
 1003700:	00bfffc4 	movi	r2,-1
 1003704:	220f803a 	cmpltu	r7,r4,r8
 1003708:	4a4b883a 	add	r5,r9,r9
 100370c:	394f883a 	add	r7,r7,r5
 1003710:	2095883a 	add	r10,r4,r2
 1003714:	3897883a 	add	r11,r7,r2
 1003718:	510d803a 	cmpltu	r6,r10,r4
 100371c:	6099883a 	add	r12,r12,r2
 1003720:	32d7883a 	add	r11,r6,r11
 1003724:	00840034 	movhi	r2,4096
 1003728:	10bfffc4 	addi	r2,r2,-1
 100372c:	2011883a 	mov	r8,r4
 1003730:	3813883a 	mov	r9,r7
 1003734:	a1000315 	stw	r4,12(r20)
 1003738:	a1c00415 	stw	r7,16(r20)
 100373c:	a3000215 	stw	r12,8(r20)
 1003740:	12c00336 	bltu	r2,r11,1003750 <_fpadd_parts+0x1a8>
 1003744:	58bfed1e 	bne	r11,r2,10036fc <_fpadd_parts+0x154>
 1003748:	00bfff84 	movi	r2,-2
 100374c:	12bfeb2e 	bgeu	r2,r10,10036fc <_fpadd_parts+0x154>
 1003750:	a2800417 	ldw	r10,16(r20)
 1003754:	008000c4 	movi	r2,3
 1003758:	00c80034 	movhi	r3,8192
 100375c:	18ffffc4 	addi	r3,r3,-1
 1003760:	a2400317 	ldw	r9,12(r20)
 1003764:	a0800015 	stw	r2,0(r20)
 1003768:	1a802336 	bltu	r3,r10,10037f8 <_fpadd_parts+0x250>
 100376c:	a027883a 	mov	r19,r20
 1003770:	9805883a 	mov	r2,r19
 1003774:	ddc00717 	ldw	r23,28(sp)
 1003778:	dd800617 	ldw	r22,24(sp)
 100377c:	dd400517 	ldw	r21,20(sp)
 1003780:	dd000417 	ldw	r20,16(sp)
 1003784:	dcc00317 	ldw	r19,12(sp)
 1003788:	dc800217 	ldw	r18,8(sp)
 100378c:	dc400117 	ldw	r17,4(sp)
 1003790:	dc000017 	ldw	r16,0(sp)
 1003794:	dec00804 	addi	sp,sp,32
 1003798:	f800283a 	ret
 100379c:	20fff41e 	bne	r4,r3,1003770 <_fpadd_parts+0x1c8>
 10037a0:	31000015 	stw	r4,0(r6)
 10037a4:	98800117 	ldw	r2,4(r19)
 10037a8:	30800115 	stw	r2,4(r6)
 10037ac:	98c00217 	ldw	r3,8(r19)
 10037b0:	30c00215 	stw	r3,8(r6)
 10037b4:	98800317 	ldw	r2,12(r19)
 10037b8:	30800315 	stw	r2,12(r6)
 10037bc:	98c00417 	ldw	r3,16(r19)
 10037c0:	30c00415 	stw	r3,16(r6)
 10037c4:	98800117 	ldw	r2,4(r19)
 10037c8:	28c00117 	ldw	r3,4(r5)
 10037cc:	3027883a 	mov	r19,r6
 10037d0:	10c4703a 	and	r2,r2,r3
 10037d4:	30800115 	stw	r2,4(r6)
 10037d8:	003fe506 	br	1003770 <_fpadd_parts+0x1c8>
 10037dc:	1dc02616 	blt	r3,r23,1003878 <_fpadd_parts+0x2d0>
 10037e0:	0023883a 	mov	r17,zero
 10037e4:	182f883a 	mov	r23,r3
 10037e8:	0025883a 	mov	r18,zero
 10037ec:	003fa806 	br	1003690 <_fpadd_parts+0xe8>
 10037f0:	a827883a 	mov	r19,r21
 10037f4:	003fde06 	br	1003770 <_fpadd_parts+0x1c8>
 10037f8:	01800044 	movi	r6,1
 10037fc:	500497fa 	slli	r2,r10,31
 1003800:	4808d07a 	srli	r4,r9,1
 1003804:	518ad83a 	srl	r5,r10,r6
 1003808:	a2000217 	ldw	r8,8(r20)
 100380c:	1108b03a 	or	r4,r2,r4
 1003810:	0007883a 	mov	r3,zero
 1003814:	4984703a 	and	r2,r9,r6
 1003818:	208cb03a 	or	r6,r4,r2
 100381c:	28ceb03a 	or	r7,r5,r3
 1003820:	42000044 	addi	r8,r8,1
 1003824:	a027883a 	mov	r19,r20
 1003828:	a1c00415 	stw	r7,16(r20)
 100382c:	a2000215 	stw	r8,8(r20)
 1003830:	a1800315 	stw	r6,12(r20)
 1003834:	003fce06 	br	1003770 <_fpadd_parts+0x1c8>
 1003838:	8bc5c83a 	sub	r2,r17,r15
 100383c:	8889803a 	cmpltu	r4,r17,r2
 1003840:	9407c83a 	sub	r3,r18,r16
 1003844:	1909c83a 	sub	r4,r3,r4
 1003848:	100d883a 	mov	r6,r2
 100384c:	200f883a 	mov	r7,r4
 1003850:	003f9906 	br	10036b8 <_fpadd_parts+0x110>
 1003854:	7c45883a 	add	r2,r15,r17
 1003858:	13c9803a 	cmpltu	r4,r2,r15
 100385c:	8487883a 	add	r3,r16,r18
 1003860:	20c9883a 	add	r4,r4,r3
 1003864:	a1400115 	stw	r5,4(r20)
 1003868:	a5c00215 	stw	r23,8(r20)
 100386c:	a0800315 	stw	r2,12(r20)
 1003870:	a1000415 	stw	r4,16(r20)
 1003874:	003fb606 	br	1003750 <_fpadd_parts+0x1a8>
 1003878:	001f883a 	mov	r15,zero
 100387c:	0021883a 	mov	r16,zero
 1003880:	003f8306 	br	1003690 <_fpadd_parts+0xe8>
 1003884:	018dc83a 	sub	r6,zero,r6
 1003888:	003f6706 	br	1003628 <_fpadd_parts+0x80>
 100388c:	00bfff84 	movi	r2,-2
 1003890:	117faf36 	bltu	r2,r5,1003750 <_fpadd_parts+0x1a8>
 1003894:	003f9806 	br	10036f8 <_fpadd_parts+0x150>
 1003898:	0005883a 	mov	r2,zero
 100389c:	1189c83a 	sub	r4,r2,r6
 10038a0:	1105803a 	cmpltu	r2,r2,r4
 10038a4:	01cbc83a 	sub	r5,zero,r7
 10038a8:	2885c83a 	sub	r2,r5,r2
 10038ac:	01800044 	movi	r6,1
 10038b0:	a1800115 	stw	r6,4(r20)
 10038b4:	a5c00215 	stw	r23,8(r20)
 10038b8:	a1000315 	stw	r4,12(r20)
 10038bc:	a0800415 	stw	r2,16(r20)
 10038c0:	003f8206 	br	10036cc <_fpadd_parts+0x124>
 10038c4:	203f7226 	beq	r4,zero,1003690 <_fpadd_parts+0xe8>
 10038c8:	35bff804 	addi	r22,r6,-32
 10038cc:	b9af883a 	add	r23,r23,r6
 10038d0:	b0003116 	blt	r22,zero,1003998 <_fpadd_parts+0x3f0>
 10038d4:	959ad83a 	srl	r13,r18,r22
 10038d8:	001d883a 	mov	r14,zero
 10038dc:	000f883a 	mov	r7,zero
 10038e0:	01000044 	movi	r4,1
 10038e4:	0011883a 	mov	r8,zero
 10038e8:	b0002516 	blt	r22,zero,1003980 <_fpadd_parts+0x3d8>
 10038ec:	2594983a 	sll	r10,r4,r22
 10038f0:	0013883a 	mov	r9,zero
 10038f4:	00bfffc4 	movi	r2,-1
 10038f8:	4889883a 	add	r4,r9,r2
 10038fc:	508b883a 	add	r5,r10,r2
 1003900:	224d803a 	cmpltu	r6,r4,r9
 1003904:	314b883a 	add	r5,r6,r5
 1003908:	8904703a 	and	r2,r17,r4
 100390c:	9146703a 	and	r3,r18,r5
 1003910:	10c4b03a 	or	r2,r2,r3
 1003914:	10000226 	beq	r2,zero,1003920 <_fpadd_parts+0x378>
 1003918:	01c00044 	movi	r7,1
 100391c:	0011883a 	mov	r8,zero
 1003920:	69e2b03a 	or	r17,r13,r7
 1003924:	7224b03a 	or	r18,r14,r8
 1003928:	003f5906 	br	1003690 <_fpadd_parts+0xe8>
 100392c:	8407883a 	add	r3,r16,r16
 1003930:	008007c4 	movi	r2,31
 1003934:	1185c83a 	sub	r2,r2,r6
 1003938:	1886983a 	sll	r3,r3,r2
 100393c:	7996d83a 	srl	r11,r15,r6
 1003940:	8198d83a 	srl	r12,r16,r6
 1003944:	1ad6b03a 	or	r11,r3,r11
 1003948:	003f3e06 	br	1003644 <_fpadd_parts+0x9c>
 100394c:	2006d07a 	srli	r3,r4,1
 1003950:	008007c4 	movi	r2,31
 1003954:	1185c83a 	sub	r2,r2,r6
 1003958:	1890d83a 	srl	r8,r3,r2
 100395c:	218e983a 	sll	r7,r4,r6
 1003960:	003f3e06 	br	100365c <_fpadd_parts+0xb4>
 1003964:	113f821e 	bne	r2,r4,1003770 <_fpadd_parts+0x1c8>
 1003968:	28c00117 	ldw	r3,4(r5)
 100396c:	98800117 	ldw	r2,4(r19)
 1003970:	10ff7f26 	beq	r2,r3,1003770 <_fpadd_parts+0x1c8>
 1003974:	04c04074 	movhi	r19,257
 1003978:	9cc79f04 	addi	r19,r19,7804
 100397c:	003f7c06 	br	1003770 <_fpadd_parts+0x1c8>
 1003980:	2006d07a 	srli	r3,r4,1
 1003984:	008007c4 	movi	r2,31
 1003988:	1185c83a 	sub	r2,r2,r6
 100398c:	1894d83a 	srl	r10,r3,r2
 1003990:	2192983a 	sll	r9,r4,r6
 1003994:	003fd706 	br	10038f4 <_fpadd_parts+0x34c>
 1003998:	9487883a 	add	r3,r18,r18
 100399c:	008007c4 	movi	r2,31
 10039a0:	1185c83a 	sub	r2,r2,r6
 10039a4:	1886983a 	sll	r3,r3,r2
 10039a8:	899ad83a 	srl	r13,r17,r6
 10039ac:	919cd83a 	srl	r14,r18,r6
 10039b0:	1b5ab03a 	or	r13,r3,r13
 10039b4:	003fc906 	br	10038dc <_fpadd_parts+0x334>

010039b8 <__subdf3>:
 10039b8:	deffea04 	addi	sp,sp,-88
 10039bc:	dcc01415 	stw	r19,80(sp)
 10039c0:	dcc00404 	addi	r19,sp,16
 10039c4:	2011883a 	mov	r8,r4
 10039c8:	2813883a 	mov	r9,r5
 10039cc:	dc401315 	stw	r17,76(sp)
 10039d0:	d809883a 	mov	r4,sp
 10039d4:	980b883a 	mov	r5,r19
 10039d8:	dc400904 	addi	r17,sp,36
 10039dc:	dfc01515 	stw	ra,84(sp)
 10039e0:	da400115 	stw	r9,4(sp)
 10039e4:	d9c00315 	stw	r7,12(sp)
 10039e8:	da000015 	stw	r8,0(sp)
 10039ec:	d9800215 	stw	r6,8(sp)
 10039f0:	1004b1c0 	call	1004b1c <__unpack_d>
 10039f4:	d9000204 	addi	r4,sp,8
 10039f8:	880b883a 	mov	r5,r17
 10039fc:	1004b1c0 	call	1004b1c <__unpack_d>
 1003a00:	d8800a17 	ldw	r2,40(sp)
 1003a04:	880b883a 	mov	r5,r17
 1003a08:	9809883a 	mov	r4,r19
 1003a0c:	d9800e04 	addi	r6,sp,56
 1003a10:	1080005c 	xori	r2,r2,1
 1003a14:	d8800a15 	stw	r2,40(sp)
 1003a18:	10035a80 	call	10035a8 <_fpadd_parts>
 1003a1c:	1009883a 	mov	r4,r2
 1003a20:	10048080 	call	1004808 <__pack_d>
 1003a24:	dfc01517 	ldw	ra,84(sp)
 1003a28:	dcc01417 	ldw	r19,80(sp)
 1003a2c:	dc401317 	ldw	r17,76(sp)
 1003a30:	dec01604 	addi	sp,sp,88
 1003a34:	f800283a 	ret

01003a38 <__adddf3>:
 1003a38:	deffea04 	addi	sp,sp,-88
 1003a3c:	dcc01415 	stw	r19,80(sp)
 1003a40:	dcc00404 	addi	r19,sp,16
 1003a44:	2011883a 	mov	r8,r4
 1003a48:	2813883a 	mov	r9,r5
 1003a4c:	dc401315 	stw	r17,76(sp)
 1003a50:	d809883a 	mov	r4,sp
 1003a54:	980b883a 	mov	r5,r19
 1003a58:	dc400904 	addi	r17,sp,36
 1003a5c:	dfc01515 	stw	ra,84(sp)
 1003a60:	da400115 	stw	r9,4(sp)
 1003a64:	d9c00315 	stw	r7,12(sp)
 1003a68:	da000015 	stw	r8,0(sp)
 1003a6c:	d9800215 	stw	r6,8(sp)
 1003a70:	1004b1c0 	call	1004b1c <__unpack_d>
 1003a74:	d9000204 	addi	r4,sp,8
 1003a78:	880b883a 	mov	r5,r17
 1003a7c:	1004b1c0 	call	1004b1c <__unpack_d>
 1003a80:	d9800e04 	addi	r6,sp,56
 1003a84:	9809883a 	mov	r4,r19
 1003a88:	880b883a 	mov	r5,r17
 1003a8c:	10035a80 	call	10035a8 <_fpadd_parts>
 1003a90:	1009883a 	mov	r4,r2
 1003a94:	10048080 	call	1004808 <__pack_d>
 1003a98:	dfc01517 	ldw	ra,84(sp)
 1003a9c:	dcc01417 	ldw	r19,80(sp)
 1003aa0:	dc401317 	ldw	r17,76(sp)
 1003aa4:	dec01604 	addi	sp,sp,88
 1003aa8:	f800283a 	ret

01003aac <__muldf3>:
 1003aac:	deffe004 	addi	sp,sp,-128
 1003ab0:	dc401815 	stw	r17,96(sp)
 1003ab4:	dc400404 	addi	r17,sp,16
 1003ab8:	2011883a 	mov	r8,r4
 1003abc:	2813883a 	mov	r9,r5
 1003ac0:	dc001715 	stw	r16,92(sp)
 1003ac4:	d809883a 	mov	r4,sp
 1003ac8:	880b883a 	mov	r5,r17
 1003acc:	dc000904 	addi	r16,sp,36
 1003ad0:	dfc01f15 	stw	ra,124(sp)
 1003ad4:	da400115 	stw	r9,4(sp)
 1003ad8:	d9c00315 	stw	r7,12(sp)
 1003adc:	da000015 	stw	r8,0(sp)
 1003ae0:	d9800215 	stw	r6,8(sp)
 1003ae4:	ddc01e15 	stw	r23,120(sp)
 1003ae8:	dd801d15 	stw	r22,116(sp)
 1003aec:	dd401c15 	stw	r21,112(sp)
 1003af0:	dd001b15 	stw	r20,108(sp)
 1003af4:	dcc01a15 	stw	r19,104(sp)
 1003af8:	dc801915 	stw	r18,100(sp)
 1003afc:	1004b1c0 	call	1004b1c <__unpack_d>
 1003b00:	d9000204 	addi	r4,sp,8
 1003b04:	800b883a 	mov	r5,r16
 1003b08:	1004b1c0 	call	1004b1c <__unpack_d>
 1003b0c:	d9000417 	ldw	r4,16(sp)
 1003b10:	00800044 	movi	r2,1
 1003b14:	1100102e 	bgeu	r2,r4,1003b58 <__muldf3+0xac>
 1003b18:	d8c00917 	ldw	r3,36(sp)
 1003b1c:	10c0062e 	bgeu	r2,r3,1003b38 <__muldf3+0x8c>
 1003b20:	00800104 	movi	r2,4
 1003b24:	20800a26 	beq	r4,r2,1003b50 <__muldf3+0xa4>
 1003b28:	1880cc26 	beq	r3,r2,1003e5c <__muldf3+0x3b0>
 1003b2c:	00800084 	movi	r2,2
 1003b30:	20800926 	beq	r4,r2,1003b58 <__muldf3+0xac>
 1003b34:	1880191e 	bne	r3,r2,1003b9c <__muldf3+0xf0>
 1003b38:	d8c00a17 	ldw	r3,40(sp)
 1003b3c:	d8800517 	ldw	r2,20(sp)
 1003b40:	8009883a 	mov	r4,r16
 1003b44:	10c4c03a 	cmpne	r2,r2,r3
 1003b48:	d8800a15 	stw	r2,40(sp)
 1003b4c:	00000706 	br	1003b6c <__muldf3+0xc0>
 1003b50:	00800084 	movi	r2,2
 1003b54:	1880c326 	beq	r3,r2,1003e64 <__muldf3+0x3b8>
 1003b58:	d8800517 	ldw	r2,20(sp)
 1003b5c:	d8c00a17 	ldw	r3,40(sp)
 1003b60:	8809883a 	mov	r4,r17
 1003b64:	10c4c03a 	cmpne	r2,r2,r3
 1003b68:	d8800515 	stw	r2,20(sp)
 1003b6c:	10048080 	call	1004808 <__pack_d>
 1003b70:	dfc01f17 	ldw	ra,124(sp)
 1003b74:	ddc01e17 	ldw	r23,120(sp)
 1003b78:	dd801d17 	ldw	r22,116(sp)
 1003b7c:	dd401c17 	ldw	r21,112(sp)
 1003b80:	dd001b17 	ldw	r20,108(sp)
 1003b84:	dcc01a17 	ldw	r19,104(sp)
 1003b88:	dc801917 	ldw	r18,100(sp)
 1003b8c:	dc401817 	ldw	r17,96(sp)
 1003b90:	dc001717 	ldw	r16,92(sp)
 1003b94:	dec02004 	addi	sp,sp,128
 1003b98:	f800283a 	ret
 1003b9c:	dd800717 	ldw	r22,28(sp)
 1003ba0:	dc800c17 	ldw	r18,48(sp)
 1003ba4:	002b883a 	mov	r21,zero
 1003ba8:	0023883a 	mov	r17,zero
 1003bac:	a80b883a 	mov	r5,r21
 1003bb0:	b00d883a 	mov	r6,r22
 1003bb4:	880f883a 	mov	r7,r17
 1003bb8:	ddc00817 	ldw	r23,32(sp)
 1003bbc:	dcc00d17 	ldw	r19,52(sp)
 1003bc0:	9009883a 	mov	r4,r18
 1003bc4:	10043940 	call	1004394 <__muldi3>
 1003bc8:	001b883a 	mov	r13,zero
 1003bcc:	680f883a 	mov	r7,r13
 1003bd0:	b009883a 	mov	r4,r22
 1003bd4:	000b883a 	mov	r5,zero
 1003bd8:	980d883a 	mov	r6,r19
 1003bdc:	b82d883a 	mov	r22,r23
 1003be0:	002f883a 	mov	r23,zero
 1003be4:	db401615 	stw	r13,88(sp)
 1003be8:	d8801315 	stw	r2,76(sp)
 1003bec:	d8c01415 	stw	r3,80(sp)
 1003bf0:	dcc01515 	stw	r19,84(sp)
 1003bf4:	10043940 	call	1004394 <__muldi3>
 1003bf8:	b00d883a 	mov	r6,r22
 1003bfc:	000b883a 	mov	r5,zero
 1003c00:	9009883a 	mov	r4,r18
 1003c04:	b80f883a 	mov	r7,r23
 1003c08:	1021883a 	mov	r16,r2
 1003c0c:	1823883a 	mov	r17,r3
 1003c10:	10043940 	call	1004394 <__muldi3>
 1003c14:	8085883a 	add	r2,r16,r2
 1003c18:	140d803a 	cmpltu	r6,r2,r16
 1003c1c:	88c7883a 	add	r3,r17,r3
 1003c20:	30cd883a 	add	r6,r6,r3
 1003c24:	1029883a 	mov	r20,r2
 1003c28:	302b883a 	mov	r21,r6
 1003c2c:	da801317 	ldw	r10,76(sp)
 1003c30:	dac01417 	ldw	r11,80(sp)
 1003c34:	db001517 	ldw	r12,84(sp)
 1003c38:	db401617 	ldw	r13,88(sp)
 1003c3c:	3440612e 	bgeu	r6,r17,1003dc4 <__muldf3+0x318>
 1003c40:	0009883a 	mov	r4,zero
 1003c44:	5105883a 	add	r2,r10,r4
 1003c48:	128d803a 	cmpltu	r6,r2,r10
 1003c4c:	5d07883a 	add	r3,r11,r20
 1003c50:	30cd883a 	add	r6,r6,r3
 1003c54:	0021883a 	mov	r16,zero
 1003c58:	04400044 	movi	r17,1
 1003c5c:	1025883a 	mov	r18,r2
 1003c60:	3027883a 	mov	r19,r6
 1003c64:	32c06236 	bltu	r6,r11,1003df0 <__muldf3+0x344>
 1003c68:	59807a26 	beq	r11,r6,1003e54 <__muldf3+0x3a8>
 1003c6c:	680b883a 	mov	r5,r13
 1003c70:	b80f883a 	mov	r7,r23
 1003c74:	6009883a 	mov	r4,r12
 1003c78:	b00d883a 	mov	r6,r22
 1003c7c:	10043940 	call	1004394 <__muldi3>
 1003c80:	1009883a 	mov	r4,r2
 1003c84:	000f883a 	mov	r7,zero
 1003c88:	1545883a 	add	r2,r2,r21
 1003c8c:	1111803a 	cmpltu	r8,r2,r4
 1003c90:	19c7883a 	add	r3,r3,r7
 1003c94:	40c7883a 	add	r3,r8,r3
 1003c98:	88cb883a 	add	r5,r17,r3
 1003c9c:	d8c00617 	ldw	r3,24(sp)
 1003ca0:	8089883a 	add	r4,r16,r2
 1003ca4:	d8800b17 	ldw	r2,44(sp)
 1003ca8:	18c00104 	addi	r3,r3,4
 1003cac:	240d803a 	cmpltu	r6,r4,r16
 1003cb0:	10c7883a 	add	r3,r2,r3
 1003cb4:	2013883a 	mov	r9,r4
 1003cb8:	d8800a17 	ldw	r2,40(sp)
 1003cbc:	d9000517 	ldw	r4,20(sp)
 1003cc0:	314d883a 	add	r6,r6,r5
 1003cc4:	3015883a 	mov	r10,r6
 1003cc8:	2088c03a 	cmpne	r4,r4,r2
 1003ccc:	00880034 	movhi	r2,8192
 1003cd0:	10bfffc4 	addi	r2,r2,-1
 1003cd4:	d9000f15 	stw	r4,60(sp)
 1003cd8:	d8c01015 	stw	r3,64(sp)
 1003cdc:	1180162e 	bgeu	r2,r6,1003d38 <__muldf3+0x28c>
 1003ce0:	1811883a 	mov	r8,r3
 1003ce4:	101f883a 	mov	r15,r2
 1003ce8:	980497fa 	slli	r2,r19,31
 1003cec:	9016d07a 	srli	r11,r18,1
 1003cf0:	500697fa 	slli	r3,r10,31
 1003cf4:	480cd07a 	srli	r6,r9,1
 1003cf8:	500ed07a 	srli	r7,r10,1
 1003cfc:	12d6b03a 	or	r11,r2,r11
 1003d00:	00800044 	movi	r2,1
 1003d04:	198cb03a 	or	r6,r3,r6
 1003d08:	4888703a 	and	r4,r9,r2
 1003d0c:	9818d07a 	srli	r12,r19,1
 1003d10:	001b883a 	mov	r13,zero
 1003d14:	03a00034 	movhi	r14,32768
 1003d18:	3013883a 	mov	r9,r6
 1003d1c:	3815883a 	mov	r10,r7
 1003d20:	4091883a 	add	r8,r8,r2
 1003d24:	20000226 	beq	r4,zero,1003d30 <__muldf3+0x284>
 1003d28:	5b64b03a 	or	r18,r11,r13
 1003d2c:	63a6b03a 	or	r19,r12,r14
 1003d30:	7abfed36 	bltu	r15,r10,1003ce8 <__muldf3+0x23c>
 1003d34:	da001015 	stw	r8,64(sp)
 1003d38:	00840034 	movhi	r2,4096
 1003d3c:	10bfffc4 	addi	r2,r2,-1
 1003d40:	12801436 	bltu	r2,r10,1003d94 <__muldf3+0x2e8>
 1003d44:	da001017 	ldw	r8,64(sp)
 1003d48:	101f883a 	mov	r15,r2
 1003d4c:	4a45883a 	add	r2,r9,r9
 1003d50:	124d803a 	cmpltu	r6,r2,r9
 1003d54:	5287883a 	add	r3,r10,r10
 1003d58:	9497883a 	add	r11,r18,r18
 1003d5c:	5c8f803a 	cmpltu	r7,r11,r18
 1003d60:	9cd9883a 	add	r12,r19,r19
 1003d64:	01000044 	movi	r4,1
 1003d68:	30cd883a 	add	r6,r6,r3
 1003d6c:	3b0f883a 	add	r7,r7,r12
 1003d70:	423fffc4 	addi	r8,r8,-1
 1003d74:	1013883a 	mov	r9,r2
 1003d78:	3015883a 	mov	r10,r6
 1003d7c:	111ab03a 	or	r13,r2,r4
 1003d80:	98003016 	blt	r19,zero,1003e44 <__muldf3+0x398>
 1003d84:	5825883a 	mov	r18,r11
 1003d88:	3827883a 	mov	r19,r7
 1003d8c:	7abfef2e 	bgeu	r15,r10,1003d4c <__muldf3+0x2a0>
 1003d90:	da001015 	stw	r8,64(sp)
 1003d94:	00803fc4 	movi	r2,255
 1003d98:	488e703a 	and	r7,r9,r2
 1003d9c:	00802004 	movi	r2,128
 1003da0:	0007883a 	mov	r3,zero
 1003da4:	0011883a 	mov	r8,zero
 1003da8:	38801826 	beq	r7,r2,1003e0c <__muldf3+0x360>
 1003dac:	008000c4 	movi	r2,3
 1003db0:	d9000e04 	addi	r4,sp,56
 1003db4:	da801215 	stw	r10,72(sp)
 1003db8:	d8800e15 	stw	r2,56(sp)
 1003dbc:	da401115 	stw	r9,68(sp)
 1003dc0:	003f6a06 	br	1003b6c <__muldf3+0xc0>
 1003dc4:	89802126 	beq	r17,r6,1003e4c <__muldf3+0x3a0>
 1003dc8:	0009883a 	mov	r4,zero
 1003dcc:	5105883a 	add	r2,r10,r4
 1003dd0:	128d803a 	cmpltu	r6,r2,r10
 1003dd4:	5d07883a 	add	r3,r11,r20
 1003dd8:	30cd883a 	add	r6,r6,r3
 1003ddc:	0021883a 	mov	r16,zero
 1003de0:	0023883a 	mov	r17,zero
 1003de4:	1025883a 	mov	r18,r2
 1003de8:	3027883a 	mov	r19,r6
 1003dec:	32ff9e2e 	bgeu	r6,r11,1003c68 <__muldf3+0x1bc>
 1003df0:	00800044 	movi	r2,1
 1003df4:	8089883a 	add	r4,r16,r2
 1003df8:	240d803a 	cmpltu	r6,r4,r16
 1003dfc:	344d883a 	add	r6,r6,r17
 1003e00:	2021883a 	mov	r16,r4
 1003e04:	3023883a 	mov	r17,r6
 1003e08:	003f9806 	br	1003c6c <__muldf3+0x1c0>
 1003e0c:	403fe71e 	bne	r8,zero,1003dac <__muldf3+0x300>
 1003e10:	01004004 	movi	r4,256
 1003e14:	4904703a 	and	r2,r9,r4
 1003e18:	10c4b03a 	or	r2,r2,r3
 1003e1c:	103fe31e 	bne	r2,zero,1003dac <__muldf3+0x300>
 1003e20:	94c4b03a 	or	r2,r18,r19
 1003e24:	103fe126 	beq	r2,zero,1003dac <__muldf3+0x300>
 1003e28:	49c5883a 	add	r2,r9,r7
 1003e2c:	1251803a 	cmpltu	r8,r2,r9
 1003e30:	4291883a 	add	r8,r8,r10
 1003e34:	013fc004 	movi	r4,-256
 1003e38:	1112703a 	and	r9,r2,r4
 1003e3c:	4015883a 	mov	r10,r8
 1003e40:	003fda06 	br	1003dac <__muldf3+0x300>
 1003e44:	6813883a 	mov	r9,r13
 1003e48:	003fce06 	br	1003d84 <__muldf3+0x2d8>
 1003e4c:	143f7c36 	bltu	r2,r16,1003c40 <__muldf3+0x194>
 1003e50:	003fdd06 	br	1003dc8 <__muldf3+0x31c>
 1003e54:	12bf852e 	bgeu	r2,r10,1003c6c <__muldf3+0x1c0>
 1003e58:	003fe506 	br	1003df0 <__muldf3+0x344>
 1003e5c:	00800084 	movi	r2,2
 1003e60:	20bf351e 	bne	r4,r2,1003b38 <__muldf3+0x8c>
 1003e64:	01004074 	movhi	r4,257
 1003e68:	21079f04 	addi	r4,r4,7804
 1003e6c:	003f3f06 	br	1003b6c <__muldf3+0xc0>

01003e70 <__eqdf2>:
 1003e70:	deffef04 	addi	sp,sp,-68
 1003e74:	dc400f15 	stw	r17,60(sp)
 1003e78:	dc400404 	addi	r17,sp,16
 1003e7c:	2005883a 	mov	r2,r4
 1003e80:	2807883a 	mov	r3,r5
 1003e84:	dc000e15 	stw	r16,56(sp)
 1003e88:	d809883a 	mov	r4,sp
 1003e8c:	880b883a 	mov	r5,r17
 1003e90:	dc000904 	addi	r16,sp,36
 1003e94:	d8c00115 	stw	r3,4(sp)
 1003e98:	d8800015 	stw	r2,0(sp)
 1003e9c:	d9800215 	stw	r6,8(sp)
 1003ea0:	dfc01015 	stw	ra,64(sp)
 1003ea4:	d9c00315 	stw	r7,12(sp)
 1003ea8:	1004b1c0 	call	1004b1c <__unpack_d>
 1003eac:	d9000204 	addi	r4,sp,8
 1003eb0:	800b883a 	mov	r5,r16
 1003eb4:	1004b1c0 	call	1004b1c <__unpack_d>
 1003eb8:	d8800417 	ldw	r2,16(sp)
 1003ebc:	00c00044 	movi	r3,1
 1003ec0:	180d883a 	mov	r6,r3
 1003ec4:	1880062e 	bgeu	r3,r2,1003ee0 <__eqdf2+0x70>
 1003ec8:	d8800917 	ldw	r2,36(sp)
 1003ecc:	8809883a 	mov	r4,r17
 1003ed0:	800b883a 	mov	r5,r16
 1003ed4:	1880022e 	bgeu	r3,r2,1003ee0 <__eqdf2+0x70>
 1003ed8:	1004c540 	call	1004c54 <__fpcmp_parts_d>
 1003edc:	100d883a 	mov	r6,r2
 1003ee0:	3005883a 	mov	r2,r6
 1003ee4:	dfc01017 	ldw	ra,64(sp)
 1003ee8:	dc400f17 	ldw	r17,60(sp)
 1003eec:	dc000e17 	ldw	r16,56(sp)
 1003ef0:	dec01104 	addi	sp,sp,68
 1003ef4:	f800283a 	ret

01003ef8 <__gtdf2>:
 1003ef8:	deffef04 	addi	sp,sp,-68
 1003efc:	dc400f15 	stw	r17,60(sp)
 1003f00:	dc400404 	addi	r17,sp,16
 1003f04:	2005883a 	mov	r2,r4
 1003f08:	2807883a 	mov	r3,r5
 1003f0c:	dc000e15 	stw	r16,56(sp)
 1003f10:	d809883a 	mov	r4,sp
 1003f14:	880b883a 	mov	r5,r17
 1003f18:	dc000904 	addi	r16,sp,36
 1003f1c:	d8c00115 	stw	r3,4(sp)
 1003f20:	d8800015 	stw	r2,0(sp)
 1003f24:	d9800215 	stw	r6,8(sp)
 1003f28:	dfc01015 	stw	ra,64(sp)
 1003f2c:	d9c00315 	stw	r7,12(sp)
 1003f30:	1004b1c0 	call	1004b1c <__unpack_d>
 1003f34:	d9000204 	addi	r4,sp,8
 1003f38:	800b883a 	mov	r5,r16
 1003f3c:	1004b1c0 	call	1004b1c <__unpack_d>
 1003f40:	d8800417 	ldw	r2,16(sp)
 1003f44:	00c00044 	movi	r3,1
 1003f48:	01bfffc4 	movi	r6,-1
 1003f4c:	1880062e 	bgeu	r3,r2,1003f68 <__gtdf2+0x70>
 1003f50:	d8800917 	ldw	r2,36(sp)
 1003f54:	8809883a 	mov	r4,r17
 1003f58:	800b883a 	mov	r5,r16
 1003f5c:	1880022e 	bgeu	r3,r2,1003f68 <__gtdf2+0x70>
 1003f60:	1004c540 	call	1004c54 <__fpcmp_parts_d>
 1003f64:	100d883a 	mov	r6,r2
 1003f68:	3005883a 	mov	r2,r6
 1003f6c:	dfc01017 	ldw	ra,64(sp)
 1003f70:	dc400f17 	ldw	r17,60(sp)
 1003f74:	dc000e17 	ldw	r16,56(sp)
 1003f78:	dec01104 	addi	sp,sp,68
 1003f7c:	f800283a 	ret

01003f80 <__gedf2>:
 1003f80:	deffef04 	addi	sp,sp,-68
 1003f84:	dc400f15 	stw	r17,60(sp)
 1003f88:	dc400404 	addi	r17,sp,16
 1003f8c:	2005883a 	mov	r2,r4
 1003f90:	2807883a 	mov	r3,r5
 1003f94:	dc000e15 	stw	r16,56(sp)
 1003f98:	d809883a 	mov	r4,sp
 1003f9c:	880b883a 	mov	r5,r17
 1003fa0:	dc000904 	addi	r16,sp,36
 1003fa4:	d8c00115 	stw	r3,4(sp)
 1003fa8:	d8800015 	stw	r2,0(sp)
 1003fac:	d9800215 	stw	r6,8(sp)
 1003fb0:	dfc01015 	stw	ra,64(sp)
 1003fb4:	d9c00315 	stw	r7,12(sp)
 1003fb8:	1004b1c0 	call	1004b1c <__unpack_d>
 1003fbc:	d9000204 	addi	r4,sp,8
 1003fc0:	800b883a 	mov	r5,r16
 1003fc4:	1004b1c0 	call	1004b1c <__unpack_d>
 1003fc8:	d8800417 	ldw	r2,16(sp)
 1003fcc:	00c00044 	movi	r3,1
 1003fd0:	01bfffc4 	movi	r6,-1
 1003fd4:	1880062e 	bgeu	r3,r2,1003ff0 <__gedf2+0x70>
 1003fd8:	d8800917 	ldw	r2,36(sp)
 1003fdc:	8809883a 	mov	r4,r17
 1003fe0:	800b883a 	mov	r5,r16
 1003fe4:	1880022e 	bgeu	r3,r2,1003ff0 <__gedf2+0x70>
 1003fe8:	1004c540 	call	1004c54 <__fpcmp_parts_d>
 1003fec:	100d883a 	mov	r6,r2
 1003ff0:	3005883a 	mov	r2,r6
 1003ff4:	dfc01017 	ldw	ra,64(sp)
 1003ff8:	dc400f17 	ldw	r17,60(sp)
 1003ffc:	dc000e17 	ldw	r16,56(sp)
 1004000:	dec01104 	addi	sp,sp,68
 1004004:	f800283a 	ret

01004008 <__floatsidf>:
 1004008:	2006d7fa 	srli	r3,r4,31
 100400c:	defff604 	addi	sp,sp,-40
 1004010:	008000c4 	movi	r2,3
 1004014:	dfc00915 	stw	ra,36(sp)
 1004018:	dcc00815 	stw	r19,32(sp)
 100401c:	dc800715 	stw	r18,28(sp)
 1004020:	dc400615 	stw	r17,24(sp)
 1004024:	dc000515 	stw	r16,20(sp)
 1004028:	d8800015 	stw	r2,0(sp)
 100402c:	d8c00115 	stw	r3,4(sp)
 1004030:	20000f1e 	bne	r4,zero,1004070 <__floatsidf+0x68>
 1004034:	00800084 	movi	r2,2
 1004038:	d8800015 	stw	r2,0(sp)
 100403c:	d809883a 	mov	r4,sp
 1004040:	10048080 	call	1004808 <__pack_d>
 1004044:	1009883a 	mov	r4,r2
 1004048:	180b883a 	mov	r5,r3
 100404c:	2005883a 	mov	r2,r4
 1004050:	2807883a 	mov	r3,r5
 1004054:	dfc00917 	ldw	ra,36(sp)
 1004058:	dcc00817 	ldw	r19,32(sp)
 100405c:	dc800717 	ldw	r18,28(sp)
 1004060:	dc400617 	ldw	r17,24(sp)
 1004064:	dc000517 	ldw	r16,20(sp)
 1004068:	dec00a04 	addi	sp,sp,40
 100406c:	f800283a 	ret
 1004070:	00800f04 	movi	r2,60
 1004074:	1807003a 	cmpeq	r3,r3,zero
 1004078:	d8800215 	stw	r2,8(sp)
 100407c:	18001126 	beq	r3,zero,10040c4 <__floatsidf+0xbc>
 1004080:	0027883a 	mov	r19,zero
 1004084:	2025883a 	mov	r18,r4
 1004088:	d9000315 	stw	r4,12(sp)
 100408c:	dcc00415 	stw	r19,16(sp)
 1004090:	10044b80 	call	10044b8 <__clzsi2>
 1004094:	11000744 	addi	r4,r2,29
 1004098:	013fe80e 	bge	zero,r4,100403c <__floatsidf+0x34>
 100409c:	10bfff44 	addi	r2,r2,-3
 10040a0:	10000c16 	blt	r2,zero,10040d4 <__floatsidf+0xcc>
 10040a4:	90a2983a 	sll	r17,r18,r2
 10040a8:	0021883a 	mov	r16,zero
 10040ac:	d8800217 	ldw	r2,8(sp)
 10040b0:	dc400415 	stw	r17,16(sp)
 10040b4:	dc000315 	stw	r16,12(sp)
 10040b8:	1105c83a 	sub	r2,r2,r4
 10040bc:	d8800215 	stw	r2,8(sp)
 10040c0:	003fde06 	br	100403c <__floatsidf+0x34>
 10040c4:	00a00034 	movhi	r2,32768
 10040c8:	20800a26 	beq	r4,r2,10040f4 <__floatsidf+0xec>
 10040cc:	0109c83a 	sub	r4,zero,r4
 10040d0:	003feb06 	br	1004080 <__floatsidf+0x78>
 10040d4:	9006d07a 	srli	r3,r18,1
 10040d8:	008007c4 	movi	r2,31
 10040dc:	1105c83a 	sub	r2,r2,r4
 10040e0:	1886d83a 	srl	r3,r3,r2
 10040e4:	9922983a 	sll	r17,r19,r4
 10040e8:	9120983a 	sll	r16,r18,r4
 10040ec:	1c62b03a 	or	r17,r3,r17
 10040f0:	003fee06 	br	10040ac <__floatsidf+0xa4>
 10040f4:	0009883a 	mov	r4,zero
 10040f8:	01707834 	movhi	r5,49632
 10040fc:	003fd306 	br	100404c <__floatsidf+0x44>

01004100 <__fixdfsi>:
 1004100:	defff804 	addi	sp,sp,-32
 1004104:	2005883a 	mov	r2,r4
 1004108:	2807883a 	mov	r3,r5
 100410c:	d809883a 	mov	r4,sp
 1004110:	d9400204 	addi	r5,sp,8
 1004114:	d8c00115 	stw	r3,4(sp)
 1004118:	d8800015 	stw	r2,0(sp)
 100411c:	dfc00715 	stw	ra,28(sp)
 1004120:	1004b1c0 	call	1004b1c <__unpack_d>
 1004124:	d8c00217 	ldw	r3,8(sp)
 1004128:	00800084 	movi	r2,2
 100412c:	1880051e 	bne	r3,r2,1004144 <__fixdfsi+0x44>
 1004130:	0007883a 	mov	r3,zero
 1004134:	1805883a 	mov	r2,r3
 1004138:	dfc00717 	ldw	ra,28(sp)
 100413c:	dec00804 	addi	sp,sp,32
 1004140:	f800283a 	ret
 1004144:	00800044 	movi	r2,1
 1004148:	10fff92e 	bgeu	r2,r3,1004130 <__fixdfsi+0x30>
 100414c:	00800104 	movi	r2,4
 1004150:	18800426 	beq	r3,r2,1004164 <__fixdfsi+0x64>
 1004154:	d8c00417 	ldw	r3,16(sp)
 1004158:	183ff516 	blt	r3,zero,1004130 <__fixdfsi+0x30>
 100415c:	00800784 	movi	r2,30
 1004160:	10c0080e 	bge	r2,r3,1004184 <__fixdfsi+0x84>
 1004164:	d8800317 	ldw	r2,12(sp)
 1004168:	1000121e 	bne	r2,zero,10041b4 <__fixdfsi+0xb4>
 100416c:	00e00034 	movhi	r3,32768
 1004170:	18ffffc4 	addi	r3,r3,-1
 1004174:	1805883a 	mov	r2,r3
 1004178:	dfc00717 	ldw	ra,28(sp)
 100417c:	dec00804 	addi	sp,sp,32
 1004180:	f800283a 	ret
 1004184:	00800f04 	movi	r2,60
 1004188:	10d1c83a 	sub	r8,r2,r3
 100418c:	40bff804 	addi	r2,r8,-32
 1004190:	d9800517 	ldw	r6,20(sp)
 1004194:	d9c00617 	ldw	r7,24(sp)
 1004198:	10000816 	blt	r2,zero,10041bc <__fixdfsi+0xbc>
 100419c:	3888d83a 	srl	r4,r7,r2
 10041a0:	d8800317 	ldw	r2,12(sp)
 10041a4:	2007883a 	mov	r3,r4
 10041a8:	103fe226 	beq	r2,zero,1004134 <__fixdfsi+0x34>
 10041ac:	0107c83a 	sub	r3,zero,r4
 10041b0:	003fe006 	br	1004134 <__fixdfsi+0x34>
 10041b4:	00e00034 	movhi	r3,32768
 10041b8:	003fde06 	br	1004134 <__fixdfsi+0x34>
 10041bc:	39c7883a 	add	r3,r7,r7
 10041c0:	008007c4 	movi	r2,31
 10041c4:	1205c83a 	sub	r2,r2,r8
 10041c8:	1886983a 	sll	r3,r3,r2
 10041cc:	3208d83a 	srl	r4,r6,r8
 10041d0:	1908b03a 	or	r4,r3,r4
 10041d4:	003ff206 	br	10041a0 <__fixdfsi+0xa0>

010041d8 <__make_dp>:
 10041d8:	defff904 	addi	sp,sp,-28
 10041dc:	d8c00717 	ldw	r3,28(sp)
 10041e0:	d9000015 	stw	r4,0(sp)
 10041e4:	d809883a 	mov	r4,sp
 10041e8:	dfc00515 	stw	ra,20(sp)
 10041ec:	d9c00615 	stw	r7,24(sp)
 10041f0:	d9400115 	stw	r5,4(sp)
 10041f4:	d9800215 	stw	r6,8(sp)
 10041f8:	d8c00415 	stw	r3,16(sp)
 10041fc:	d9c00315 	stw	r7,12(sp)
 1004200:	10048080 	call	1004808 <__pack_d>
 1004204:	dfc00517 	ldw	ra,20(sp)
 1004208:	dec00704 	addi	sp,sp,28
 100420c:	f800283a 	ret

01004210 <udivmodsi4>:
 1004210:	29001b2e 	bgeu	r5,r4,1004280 <udivmodsi4+0x70>
 1004214:	28001a16 	blt	r5,zero,1004280 <udivmodsi4+0x70>
 1004218:	00800044 	movi	r2,1
 100421c:	0007883a 	mov	r3,zero
 1004220:	01c007c4 	movi	r7,31
 1004224:	00000306 	br	1004234 <udivmodsi4+0x24>
 1004228:	19c01326 	beq	r3,r7,1004278 <udivmodsi4+0x68>
 100422c:	18c00044 	addi	r3,r3,1
 1004230:	28000416 	blt	r5,zero,1004244 <udivmodsi4+0x34>
 1004234:	294b883a 	add	r5,r5,r5
 1004238:	1085883a 	add	r2,r2,r2
 100423c:	293ffa36 	bltu	r5,r4,1004228 <udivmodsi4+0x18>
 1004240:	10000d26 	beq	r2,zero,1004278 <udivmodsi4+0x68>
 1004244:	0007883a 	mov	r3,zero
 1004248:	21400236 	bltu	r4,r5,1004254 <udivmodsi4+0x44>
 100424c:	2149c83a 	sub	r4,r4,r5
 1004250:	1886b03a 	or	r3,r3,r2
 1004254:	1004d07a 	srli	r2,r2,1
 1004258:	280ad07a 	srli	r5,r5,1
 100425c:	103ffa1e 	bne	r2,zero,1004248 <udivmodsi4+0x38>
 1004260:	30000226 	beq	r6,zero,100426c <udivmodsi4+0x5c>
 1004264:	2005883a 	mov	r2,r4
 1004268:	f800283a 	ret
 100426c:	1809883a 	mov	r4,r3
 1004270:	2005883a 	mov	r2,r4
 1004274:	f800283a 	ret
 1004278:	0007883a 	mov	r3,zero
 100427c:	003ff806 	br	1004260 <udivmodsi4+0x50>
 1004280:	00800044 	movi	r2,1
 1004284:	0007883a 	mov	r3,zero
 1004288:	003fef06 	br	1004248 <udivmodsi4+0x38>

0100428c <__divsi3>:
 100428c:	defffe04 	addi	sp,sp,-8
 1004290:	dc000015 	stw	r16,0(sp)
 1004294:	dfc00115 	stw	ra,4(sp)
 1004298:	0021883a 	mov	r16,zero
 100429c:	20000c16 	blt	r4,zero,10042d0 <__divsi3+0x44>
 10042a0:	000d883a 	mov	r6,zero
 10042a4:	28000e16 	blt	r5,zero,10042e0 <__divsi3+0x54>
 10042a8:	10042100 	call	1004210 <udivmodsi4>
 10042ac:	1007883a 	mov	r3,r2
 10042b0:	8005003a 	cmpeq	r2,r16,zero
 10042b4:	1000011e 	bne	r2,zero,10042bc <__divsi3+0x30>
 10042b8:	00c7c83a 	sub	r3,zero,r3
 10042bc:	1805883a 	mov	r2,r3
 10042c0:	dfc00117 	ldw	ra,4(sp)
 10042c4:	dc000017 	ldw	r16,0(sp)
 10042c8:	dec00204 	addi	sp,sp,8
 10042cc:	f800283a 	ret
 10042d0:	0109c83a 	sub	r4,zero,r4
 10042d4:	04000044 	movi	r16,1
 10042d8:	000d883a 	mov	r6,zero
 10042dc:	283ff20e 	bge	r5,zero,10042a8 <__divsi3+0x1c>
 10042e0:	014bc83a 	sub	r5,zero,r5
 10042e4:	8021003a 	cmpeq	r16,r16,zero
 10042e8:	003fef06 	br	10042a8 <__divsi3+0x1c>

010042ec <__modsi3>:
 10042ec:	deffff04 	addi	sp,sp,-4
 10042f0:	dfc00015 	stw	ra,0(sp)
 10042f4:	01800044 	movi	r6,1
 10042f8:	2807883a 	mov	r3,r5
 10042fc:	20000416 	blt	r4,zero,1004310 <__modsi3+0x24>
 1004300:	28000c16 	blt	r5,zero,1004334 <__modsi3+0x48>
 1004304:	dfc00017 	ldw	ra,0(sp)
 1004308:	dec00104 	addi	sp,sp,4
 100430c:	10042101 	jmpi	1004210 <udivmodsi4>
 1004310:	0109c83a 	sub	r4,zero,r4
 1004314:	28000b16 	blt	r5,zero,1004344 <__modsi3+0x58>
 1004318:	180b883a 	mov	r5,r3
 100431c:	01800044 	movi	r6,1
 1004320:	10042100 	call	1004210 <udivmodsi4>
 1004324:	0085c83a 	sub	r2,zero,r2
 1004328:	dfc00017 	ldw	ra,0(sp)
 100432c:	dec00104 	addi	sp,sp,4
 1004330:	f800283a 	ret
 1004334:	014bc83a 	sub	r5,zero,r5
 1004338:	dfc00017 	ldw	ra,0(sp)
 100433c:	dec00104 	addi	sp,sp,4
 1004340:	10042101 	jmpi	1004210 <udivmodsi4>
 1004344:	0147c83a 	sub	r3,zero,r5
 1004348:	003ff306 	br	1004318 <__modsi3+0x2c>

0100434c <__udivsi3>:
 100434c:	000d883a 	mov	r6,zero
 1004350:	10042101 	jmpi	1004210 <udivmodsi4>

01004354 <__umodsi3>:
 1004354:	01800044 	movi	r6,1
 1004358:	10042101 	jmpi	1004210 <udivmodsi4>

0100435c <__mulsi3>:
 100435c:	20000a26 	beq	r4,zero,1004388 <__mulsi3+0x2c>
 1004360:	0007883a 	mov	r3,zero
 1004364:	2080004c 	andi	r2,r4,1
 1004368:	1005003a 	cmpeq	r2,r2,zero
 100436c:	2008d07a 	srli	r4,r4,1
 1004370:	1000011e 	bne	r2,zero,1004378 <__mulsi3+0x1c>
 1004374:	1947883a 	add	r3,r3,r5
 1004378:	294b883a 	add	r5,r5,r5
 100437c:	203ff91e 	bne	r4,zero,1004364 <__mulsi3+0x8>
 1004380:	1805883a 	mov	r2,r3
 1004384:	f800283a 	ret
 1004388:	0007883a 	mov	r3,zero
 100438c:	1805883a 	mov	r2,r3
 1004390:	f800283a 	ret

01004394 <__muldi3>:
 1004394:	defff204 	addi	sp,sp,-56
 1004398:	df000c15 	stw	fp,48(sp)
 100439c:	3038d43a 	srli	fp,r6,16
 10043a0:	dd000815 	stw	r20,32(sp)
 10043a4:	dc400515 	stw	r17,20(sp)
 10043a8:	2028d43a 	srli	r20,r4,16
 10043ac:	247fffcc 	andi	r17,r4,65535
 10043b0:	dc000415 	stw	r16,16(sp)
 10043b4:	343fffcc 	andi	r16,r6,65535
 10043b8:	dcc00715 	stw	r19,28(sp)
 10043bc:	d9000015 	stw	r4,0(sp)
 10043c0:	2827883a 	mov	r19,r5
 10043c4:	8809883a 	mov	r4,r17
 10043c8:	d9400115 	stw	r5,4(sp)
 10043cc:	800b883a 	mov	r5,r16
 10043d0:	d9800215 	stw	r6,8(sp)
 10043d4:	dfc00d15 	stw	ra,52(sp)
 10043d8:	d9c00315 	stw	r7,12(sp)
 10043dc:	dd800a15 	stw	r22,40(sp)
 10043e0:	dd400915 	stw	r21,36(sp)
 10043e4:	302d883a 	mov	r22,r6
 10043e8:	ddc00b15 	stw	r23,44(sp)
 10043ec:	dc800615 	stw	r18,24(sp)
 10043f0:	100435c0 	call	100435c <__mulsi3>
 10043f4:	8809883a 	mov	r4,r17
 10043f8:	e00b883a 	mov	r5,fp
 10043fc:	102b883a 	mov	r21,r2
 1004400:	100435c0 	call	100435c <__mulsi3>
 1004404:	800b883a 	mov	r5,r16
 1004408:	a009883a 	mov	r4,r20
 100440c:	1023883a 	mov	r17,r2
 1004410:	100435c0 	call	100435c <__mulsi3>
 1004414:	a009883a 	mov	r4,r20
 1004418:	e00b883a 	mov	r5,fp
 100441c:	1021883a 	mov	r16,r2
 1004420:	100435c0 	call	100435c <__mulsi3>
 1004424:	a8ffffcc 	andi	r3,r21,65535
 1004428:	a82ad43a 	srli	r21,r21,16
 100442c:	8c23883a 	add	r17,r17,r16
 1004430:	1011883a 	mov	r8,r2
 1004434:	ac6b883a 	add	r21,r21,r17
 1004438:	a804943a 	slli	r2,r21,16
 100443c:	b009883a 	mov	r4,r22
 1004440:	980b883a 	mov	r5,r19
 1004444:	10c7883a 	add	r3,r2,r3
 1004448:	a812d43a 	srli	r9,r21,16
 100444c:	180d883a 	mov	r6,r3
 1004450:	ac00022e 	bgeu	r21,r16,100445c <__muldi3+0xc8>
 1004454:	00800074 	movhi	r2,1
 1004458:	4091883a 	add	r8,r8,r2
 100445c:	4267883a 	add	r19,r8,r9
 1004460:	302d883a 	mov	r22,r6
 1004464:	100435c0 	call	100435c <__mulsi3>
 1004468:	d9400317 	ldw	r5,12(sp)
 100446c:	d9000017 	ldw	r4,0(sp)
 1004470:	1023883a 	mov	r17,r2
 1004474:	100435c0 	call	100435c <__mulsi3>
 1004478:	14cb883a 	add	r5,r2,r19
 100447c:	894b883a 	add	r5,r17,r5
 1004480:	b005883a 	mov	r2,r22
 1004484:	2807883a 	mov	r3,r5
 1004488:	dfc00d17 	ldw	ra,52(sp)
 100448c:	df000c17 	ldw	fp,48(sp)
 1004490:	ddc00b17 	ldw	r23,44(sp)
 1004494:	dd800a17 	ldw	r22,40(sp)
 1004498:	dd400917 	ldw	r21,36(sp)
 100449c:	dd000817 	ldw	r20,32(sp)
 10044a0:	dcc00717 	ldw	r19,28(sp)
 10044a4:	dc800617 	ldw	r18,24(sp)
 10044a8:	dc400517 	ldw	r17,20(sp)
 10044ac:	dc000417 	ldw	r16,16(sp)
 10044b0:	dec00e04 	addi	sp,sp,56
 10044b4:	f800283a 	ret

010044b8 <__clzsi2>:
 10044b8:	00bfffd4 	movui	r2,65535
 10044bc:	11000e36 	bltu	r2,r4,10044f8 <__clzsi2+0x40>
 10044c0:	00803fc4 	movi	r2,255
 10044c4:	01400204 	movi	r5,8
 10044c8:	0007883a 	mov	r3,zero
 10044cc:	11001036 	bltu	r2,r4,1004510 <__clzsi2+0x58>
 10044d0:	000b883a 	mov	r5,zero
 10044d4:	20c6d83a 	srl	r3,r4,r3
 10044d8:	00804074 	movhi	r2,257
 10044dc:	1087a404 	addi	r2,r2,7824
 10044e0:	1887883a 	add	r3,r3,r2
 10044e4:	18800003 	ldbu	r2,0(r3)
 10044e8:	00c00804 	movi	r3,32
 10044ec:	2885883a 	add	r2,r5,r2
 10044f0:	1885c83a 	sub	r2,r3,r2
 10044f4:	f800283a 	ret
 10044f8:	01400404 	movi	r5,16
 10044fc:	00804034 	movhi	r2,256
 1004500:	10bfffc4 	addi	r2,r2,-1
 1004504:	2807883a 	mov	r3,r5
 1004508:	113ff22e 	bgeu	r2,r4,10044d4 <__clzsi2+0x1c>
 100450c:	01400604 	movi	r5,24
 1004510:	2807883a 	mov	r3,r5
 1004514:	20c6d83a 	srl	r3,r4,r3
 1004518:	00804074 	movhi	r2,257
 100451c:	1087a404 	addi	r2,r2,7824
 1004520:	1887883a 	add	r3,r3,r2
 1004524:	18800003 	ldbu	r2,0(r3)
 1004528:	00c00804 	movi	r3,32
 100452c:	2885883a 	add	r2,r5,r2
 1004530:	1885c83a 	sub	r2,r3,r2
 1004534:	f800283a 	ret

01004538 <__pack_f>:
 1004538:	20c00017 	ldw	r3,0(r4)
 100453c:	01c00044 	movi	r7,1
 1004540:	21800317 	ldw	r6,12(r4)
 1004544:	21400117 	ldw	r5,4(r4)
 1004548:	38c02d2e 	bgeu	r7,r3,1004600 <__pack_f+0xc8>
 100454c:	00800104 	movi	r2,4
 1004550:	18802826 	beq	r3,r2,10045f4 <__pack_f+0xbc>
 1004554:	00800084 	movi	r2,2
 1004558:	18800126 	beq	r3,r2,1004560 <__pack_f+0x28>
 100455c:	3000101e 	bne	r6,zero,10045a0 <__pack_f+0x68>
 1004560:	000d883a 	mov	r6,zero
 1004564:	0007883a 	mov	r3,zero
 1004568:	19003fcc 	andi	r4,r3,255
 100456c:	200895fa 	slli	r4,r4,23
 1004570:	00c02034 	movhi	r3,128
 1004574:	18ffffc4 	addi	r3,r3,-1
 1004578:	30c6703a 	and	r3,r6,r3
 100457c:	10a0002c 	andhi	r2,r2,32768
 1004580:	10c4b03a 	or	r2,r2,r3
 1004584:	280a97fa 	slli	r5,r5,31
 1004588:	1104b03a 	or	r2,r2,r4
 100458c:	00e00034 	movhi	r3,32768
 1004590:	18ffffc4 	addi	r3,r3,-1
 1004594:	10c4703a 	and	r2,r2,r3
 1004598:	1144b03a 	or	r2,r2,r5
 100459c:	f800283a 	ret
 10045a0:	21000217 	ldw	r4,8(r4)
 10045a4:	00bfe084 	movi	r2,-126
 10045a8:	20801b16 	blt	r4,r2,1004618 <__pack_f+0xe0>
 10045ac:	00801fc4 	movi	r2,127
 10045b0:	11001016 	blt	r2,r4,10045f4 <__pack_f+0xbc>
 10045b4:	308e703a 	and	r7,r6,r2
 10045b8:	2087883a 	add	r3,r4,r2
 10045bc:	00801004 	movi	r2,64
 10045c0:	38800526 	beq	r7,r2,10045d8 <__pack_f+0xa0>
 10045c4:	31800fc4 	addi	r6,r6,63
 10045c8:	30000716 	blt	r6,zero,10045e8 <__pack_f+0xb0>
 10045cc:	300490ba 	slli	r2,r6,2
 10045d0:	100cd27a 	srli	r6,r2,9
 10045d4:	003fe406 	br	1004568 <__pack_f+0x30>
 10045d8:	3080200c 	andi	r2,r6,128
 10045dc:	103ffa26 	beq	r2,zero,10045c8 <__pack_f+0x90>
 10045e0:	31cd883a 	add	r6,r6,r7
 10045e4:	003ff806 	br	10045c8 <__pack_f+0x90>
 10045e8:	300cd07a 	srli	r6,r6,1
 10045ec:	18c00044 	addi	r3,r3,1
 10045f0:	003ff606 	br	10045cc <__pack_f+0x94>
 10045f4:	000d883a 	mov	r6,zero
 10045f8:	00ffffc4 	movi	r3,-1
 10045fc:	003fda06 	br	1004568 <__pack_f+0x30>
 1004600:	31800434 	orhi	r6,r6,16
 1004604:	00802034 	movhi	r2,128
 1004608:	10bfffc4 	addi	r2,r2,-1
 100460c:	308c703a 	and	r6,r6,r2
 1004610:	00ffffc4 	movi	r3,-1
 1004614:	003fd406 	br	1004568 <__pack_f+0x30>
 1004618:	1109c83a 	sub	r4,r2,r4
 100461c:	00800644 	movi	r2,25
 1004620:	11001216 	blt	r2,r4,100466c <__pack_f+0x134>
 1004624:	3904983a 	sll	r2,r7,r4
 1004628:	3106d83a 	srl	r3,r6,r4
 100462c:	10bfffc4 	addi	r2,r2,-1
 1004630:	3084703a 	and	r2,r6,r2
 1004634:	1004c03a 	cmpne	r2,r2,zero
 1004638:	1886b03a 	or	r3,r3,r2
 100463c:	19001fcc 	andi	r4,r3,127
 1004640:	00801004 	movi	r2,64
 1004644:	20800c26 	beq	r4,r2,1004678 <__pack_f+0x140>
 1004648:	18c00fc4 	addi	r3,r3,63
 100464c:	00900034 	movhi	r2,16384
 1004650:	10bfffc4 	addi	r2,r2,-1
 1004654:	180cd1fa 	srli	r6,r3,7
 1004658:	10c7803a 	cmpltu	r3,r2,r3
 100465c:	00802034 	movhi	r2,128
 1004660:	10bfffc4 	addi	r2,r2,-1
 1004664:	308c703a 	and	r6,r6,r2
 1004668:	003fbf06 	br	1004568 <__pack_f+0x30>
 100466c:	0007883a 	mov	r3,zero
 1004670:	000d883a 	mov	r6,zero
 1004674:	003ff906 	br	100465c <__pack_f+0x124>
 1004678:	1880200c 	andi	r2,r3,128
 100467c:	10000126 	beq	r2,zero,1004684 <__pack_f+0x14c>
 1004680:	1907883a 	add	r3,r3,r4
 1004684:	180cd1fa 	srli	r6,r3,7
 1004688:	00900034 	movhi	r2,16384
 100468c:	10bfffc4 	addi	r2,r2,-1
 1004690:	10c7803a 	cmpltu	r3,r2,r3
 1004694:	003ff106 	br	100465c <__pack_f+0x124>

01004698 <__unpack_f>:
 1004698:	21800017 	ldw	r6,0(r4)
 100469c:	00c02034 	movhi	r3,128
 10046a0:	18ffffc4 	addi	r3,r3,-1
 10046a4:	3004d5fa 	srli	r2,r6,23
 10046a8:	3008d7fa 	srli	r4,r6,31
 10046ac:	30ce703a 	and	r7,r6,r3
 10046b0:	10c03fcc 	andi	r3,r2,255
 10046b4:	29000115 	stw	r4,4(r5)
 10046b8:	1800131e 	bne	r3,zero,1004708 <__unpack_f+0x70>
 10046bc:	38000f26 	beq	r7,zero,10046fc <__unpack_f+0x64>
 10046c0:	380691fa 	slli	r3,r7,7
 10046c4:	01bfe084 	movi	r6,-126
 10046c8:	008000c4 	movi	r2,3
 10046cc:	01100034 	movhi	r4,16384
 10046d0:	213fffc4 	addi	r4,r4,-1
 10046d4:	28800015 	stw	r2,0(r5)
 10046d8:	29800215 	stw	r6,8(r5)
 10046dc:	20c00536 	bltu	r4,r3,10046f4 <__unpack_f+0x5c>
 10046e0:	3005883a 	mov	r2,r6
 10046e4:	18c7883a 	add	r3,r3,r3
 10046e8:	10bfffc4 	addi	r2,r2,-1
 10046ec:	20fffd2e 	bgeu	r4,r3,10046e4 <__unpack_f+0x4c>
 10046f0:	28800215 	stw	r2,8(r5)
 10046f4:	28c00315 	stw	r3,12(r5)
 10046f8:	f800283a 	ret
 10046fc:	00800084 	movi	r2,2
 1004700:	28800015 	stw	r2,0(r5)
 1004704:	f800283a 	ret
 1004708:	00803fc4 	movi	r2,255
 100470c:	18800826 	beq	r3,r2,1004730 <__unpack_f+0x98>
 1004710:	380491fa 	slli	r2,r7,7
 1004714:	18ffe044 	addi	r3,r3,-127
 1004718:	28c00215 	stw	r3,8(r5)
 100471c:	10900034 	orhi	r2,r2,16384
 1004720:	28800315 	stw	r2,12(r5)
 1004724:	008000c4 	movi	r2,3
 1004728:	28800015 	stw	r2,0(r5)
 100472c:	f800283a 	ret
 1004730:	3800031e 	bne	r7,zero,1004740 <__unpack_f+0xa8>
 1004734:	00800104 	movi	r2,4
 1004738:	28800015 	stw	r2,0(r5)
 100473c:	f800283a 	ret
 1004740:	3080042c 	andhi	r2,r6,16
 1004744:	10000426 	beq	r2,zero,1004758 <__unpack_f+0xc0>
 1004748:	00800044 	movi	r2,1
 100474c:	28800015 	stw	r2,0(r5)
 1004750:	29c00315 	stw	r7,12(r5)
 1004754:	f800283a 	ret
 1004758:	28000015 	stw	zero,0(r5)
 100475c:	003ffc06 	br	1004750 <__unpack_f+0xb8>

01004760 <__fpcmp_parts_f>:
 1004760:	21800017 	ldw	r6,0(r4)
 1004764:	00c00044 	movi	r3,1
 1004768:	19800a2e 	bgeu	r3,r6,1004794 <__fpcmp_parts_f+0x34>
 100476c:	28800017 	ldw	r2,0(r5)
 1004770:	1880082e 	bgeu	r3,r2,1004794 <__fpcmp_parts_f+0x34>
 1004774:	00c00104 	movi	r3,4
 1004778:	30c01e26 	beq	r6,r3,10047f4 <__fpcmp_parts_f+0x94>
 100477c:	10c01a26 	beq	r2,r3,10047e8 <__fpcmp_parts_f+0x88>
 1004780:	00c00084 	movi	r3,2
 1004784:	30c00526 	beq	r6,r3,100479c <__fpcmp_parts_f+0x3c>
 1004788:	10c0071e 	bne	r2,r3,10047a8 <__fpcmp_parts_f+0x48>
 100478c:	20800117 	ldw	r2,4(r4)
 1004790:	1000091e 	bne	r2,zero,10047b8 <__fpcmp_parts_f+0x58>
 1004794:	00800044 	movi	r2,1
 1004798:	f800283a 	ret
 100479c:	10c0121e 	bne	r2,r3,10047e8 <__fpcmp_parts_f+0x88>
 10047a0:	0005883a 	mov	r2,zero
 10047a4:	f800283a 	ret
 10047a8:	20c00117 	ldw	r3,4(r4)
 10047ac:	28800117 	ldw	r2,4(r5)
 10047b0:	18800326 	beq	r3,r2,10047c0 <__fpcmp_parts_f+0x60>
 10047b4:	183ff726 	beq	r3,zero,1004794 <__fpcmp_parts_f+0x34>
 10047b8:	00bfffc4 	movi	r2,-1
 10047bc:	f800283a 	ret
 10047c0:	21800217 	ldw	r6,8(r4)
 10047c4:	28800217 	ldw	r2,8(r5)
 10047c8:	11bffa16 	blt	r2,r6,10047b4 <__fpcmp_parts_f+0x54>
 10047cc:	30800416 	blt	r6,r2,10047e0 <__fpcmp_parts_f+0x80>
 10047d0:	21000317 	ldw	r4,12(r4)
 10047d4:	29400317 	ldw	r5,12(r5)
 10047d8:	293ff636 	bltu	r5,r4,10047b4 <__fpcmp_parts_f+0x54>
 10047dc:	217ff02e 	bgeu	r4,r5,10047a0 <__fpcmp_parts_f+0x40>
 10047e0:	183fec1e 	bne	r3,zero,1004794 <__fpcmp_parts_f+0x34>
 10047e4:	003ff406 	br	10047b8 <__fpcmp_parts_f+0x58>
 10047e8:	28800117 	ldw	r2,4(r5)
 10047ec:	103fe91e 	bne	r2,zero,1004794 <__fpcmp_parts_f+0x34>
 10047f0:	003ff106 	br	10047b8 <__fpcmp_parts_f+0x58>
 10047f4:	11bfe51e 	bne	r2,r6,100478c <__fpcmp_parts_f+0x2c>
 10047f8:	28c00117 	ldw	r3,4(r5)
 10047fc:	20800117 	ldw	r2,4(r4)
 1004800:	1885c83a 	sub	r2,r3,r2
 1004804:	f800283a 	ret

01004808 <__pack_d>:
 1004808:	20c00017 	ldw	r3,0(r4)
 100480c:	defffd04 	addi	sp,sp,-12
 1004810:	dc000015 	stw	r16,0(sp)
 1004814:	dc800215 	stw	r18,8(sp)
 1004818:	dc400115 	stw	r17,4(sp)
 100481c:	00800044 	movi	r2,1
 1004820:	22000317 	ldw	r8,12(r4)
 1004824:	001f883a 	mov	r15,zero
 1004828:	22400417 	ldw	r9,16(r4)
 100482c:	24000117 	ldw	r16,4(r4)
 1004830:	10c0552e 	bgeu	r2,r3,1004988 <__pack_d+0x180>
 1004834:	00800104 	movi	r2,4
 1004838:	18804f26 	beq	r3,r2,1004978 <__pack_d+0x170>
 100483c:	00800084 	movi	r2,2
 1004840:	18800226 	beq	r3,r2,100484c <__pack_d+0x44>
 1004844:	4244b03a 	or	r2,r8,r9
 1004848:	10001a1e 	bne	r2,zero,10048b4 <__pack_d+0xac>
 100484c:	000d883a 	mov	r6,zero
 1004850:	000f883a 	mov	r7,zero
 1004854:	0011883a 	mov	r8,zero
 1004858:	00800434 	movhi	r2,16
 100485c:	10bfffc4 	addi	r2,r2,-1
 1004860:	301d883a 	mov	r14,r6
 1004864:	3884703a 	and	r2,r7,r2
 1004868:	400a953a 	slli	r5,r8,20
 100486c:	79bffc2c 	andhi	r6,r15,65520
 1004870:	308cb03a 	or	r6,r6,r2
 1004874:	00e00434 	movhi	r3,32784
 1004878:	18ffffc4 	addi	r3,r3,-1
 100487c:	800497fa 	slli	r2,r16,31
 1004880:	30c6703a 	and	r3,r6,r3
 1004884:	1946b03a 	or	r3,r3,r5
 1004888:	01600034 	movhi	r5,32768
 100488c:	297fffc4 	addi	r5,r5,-1
 1004890:	194a703a 	and	r5,r3,r5
 1004894:	288ab03a 	or	r5,r5,r2
 1004898:	2807883a 	mov	r3,r5
 100489c:	7005883a 	mov	r2,r14
 10048a0:	dc800217 	ldw	r18,8(sp)
 10048a4:	dc400117 	ldw	r17,4(sp)
 10048a8:	dc000017 	ldw	r16,0(sp)
 10048ac:	dec00304 	addi	sp,sp,12
 10048b0:	f800283a 	ret
 10048b4:	21000217 	ldw	r4,8(r4)
 10048b8:	00bf0084 	movi	r2,-1022
 10048bc:	20803f16 	blt	r4,r2,10049bc <__pack_d+0x1b4>
 10048c0:	0080ffc4 	movi	r2,1023
 10048c4:	11002c16 	blt	r2,r4,1004978 <__pack_d+0x170>
 10048c8:	00803fc4 	movi	r2,255
 10048cc:	408c703a 	and	r6,r8,r2
 10048d0:	00802004 	movi	r2,128
 10048d4:	0007883a 	mov	r3,zero
 10048d8:	000f883a 	mov	r7,zero
 10048dc:	2280ffc4 	addi	r10,r4,1023
 10048e0:	30801e26 	beq	r6,r2,100495c <__pack_d+0x154>
 10048e4:	00801fc4 	movi	r2,127
 10048e8:	4089883a 	add	r4,r8,r2
 10048ec:	220d803a 	cmpltu	r6,r4,r8
 10048f0:	324d883a 	add	r6,r6,r9
 10048f4:	2011883a 	mov	r8,r4
 10048f8:	3013883a 	mov	r9,r6
 10048fc:	00880034 	movhi	r2,8192
 1004900:	10bfffc4 	addi	r2,r2,-1
 1004904:	12400d36 	bltu	r2,r9,100493c <__pack_d+0x134>
 1004908:	4804963a 	slli	r2,r9,24
 100490c:	400cd23a 	srli	r6,r8,8
 1004910:	480ed23a 	srli	r7,r9,8
 1004914:	013fffc4 	movi	r4,-1
 1004918:	118cb03a 	or	r6,r2,r6
 100491c:	01400434 	movhi	r5,16
 1004920:	297fffc4 	addi	r5,r5,-1
 1004924:	3104703a 	and	r2,r6,r4
 1004928:	3946703a 	and	r3,r7,r5
 100492c:	5201ffcc 	andi	r8,r10,2047
 1004930:	100d883a 	mov	r6,r2
 1004934:	180f883a 	mov	r7,r3
 1004938:	003fc706 	br	1004858 <__pack_d+0x50>
 100493c:	480897fa 	slli	r4,r9,31
 1004940:	4004d07a 	srli	r2,r8,1
 1004944:	4806d07a 	srli	r3,r9,1
 1004948:	52800044 	addi	r10,r10,1
 100494c:	2084b03a 	or	r2,r4,r2
 1004950:	1011883a 	mov	r8,r2
 1004954:	1813883a 	mov	r9,r3
 1004958:	003feb06 	br	1004908 <__pack_d+0x100>
 100495c:	383fe11e 	bne	r7,zero,10048e4 <__pack_d+0xdc>
 1004960:	01004004 	movi	r4,256
 1004964:	4104703a 	and	r2,r8,r4
 1004968:	10c4b03a 	or	r2,r2,r3
 100496c:	103fe326 	beq	r2,zero,10048fc <__pack_d+0xf4>
 1004970:	3005883a 	mov	r2,r6
 1004974:	003fdc06 	br	10048e8 <__pack_d+0xe0>
 1004978:	000d883a 	mov	r6,zero
 100497c:	000f883a 	mov	r7,zero
 1004980:	0201ffc4 	movi	r8,2047
 1004984:	003fb406 	br	1004858 <__pack_d+0x50>
 1004988:	0005883a 	mov	r2,zero
 100498c:	00c00234 	movhi	r3,8
 1004990:	408cb03a 	or	r6,r8,r2
 1004994:	48ceb03a 	or	r7,r9,r3
 1004998:	013fffc4 	movi	r4,-1
 100499c:	01400434 	movhi	r5,16
 10049a0:	297fffc4 	addi	r5,r5,-1
 10049a4:	3104703a 	and	r2,r6,r4
 10049a8:	3946703a 	and	r3,r7,r5
 10049ac:	100d883a 	mov	r6,r2
 10049b0:	180f883a 	mov	r7,r3
 10049b4:	0201ffc4 	movi	r8,2047
 10049b8:	003fa706 	br	1004858 <__pack_d+0x50>
 10049bc:	1109c83a 	sub	r4,r2,r4
 10049c0:	00800e04 	movi	r2,56
 10049c4:	11004316 	blt	r2,r4,1004ad4 <__pack_d+0x2cc>
 10049c8:	21fff804 	addi	r7,r4,-32
 10049cc:	38004516 	blt	r7,zero,1004ae4 <__pack_d+0x2dc>
 10049d0:	49d8d83a 	srl	r12,r9,r7
 10049d4:	001b883a 	mov	r13,zero
 10049d8:	0023883a 	mov	r17,zero
 10049dc:	01400044 	movi	r5,1
 10049e0:	0025883a 	mov	r18,zero
 10049e4:	38004716 	blt	r7,zero,1004b04 <__pack_d+0x2fc>
 10049e8:	29d6983a 	sll	r11,r5,r7
 10049ec:	0015883a 	mov	r10,zero
 10049f0:	00bfffc4 	movi	r2,-1
 10049f4:	5089883a 	add	r4,r10,r2
 10049f8:	588b883a 	add	r5,r11,r2
 10049fc:	228d803a 	cmpltu	r6,r4,r10
 1004a00:	314b883a 	add	r5,r6,r5
 1004a04:	4104703a 	and	r2,r8,r4
 1004a08:	4946703a 	and	r3,r9,r5
 1004a0c:	10c4b03a 	or	r2,r2,r3
 1004a10:	10000226 	beq	r2,zero,1004a1c <__pack_d+0x214>
 1004a14:	04400044 	movi	r17,1
 1004a18:	0025883a 	mov	r18,zero
 1004a1c:	00803fc4 	movi	r2,255
 1004a20:	644eb03a 	or	r7,r12,r17
 1004a24:	3892703a 	and	r9,r7,r2
 1004a28:	00802004 	movi	r2,128
 1004a2c:	6c90b03a 	or	r8,r13,r18
 1004a30:	0015883a 	mov	r10,zero
 1004a34:	48801626 	beq	r9,r2,1004a90 <__pack_d+0x288>
 1004a38:	01001fc4 	movi	r4,127
 1004a3c:	3905883a 	add	r2,r7,r4
 1004a40:	11cd803a 	cmpltu	r6,r2,r7
 1004a44:	320d883a 	add	r6,r6,r8
 1004a48:	100f883a 	mov	r7,r2
 1004a4c:	00840034 	movhi	r2,4096
 1004a50:	10bfffc4 	addi	r2,r2,-1
 1004a54:	3011883a 	mov	r8,r6
 1004a58:	0007883a 	mov	r3,zero
 1004a5c:	11801b36 	bltu	r2,r6,1004acc <__pack_d+0x2c4>
 1004a60:	4004963a 	slli	r2,r8,24
 1004a64:	3808d23a 	srli	r4,r7,8
 1004a68:	400ad23a 	srli	r5,r8,8
 1004a6c:	1813883a 	mov	r9,r3
 1004a70:	1108b03a 	or	r4,r2,r4
 1004a74:	00bfffc4 	movi	r2,-1
 1004a78:	00c00434 	movhi	r3,16
 1004a7c:	18ffffc4 	addi	r3,r3,-1
 1004a80:	208c703a 	and	r6,r4,r2
 1004a84:	28ce703a 	and	r7,r5,r3
 1004a88:	4a01ffcc 	andi	r8,r9,2047
 1004a8c:	003f7206 	br	1004858 <__pack_d+0x50>
 1004a90:	503fe91e 	bne	r10,zero,1004a38 <__pack_d+0x230>
 1004a94:	01004004 	movi	r4,256
 1004a98:	3904703a 	and	r2,r7,r4
 1004a9c:	0007883a 	mov	r3,zero
 1004aa0:	10c4b03a 	or	r2,r2,r3
 1004aa4:	10000626 	beq	r2,zero,1004ac0 <__pack_d+0x2b8>
 1004aa8:	3a45883a 	add	r2,r7,r9
 1004aac:	11cd803a 	cmpltu	r6,r2,r7
 1004ab0:	320d883a 	add	r6,r6,r8
 1004ab4:	100f883a 	mov	r7,r2
 1004ab8:	3011883a 	mov	r8,r6
 1004abc:	0007883a 	mov	r3,zero
 1004ac0:	00840034 	movhi	r2,4096
 1004ac4:	10bfffc4 	addi	r2,r2,-1
 1004ac8:	123fe52e 	bgeu	r2,r8,1004a60 <__pack_d+0x258>
 1004acc:	00c00044 	movi	r3,1
 1004ad0:	003fe306 	br	1004a60 <__pack_d+0x258>
 1004ad4:	0009883a 	mov	r4,zero
 1004ad8:	0013883a 	mov	r9,zero
 1004adc:	000b883a 	mov	r5,zero
 1004ae0:	003fe406 	br	1004a74 <__pack_d+0x26c>
 1004ae4:	4a47883a 	add	r3,r9,r9
 1004ae8:	008007c4 	movi	r2,31
 1004aec:	1105c83a 	sub	r2,r2,r4
 1004af0:	1886983a 	sll	r3,r3,r2
 1004af4:	4118d83a 	srl	r12,r8,r4
 1004af8:	491ad83a 	srl	r13,r9,r4
 1004afc:	1b18b03a 	or	r12,r3,r12
 1004b00:	003fb506 	br	10049d8 <__pack_d+0x1d0>
 1004b04:	2806d07a 	srli	r3,r5,1
 1004b08:	008007c4 	movi	r2,31
 1004b0c:	1105c83a 	sub	r2,r2,r4
 1004b10:	1896d83a 	srl	r11,r3,r2
 1004b14:	2914983a 	sll	r10,r5,r4
 1004b18:	003fb506 	br	10049f0 <__pack_d+0x1e8>

01004b1c <__unpack_d>:
 1004b1c:	20c00117 	ldw	r3,4(r4)
 1004b20:	22400017 	ldw	r9,0(r4)
 1004b24:	00800434 	movhi	r2,16
 1004b28:	10bfffc4 	addi	r2,r2,-1
 1004b2c:	1808d53a 	srli	r4,r3,20
 1004b30:	180cd7fa 	srli	r6,r3,31
 1004b34:	1894703a 	and	r10,r3,r2
 1004b38:	2201ffcc 	andi	r8,r4,2047
 1004b3c:	281b883a 	mov	r13,r5
 1004b40:	4817883a 	mov	r11,r9
 1004b44:	29800115 	stw	r6,4(r5)
 1004b48:	5019883a 	mov	r12,r10
 1004b4c:	40001e1e 	bne	r8,zero,1004bc8 <__unpack_d+0xac>
 1004b50:	4a84b03a 	or	r2,r9,r10
 1004b54:	10001926 	beq	r2,zero,1004bbc <__unpack_d+0xa0>
 1004b58:	4804d63a 	srli	r2,r9,24
 1004b5c:	500c923a 	slli	r6,r10,8
 1004b60:	013f0084 	movi	r4,-1022
 1004b64:	00c40034 	movhi	r3,4096
 1004b68:	18ffffc4 	addi	r3,r3,-1
 1004b6c:	118cb03a 	or	r6,r2,r6
 1004b70:	008000c4 	movi	r2,3
 1004b74:	480a923a 	slli	r5,r9,8
 1004b78:	68800015 	stw	r2,0(r13)
 1004b7c:	69000215 	stw	r4,8(r13)
 1004b80:	19800b36 	bltu	r3,r6,1004bb0 <__unpack_d+0x94>
 1004b84:	200f883a 	mov	r7,r4
 1004b88:	1811883a 	mov	r8,r3
 1004b8c:	2945883a 	add	r2,r5,r5
 1004b90:	1149803a 	cmpltu	r4,r2,r5
 1004b94:	3187883a 	add	r3,r6,r6
 1004b98:	20c9883a 	add	r4,r4,r3
 1004b9c:	100b883a 	mov	r5,r2
 1004ba0:	200d883a 	mov	r6,r4
 1004ba4:	39ffffc4 	addi	r7,r7,-1
 1004ba8:	413ff82e 	bgeu	r8,r4,1004b8c <__unpack_d+0x70>
 1004bac:	69c00215 	stw	r7,8(r13)
 1004bb0:	69800415 	stw	r6,16(r13)
 1004bb4:	69400315 	stw	r5,12(r13)
 1004bb8:	f800283a 	ret
 1004bbc:	00800084 	movi	r2,2
 1004bc0:	28800015 	stw	r2,0(r5)
 1004bc4:	f800283a 	ret
 1004bc8:	0081ffc4 	movi	r2,2047
 1004bcc:	40800f26 	beq	r8,r2,1004c0c <__unpack_d+0xf0>
 1004bd0:	480cd63a 	srli	r6,r9,24
 1004bd4:	5006923a 	slli	r3,r10,8
 1004bd8:	4804923a 	slli	r2,r9,8
 1004bdc:	0009883a 	mov	r4,zero
 1004be0:	30c6b03a 	or	r3,r6,r3
 1004be4:	01440034 	movhi	r5,4096
 1004be8:	110cb03a 	or	r6,r2,r4
 1004bec:	423f0044 	addi	r8,r8,-1023
 1004bf0:	194eb03a 	or	r7,r3,r5
 1004bf4:	008000c4 	movi	r2,3
 1004bf8:	69c00415 	stw	r7,16(r13)
 1004bfc:	6a000215 	stw	r8,8(r13)
 1004c00:	68800015 	stw	r2,0(r13)
 1004c04:	69800315 	stw	r6,12(r13)
 1004c08:	f800283a 	ret
 1004c0c:	4a84b03a 	or	r2,r9,r10
 1004c10:	1000031e 	bne	r2,zero,1004c20 <__unpack_d+0x104>
 1004c14:	00800104 	movi	r2,4
 1004c18:	28800015 	stw	r2,0(r5)
 1004c1c:	f800283a 	ret
 1004c20:	0009883a 	mov	r4,zero
 1004c24:	01400234 	movhi	r5,8
 1004c28:	4904703a 	and	r2,r9,r4
 1004c2c:	5146703a 	and	r3,r10,r5
 1004c30:	10c4b03a 	or	r2,r2,r3
 1004c34:	10000526 	beq	r2,zero,1004c4c <__unpack_d+0x130>
 1004c38:	00800044 	movi	r2,1
 1004c3c:	68800015 	stw	r2,0(r13)
 1004c40:	6b000415 	stw	r12,16(r13)
 1004c44:	6ac00315 	stw	r11,12(r13)
 1004c48:	f800283a 	ret
 1004c4c:	68000015 	stw	zero,0(r13)
 1004c50:	003ffb06 	br	1004c40 <__unpack_d+0x124>

01004c54 <__fpcmp_parts_d>:
 1004c54:	21800017 	ldw	r6,0(r4)
 1004c58:	00c00044 	movi	r3,1
 1004c5c:	19800a2e 	bgeu	r3,r6,1004c88 <__fpcmp_parts_d+0x34>
 1004c60:	28800017 	ldw	r2,0(r5)
 1004c64:	1880082e 	bgeu	r3,r2,1004c88 <__fpcmp_parts_d+0x34>
 1004c68:	00c00104 	movi	r3,4
 1004c6c:	30c02626 	beq	r6,r3,1004d08 <__fpcmp_parts_d+0xb4>
 1004c70:	10c02226 	beq	r2,r3,1004cfc <__fpcmp_parts_d+0xa8>
 1004c74:	00c00084 	movi	r3,2
 1004c78:	30c00526 	beq	r6,r3,1004c90 <__fpcmp_parts_d+0x3c>
 1004c7c:	10c0071e 	bne	r2,r3,1004c9c <__fpcmp_parts_d+0x48>
 1004c80:	20800117 	ldw	r2,4(r4)
 1004c84:	1000091e 	bne	r2,zero,1004cac <__fpcmp_parts_d+0x58>
 1004c88:	00800044 	movi	r2,1
 1004c8c:	f800283a 	ret
 1004c90:	10c01a1e 	bne	r2,r3,1004cfc <__fpcmp_parts_d+0xa8>
 1004c94:	0005883a 	mov	r2,zero
 1004c98:	f800283a 	ret
 1004c9c:	22000117 	ldw	r8,4(r4)
 1004ca0:	28800117 	ldw	r2,4(r5)
 1004ca4:	40800326 	beq	r8,r2,1004cb4 <__fpcmp_parts_d+0x60>
 1004ca8:	403ff726 	beq	r8,zero,1004c88 <__fpcmp_parts_d+0x34>
 1004cac:	00bfffc4 	movi	r2,-1
 1004cb0:	f800283a 	ret
 1004cb4:	20c00217 	ldw	r3,8(r4)
 1004cb8:	28800217 	ldw	r2,8(r5)
 1004cbc:	10fffa16 	blt	r2,r3,1004ca8 <__fpcmp_parts_d+0x54>
 1004cc0:	18800916 	blt	r3,r2,1004ce8 <__fpcmp_parts_d+0x94>
 1004cc4:	21c00417 	ldw	r7,16(r4)
 1004cc8:	28c00417 	ldw	r3,16(r5)
 1004ccc:	21800317 	ldw	r6,12(r4)
 1004cd0:	28800317 	ldw	r2,12(r5)
 1004cd4:	19fff436 	bltu	r3,r7,1004ca8 <__fpcmp_parts_d+0x54>
 1004cd8:	38c00526 	beq	r7,r3,1004cf0 <__fpcmp_parts_d+0x9c>
 1004cdc:	38c00236 	bltu	r7,r3,1004ce8 <__fpcmp_parts_d+0x94>
 1004ce0:	19ffec1e 	bne	r3,r7,1004c94 <__fpcmp_parts_d+0x40>
 1004ce4:	30bfeb2e 	bgeu	r6,r2,1004c94 <__fpcmp_parts_d+0x40>
 1004ce8:	403fe71e 	bne	r8,zero,1004c88 <__fpcmp_parts_d+0x34>
 1004cec:	003fef06 	br	1004cac <__fpcmp_parts_d+0x58>
 1004cf0:	11bffa2e 	bgeu	r2,r6,1004cdc <__fpcmp_parts_d+0x88>
 1004cf4:	403fe426 	beq	r8,zero,1004c88 <__fpcmp_parts_d+0x34>
 1004cf8:	003fec06 	br	1004cac <__fpcmp_parts_d+0x58>
 1004cfc:	28800117 	ldw	r2,4(r5)
 1004d00:	103fe11e 	bne	r2,zero,1004c88 <__fpcmp_parts_d+0x34>
 1004d04:	003fe906 	br	1004cac <__fpcmp_parts_d+0x58>
 1004d08:	11bfdd1e 	bne	r2,r6,1004c80 <__fpcmp_parts_d+0x2c>
 1004d0c:	28c00117 	ldw	r3,4(r5)
 1004d10:	20800117 	ldw	r2,4(r4)
 1004d14:	1885c83a 	sub	r2,r3,r2
 1004d18:	f800283a 	ret

01004d1c <free>:
 1004d1c:	00804074 	movhi	r2,257
 1004d20:	108f2504 	addi	r2,r2,15508
 1004d24:	200b883a 	mov	r5,r4
 1004d28:	11000017 	ldw	r4,0(r2)
 1004d2c:	10095581 	jmpi	1009558 <_free_r>

01004d30 <malloc>:
 1004d30:	00804074 	movhi	r2,257
 1004d34:	108f2504 	addi	r2,r2,15508
 1004d38:	200b883a 	mov	r5,r4
 1004d3c:	11000017 	ldw	r4,0(r2)
 1004d40:	1004d441 	jmpi	1004d44 <_malloc_r>

01004d44 <_malloc_r>:
 1004d44:	defff604 	addi	sp,sp,-40
 1004d48:	28c002c4 	addi	r3,r5,11
 1004d4c:	00800584 	movi	r2,22
 1004d50:	dc800215 	stw	r18,8(sp)
 1004d54:	dfc00915 	stw	ra,36(sp)
 1004d58:	df000815 	stw	fp,32(sp)
 1004d5c:	ddc00715 	stw	r23,28(sp)
 1004d60:	dd800615 	stw	r22,24(sp)
 1004d64:	dd400515 	stw	r21,20(sp)
 1004d68:	dd000415 	stw	r20,16(sp)
 1004d6c:	dcc00315 	stw	r19,12(sp)
 1004d70:	dc400115 	stw	r17,4(sp)
 1004d74:	dc000015 	stw	r16,0(sp)
 1004d78:	2025883a 	mov	r18,r4
 1004d7c:	10c01236 	bltu	r2,r3,1004dc8 <_malloc_r+0x84>
 1004d80:	04400404 	movi	r17,16
 1004d84:	8940142e 	bgeu	r17,r5,1004dd8 <_malloc_r+0x94>
 1004d88:	00800304 	movi	r2,12
 1004d8c:	0007883a 	mov	r3,zero
 1004d90:	90800015 	stw	r2,0(r18)
 1004d94:	1805883a 	mov	r2,r3
 1004d98:	dfc00917 	ldw	ra,36(sp)
 1004d9c:	df000817 	ldw	fp,32(sp)
 1004da0:	ddc00717 	ldw	r23,28(sp)
 1004da4:	dd800617 	ldw	r22,24(sp)
 1004da8:	dd400517 	ldw	r21,20(sp)
 1004dac:	dd000417 	ldw	r20,16(sp)
 1004db0:	dcc00317 	ldw	r19,12(sp)
 1004db4:	dc800217 	ldw	r18,8(sp)
 1004db8:	dc400117 	ldw	r17,4(sp)
 1004dbc:	dc000017 	ldw	r16,0(sp)
 1004dc0:	dec00a04 	addi	sp,sp,40
 1004dc4:	f800283a 	ret
 1004dc8:	00bffe04 	movi	r2,-8
 1004dcc:	18a2703a 	and	r17,r3,r2
 1004dd0:	883fed16 	blt	r17,zero,1004d88 <_malloc_r+0x44>
 1004dd4:	897fec36 	bltu	r17,r5,1004d88 <_malloc_r+0x44>
 1004dd8:	9009883a 	mov	r4,r18
 1004ddc:	100d9d80 	call	100d9d8 <__malloc_lock>
 1004de0:	00807dc4 	movi	r2,503
 1004de4:	14402b2e 	bgeu	r2,r17,1004e94 <_malloc_r+0x150>
 1004de8:	8806d27a 	srli	r3,r17,9
 1004dec:	18003f1e 	bne	r3,zero,1004eec <_malloc_r+0x1a8>
 1004df0:	880cd0fa 	srli	r6,r17,3
 1004df4:	300490fa 	slli	r2,r6,3
 1004df8:	02c04074 	movhi	r11,257
 1004dfc:	5ac87c04 	addi	r11,r11,8688
 1004e00:	12cb883a 	add	r5,r2,r11
 1004e04:	2c000317 	ldw	r16,12(r5)
 1004e08:	580f883a 	mov	r7,r11
 1004e0c:	2c00041e 	bne	r5,r16,1004e20 <_malloc_r+0xdc>
 1004e10:	00000a06 	br	1004e3c <_malloc_r+0xf8>
 1004e14:	1800860e 	bge	r3,zero,1005030 <_malloc_r+0x2ec>
 1004e18:	84000317 	ldw	r16,12(r16)
 1004e1c:	2c000726 	beq	r5,r16,1004e3c <_malloc_r+0xf8>
 1004e20:	80800117 	ldw	r2,4(r16)
 1004e24:	00ffff04 	movi	r3,-4
 1004e28:	10c8703a 	and	r4,r2,r3
 1004e2c:	2447c83a 	sub	r3,r4,r17
 1004e30:	008003c4 	movi	r2,15
 1004e34:	10fff70e 	bge	r2,r3,1004e14 <_malloc_r+0xd0>
 1004e38:	31bfffc4 	addi	r6,r6,-1
 1004e3c:	32400044 	addi	r9,r6,1
 1004e40:	02804074 	movhi	r10,257
 1004e44:	52887e04 	addi	r10,r10,8696
 1004e48:	54000217 	ldw	r16,8(r10)
 1004e4c:	8280a026 	beq	r16,r10,10050d0 <_malloc_r+0x38c>
 1004e50:	80800117 	ldw	r2,4(r16)
 1004e54:	00ffff04 	movi	r3,-4
 1004e58:	10ca703a 	and	r5,r2,r3
 1004e5c:	2c4dc83a 	sub	r6,r5,r17
 1004e60:	008003c4 	movi	r2,15
 1004e64:	11808316 	blt	r2,r6,1005074 <_malloc_r+0x330>
 1004e68:	52800315 	stw	r10,12(r10)
 1004e6c:	52800215 	stw	r10,8(r10)
 1004e70:	30002916 	blt	r6,zero,1004f18 <_malloc_r+0x1d4>
 1004e74:	8147883a 	add	r3,r16,r5
 1004e78:	18800117 	ldw	r2,4(r3)
 1004e7c:	9009883a 	mov	r4,r18
 1004e80:	10800054 	ori	r2,r2,1
 1004e84:	18800115 	stw	r2,4(r3)
 1004e88:	100d9f80 	call	100d9f8 <__malloc_unlock>
 1004e8c:	80c00204 	addi	r3,r16,8
 1004e90:	003fc006 	br	1004d94 <_malloc_r+0x50>
 1004e94:	02c04074 	movhi	r11,257
 1004e98:	5ac87c04 	addi	r11,r11,8688
 1004e9c:	8ac5883a 	add	r2,r17,r11
 1004ea0:	14000317 	ldw	r16,12(r2)
 1004ea4:	580f883a 	mov	r7,r11
 1004ea8:	8806d0fa 	srli	r3,r17,3
 1004eac:	14006c26 	beq	r2,r16,1005060 <_malloc_r+0x31c>
 1004eb0:	80c00117 	ldw	r3,4(r16)
 1004eb4:	00bfff04 	movi	r2,-4
 1004eb8:	81800317 	ldw	r6,12(r16)
 1004ebc:	1886703a 	and	r3,r3,r2
 1004ec0:	80c7883a 	add	r3,r16,r3
 1004ec4:	18800117 	ldw	r2,4(r3)
 1004ec8:	81400217 	ldw	r5,8(r16)
 1004ecc:	9009883a 	mov	r4,r18
 1004ed0:	10800054 	ori	r2,r2,1
 1004ed4:	18800115 	stw	r2,4(r3)
 1004ed8:	31400215 	stw	r5,8(r6)
 1004edc:	29800315 	stw	r6,12(r5)
 1004ee0:	100d9f80 	call	100d9f8 <__malloc_unlock>
 1004ee4:	80c00204 	addi	r3,r16,8
 1004ee8:	003faa06 	br	1004d94 <_malloc_r+0x50>
 1004eec:	00800104 	movi	r2,4
 1004ef0:	10c0052e 	bgeu	r2,r3,1004f08 <_malloc_r+0x1c4>
 1004ef4:	00800504 	movi	r2,20
 1004ef8:	10c07836 	bltu	r2,r3,10050dc <_malloc_r+0x398>
 1004efc:	198016c4 	addi	r6,r3,91
 1004f00:	300490fa 	slli	r2,r6,3
 1004f04:	003fbc06 	br	1004df8 <_malloc_r+0xb4>
 1004f08:	8804d1ba 	srli	r2,r17,6
 1004f0c:	11800e04 	addi	r6,r2,56
 1004f10:	300490fa 	slli	r2,r6,3
 1004f14:	003fb806 	br	1004df8 <_malloc_r+0xb4>
 1004f18:	00807fc4 	movi	r2,511
 1004f1c:	1140bb36 	bltu	r2,r5,100520c <_malloc_r+0x4c8>
 1004f20:	2806d0fa 	srli	r3,r5,3
 1004f24:	573ffe04 	addi	fp,r10,-8
 1004f28:	00800044 	movi	r2,1
 1004f2c:	180890fa 	slli	r4,r3,3
 1004f30:	1807d0ba 	srai	r3,r3,2
 1004f34:	e1c00117 	ldw	r7,4(fp)
 1004f38:	5909883a 	add	r4,r11,r4
 1004f3c:	21400217 	ldw	r5,8(r4)
 1004f40:	10c4983a 	sll	r2,r2,r3
 1004f44:	81000315 	stw	r4,12(r16)
 1004f48:	81400215 	stw	r5,8(r16)
 1004f4c:	388eb03a 	or	r7,r7,r2
 1004f50:	2c000315 	stw	r16,12(r5)
 1004f54:	24000215 	stw	r16,8(r4)
 1004f58:	e1c00115 	stw	r7,4(fp)
 1004f5c:	4807883a 	mov	r3,r9
 1004f60:	4800cd16 	blt	r9,zero,1005298 <_malloc_r+0x554>
 1004f64:	1807d0ba 	srai	r3,r3,2
 1004f68:	00800044 	movi	r2,1
 1004f6c:	10c8983a 	sll	r4,r2,r3
 1004f70:	39004436 	bltu	r7,r4,1005084 <_malloc_r+0x340>
 1004f74:	21c4703a 	and	r2,r4,r7
 1004f78:	10000a1e 	bne	r2,zero,1004fa4 <_malloc_r+0x260>
 1004f7c:	2109883a 	add	r4,r4,r4
 1004f80:	00bfff04 	movi	r2,-4
 1004f84:	4884703a 	and	r2,r9,r2
 1004f88:	3906703a 	and	r3,r7,r4
 1004f8c:	12400104 	addi	r9,r2,4
 1004f90:	1800041e 	bne	r3,zero,1004fa4 <_malloc_r+0x260>
 1004f94:	2109883a 	add	r4,r4,r4
 1004f98:	3904703a 	and	r2,r7,r4
 1004f9c:	4a400104 	addi	r9,r9,4
 1004fa0:	103ffc26 	beq	r2,zero,1004f94 <_malloc_r+0x250>
 1004fa4:	480490fa 	slli	r2,r9,3
 1004fa8:	4819883a 	mov	r12,r9
 1004fac:	023fff04 	movi	r8,-4
 1004fb0:	589b883a 	add	r13,r11,r2
 1004fb4:	6807883a 	mov	r3,r13
 1004fb8:	014003c4 	movi	r5,15
 1004fbc:	1c000317 	ldw	r16,12(r3)
 1004fc0:	1c00041e 	bne	r3,r16,1004fd4 <_malloc_r+0x290>
 1004fc4:	0000a706 	br	1005264 <_malloc_r+0x520>
 1004fc8:	3000ab0e 	bge	r6,zero,1005278 <_malloc_r+0x534>
 1004fcc:	84000317 	ldw	r16,12(r16)
 1004fd0:	1c00a426 	beq	r3,r16,1005264 <_malloc_r+0x520>
 1004fd4:	80800117 	ldw	r2,4(r16)
 1004fd8:	1204703a 	and	r2,r2,r8
 1004fdc:	144dc83a 	sub	r6,r2,r17
 1004fe0:	29bff90e 	bge	r5,r6,1004fc8 <_malloc_r+0x284>
 1004fe4:	81000317 	ldw	r4,12(r16)
 1004fe8:	80c00217 	ldw	r3,8(r16)
 1004fec:	89400054 	ori	r5,r17,1
 1004ff0:	8445883a 	add	r2,r16,r17
 1004ff4:	20c00215 	stw	r3,8(r4)
 1004ff8:	19000315 	stw	r4,12(r3)
 1004ffc:	81400115 	stw	r5,4(r16)
 1005000:	1187883a 	add	r3,r2,r6
 1005004:	31000054 	ori	r4,r6,1
 1005008:	50800315 	stw	r2,12(r10)
 100500c:	50800215 	stw	r2,8(r10)
 1005010:	19800015 	stw	r6,0(r3)
 1005014:	11000115 	stw	r4,4(r2)
 1005018:	12800215 	stw	r10,8(r2)
 100501c:	12800315 	stw	r10,12(r2)
 1005020:	9009883a 	mov	r4,r18
 1005024:	100d9f80 	call	100d9f8 <__malloc_unlock>
 1005028:	80c00204 	addi	r3,r16,8
 100502c:	003f5906 	br	1004d94 <_malloc_r+0x50>
 1005030:	8109883a 	add	r4,r16,r4
 1005034:	20800117 	ldw	r2,4(r4)
 1005038:	80c00217 	ldw	r3,8(r16)
 100503c:	81400317 	ldw	r5,12(r16)
 1005040:	10800054 	ori	r2,r2,1
 1005044:	20800115 	stw	r2,4(r4)
 1005048:	28c00215 	stw	r3,8(r5)
 100504c:	19400315 	stw	r5,12(r3)
 1005050:	9009883a 	mov	r4,r18
 1005054:	100d9f80 	call	100d9f8 <__malloc_unlock>
 1005058:	80c00204 	addi	r3,r16,8
 100505c:	003f4d06 	br	1004d94 <_malloc_r+0x50>
 1005060:	80800204 	addi	r2,r16,8
 1005064:	14000317 	ldw	r16,12(r2)
 1005068:	143f911e 	bne	r2,r16,1004eb0 <_malloc_r+0x16c>
 100506c:	1a400084 	addi	r9,r3,2
 1005070:	003f7306 	br	1004e40 <_malloc_r+0xfc>
 1005074:	88c00054 	ori	r3,r17,1
 1005078:	8445883a 	add	r2,r16,r17
 100507c:	80c00115 	stw	r3,4(r16)
 1005080:	003fdf06 	br	1005000 <_malloc_r+0x2bc>
 1005084:	e4000217 	ldw	r16,8(fp)
 1005088:	00bfff04 	movi	r2,-4
 100508c:	80c00117 	ldw	r3,4(r16)
 1005090:	802d883a 	mov	r22,r16
 1005094:	18aa703a 	and	r21,r3,r2
 1005098:	ac401636 	bltu	r21,r17,10050f4 <_malloc_r+0x3b0>
 100509c:	ac49c83a 	sub	r4,r21,r17
 10050a0:	008003c4 	movi	r2,15
 10050a4:	1100130e 	bge	r2,r4,10050f4 <_malloc_r+0x3b0>
 10050a8:	88800054 	ori	r2,r17,1
 10050ac:	8447883a 	add	r3,r16,r17
 10050b0:	80800115 	stw	r2,4(r16)
 10050b4:	20800054 	ori	r2,r4,1
 10050b8:	18800115 	stw	r2,4(r3)
 10050bc:	e0c00215 	stw	r3,8(fp)
 10050c0:	9009883a 	mov	r4,r18
 10050c4:	100d9f80 	call	100d9f8 <__malloc_unlock>
 10050c8:	80c00204 	addi	r3,r16,8
 10050cc:	003f3106 	br	1004d94 <_malloc_r+0x50>
 10050d0:	39c00117 	ldw	r7,4(r7)
 10050d4:	573ffe04 	addi	fp,r10,-8
 10050d8:	003fa006 	br	1004f5c <_malloc_r+0x218>
 10050dc:	00801504 	movi	r2,84
 10050e0:	10c06736 	bltu	r2,r3,1005280 <_malloc_r+0x53c>
 10050e4:	8804d33a 	srli	r2,r17,12
 10050e8:	11801b84 	addi	r6,r2,110
 10050ec:	300490fa 	slli	r2,r6,3
 10050f0:	003f4106 	br	1004df8 <_malloc_r+0xb4>
 10050f4:	d0a6c717 	ldw	r2,-25828(gp)
 10050f8:	d0e00117 	ldw	r3,-32764(gp)
 10050fc:	053fffc4 	movi	r20,-1
 1005100:	10800404 	addi	r2,r2,16
 1005104:	88a7883a 	add	r19,r17,r2
 1005108:	1d000326 	beq	r3,r20,1005118 <_malloc_r+0x3d4>
 100510c:	98c3ffc4 	addi	r3,r19,4095
 1005110:	00bc0004 	movi	r2,-4096
 1005114:	18a6703a 	and	r19,r3,r2
 1005118:	9009883a 	mov	r4,r18
 100511c:	980b883a 	mov	r5,r19
 1005120:	10055b00 	call	10055b0 <_sbrk_r>
 1005124:	1009883a 	mov	r4,r2
 1005128:	15000426 	beq	r2,r20,100513c <_malloc_r+0x3f8>
 100512c:	854b883a 	add	r5,r16,r21
 1005130:	1029883a 	mov	r20,r2
 1005134:	11405a2e 	bgeu	r2,r5,10052a0 <_malloc_r+0x55c>
 1005138:	87000c26 	beq	r16,fp,100516c <_malloc_r+0x428>
 100513c:	e4000217 	ldw	r16,8(fp)
 1005140:	80c00117 	ldw	r3,4(r16)
 1005144:	00bfff04 	movi	r2,-4
 1005148:	1884703a 	and	r2,r3,r2
 100514c:	14400336 	bltu	r2,r17,100515c <_malloc_r+0x418>
 1005150:	1449c83a 	sub	r4,r2,r17
 1005154:	008003c4 	movi	r2,15
 1005158:	113fd316 	blt	r2,r4,10050a8 <_malloc_r+0x364>
 100515c:	9009883a 	mov	r4,r18
 1005160:	100d9f80 	call	100d9f8 <__malloc_unlock>
 1005164:	0007883a 	mov	r3,zero
 1005168:	003f0a06 	br	1004d94 <_malloc_r+0x50>
 100516c:	05c04074 	movhi	r23,257
 1005170:	bdd5f704 	addi	r23,r23,22492
 1005174:	b8800017 	ldw	r2,0(r23)
 1005178:	988d883a 	add	r6,r19,r2
 100517c:	b9800015 	stw	r6,0(r23)
 1005180:	d0e00117 	ldw	r3,-32764(gp)
 1005184:	00bfffc4 	movi	r2,-1
 1005188:	18808e26 	beq	r3,r2,10053c4 <_malloc_r+0x680>
 100518c:	2145c83a 	sub	r2,r4,r5
 1005190:	3085883a 	add	r2,r6,r2
 1005194:	b8800015 	stw	r2,0(r23)
 1005198:	20c001cc 	andi	r3,r4,7
 100519c:	18005f1e 	bne	r3,zero,100531c <_malloc_r+0x5d8>
 10051a0:	000b883a 	mov	r5,zero
 10051a4:	a4c5883a 	add	r2,r20,r19
 10051a8:	1083ffcc 	andi	r2,r2,4095
 10051ac:	00c40004 	movi	r3,4096
 10051b0:	1887c83a 	sub	r3,r3,r2
 10051b4:	28e7883a 	add	r19,r5,r3
 10051b8:	9009883a 	mov	r4,r18
 10051bc:	980b883a 	mov	r5,r19
 10051c0:	10055b00 	call	10055b0 <_sbrk_r>
 10051c4:	1007883a 	mov	r3,r2
 10051c8:	00bfffc4 	movi	r2,-1
 10051cc:	18807a26 	beq	r3,r2,10053b8 <_malloc_r+0x674>
 10051d0:	1d05c83a 	sub	r2,r3,r20
 10051d4:	9885883a 	add	r2,r19,r2
 10051d8:	10c00054 	ori	r3,r2,1
 10051dc:	b8800017 	ldw	r2,0(r23)
 10051e0:	a021883a 	mov	r16,r20
 10051e4:	a0c00115 	stw	r3,4(r20)
 10051e8:	9885883a 	add	r2,r19,r2
 10051ec:	b8800015 	stw	r2,0(r23)
 10051f0:	e5000215 	stw	r20,8(fp)
 10051f4:	b7003626 	beq	r22,fp,10052d0 <_malloc_r+0x58c>
 10051f8:	018003c4 	movi	r6,15
 10051fc:	35404b36 	bltu	r6,r21,100532c <_malloc_r+0x5e8>
 1005200:	00800044 	movi	r2,1
 1005204:	a0800115 	stw	r2,4(r20)
 1005208:	003fcd06 	br	1005140 <_malloc_r+0x3fc>
 100520c:	2808d27a 	srli	r4,r5,9
 1005210:	2000371e 	bne	r4,zero,10052f0 <_malloc_r+0x5ac>
 1005214:	2808d0fa 	srli	r4,r5,3
 1005218:	200690fa 	slli	r3,r4,3
 100521c:	1ad1883a 	add	r8,r3,r11
 1005220:	41800217 	ldw	r6,8(r8)
 1005224:	41805b26 	beq	r8,r6,1005394 <_malloc_r+0x650>
 1005228:	30800117 	ldw	r2,4(r6)
 100522c:	00ffff04 	movi	r3,-4
 1005230:	10c4703a 	and	r2,r2,r3
 1005234:	2880022e 	bgeu	r5,r2,1005240 <_malloc_r+0x4fc>
 1005238:	31800217 	ldw	r6,8(r6)
 100523c:	41bffa1e 	bne	r8,r6,1005228 <_malloc_r+0x4e4>
 1005240:	32000317 	ldw	r8,12(r6)
 1005244:	39c00117 	ldw	r7,4(r7)
 1005248:	82000315 	stw	r8,12(r16)
 100524c:	81800215 	stw	r6,8(r16)
 1005250:	07004074 	movhi	fp,257
 1005254:	e7087c04 	addi	fp,fp,8688
 1005258:	34000315 	stw	r16,12(r6)
 100525c:	44000215 	stw	r16,8(r8)
 1005260:	003f3e06 	br	1004f5c <_malloc_r+0x218>
 1005264:	63000044 	addi	r12,r12,1
 1005268:	608000cc 	andi	r2,r12,3
 100526c:	10005d26 	beq	r2,zero,10053e4 <_malloc_r+0x6a0>
 1005270:	18c00204 	addi	r3,r3,8
 1005274:	003f5106 	br	1004fbc <_malloc_r+0x278>
 1005278:	8089883a 	add	r4,r16,r2
 100527c:	003f6d06 	br	1005034 <_malloc_r+0x2f0>
 1005280:	00805504 	movi	r2,340
 1005284:	10c02036 	bltu	r2,r3,1005308 <_malloc_r+0x5c4>
 1005288:	8804d3fa 	srli	r2,r17,15
 100528c:	11801dc4 	addi	r6,r2,119
 1005290:	300490fa 	slli	r2,r6,3
 1005294:	003ed806 	br	1004df8 <_malloc_r+0xb4>
 1005298:	48c000c4 	addi	r3,r9,3
 100529c:	003f3106 	br	1004f64 <_malloc_r+0x220>
 10052a0:	05c04074 	movhi	r23,257
 10052a4:	bdd5f704 	addi	r23,r23,22492
 10052a8:	b8800017 	ldw	r2,0(r23)
 10052ac:	988d883a 	add	r6,r19,r2
 10052b0:	b9800015 	stw	r6,0(r23)
 10052b4:	293fb21e 	bne	r5,r4,1005180 <_malloc_r+0x43c>
 10052b8:	2083ffcc 	andi	r2,r4,4095
 10052bc:	103fb01e 	bne	r2,zero,1005180 <_malloc_r+0x43c>
 10052c0:	e4000217 	ldw	r16,8(fp)
 10052c4:	9d45883a 	add	r2,r19,r21
 10052c8:	10800054 	ori	r2,r2,1
 10052cc:	80800115 	stw	r2,4(r16)
 10052d0:	b8c00017 	ldw	r3,0(r23)
 10052d4:	d0a6c817 	ldw	r2,-25824(gp)
 10052d8:	10c0012e 	bgeu	r2,r3,10052e0 <_malloc_r+0x59c>
 10052dc:	d0e6c815 	stw	r3,-25824(gp)
 10052e0:	d0a6c917 	ldw	r2,-25820(gp)
 10052e4:	10ff962e 	bgeu	r2,r3,1005140 <_malloc_r+0x3fc>
 10052e8:	d0e6c915 	stw	r3,-25820(gp)
 10052ec:	003f9406 	br	1005140 <_malloc_r+0x3fc>
 10052f0:	00800104 	movi	r2,4
 10052f4:	11001e36 	bltu	r2,r4,1005370 <_malloc_r+0x62c>
 10052f8:	2804d1ba 	srli	r2,r5,6
 10052fc:	11000e04 	addi	r4,r2,56
 1005300:	200690fa 	slli	r3,r4,3
 1005304:	003fc506 	br	100521c <_malloc_r+0x4d8>
 1005308:	00815504 	movi	r2,1364
 100530c:	10c01d2e 	bgeu	r2,r3,1005384 <_malloc_r+0x640>
 1005310:	01801f84 	movi	r6,126
 1005314:	0080fc04 	movi	r2,1008
 1005318:	003eb706 	br	1004df8 <_malloc_r+0xb4>
 100531c:	00800204 	movi	r2,8
 1005320:	10cbc83a 	sub	r5,r2,r3
 1005324:	2169883a 	add	r20,r4,r5
 1005328:	003f9e06 	br	10051a4 <_malloc_r+0x460>
 100532c:	00bffe04 	movi	r2,-8
 1005330:	a93ffd04 	addi	r4,r21,-12
 1005334:	2088703a 	and	r4,r4,r2
 1005338:	b10b883a 	add	r5,r22,r4
 100533c:	00c00144 	movi	r3,5
 1005340:	28c00215 	stw	r3,8(r5)
 1005344:	28c00115 	stw	r3,4(r5)
 1005348:	b0800117 	ldw	r2,4(r22)
 100534c:	1080004c 	andi	r2,r2,1
 1005350:	2084b03a 	or	r2,r4,r2
 1005354:	b0800115 	stw	r2,4(r22)
 1005358:	313fdd2e 	bgeu	r6,r4,10052d0 <_malloc_r+0x58c>
 100535c:	b1400204 	addi	r5,r22,8
 1005360:	9009883a 	mov	r4,r18
 1005364:	10095580 	call	1009558 <_free_r>
 1005368:	e4000217 	ldw	r16,8(fp)
 100536c:	003fd806 	br	10052d0 <_malloc_r+0x58c>
 1005370:	00800504 	movi	r2,20
 1005374:	11001536 	bltu	r2,r4,10053cc <_malloc_r+0x688>
 1005378:	210016c4 	addi	r4,r4,91
 100537c:	200690fa 	slli	r3,r4,3
 1005380:	003fa606 	br	100521c <_malloc_r+0x4d8>
 1005384:	8804d4ba 	srli	r2,r17,18
 1005388:	11801f04 	addi	r6,r2,124
 100538c:	300490fa 	slli	r2,r6,3
 1005390:	003e9906 	br	1004df8 <_malloc_r+0xb4>
 1005394:	2009d0ba 	srai	r4,r4,2
 1005398:	01404074 	movhi	r5,257
 100539c:	29487c04 	addi	r5,r5,8688
 10053a0:	00c00044 	movi	r3,1
 10053a4:	28800117 	ldw	r2,4(r5)
 10053a8:	1906983a 	sll	r3,r3,r4
 10053ac:	10c4b03a 	or	r2,r2,r3
 10053b0:	28800115 	stw	r2,4(r5)
 10053b4:	003fa306 	br	1005244 <_malloc_r+0x500>
 10053b8:	0027883a 	mov	r19,zero
 10053bc:	00c00044 	movi	r3,1
 10053c0:	003f8606 	br	10051dc <_malloc_r+0x498>
 10053c4:	d1200115 	stw	r4,-32764(gp)
 10053c8:	003f7306 	br	1005198 <_malloc_r+0x454>
 10053cc:	00801504 	movi	r2,84
 10053d0:	11001936 	bltu	r2,r4,1005438 <_malloc_r+0x6f4>
 10053d4:	2804d33a 	srli	r2,r5,12
 10053d8:	11001b84 	addi	r4,r2,110
 10053dc:	200690fa 	slli	r3,r4,3
 10053e0:	003f8e06 	br	100521c <_malloc_r+0x4d8>
 10053e4:	480b883a 	mov	r5,r9
 10053e8:	6807883a 	mov	r3,r13
 10053ec:	288000cc 	andi	r2,r5,3
 10053f0:	18fffe04 	addi	r3,r3,-8
 10053f4:	297fffc4 	addi	r5,r5,-1
 10053f8:	10001526 	beq	r2,zero,1005450 <_malloc_r+0x70c>
 10053fc:	18800217 	ldw	r2,8(r3)
 1005400:	10fffa26 	beq	r2,r3,10053ec <_malloc_r+0x6a8>
 1005404:	2109883a 	add	r4,r4,r4
 1005408:	393f1e36 	bltu	r7,r4,1005084 <_malloc_r+0x340>
 100540c:	203f1d26 	beq	r4,zero,1005084 <_malloc_r+0x340>
 1005410:	21c4703a 	and	r2,r4,r7
 1005414:	10000226 	beq	r2,zero,1005420 <_malloc_r+0x6dc>
 1005418:	6013883a 	mov	r9,r12
 100541c:	003ee106 	br	1004fa4 <_malloc_r+0x260>
 1005420:	2109883a 	add	r4,r4,r4
 1005424:	3904703a 	and	r2,r7,r4
 1005428:	63000104 	addi	r12,r12,4
 100542c:	103ffc26 	beq	r2,zero,1005420 <_malloc_r+0x6dc>
 1005430:	6013883a 	mov	r9,r12
 1005434:	003edb06 	br	1004fa4 <_malloc_r+0x260>
 1005438:	00805504 	movi	r2,340
 100543c:	11000836 	bltu	r2,r4,1005460 <_malloc_r+0x71c>
 1005440:	2804d3fa 	srli	r2,r5,15
 1005444:	11001dc4 	addi	r4,r2,119
 1005448:	200690fa 	slli	r3,r4,3
 100544c:	003f7306 	br	100521c <_malloc_r+0x4d8>
 1005450:	0104303a 	nor	r2,zero,r4
 1005454:	388e703a 	and	r7,r7,r2
 1005458:	e1c00115 	stw	r7,4(fp)
 100545c:	003fe906 	br	1005404 <_malloc_r+0x6c0>
 1005460:	00815504 	movi	r2,1364
 1005464:	1100032e 	bgeu	r2,r4,1005474 <_malloc_r+0x730>
 1005468:	01001f84 	movi	r4,126
 100546c:	00c0fc04 	movi	r3,1008
 1005470:	003f6a06 	br	100521c <_malloc_r+0x4d8>
 1005474:	2804d4ba 	srli	r2,r5,18
 1005478:	11001f04 	addi	r4,r2,124
 100547c:	200690fa 	slli	r3,r4,3
 1005480:	003f6606 	br	100521c <_malloc_r+0x4d8>

01005484 <printf>:
 1005484:	defffb04 	addi	sp,sp,-20
 1005488:	dfc00115 	stw	ra,4(sp)
 100548c:	d9400215 	stw	r5,8(sp)
 1005490:	d9800315 	stw	r6,12(sp)
 1005494:	d9c00415 	stw	r7,16(sp)
 1005498:	00804074 	movhi	r2,257
 100549c:	108f2504 	addi	r2,r2,15508
 10054a0:	10c00017 	ldw	r3,0(r2)
 10054a4:	200b883a 	mov	r5,r4
 10054a8:	d8800204 	addi	r2,sp,8
 10054ac:	19000217 	ldw	r4,8(r3)
 10054b0:	100d883a 	mov	r6,r2
 10054b4:	d8800015 	stw	r2,0(sp)
 10054b8:	10075b00 	call	10075b0 <__vfprintf_internal>
 10054bc:	dfc00117 	ldw	ra,4(sp)
 10054c0:	dec00504 	addi	sp,sp,20
 10054c4:	f800283a 	ret

010054c8 <_printf_r>:
 10054c8:	defffc04 	addi	sp,sp,-16
 10054cc:	dfc00115 	stw	ra,4(sp)
 10054d0:	d9800215 	stw	r6,8(sp)
 10054d4:	d9c00315 	stw	r7,12(sp)
 10054d8:	280d883a 	mov	r6,r5
 10054dc:	21400217 	ldw	r5,8(r4)
 10054e0:	d8c00204 	addi	r3,sp,8
 10054e4:	180f883a 	mov	r7,r3
 10054e8:	d8c00015 	stw	r3,0(sp)
 10054ec:	10056ec0 	call	10056ec <___vfprintf_internal_r>
 10054f0:	dfc00117 	ldw	ra,4(sp)
 10054f4:	dec00404 	addi	sp,sp,16
 10054f8:	f800283a 	ret

010054fc <_puts_r>:
 10054fc:	defff604 	addi	sp,sp,-40
 1005500:	dc400715 	stw	r17,28(sp)
 1005504:	2023883a 	mov	r17,r4
 1005508:	2809883a 	mov	r4,r5
 100550c:	dfc00915 	stw	ra,36(sp)
 1005510:	dcc00815 	stw	r19,32(sp)
 1005514:	2827883a 	mov	r19,r5
 1005518:	10056200 	call	1005620 <strlen>
 100551c:	89400217 	ldw	r5,8(r17)
 1005520:	00c04074 	movhi	r3,257
 1005524:	18c7e404 	addi	r3,r3,8080
 1005528:	01c00044 	movi	r7,1
 100552c:	12000044 	addi	r8,r2,1
 1005530:	d8c00515 	stw	r3,20(sp)
 1005534:	d9c00615 	stw	r7,24(sp)
 1005538:	d8c00304 	addi	r3,sp,12
 100553c:	01c00084 	movi	r7,2
 1005540:	8809883a 	mov	r4,r17
 1005544:	d80d883a 	mov	r6,sp
 1005548:	d8c00015 	stw	r3,0(sp)
 100554c:	dcc00315 	stw	r19,12(sp)
 1005550:	da000215 	stw	r8,8(sp)
 1005554:	d9c00115 	stw	r7,4(sp)
 1005558:	d8800415 	stw	r2,16(sp)
 100555c:	100986c0 	call	100986c <__sfvwrite_r>
 1005560:	00ffffc4 	movi	r3,-1
 1005564:	10000626 	beq	r2,zero,1005580 <_puts_r+0x84>
 1005568:	1805883a 	mov	r2,r3
 100556c:	dfc00917 	ldw	ra,36(sp)
 1005570:	dcc00817 	ldw	r19,32(sp)
 1005574:	dc400717 	ldw	r17,28(sp)
 1005578:	dec00a04 	addi	sp,sp,40
 100557c:	f800283a 	ret
 1005580:	00c00284 	movi	r3,10
 1005584:	1805883a 	mov	r2,r3
 1005588:	dfc00917 	ldw	ra,36(sp)
 100558c:	dcc00817 	ldw	r19,32(sp)
 1005590:	dc400717 	ldw	r17,28(sp)
 1005594:	dec00a04 	addi	sp,sp,40
 1005598:	f800283a 	ret

0100559c <puts>:
 100559c:	00804074 	movhi	r2,257
 10055a0:	108f2504 	addi	r2,r2,15508
 10055a4:	200b883a 	mov	r5,r4
 10055a8:	11000017 	ldw	r4,0(r2)
 10055ac:	10054fc1 	jmpi	10054fc <_puts_r>

010055b0 <_sbrk_r>:
 10055b0:	defffd04 	addi	sp,sp,-12
 10055b4:	dc000015 	stw	r16,0(sp)
 10055b8:	04004074 	movhi	r16,257
 10055bc:	8415ed04 	addi	r16,r16,22452
 10055c0:	dc400115 	stw	r17,4(sp)
 10055c4:	80000015 	stw	zero,0(r16)
 10055c8:	2023883a 	mov	r17,r4
 10055cc:	2809883a 	mov	r4,r5
 10055d0:	dfc00215 	stw	ra,8(sp)
 10055d4:	100dc140 	call	100dc14 <sbrk>
 10055d8:	1007883a 	mov	r3,r2
 10055dc:	00bfffc4 	movi	r2,-1
 10055e0:	18800626 	beq	r3,r2,10055fc <_sbrk_r+0x4c>
 10055e4:	1805883a 	mov	r2,r3
 10055e8:	dfc00217 	ldw	ra,8(sp)
 10055ec:	dc400117 	ldw	r17,4(sp)
 10055f0:	dc000017 	ldw	r16,0(sp)
 10055f4:	dec00304 	addi	sp,sp,12
 10055f8:	f800283a 	ret
 10055fc:	80800017 	ldw	r2,0(r16)
 1005600:	103ff826 	beq	r2,zero,10055e4 <_sbrk_r+0x34>
 1005604:	88800015 	stw	r2,0(r17)
 1005608:	1805883a 	mov	r2,r3
 100560c:	dfc00217 	ldw	ra,8(sp)
 1005610:	dc400117 	ldw	r17,4(sp)
 1005614:	dc000017 	ldw	r16,0(sp)
 1005618:	dec00304 	addi	sp,sp,12
 100561c:	f800283a 	ret

01005620 <strlen>:
 1005620:	208000cc 	andi	r2,r4,3
 1005624:	2011883a 	mov	r8,r4
 1005628:	1000161e 	bne	r2,zero,1005684 <strlen+0x64>
 100562c:	20c00017 	ldw	r3,0(r4)
 1005630:	017fbff4 	movhi	r5,65279
 1005634:	297fbfc4 	addi	r5,r5,-257
 1005638:	01e02074 	movhi	r7,32897
 100563c:	39e02004 	addi	r7,r7,-32640
 1005640:	1945883a 	add	r2,r3,r5
 1005644:	11c4703a 	and	r2,r2,r7
 1005648:	00c6303a 	nor	r3,zero,r3
 100564c:	1886703a 	and	r3,r3,r2
 1005650:	18000c1e 	bne	r3,zero,1005684 <strlen+0x64>
 1005654:	280d883a 	mov	r6,r5
 1005658:	380b883a 	mov	r5,r7
 100565c:	21000104 	addi	r4,r4,4
 1005660:	20800017 	ldw	r2,0(r4)
 1005664:	1187883a 	add	r3,r2,r6
 1005668:	1946703a 	and	r3,r3,r5
 100566c:	0084303a 	nor	r2,zero,r2
 1005670:	10c4703a 	and	r2,r2,r3
 1005674:	103ff926 	beq	r2,zero,100565c <strlen+0x3c>
 1005678:	20800007 	ldb	r2,0(r4)
 100567c:	10000326 	beq	r2,zero,100568c <strlen+0x6c>
 1005680:	21000044 	addi	r4,r4,1
 1005684:	20800007 	ldb	r2,0(r4)
 1005688:	103ffd1e 	bne	r2,zero,1005680 <strlen+0x60>
 100568c:	2205c83a 	sub	r2,r4,r8
 1005690:	f800283a 	ret

01005694 <__sprint_r>:
 1005694:	30800217 	ldw	r2,8(r6)
 1005698:	defffe04 	addi	sp,sp,-8
 100569c:	dc000015 	stw	r16,0(sp)
 10056a0:	dfc00115 	stw	ra,4(sp)
 10056a4:	3021883a 	mov	r16,r6
 10056a8:	0007883a 	mov	r3,zero
 10056ac:	1000061e 	bne	r2,zero,10056c8 <__sprint_r+0x34>
 10056b0:	1805883a 	mov	r2,r3
 10056b4:	30000115 	stw	zero,4(r6)
 10056b8:	dfc00117 	ldw	ra,4(sp)
 10056bc:	dc000017 	ldw	r16,0(sp)
 10056c0:	dec00204 	addi	sp,sp,8
 10056c4:	f800283a 	ret
 10056c8:	100986c0 	call	100986c <__sfvwrite_r>
 10056cc:	1007883a 	mov	r3,r2
 10056d0:	1805883a 	mov	r2,r3
 10056d4:	80000115 	stw	zero,4(r16)
 10056d8:	80000215 	stw	zero,8(r16)
 10056dc:	dfc00117 	ldw	ra,4(sp)
 10056e0:	dc000017 	ldw	r16,0(sp)
 10056e4:	dec00204 	addi	sp,sp,8
 10056e8:	f800283a 	ret

010056ec <___vfprintf_internal_r>:
 10056ec:	defea404 	addi	sp,sp,-1392
 10056f0:	dd815815 	stw	r22,1376(sp)
 10056f4:	dc015215 	stw	r16,1352(sp)
 10056f8:	d9c15115 	stw	r7,1348(sp)
 10056fc:	dfc15b15 	stw	ra,1388(sp)
 1005700:	df015a15 	stw	fp,1384(sp)
 1005704:	ddc15915 	stw	r23,1380(sp)
 1005708:	dd415715 	stw	r21,1372(sp)
 100570c:	dd015615 	stw	r20,1368(sp)
 1005710:	dcc15515 	stw	r19,1364(sp)
 1005714:	dc815415 	stw	r18,1360(sp)
 1005718:	dc415315 	stw	r17,1356(sp)
 100571c:	282d883a 	mov	r22,r5
 1005720:	3021883a 	mov	r16,r6
 1005724:	d9014f15 	stw	r4,1340(sp)
 1005728:	1009e900 	call	1009e90 <_localeconv_r>
 100572c:	10800017 	ldw	r2,0(r2)
 1005730:	d9c15117 	ldw	r7,1348(sp)
 1005734:	d8814915 	stw	r2,1316(sp)
 1005738:	d8814f17 	ldw	r2,1340(sp)
 100573c:	10000226 	beq	r2,zero,1005748 <___vfprintf_internal_r+0x5c>
 1005740:	10800e17 	ldw	r2,56(r2)
 1005744:	10020d26 	beq	r2,zero,1005f7c <___vfprintf_internal_r+0x890>
 1005748:	b080030b 	ldhu	r2,12(r22)
 100574c:	1080020c 	andi	r2,r2,8
 1005750:	10020e26 	beq	r2,zero,1005f8c <___vfprintf_internal_r+0x8a0>
 1005754:	b0800417 	ldw	r2,16(r22)
 1005758:	10020c26 	beq	r2,zero,1005f8c <___vfprintf_internal_r+0x8a0>
 100575c:	b200030b 	ldhu	r8,12(r22)
 1005760:	00800284 	movi	r2,10
 1005764:	40c0068c 	andi	r3,r8,26
 1005768:	18802f1e 	bne	r3,r2,1005828 <___vfprintf_internal_r+0x13c>
 100576c:	b080038f 	ldh	r2,14(r22)
 1005770:	10002d16 	blt	r2,zero,1005828 <___vfprintf_internal_r+0x13c>
 1005774:	b240038b 	ldhu	r9,14(r22)
 1005778:	b2800717 	ldw	r10,28(r22)
 100577c:	b2c00917 	ldw	r11,36(r22)
 1005780:	d9014f17 	ldw	r4,1340(sp)
 1005784:	dc402904 	addi	r17,sp,164
 1005788:	d8804004 	addi	r2,sp,256
 100578c:	00c10004 	movi	r3,1024
 1005790:	423fff4c 	andi	r8,r8,65533
 1005794:	800d883a 	mov	r6,r16
 1005798:	880b883a 	mov	r5,r17
 100579c:	da002c0d 	sth	r8,176(sp)
 10057a0:	da402c8d 	sth	r9,178(sp)
 10057a4:	da803015 	stw	r10,192(sp)
 10057a8:	dac03215 	stw	r11,200(sp)
 10057ac:	d8802d15 	stw	r2,180(sp)
 10057b0:	d8c02e15 	stw	r3,184(sp)
 10057b4:	d8802915 	stw	r2,164(sp)
 10057b8:	d8c02b15 	stw	r3,172(sp)
 10057bc:	d8002f15 	stw	zero,188(sp)
 10057c0:	10056ec0 	call	10056ec <___vfprintf_internal_r>
 10057c4:	d8814b15 	stw	r2,1324(sp)
 10057c8:	10000416 	blt	r2,zero,10057dc <___vfprintf_internal_r+0xf0>
 10057cc:	d9014f17 	ldw	r4,1340(sp)
 10057d0:	880b883a 	mov	r5,r17
 10057d4:	1008f080 	call	1008f08 <_fflush_r>
 10057d8:	1002321e 	bne	r2,zero,10060a4 <___vfprintf_internal_r+0x9b8>
 10057dc:	d8802c0b 	ldhu	r2,176(sp)
 10057e0:	1080100c 	andi	r2,r2,64
 10057e4:	10000326 	beq	r2,zero,10057f4 <___vfprintf_internal_r+0x108>
 10057e8:	b080030b 	ldhu	r2,12(r22)
 10057ec:	10801014 	ori	r2,r2,64
 10057f0:	b080030d 	sth	r2,12(r22)
 10057f4:	d8814b17 	ldw	r2,1324(sp)
 10057f8:	dfc15b17 	ldw	ra,1388(sp)
 10057fc:	df015a17 	ldw	fp,1384(sp)
 1005800:	ddc15917 	ldw	r23,1380(sp)
 1005804:	dd815817 	ldw	r22,1376(sp)
 1005808:	dd415717 	ldw	r21,1372(sp)
 100580c:	dd015617 	ldw	r20,1368(sp)
 1005810:	dcc15517 	ldw	r19,1364(sp)
 1005814:	dc815417 	ldw	r18,1360(sp)
 1005818:	dc415317 	ldw	r17,1356(sp)
 100581c:	dc015217 	ldw	r16,1352(sp)
 1005820:	dec15c04 	addi	sp,sp,1392
 1005824:	f800283a 	ret
 1005828:	0005883a 	mov	r2,zero
 100582c:	0007883a 	mov	r3,zero
 1005830:	dd401904 	addi	r21,sp,100
 1005834:	d8814215 	stw	r2,1288(sp)
 1005838:	802f883a 	mov	r23,r16
 100583c:	d8c14315 	stw	r3,1292(sp)
 1005840:	d8014b15 	stw	zero,1324(sp)
 1005844:	d8014815 	stw	zero,1312(sp)
 1005848:	d8014415 	stw	zero,1296(sp)
 100584c:	d8014715 	stw	zero,1308(sp)
 1005850:	dd400c15 	stw	r21,48(sp)
 1005854:	d8000e15 	stw	zero,56(sp)
 1005858:	d8000d15 	stw	zero,52(sp)
 100585c:	b8800007 	ldb	r2,0(r23)
 1005860:	10001926 	beq	r2,zero,10058c8 <___vfprintf_internal_r+0x1dc>
 1005864:	00c00944 	movi	r3,37
 1005868:	10c01726 	beq	r2,r3,10058c8 <___vfprintf_internal_r+0x1dc>
 100586c:	b821883a 	mov	r16,r23
 1005870:	00000106 	br	1005878 <___vfprintf_internal_r+0x18c>
 1005874:	10c00326 	beq	r2,r3,1005884 <___vfprintf_internal_r+0x198>
 1005878:	84000044 	addi	r16,r16,1
 100587c:	80800007 	ldb	r2,0(r16)
 1005880:	103ffc1e 	bne	r2,zero,1005874 <___vfprintf_internal_r+0x188>
 1005884:	85e7c83a 	sub	r19,r16,r23
 1005888:	98000e26 	beq	r19,zero,10058c4 <___vfprintf_internal_r+0x1d8>
 100588c:	dc800e17 	ldw	r18,56(sp)
 1005890:	dc400d17 	ldw	r17,52(sp)
 1005894:	008001c4 	movi	r2,7
 1005898:	94e5883a 	add	r18,r18,r19
 100589c:	8c400044 	addi	r17,r17,1
 10058a0:	adc00015 	stw	r23,0(r21)
 10058a4:	dc800e15 	stw	r18,56(sp)
 10058a8:	acc00115 	stw	r19,4(r21)
 10058ac:	dc400d15 	stw	r17,52(sp)
 10058b0:	14428b16 	blt	r2,r17,10062e0 <___vfprintf_internal_r+0xbf4>
 10058b4:	ad400204 	addi	r21,r21,8
 10058b8:	d9014b17 	ldw	r4,1324(sp)
 10058bc:	24c9883a 	add	r4,r4,r19
 10058c0:	d9014b15 	stw	r4,1324(sp)
 10058c4:	802f883a 	mov	r23,r16
 10058c8:	b8800007 	ldb	r2,0(r23)
 10058cc:	10013c26 	beq	r2,zero,1005dc0 <___vfprintf_internal_r+0x6d4>
 10058d0:	bdc00044 	addi	r23,r23,1
 10058d4:	d8000405 	stb	zero,16(sp)
 10058d8:	b8c00007 	ldb	r3,0(r23)
 10058dc:	04ffffc4 	movi	r19,-1
 10058e0:	d8014c15 	stw	zero,1328(sp)
 10058e4:	d8014a15 	stw	zero,1320(sp)
 10058e8:	d8c14d15 	stw	r3,1332(sp)
 10058ec:	bdc00044 	addi	r23,r23,1
 10058f0:	d9414d17 	ldw	r5,1332(sp)
 10058f4:	00801604 	movi	r2,88
 10058f8:	28fff804 	addi	r3,r5,-32
 10058fc:	10c06036 	bltu	r2,r3,1005a80 <___vfprintf_internal_r+0x394>
 1005900:	18c5883a 	add	r2,r3,r3
 1005904:	1085883a 	add	r2,r2,r2
 1005908:	00c04034 	movhi	r3,256
 100590c:	18d64704 	addi	r3,r3,22812
 1005910:	10c5883a 	add	r2,r2,r3
 1005914:	11000017 	ldw	r4,0(r2)
 1005918:	2000683a 	jmp	r4
 100591c:	01006890 	cmplti	r4,zero,418
 1005920:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005924:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005928:	0100687c 	xorhi	r4,zero,417
 100592c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005930:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005934:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005938:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 100593c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005940:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005944:	0100665c 	xori	r4,zero,409
 1005948:	0100686c 	andhi	r4,zero,417
 100594c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005950:	01006674 	movhi	r4,409
 1005954:	01006914 	movui	r4,420
 1005958:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 100595c:	01006900 	call	100690 <__alt_mem_onchip_memory2_0+0x100690>
 1005960:	010068bc 	xorhi	r4,zero,418
 1005964:	010068bc 	xorhi	r4,zero,418
 1005968:	010068bc 	xorhi	r4,zero,418
 100596c:	010068bc 	xorhi	r4,zero,418
 1005970:	010068bc 	xorhi	r4,zero,418
 1005974:	010068bc 	xorhi	r4,zero,418
 1005978:	010068bc 	xorhi	r4,zero,418
 100597c:	010068bc 	xorhi	r4,zero,418
 1005980:	010068bc 	xorhi	r4,zero,418
 1005984:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005988:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 100598c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005990:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005994:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005998:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 100599c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059a0:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059a4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059a8:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059ac:	010060d8 	cmpnei	r4,zero,387
 10059b0:	01006744 	movi	r4,413
 10059b4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059b8:	01006744 	movi	r4,413
 10059bc:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059c0:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059c4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059c8:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059cc:	010068a8 	cmpgeui	r4,zero,418
 10059d0:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059d4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059d8:	0100618c 	andi	r4,zero,390
 10059dc:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059e0:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059e4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059e8:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059ec:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059f0:	010061d8 	cmpnei	r4,zero,391
 10059f4:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059f8:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 10059fc:	010067f8 	rdprs	r4,zero,415
 1005a00:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a04:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a08:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a0c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a10:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a14:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a18:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a1c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a20:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a24:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a28:	010067cc 	andi	r4,zero,415
 1005a2c:	010060e4 	muli	r4,zero,387
 1005a30:	01006744 	movi	r4,413
 1005a34:	01006744 	movi	r4,413
 1005a38:	01006744 	movi	r4,413
 1005a3c:	01006730 	cmpltui	r4,zero,412
 1005a40:	010060e4 	muli	r4,zero,387
 1005a44:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a48:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a4c:	010066b8 	rdprs	r4,zero,410
 1005a50:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a54:	01006688 	cmpgei	r4,zero,410
 1005a58:	01006198 	cmpnei	r4,zero,390
 1005a5c:	010066e8 	cmpgeui	r4,zero,411
 1005a60:	010066d4 	movui	r4,411
 1005a64:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a68:	0100697c 	xorhi	r4,zero,421
 1005a6c:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a70:	010061e4 	muli	r4,zero,391
 1005a74:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a78:	01005a80 	call	1005a8 <__alt_mem_onchip_memory2_0+0x1005a8>
 1005a7c:	0100685c 	xori	r4,zero,417
 1005a80:	d9014d17 	ldw	r4,1332(sp)
 1005a84:	2000ce26 	beq	r4,zero,1005dc0 <___vfprintf_internal_r+0x6d4>
 1005a88:	01400044 	movi	r5,1
 1005a8c:	d9800f04 	addi	r6,sp,60
 1005a90:	d9c14015 	stw	r7,1280(sp)
 1005a94:	d9414515 	stw	r5,1300(sp)
 1005a98:	d9814115 	stw	r6,1284(sp)
 1005a9c:	280f883a 	mov	r7,r5
 1005aa0:	d9000f05 	stb	r4,60(sp)
 1005aa4:	d8000405 	stb	zero,16(sp)
 1005aa8:	d8014615 	stw	zero,1304(sp)
 1005aac:	d8c14c17 	ldw	r3,1328(sp)
 1005ab0:	1880008c 	andi	r2,r3,2
 1005ab4:	1005003a 	cmpeq	r2,r2,zero
 1005ab8:	d8815015 	stw	r2,1344(sp)
 1005abc:	1000031e 	bne	r2,zero,1005acc <___vfprintf_internal_r+0x3e0>
 1005ac0:	d9014517 	ldw	r4,1300(sp)
 1005ac4:	21000084 	addi	r4,r4,2
 1005ac8:	d9014515 	stw	r4,1300(sp)
 1005acc:	d9414c17 	ldw	r5,1328(sp)
 1005ad0:	2940210c 	andi	r5,r5,132
 1005ad4:	d9414e15 	stw	r5,1336(sp)
 1005ad8:	28002d1e 	bne	r5,zero,1005b90 <___vfprintf_internal_r+0x4a4>
 1005adc:	d9814a17 	ldw	r6,1320(sp)
 1005ae0:	d8814517 	ldw	r2,1300(sp)
 1005ae4:	30a1c83a 	sub	r16,r6,r2
 1005ae8:	0400290e 	bge	zero,r16,1005b90 <___vfprintf_internal_r+0x4a4>
 1005aec:	00800404 	movi	r2,16
 1005af0:	14045e0e 	bge	r2,r16,1006c6c <___vfprintf_internal_r+0x1580>
 1005af4:	dc800e17 	ldw	r18,56(sp)
 1005af8:	dc400d17 	ldw	r17,52(sp)
 1005afc:	1027883a 	mov	r19,r2
 1005b00:	07004074 	movhi	fp,257
 1005b04:	e7080084 	addi	fp,fp,8194
 1005b08:	050001c4 	movi	r20,7
 1005b0c:	00000306 	br	1005b1c <___vfprintf_internal_r+0x430>
 1005b10:	843ffc04 	addi	r16,r16,-16
 1005b14:	ad400204 	addi	r21,r21,8
 1005b18:	9c00130e 	bge	r19,r16,1005b68 <___vfprintf_internal_r+0x47c>
 1005b1c:	94800404 	addi	r18,r18,16
 1005b20:	8c400044 	addi	r17,r17,1
 1005b24:	af000015 	stw	fp,0(r21)
 1005b28:	acc00115 	stw	r19,4(r21)
 1005b2c:	dc800e15 	stw	r18,56(sp)
 1005b30:	dc400d15 	stw	r17,52(sp)
 1005b34:	a47ff60e 	bge	r20,r17,1005b10 <___vfprintf_internal_r+0x424>
 1005b38:	d9014f17 	ldw	r4,1340(sp)
 1005b3c:	b00b883a 	mov	r5,r22
 1005b40:	d9800c04 	addi	r6,sp,48
 1005b44:	d9c15115 	stw	r7,1348(sp)
 1005b48:	10056940 	call	1005694 <__sprint_r>
 1005b4c:	d9c15117 	ldw	r7,1348(sp)
 1005b50:	10009e1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1005b54:	843ffc04 	addi	r16,r16,-16
 1005b58:	dc800e17 	ldw	r18,56(sp)
 1005b5c:	dc400d17 	ldw	r17,52(sp)
 1005b60:	dd401904 	addi	r21,sp,100
 1005b64:	9c3fed16 	blt	r19,r16,1005b1c <___vfprintf_internal_r+0x430>
 1005b68:	9425883a 	add	r18,r18,r16
 1005b6c:	8c400044 	addi	r17,r17,1
 1005b70:	008001c4 	movi	r2,7
 1005b74:	af000015 	stw	fp,0(r21)
 1005b78:	ac000115 	stw	r16,4(r21)
 1005b7c:	dc800e15 	stw	r18,56(sp)
 1005b80:	dc400d15 	stw	r17,52(sp)
 1005b84:	1441f516 	blt	r2,r17,100635c <___vfprintf_internal_r+0xc70>
 1005b88:	ad400204 	addi	r21,r21,8
 1005b8c:	00000206 	br	1005b98 <___vfprintf_internal_r+0x4ac>
 1005b90:	dc800e17 	ldw	r18,56(sp)
 1005b94:	dc400d17 	ldw	r17,52(sp)
 1005b98:	d8800407 	ldb	r2,16(sp)
 1005b9c:	10000b26 	beq	r2,zero,1005bcc <___vfprintf_internal_r+0x4e0>
 1005ba0:	00800044 	movi	r2,1
 1005ba4:	94800044 	addi	r18,r18,1
 1005ba8:	8c400044 	addi	r17,r17,1
 1005bac:	a8800115 	stw	r2,4(r21)
 1005bb0:	d8c00404 	addi	r3,sp,16
 1005bb4:	008001c4 	movi	r2,7
 1005bb8:	a8c00015 	stw	r3,0(r21)
 1005bbc:	dc800e15 	stw	r18,56(sp)
 1005bc0:	dc400d15 	stw	r17,52(sp)
 1005bc4:	1441da16 	blt	r2,r17,1006330 <___vfprintf_internal_r+0xc44>
 1005bc8:	ad400204 	addi	r21,r21,8
 1005bcc:	d9015017 	ldw	r4,1344(sp)
 1005bd0:	20000b1e 	bne	r4,zero,1005c00 <___vfprintf_internal_r+0x514>
 1005bd4:	d8800444 	addi	r2,sp,17
 1005bd8:	94800084 	addi	r18,r18,2
 1005bdc:	8c400044 	addi	r17,r17,1
 1005be0:	a8800015 	stw	r2,0(r21)
 1005be4:	00c00084 	movi	r3,2
 1005be8:	008001c4 	movi	r2,7
 1005bec:	a8c00115 	stw	r3,4(r21)
 1005bf0:	dc800e15 	stw	r18,56(sp)
 1005bf4:	dc400d15 	stw	r17,52(sp)
 1005bf8:	1441c216 	blt	r2,r17,1006304 <___vfprintf_internal_r+0xc18>
 1005bfc:	ad400204 	addi	r21,r21,8
 1005c00:	d9414e17 	ldw	r5,1336(sp)
 1005c04:	00802004 	movi	r2,128
 1005c08:	2880b126 	beq	r5,r2,1005ed0 <___vfprintf_internal_r+0x7e4>
 1005c0c:	d8c14617 	ldw	r3,1304(sp)
 1005c10:	19e1c83a 	sub	r16,r3,r7
 1005c14:	0400260e 	bge	zero,r16,1005cb0 <___vfprintf_internal_r+0x5c4>
 1005c18:	00800404 	movi	r2,16
 1005c1c:	1403cf0e 	bge	r2,r16,1006b5c <___vfprintf_internal_r+0x1470>
 1005c20:	1027883a 	mov	r19,r2
 1005c24:	07004074 	movhi	fp,257
 1005c28:	e707fc84 	addi	fp,fp,8178
 1005c2c:	050001c4 	movi	r20,7
 1005c30:	00000306 	br	1005c40 <___vfprintf_internal_r+0x554>
 1005c34:	843ffc04 	addi	r16,r16,-16
 1005c38:	ad400204 	addi	r21,r21,8
 1005c3c:	9c00130e 	bge	r19,r16,1005c8c <___vfprintf_internal_r+0x5a0>
 1005c40:	94800404 	addi	r18,r18,16
 1005c44:	8c400044 	addi	r17,r17,1
 1005c48:	af000015 	stw	fp,0(r21)
 1005c4c:	acc00115 	stw	r19,4(r21)
 1005c50:	dc800e15 	stw	r18,56(sp)
 1005c54:	dc400d15 	stw	r17,52(sp)
 1005c58:	a47ff60e 	bge	r20,r17,1005c34 <___vfprintf_internal_r+0x548>
 1005c5c:	d9014f17 	ldw	r4,1340(sp)
 1005c60:	b00b883a 	mov	r5,r22
 1005c64:	d9800c04 	addi	r6,sp,48
 1005c68:	d9c15115 	stw	r7,1348(sp)
 1005c6c:	10056940 	call	1005694 <__sprint_r>
 1005c70:	d9c15117 	ldw	r7,1348(sp)
 1005c74:	1000551e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1005c78:	843ffc04 	addi	r16,r16,-16
 1005c7c:	dc800e17 	ldw	r18,56(sp)
 1005c80:	dc400d17 	ldw	r17,52(sp)
 1005c84:	dd401904 	addi	r21,sp,100
 1005c88:	9c3fed16 	blt	r19,r16,1005c40 <___vfprintf_internal_r+0x554>
 1005c8c:	9425883a 	add	r18,r18,r16
 1005c90:	8c400044 	addi	r17,r17,1
 1005c94:	008001c4 	movi	r2,7
 1005c98:	af000015 	stw	fp,0(r21)
 1005c9c:	ac000115 	stw	r16,4(r21)
 1005ca0:	dc800e15 	stw	r18,56(sp)
 1005ca4:	dc400d15 	stw	r17,52(sp)
 1005ca8:	14418216 	blt	r2,r17,10062b4 <___vfprintf_internal_r+0xbc8>
 1005cac:	ad400204 	addi	r21,r21,8
 1005cb0:	d9014c17 	ldw	r4,1328(sp)
 1005cb4:	2080400c 	andi	r2,r4,256
 1005cb8:	10004a1e 	bne	r2,zero,1005de4 <___vfprintf_internal_r+0x6f8>
 1005cbc:	d9414117 	ldw	r5,1284(sp)
 1005cc0:	91e5883a 	add	r18,r18,r7
 1005cc4:	8c400044 	addi	r17,r17,1
 1005cc8:	008001c4 	movi	r2,7
 1005ccc:	a9400015 	stw	r5,0(r21)
 1005cd0:	a9c00115 	stw	r7,4(r21)
 1005cd4:	dc800e15 	stw	r18,56(sp)
 1005cd8:	dc400d15 	stw	r17,52(sp)
 1005cdc:	14416716 	blt	r2,r17,100627c <___vfprintf_internal_r+0xb90>
 1005ce0:	a8c00204 	addi	r3,r21,8
 1005ce4:	d9814c17 	ldw	r6,1328(sp)
 1005ce8:	3080010c 	andi	r2,r6,4
 1005cec:	10002826 	beq	r2,zero,1005d90 <___vfprintf_internal_r+0x6a4>
 1005cf0:	d8814a17 	ldw	r2,1320(sp)
 1005cf4:	d9014517 	ldw	r4,1300(sp)
 1005cf8:	1121c83a 	sub	r16,r2,r4
 1005cfc:	0400240e 	bge	zero,r16,1005d90 <___vfprintf_internal_r+0x6a4>
 1005d00:	00800404 	movi	r2,16
 1005d04:	1404550e 	bge	r2,r16,1006e5c <___vfprintf_internal_r+0x1770>
 1005d08:	dc400d17 	ldw	r17,52(sp)
 1005d0c:	1027883a 	mov	r19,r2
 1005d10:	07004074 	movhi	fp,257
 1005d14:	e7080084 	addi	fp,fp,8194
 1005d18:	050001c4 	movi	r20,7
 1005d1c:	00000306 	br	1005d2c <___vfprintf_internal_r+0x640>
 1005d20:	843ffc04 	addi	r16,r16,-16
 1005d24:	18c00204 	addi	r3,r3,8
 1005d28:	9c00110e 	bge	r19,r16,1005d70 <___vfprintf_internal_r+0x684>
 1005d2c:	94800404 	addi	r18,r18,16
 1005d30:	8c400044 	addi	r17,r17,1
 1005d34:	1f000015 	stw	fp,0(r3)
 1005d38:	1cc00115 	stw	r19,4(r3)
 1005d3c:	dc800e15 	stw	r18,56(sp)
 1005d40:	dc400d15 	stw	r17,52(sp)
 1005d44:	a47ff60e 	bge	r20,r17,1005d20 <___vfprintf_internal_r+0x634>
 1005d48:	d9014f17 	ldw	r4,1340(sp)
 1005d4c:	b00b883a 	mov	r5,r22
 1005d50:	d9800c04 	addi	r6,sp,48
 1005d54:	10056940 	call	1005694 <__sprint_r>
 1005d58:	10001c1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1005d5c:	843ffc04 	addi	r16,r16,-16
 1005d60:	dc800e17 	ldw	r18,56(sp)
 1005d64:	dc400d17 	ldw	r17,52(sp)
 1005d68:	d8c01904 	addi	r3,sp,100
 1005d6c:	9c3fef16 	blt	r19,r16,1005d2c <___vfprintf_internal_r+0x640>
 1005d70:	9425883a 	add	r18,r18,r16
 1005d74:	8c400044 	addi	r17,r17,1
 1005d78:	008001c4 	movi	r2,7
 1005d7c:	1f000015 	stw	fp,0(r3)
 1005d80:	1c000115 	stw	r16,4(r3)
 1005d84:	dc800e15 	stw	r18,56(sp)
 1005d88:	dc400d15 	stw	r17,52(sp)
 1005d8c:	1440cb16 	blt	r2,r17,10060bc <___vfprintf_internal_r+0x9d0>
 1005d90:	d8814a17 	ldw	r2,1320(sp)
 1005d94:	d9414517 	ldw	r5,1300(sp)
 1005d98:	1140010e 	bge	r2,r5,1005da0 <___vfprintf_internal_r+0x6b4>
 1005d9c:	2805883a 	mov	r2,r5
 1005da0:	d9814b17 	ldw	r6,1324(sp)
 1005da4:	308d883a 	add	r6,r6,r2
 1005da8:	d9814b15 	stw	r6,1324(sp)
 1005dac:	90013b1e 	bne	r18,zero,100629c <___vfprintf_internal_r+0xbb0>
 1005db0:	d9c14017 	ldw	r7,1280(sp)
 1005db4:	dd401904 	addi	r21,sp,100
 1005db8:	d8000d15 	stw	zero,52(sp)
 1005dbc:	003ea706 	br	100585c <___vfprintf_internal_r+0x170>
 1005dc0:	d8800e17 	ldw	r2,56(sp)
 1005dc4:	1005451e 	bne	r2,zero,10072dc <___vfprintf_internal_r+0x1bf0>
 1005dc8:	d8000d15 	stw	zero,52(sp)
 1005dcc:	b080030b 	ldhu	r2,12(r22)
 1005dd0:	1080100c 	andi	r2,r2,64
 1005dd4:	103e8726 	beq	r2,zero,10057f4 <___vfprintf_internal_r+0x108>
 1005dd8:	00bfffc4 	movi	r2,-1
 1005ddc:	d8814b15 	stw	r2,1324(sp)
 1005de0:	003e8406 	br	10057f4 <___vfprintf_internal_r+0x108>
 1005de4:	d9814d17 	ldw	r6,1332(sp)
 1005de8:	00801944 	movi	r2,101
 1005dec:	11806e16 	blt	r2,r6,1005fa8 <___vfprintf_internal_r+0x8bc>
 1005df0:	d9414717 	ldw	r5,1308(sp)
 1005df4:	00c00044 	movi	r3,1
 1005df8:	1943490e 	bge	r3,r5,1006b20 <___vfprintf_internal_r+0x1434>
 1005dfc:	d8814117 	ldw	r2,1284(sp)
 1005e00:	94800044 	addi	r18,r18,1
 1005e04:	8c400044 	addi	r17,r17,1
 1005e08:	a8800015 	stw	r2,0(r21)
 1005e0c:	008001c4 	movi	r2,7
 1005e10:	a8c00115 	stw	r3,4(r21)
 1005e14:	dc800e15 	stw	r18,56(sp)
 1005e18:	dc400d15 	stw	r17,52(sp)
 1005e1c:	1441ca16 	blt	r2,r17,1006548 <___vfprintf_internal_r+0xe5c>
 1005e20:	a8c00204 	addi	r3,r21,8
 1005e24:	d9014917 	ldw	r4,1316(sp)
 1005e28:	00800044 	movi	r2,1
 1005e2c:	94800044 	addi	r18,r18,1
 1005e30:	8c400044 	addi	r17,r17,1
 1005e34:	18800115 	stw	r2,4(r3)
 1005e38:	008001c4 	movi	r2,7
 1005e3c:	19000015 	stw	r4,0(r3)
 1005e40:	dc800e15 	stw	r18,56(sp)
 1005e44:	dc400d15 	stw	r17,52(sp)
 1005e48:	1441b616 	blt	r2,r17,1006524 <___vfprintf_internal_r+0xe38>
 1005e4c:	1cc00204 	addi	r19,r3,8
 1005e50:	d9014217 	ldw	r4,1288(sp)
 1005e54:	d9414317 	ldw	r5,1292(sp)
 1005e58:	000d883a 	mov	r6,zero
 1005e5c:	000f883a 	mov	r7,zero
 1005e60:	100d0a00 	call	100d0a0 <__nedf2>
 1005e64:	10017426 	beq	r2,zero,1006438 <___vfprintf_internal_r+0xd4c>
 1005e68:	d9414717 	ldw	r5,1308(sp)
 1005e6c:	d9814117 	ldw	r6,1284(sp)
 1005e70:	8c400044 	addi	r17,r17,1
 1005e74:	2c85883a 	add	r2,r5,r18
 1005e78:	14bfffc4 	addi	r18,r2,-1
 1005e7c:	28bfffc4 	addi	r2,r5,-1
 1005e80:	30c00044 	addi	r3,r6,1
 1005e84:	98800115 	stw	r2,4(r19)
 1005e88:	008001c4 	movi	r2,7
 1005e8c:	98c00015 	stw	r3,0(r19)
 1005e90:	dc800e15 	stw	r18,56(sp)
 1005e94:	dc400d15 	stw	r17,52(sp)
 1005e98:	14418e16 	blt	r2,r17,10064d4 <___vfprintf_internal_r+0xde8>
 1005e9c:	9cc00204 	addi	r19,r19,8
 1005ea0:	d9414817 	ldw	r5,1312(sp)
 1005ea4:	d8800804 	addi	r2,sp,32
 1005ea8:	8c400044 	addi	r17,r17,1
 1005eac:	9165883a 	add	r18,r18,r5
 1005eb0:	98800015 	stw	r2,0(r19)
 1005eb4:	008001c4 	movi	r2,7
 1005eb8:	99400115 	stw	r5,4(r19)
 1005ebc:	dc800e15 	stw	r18,56(sp)
 1005ec0:	dc400d15 	stw	r17,52(sp)
 1005ec4:	1440ed16 	blt	r2,r17,100627c <___vfprintf_internal_r+0xb90>
 1005ec8:	98c00204 	addi	r3,r19,8
 1005ecc:	003f8506 	br	1005ce4 <___vfprintf_internal_r+0x5f8>
 1005ed0:	d9814a17 	ldw	r6,1320(sp)
 1005ed4:	d8814517 	ldw	r2,1300(sp)
 1005ed8:	30a1c83a 	sub	r16,r6,r2
 1005edc:	043f4b0e 	bge	zero,r16,1005c0c <___vfprintf_internal_r+0x520>
 1005ee0:	00800404 	movi	r2,16
 1005ee4:	14043a0e 	bge	r2,r16,1006fd0 <___vfprintf_internal_r+0x18e4>
 1005ee8:	1027883a 	mov	r19,r2
 1005eec:	07004074 	movhi	fp,257
 1005ef0:	e707fc84 	addi	fp,fp,8178
 1005ef4:	050001c4 	movi	r20,7
 1005ef8:	00000306 	br	1005f08 <___vfprintf_internal_r+0x81c>
 1005efc:	843ffc04 	addi	r16,r16,-16
 1005f00:	ad400204 	addi	r21,r21,8
 1005f04:	9c00130e 	bge	r19,r16,1005f54 <___vfprintf_internal_r+0x868>
 1005f08:	94800404 	addi	r18,r18,16
 1005f0c:	8c400044 	addi	r17,r17,1
 1005f10:	af000015 	stw	fp,0(r21)
 1005f14:	acc00115 	stw	r19,4(r21)
 1005f18:	dc800e15 	stw	r18,56(sp)
 1005f1c:	dc400d15 	stw	r17,52(sp)
 1005f20:	a47ff60e 	bge	r20,r17,1005efc <___vfprintf_internal_r+0x810>
 1005f24:	d9014f17 	ldw	r4,1340(sp)
 1005f28:	b00b883a 	mov	r5,r22
 1005f2c:	d9800c04 	addi	r6,sp,48
 1005f30:	d9c15115 	stw	r7,1348(sp)
 1005f34:	10056940 	call	1005694 <__sprint_r>
 1005f38:	d9c15117 	ldw	r7,1348(sp)
 1005f3c:	103fa31e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1005f40:	843ffc04 	addi	r16,r16,-16
 1005f44:	dc800e17 	ldw	r18,56(sp)
 1005f48:	dc400d17 	ldw	r17,52(sp)
 1005f4c:	dd401904 	addi	r21,sp,100
 1005f50:	9c3fed16 	blt	r19,r16,1005f08 <___vfprintf_internal_r+0x81c>
 1005f54:	9425883a 	add	r18,r18,r16
 1005f58:	8c400044 	addi	r17,r17,1
 1005f5c:	008001c4 	movi	r2,7
 1005f60:	af000015 	stw	fp,0(r21)
 1005f64:	ac000115 	stw	r16,4(r21)
 1005f68:	dc800e15 	stw	r18,56(sp)
 1005f6c:	dc400d15 	stw	r17,52(sp)
 1005f70:	14416116 	blt	r2,r17,10064f8 <___vfprintf_internal_r+0xe0c>
 1005f74:	ad400204 	addi	r21,r21,8
 1005f78:	003f2406 	br	1005c0c <___vfprintf_internal_r+0x520>
 1005f7c:	d9014f17 	ldw	r4,1340(sp)
 1005f80:	10091a00 	call	10091a0 <__sinit>
 1005f84:	d9c15117 	ldw	r7,1348(sp)
 1005f88:	003def06 	br	1005748 <___vfprintf_internal_r+0x5c>
 1005f8c:	d9014f17 	ldw	r4,1340(sp)
 1005f90:	b00b883a 	mov	r5,r22
 1005f94:	d9c15115 	stw	r7,1348(sp)
 1005f98:	10075d40 	call	10075d4 <__swsetup_r>
 1005f9c:	d9c15117 	ldw	r7,1348(sp)
 1005fa0:	103dee26 	beq	r2,zero,100575c <___vfprintf_internal_r+0x70>
 1005fa4:	003f8c06 	br	1005dd8 <___vfprintf_internal_r+0x6ec>
 1005fa8:	d9014217 	ldw	r4,1288(sp)
 1005fac:	d9414317 	ldw	r5,1292(sp)
 1005fb0:	000d883a 	mov	r6,zero
 1005fb4:	000f883a 	mov	r7,zero
 1005fb8:	1003e700 	call	1003e70 <__eqdf2>
 1005fbc:	1000f21e 	bne	r2,zero,1006388 <___vfprintf_internal_r+0xc9c>
 1005fc0:	00804074 	movhi	r2,257
 1005fc4:	1087fc04 	addi	r2,r2,8176
 1005fc8:	94800044 	addi	r18,r18,1
 1005fcc:	8c400044 	addi	r17,r17,1
 1005fd0:	a8800015 	stw	r2,0(r21)
 1005fd4:	00c00044 	movi	r3,1
 1005fd8:	008001c4 	movi	r2,7
 1005fdc:	a8c00115 	stw	r3,4(r21)
 1005fe0:	dc800e15 	stw	r18,56(sp)
 1005fe4:	dc400d15 	stw	r17,52(sp)
 1005fe8:	14430016 	blt	r2,r17,1006bec <___vfprintf_internal_r+0x1500>
 1005fec:	a8c00204 	addi	r3,r21,8
 1005ff0:	d8800517 	ldw	r2,20(sp)
 1005ff4:	d9014717 	ldw	r4,1308(sp)
 1005ff8:	11015c0e 	bge	r2,r4,100656c <___vfprintf_internal_r+0xe80>
 1005ffc:	dc400d17 	ldw	r17,52(sp)
 1006000:	d9814917 	ldw	r6,1316(sp)
 1006004:	00800044 	movi	r2,1
 1006008:	94800044 	addi	r18,r18,1
 100600c:	8c400044 	addi	r17,r17,1
 1006010:	18800115 	stw	r2,4(r3)
 1006014:	008001c4 	movi	r2,7
 1006018:	19800015 	stw	r6,0(r3)
 100601c:	dc800e15 	stw	r18,56(sp)
 1006020:	dc400d15 	stw	r17,52(sp)
 1006024:	14431616 	blt	r2,r17,1006c80 <___vfprintf_internal_r+0x1594>
 1006028:	18c00204 	addi	r3,r3,8
 100602c:	d8814717 	ldw	r2,1308(sp)
 1006030:	143fffc4 	addi	r16,r2,-1
 1006034:	043f2b0e 	bge	zero,r16,1005ce4 <___vfprintf_internal_r+0x5f8>
 1006038:	00800404 	movi	r2,16
 100603c:	1402a80e 	bge	r2,r16,1006ae0 <___vfprintf_internal_r+0x13f4>
 1006040:	dc400d17 	ldw	r17,52(sp)
 1006044:	1027883a 	mov	r19,r2
 1006048:	07004074 	movhi	fp,257
 100604c:	e707fc84 	addi	fp,fp,8178
 1006050:	050001c4 	movi	r20,7
 1006054:	00000306 	br	1006064 <___vfprintf_internal_r+0x978>
 1006058:	18c00204 	addi	r3,r3,8
 100605c:	843ffc04 	addi	r16,r16,-16
 1006060:	9c02a20e 	bge	r19,r16,1006aec <___vfprintf_internal_r+0x1400>
 1006064:	94800404 	addi	r18,r18,16
 1006068:	8c400044 	addi	r17,r17,1
 100606c:	1f000015 	stw	fp,0(r3)
 1006070:	1cc00115 	stw	r19,4(r3)
 1006074:	dc800e15 	stw	r18,56(sp)
 1006078:	dc400d15 	stw	r17,52(sp)
 100607c:	a47ff60e 	bge	r20,r17,1006058 <___vfprintf_internal_r+0x96c>
 1006080:	d9014f17 	ldw	r4,1340(sp)
 1006084:	b00b883a 	mov	r5,r22
 1006088:	d9800c04 	addi	r6,sp,48
 100608c:	10056940 	call	1005694 <__sprint_r>
 1006090:	103f4e1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006094:	dc800e17 	ldw	r18,56(sp)
 1006098:	dc400d17 	ldw	r17,52(sp)
 100609c:	d8c01904 	addi	r3,sp,100
 10060a0:	003fee06 	br	100605c <___vfprintf_internal_r+0x970>
 10060a4:	d8802c0b 	ldhu	r2,176(sp)
 10060a8:	00ffffc4 	movi	r3,-1
 10060ac:	d8c14b15 	stw	r3,1324(sp)
 10060b0:	1080100c 	andi	r2,r2,64
 10060b4:	103dcc1e 	bne	r2,zero,10057e8 <___vfprintf_internal_r+0xfc>
 10060b8:	003dce06 	br	10057f4 <___vfprintf_internal_r+0x108>
 10060bc:	d9014f17 	ldw	r4,1340(sp)
 10060c0:	b00b883a 	mov	r5,r22
 10060c4:	d9800c04 	addi	r6,sp,48
 10060c8:	10056940 	call	1005694 <__sprint_r>
 10060cc:	103f3f1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10060d0:	dc800e17 	ldw	r18,56(sp)
 10060d4:	003f2e06 	br	1005d90 <___vfprintf_internal_r+0x6a4>
 10060d8:	d9414c17 	ldw	r5,1328(sp)
 10060dc:	29400414 	ori	r5,r5,16
 10060e0:	d9414c15 	stw	r5,1328(sp)
 10060e4:	d9814c17 	ldw	r6,1328(sp)
 10060e8:	3080080c 	andi	r2,r6,32
 10060ec:	10014f1e 	bne	r2,zero,100662c <___vfprintf_internal_r+0xf40>
 10060f0:	d8c14c17 	ldw	r3,1328(sp)
 10060f4:	1880040c 	andi	r2,r3,16
 10060f8:	1002f01e 	bne	r2,zero,1006cbc <___vfprintf_internal_r+0x15d0>
 10060fc:	d9014c17 	ldw	r4,1328(sp)
 1006100:	2080100c 	andi	r2,r4,64
 1006104:	1002ed26 	beq	r2,zero,1006cbc <___vfprintf_internal_r+0x15d0>
 1006108:	3880000f 	ldh	r2,0(r7)
 100610c:	39c00104 	addi	r7,r7,4
 1006110:	d9c14015 	stw	r7,1280(sp)
 1006114:	1023d7fa 	srai	r17,r2,31
 1006118:	1021883a 	mov	r16,r2
 100611c:	88037816 	blt	r17,zero,1006f00 <___vfprintf_internal_r+0x1814>
 1006120:	01000044 	movi	r4,1
 1006124:	98000416 	blt	r19,zero,1006138 <___vfprintf_internal_r+0xa4c>
 1006128:	d8c14c17 	ldw	r3,1328(sp)
 100612c:	00bfdfc4 	movi	r2,-129
 1006130:	1886703a 	and	r3,r3,r2
 1006134:	d8c14c15 	stw	r3,1328(sp)
 1006138:	8444b03a 	or	r2,r16,r17
 100613c:	10022c1e 	bne	r2,zero,10069f0 <___vfprintf_internal_r+0x1304>
 1006140:	98022b1e 	bne	r19,zero,10069f0 <___vfprintf_internal_r+0x1304>
 1006144:	20803fcc 	andi	r2,r4,255
 1006148:	1002a126 	beq	r2,zero,1006bd0 <___vfprintf_internal_r+0x14e4>
 100614c:	d8c01904 	addi	r3,sp,100
 1006150:	dd000f04 	addi	r20,sp,60
 1006154:	d8c14115 	stw	r3,1284(sp)
 1006158:	d8c14117 	ldw	r3,1284(sp)
 100615c:	dcc14515 	stw	r19,1300(sp)
 1006160:	a0c5c83a 	sub	r2,r20,r3
 1006164:	11c00a04 	addi	r7,r2,40
 1006168:	99c0010e 	bge	r19,r7,1006170 <___vfprintf_internal_r+0xa84>
 100616c:	d9c14515 	stw	r7,1300(sp)
 1006170:	dcc14615 	stw	r19,1304(sp)
 1006174:	d8800407 	ldb	r2,16(sp)
 1006178:	103e4c26 	beq	r2,zero,1005aac <___vfprintf_internal_r+0x3c0>
 100617c:	d8814517 	ldw	r2,1300(sp)
 1006180:	10800044 	addi	r2,r2,1
 1006184:	d8814515 	stw	r2,1300(sp)
 1006188:	003e4806 	br	1005aac <___vfprintf_internal_r+0x3c0>
 100618c:	d9814c17 	ldw	r6,1328(sp)
 1006190:	31800414 	ori	r6,r6,16
 1006194:	d9814c15 	stw	r6,1328(sp)
 1006198:	d8c14c17 	ldw	r3,1328(sp)
 100619c:	1880080c 	andi	r2,r3,32
 10061a0:	1001271e 	bne	r2,zero,1006640 <___vfprintf_internal_r+0xf54>
 10061a4:	d9414c17 	ldw	r5,1328(sp)
 10061a8:	2880040c 	andi	r2,r5,16
 10061ac:	1002bc1e 	bne	r2,zero,1006ca0 <___vfprintf_internal_r+0x15b4>
 10061b0:	d9814c17 	ldw	r6,1328(sp)
 10061b4:	3080100c 	andi	r2,r6,64
 10061b8:	1002b926 	beq	r2,zero,1006ca0 <___vfprintf_internal_r+0x15b4>
 10061bc:	3c00000b 	ldhu	r16,0(r7)
 10061c0:	0009883a 	mov	r4,zero
 10061c4:	39c00104 	addi	r7,r7,4
 10061c8:	0023883a 	mov	r17,zero
 10061cc:	d9c14015 	stw	r7,1280(sp)
 10061d0:	d8000405 	stb	zero,16(sp)
 10061d4:	003fd306 	br	1006124 <___vfprintf_internal_r+0xa38>
 10061d8:	d9014c17 	ldw	r4,1328(sp)
 10061dc:	21000414 	ori	r4,r4,16
 10061e0:	d9014c15 	stw	r4,1328(sp)
 10061e4:	d9414c17 	ldw	r5,1328(sp)
 10061e8:	2880080c 	andi	r2,r5,32
 10061ec:	1001081e 	bne	r2,zero,1006610 <___vfprintf_internal_r+0xf24>
 10061f0:	d8c14c17 	ldw	r3,1328(sp)
 10061f4:	1880040c 	andi	r2,r3,16
 10061f8:	1002b61e 	bne	r2,zero,1006cd4 <___vfprintf_internal_r+0x15e8>
 10061fc:	d9014c17 	ldw	r4,1328(sp)
 1006200:	2080100c 	andi	r2,r4,64
 1006204:	1002b326 	beq	r2,zero,1006cd4 <___vfprintf_internal_r+0x15e8>
 1006208:	3c00000b 	ldhu	r16,0(r7)
 100620c:	01000044 	movi	r4,1
 1006210:	39c00104 	addi	r7,r7,4
 1006214:	0023883a 	mov	r17,zero
 1006218:	d9c14015 	stw	r7,1280(sp)
 100621c:	d8000405 	stb	zero,16(sp)
 1006220:	003fc006 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006224:	d9014f17 	ldw	r4,1340(sp)
 1006228:	b00b883a 	mov	r5,r22
 100622c:	d9800c04 	addi	r6,sp,48
 1006230:	10056940 	call	1005694 <__sprint_r>
 1006234:	103ee51e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006238:	dc800e17 	ldw	r18,56(sp)
 100623c:	d8c01904 	addi	r3,sp,100
 1006240:	d9814c17 	ldw	r6,1328(sp)
 1006244:	3080004c 	andi	r2,r6,1
 1006248:	1005003a 	cmpeq	r2,r2,zero
 100624c:	103ea51e 	bne	r2,zero,1005ce4 <___vfprintf_internal_r+0x5f8>
 1006250:	00800044 	movi	r2,1
 1006254:	dc400d17 	ldw	r17,52(sp)
 1006258:	18800115 	stw	r2,4(r3)
 100625c:	d8814917 	ldw	r2,1316(sp)
 1006260:	94800044 	addi	r18,r18,1
 1006264:	8c400044 	addi	r17,r17,1
 1006268:	18800015 	stw	r2,0(r3)
 100626c:	008001c4 	movi	r2,7
 1006270:	dc800e15 	stw	r18,56(sp)
 1006274:	dc400d15 	stw	r17,52(sp)
 1006278:	1442240e 	bge	r2,r17,1006b0c <___vfprintf_internal_r+0x1420>
 100627c:	d9014f17 	ldw	r4,1340(sp)
 1006280:	b00b883a 	mov	r5,r22
 1006284:	d9800c04 	addi	r6,sp,48
 1006288:	10056940 	call	1005694 <__sprint_r>
 100628c:	103ecf1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006290:	dc800e17 	ldw	r18,56(sp)
 1006294:	d8c01904 	addi	r3,sp,100
 1006298:	003e9206 	br	1005ce4 <___vfprintf_internal_r+0x5f8>
 100629c:	d9014f17 	ldw	r4,1340(sp)
 10062a0:	b00b883a 	mov	r5,r22
 10062a4:	d9800c04 	addi	r6,sp,48
 10062a8:	10056940 	call	1005694 <__sprint_r>
 10062ac:	103ec026 	beq	r2,zero,1005db0 <___vfprintf_internal_r+0x6c4>
 10062b0:	003ec606 	br	1005dcc <___vfprintf_internal_r+0x6e0>
 10062b4:	d9014f17 	ldw	r4,1340(sp)
 10062b8:	b00b883a 	mov	r5,r22
 10062bc:	d9800c04 	addi	r6,sp,48
 10062c0:	d9c15115 	stw	r7,1348(sp)
 10062c4:	10056940 	call	1005694 <__sprint_r>
 10062c8:	d9c15117 	ldw	r7,1348(sp)
 10062cc:	103ebf1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10062d0:	dc800e17 	ldw	r18,56(sp)
 10062d4:	dc400d17 	ldw	r17,52(sp)
 10062d8:	dd401904 	addi	r21,sp,100
 10062dc:	003e7406 	br	1005cb0 <___vfprintf_internal_r+0x5c4>
 10062e0:	d9014f17 	ldw	r4,1340(sp)
 10062e4:	b00b883a 	mov	r5,r22
 10062e8:	d9800c04 	addi	r6,sp,48
 10062ec:	d9c15115 	stw	r7,1348(sp)
 10062f0:	10056940 	call	1005694 <__sprint_r>
 10062f4:	d9c15117 	ldw	r7,1348(sp)
 10062f8:	103eb41e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10062fc:	dd401904 	addi	r21,sp,100
 1006300:	003d6d06 	br	10058b8 <___vfprintf_internal_r+0x1cc>
 1006304:	d9014f17 	ldw	r4,1340(sp)
 1006308:	b00b883a 	mov	r5,r22
 100630c:	d9800c04 	addi	r6,sp,48
 1006310:	d9c15115 	stw	r7,1348(sp)
 1006314:	10056940 	call	1005694 <__sprint_r>
 1006318:	d9c15117 	ldw	r7,1348(sp)
 100631c:	103eab1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006320:	dc800e17 	ldw	r18,56(sp)
 1006324:	dc400d17 	ldw	r17,52(sp)
 1006328:	dd401904 	addi	r21,sp,100
 100632c:	003e3406 	br	1005c00 <___vfprintf_internal_r+0x514>
 1006330:	d9014f17 	ldw	r4,1340(sp)
 1006334:	b00b883a 	mov	r5,r22
 1006338:	d9800c04 	addi	r6,sp,48
 100633c:	d9c15115 	stw	r7,1348(sp)
 1006340:	10056940 	call	1005694 <__sprint_r>
 1006344:	d9c15117 	ldw	r7,1348(sp)
 1006348:	103ea01e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 100634c:	dc800e17 	ldw	r18,56(sp)
 1006350:	dc400d17 	ldw	r17,52(sp)
 1006354:	dd401904 	addi	r21,sp,100
 1006358:	003e1c06 	br	1005bcc <___vfprintf_internal_r+0x4e0>
 100635c:	d9014f17 	ldw	r4,1340(sp)
 1006360:	b00b883a 	mov	r5,r22
 1006364:	d9800c04 	addi	r6,sp,48
 1006368:	d9c15115 	stw	r7,1348(sp)
 100636c:	10056940 	call	1005694 <__sprint_r>
 1006370:	d9c15117 	ldw	r7,1348(sp)
 1006374:	103e951e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006378:	dc800e17 	ldw	r18,56(sp)
 100637c:	dc400d17 	ldw	r17,52(sp)
 1006380:	dd401904 	addi	r21,sp,100
 1006384:	003e0406 	br	1005b98 <___vfprintf_internal_r+0x4ac>
 1006388:	d9000517 	ldw	r4,20(sp)
 100638c:	0102580e 	bge	zero,r4,1006cf0 <___vfprintf_internal_r+0x1604>
 1006390:	d9814717 	ldw	r6,1308(sp)
 1006394:	21807a16 	blt	r4,r6,1006580 <___vfprintf_internal_r+0xe94>
 1006398:	d8814117 	ldw	r2,1284(sp)
 100639c:	91a5883a 	add	r18,r18,r6
 10063a0:	8c400044 	addi	r17,r17,1
 10063a4:	a8800015 	stw	r2,0(r21)
 10063a8:	008001c4 	movi	r2,7
 10063ac:	a9800115 	stw	r6,4(r21)
 10063b0:	dc800e15 	stw	r18,56(sp)
 10063b4:	dc400d15 	stw	r17,52(sp)
 10063b8:	1442fc16 	blt	r2,r17,1006fac <___vfprintf_internal_r+0x18c0>
 10063bc:	a8c00204 	addi	r3,r21,8
 10063c0:	d9414717 	ldw	r5,1308(sp)
 10063c4:	2161c83a 	sub	r16,r4,r5
 10063c8:	043f9d0e 	bge	zero,r16,1006240 <___vfprintf_internal_r+0xb54>
 10063cc:	00800404 	movi	r2,16
 10063d0:	1402190e 	bge	r2,r16,1006c38 <___vfprintf_internal_r+0x154c>
 10063d4:	dc400d17 	ldw	r17,52(sp)
 10063d8:	1027883a 	mov	r19,r2
 10063dc:	07004074 	movhi	fp,257
 10063e0:	e707fc84 	addi	fp,fp,8178
 10063e4:	050001c4 	movi	r20,7
 10063e8:	00000306 	br	10063f8 <___vfprintf_internal_r+0xd0c>
 10063ec:	18c00204 	addi	r3,r3,8
 10063f0:	843ffc04 	addi	r16,r16,-16
 10063f4:	9c02130e 	bge	r19,r16,1006c44 <___vfprintf_internal_r+0x1558>
 10063f8:	94800404 	addi	r18,r18,16
 10063fc:	8c400044 	addi	r17,r17,1
 1006400:	1f000015 	stw	fp,0(r3)
 1006404:	1cc00115 	stw	r19,4(r3)
 1006408:	dc800e15 	stw	r18,56(sp)
 100640c:	dc400d15 	stw	r17,52(sp)
 1006410:	a47ff60e 	bge	r20,r17,10063ec <___vfprintf_internal_r+0xd00>
 1006414:	d9014f17 	ldw	r4,1340(sp)
 1006418:	b00b883a 	mov	r5,r22
 100641c:	d9800c04 	addi	r6,sp,48
 1006420:	10056940 	call	1005694 <__sprint_r>
 1006424:	103e691e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006428:	dc800e17 	ldw	r18,56(sp)
 100642c:	dc400d17 	ldw	r17,52(sp)
 1006430:	d8c01904 	addi	r3,sp,100
 1006434:	003fee06 	br	10063f0 <___vfprintf_internal_r+0xd04>
 1006438:	d8814717 	ldw	r2,1308(sp)
 100643c:	143fffc4 	addi	r16,r2,-1
 1006440:	043e970e 	bge	zero,r16,1005ea0 <___vfprintf_internal_r+0x7b4>
 1006444:	00800404 	movi	r2,16
 1006448:	1400180e 	bge	r2,r16,10064ac <___vfprintf_internal_r+0xdc0>
 100644c:	1029883a 	mov	r20,r2
 1006450:	07004074 	movhi	fp,257
 1006454:	e707fc84 	addi	fp,fp,8178
 1006458:	054001c4 	movi	r21,7
 100645c:	00000306 	br	100646c <___vfprintf_internal_r+0xd80>
 1006460:	9cc00204 	addi	r19,r19,8
 1006464:	843ffc04 	addi	r16,r16,-16
 1006468:	a400120e 	bge	r20,r16,10064b4 <___vfprintf_internal_r+0xdc8>
 100646c:	94800404 	addi	r18,r18,16
 1006470:	8c400044 	addi	r17,r17,1
 1006474:	9f000015 	stw	fp,0(r19)
 1006478:	9d000115 	stw	r20,4(r19)
 100647c:	dc800e15 	stw	r18,56(sp)
 1006480:	dc400d15 	stw	r17,52(sp)
 1006484:	ac7ff60e 	bge	r21,r17,1006460 <___vfprintf_internal_r+0xd74>
 1006488:	d9014f17 	ldw	r4,1340(sp)
 100648c:	b00b883a 	mov	r5,r22
 1006490:	d9800c04 	addi	r6,sp,48
 1006494:	10056940 	call	1005694 <__sprint_r>
 1006498:	103e4c1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 100649c:	dc800e17 	ldw	r18,56(sp)
 10064a0:	dc400d17 	ldw	r17,52(sp)
 10064a4:	dcc01904 	addi	r19,sp,100
 10064a8:	003fee06 	br	1006464 <___vfprintf_internal_r+0xd78>
 10064ac:	07004074 	movhi	fp,257
 10064b0:	e707fc84 	addi	fp,fp,8178
 10064b4:	9425883a 	add	r18,r18,r16
 10064b8:	8c400044 	addi	r17,r17,1
 10064bc:	008001c4 	movi	r2,7
 10064c0:	9f000015 	stw	fp,0(r19)
 10064c4:	9c000115 	stw	r16,4(r19)
 10064c8:	dc800e15 	stw	r18,56(sp)
 10064cc:	dc400d15 	stw	r17,52(sp)
 10064d0:	147e720e 	bge	r2,r17,1005e9c <___vfprintf_internal_r+0x7b0>
 10064d4:	d9014f17 	ldw	r4,1340(sp)
 10064d8:	b00b883a 	mov	r5,r22
 10064dc:	d9800c04 	addi	r6,sp,48
 10064e0:	10056940 	call	1005694 <__sprint_r>
 10064e4:	103e391e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10064e8:	dc800e17 	ldw	r18,56(sp)
 10064ec:	dc400d17 	ldw	r17,52(sp)
 10064f0:	dcc01904 	addi	r19,sp,100
 10064f4:	003e6a06 	br	1005ea0 <___vfprintf_internal_r+0x7b4>
 10064f8:	d9014f17 	ldw	r4,1340(sp)
 10064fc:	b00b883a 	mov	r5,r22
 1006500:	d9800c04 	addi	r6,sp,48
 1006504:	d9c15115 	stw	r7,1348(sp)
 1006508:	10056940 	call	1005694 <__sprint_r>
 100650c:	d9c15117 	ldw	r7,1348(sp)
 1006510:	103e2e1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006514:	dc800e17 	ldw	r18,56(sp)
 1006518:	dc400d17 	ldw	r17,52(sp)
 100651c:	dd401904 	addi	r21,sp,100
 1006520:	003dba06 	br	1005c0c <___vfprintf_internal_r+0x520>
 1006524:	d9014f17 	ldw	r4,1340(sp)
 1006528:	b00b883a 	mov	r5,r22
 100652c:	d9800c04 	addi	r6,sp,48
 1006530:	10056940 	call	1005694 <__sprint_r>
 1006534:	103e251e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006538:	dc800e17 	ldw	r18,56(sp)
 100653c:	dc400d17 	ldw	r17,52(sp)
 1006540:	dcc01904 	addi	r19,sp,100
 1006544:	003e4206 	br	1005e50 <___vfprintf_internal_r+0x764>
 1006548:	d9014f17 	ldw	r4,1340(sp)
 100654c:	b00b883a 	mov	r5,r22
 1006550:	d9800c04 	addi	r6,sp,48
 1006554:	10056940 	call	1005694 <__sprint_r>
 1006558:	103e1c1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 100655c:	dc800e17 	ldw	r18,56(sp)
 1006560:	dc400d17 	ldw	r17,52(sp)
 1006564:	d8c01904 	addi	r3,sp,100
 1006568:	003e2e06 	br	1005e24 <___vfprintf_internal_r+0x738>
 100656c:	d9414c17 	ldw	r5,1328(sp)
 1006570:	2880004c 	andi	r2,r5,1
 1006574:	1005003a 	cmpeq	r2,r2,zero
 1006578:	103dda1e 	bne	r2,zero,1005ce4 <___vfprintf_internal_r+0x5f8>
 100657c:	003e9f06 	br	1005ffc <___vfprintf_internal_r+0x910>
 1006580:	d8c14117 	ldw	r3,1284(sp)
 1006584:	9125883a 	add	r18,r18,r4
 1006588:	8c400044 	addi	r17,r17,1
 100658c:	008001c4 	movi	r2,7
 1006590:	a8c00015 	stw	r3,0(r21)
 1006594:	a9000115 	stw	r4,4(r21)
 1006598:	dc800e15 	stw	r18,56(sp)
 100659c:	dc400d15 	stw	r17,52(sp)
 10065a0:	14426c16 	blt	r2,r17,1006f54 <___vfprintf_internal_r+0x1868>
 10065a4:	a8c00204 	addi	r3,r21,8
 10065a8:	d9414917 	ldw	r5,1316(sp)
 10065ac:	00800044 	movi	r2,1
 10065b0:	94800044 	addi	r18,r18,1
 10065b4:	8c400044 	addi	r17,r17,1
 10065b8:	18800115 	stw	r2,4(r3)
 10065bc:	008001c4 	movi	r2,7
 10065c0:	19400015 	stw	r5,0(r3)
 10065c4:	dc800e15 	stw	r18,56(sp)
 10065c8:	dc400d15 	stw	r17,52(sp)
 10065cc:	2021883a 	mov	r16,r4
 10065d0:	14425616 	blt	r2,r17,1006f2c <___vfprintf_internal_r+0x1840>
 10065d4:	19400204 	addi	r5,r3,8
 10065d8:	d9814717 	ldw	r6,1308(sp)
 10065dc:	8c400044 	addi	r17,r17,1
 10065e0:	dc400d15 	stw	r17,52(sp)
 10065e4:	3107c83a 	sub	r3,r6,r4
 10065e8:	d9014117 	ldw	r4,1284(sp)
 10065ec:	90e5883a 	add	r18,r18,r3
 10065f0:	28c00115 	stw	r3,4(r5)
 10065f4:	8105883a 	add	r2,r16,r4
 10065f8:	28800015 	stw	r2,0(r5)
 10065fc:	008001c4 	movi	r2,7
 1006600:	dc800e15 	stw	r18,56(sp)
 1006604:	147f1d16 	blt	r2,r17,100627c <___vfprintf_internal_r+0xb90>
 1006608:	28c00204 	addi	r3,r5,8
 100660c:	003db506 	br	1005ce4 <___vfprintf_internal_r+0x5f8>
 1006610:	3c000017 	ldw	r16,0(r7)
 1006614:	3c400117 	ldw	r17,4(r7)
 1006618:	39800204 	addi	r6,r7,8
 100661c:	01000044 	movi	r4,1
 1006620:	d9814015 	stw	r6,1280(sp)
 1006624:	d8000405 	stb	zero,16(sp)
 1006628:	003ebe06 	br	1006124 <___vfprintf_internal_r+0xa38>
 100662c:	3c000017 	ldw	r16,0(r7)
 1006630:	3c400117 	ldw	r17,4(r7)
 1006634:	38800204 	addi	r2,r7,8
 1006638:	d8814015 	stw	r2,1280(sp)
 100663c:	003eb706 	br	100611c <___vfprintf_internal_r+0xa30>
 1006640:	3c000017 	ldw	r16,0(r7)
 1006644:	3c400117 	ldw	r17,4(r7)
 1006648:	39000204 	addi	r4,r7,8
 100664c:	d9014015 	stw	r4,1280(sp)
 1006650:	0009883a 	mov	r4,zero
 1006654:	d8000405 	stb	zero,16(sp)
 1006658:	003eb206 	br	1006124 <___vfprintf_internal_r+0xa38>
 100665c:	38c00017 	ldw	r3,0(r7)
 1006660:	39c00104 	addi	r7,r7,4
 1006664:	d8c14a15 	stw	r3,1320(sp)
 1006668:	1800d70e 	bge	r3,zero,10069c8 <___vfprintf_internal_r+0x12dc>
 100666c:	00c7c83a 	sub	r3,zero,r3
 1006670:	d8c14a15 	stw	r3,1320(sp)
 1006674:	d9014c17 	ldw	r4,1328(sp)
 1006678:	b8c00007 	ldb	r3,0(r23)
 100667c:	21000114 	ori	r4,r4,4
 1006680:	d9014c15 	stw	r4,1328(sp)
 1006684:	003c9806 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 1006688:	d9814c17 	ldw	r6,1328(sp)
 100668c:	3080080c 	andi	r2,r6,32
 1006690:	1001f626 	beq	r2,zero,1006e6c <___vfprintf_internal_r+0x1780>
 1006694:	d9014b17 	ldw	r4,1324(sp)
 1006698:	38800017 	ldw	r2,0(r7)
 100669c:	39c00104 	addi	r7,r7,4
 10066a0:	d9c14015 	stw	r7,1280(sp)
 10066a4:	2007d7fa 	srai	r3,r4,31
 10066a8:	d9c14017 	ldw	r7,1280(sp)
 10066ac:	11000015 	stw	r4,0(r2)
 10066b0:	10c00115 	stw	r3,4(r2)
 10066b4:	003c6906 	br	100585c <___vfprintf_internal_r+0x170>
 10066b8:	b8c00007 	ldb	r3,0(r23)
 10066bc:	00801b04 	movi	r2,108
 10066c0:	18825526 	beq	r3,r2,1007018 <___vfprintf_internal_r+0x192c>
 10066c4:	d9414c17 	ldw	r5,1328(sp)
 10066c8:	29400414 	ori	r5,r5,16
 10066cc:	d9414c15 	stw	r5,1328(sp)
 10066d0:	003c8506 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 10066d4:	d9814c17 	ldw	r6,1328(sp)
 10066d8:	b8c00007 	ldb	r3,0(r23)
 10066dc:	31800814 	ori	r6,r6,32
 10066e0:	d9814c15 	stw	r6,1328(sp)
 10066e4:	003c8006 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 10066e8:	d8814c17 	ldw	r2,1328(sp)
 10066ec:	3c000017 	ldw	r16,0(r7)
 10066f0:	00c01e04 	movi	r3,120
 10066f4:	10800094 	ori	r2,r2,2
 10066f8:	d8814c15 	stw	r2,1328(sp)
 10066fc:	39c00104 	addi	r7,r7,4
 1006700:	01404074 	movhi	r5,257
 1006704:	2947e504 	addi	r5,r5,8084
 1006708:	00800c04 	movi	r2,48
 100670c:	0023883a 	mov	r17,zero
 1006710:	01000084 	movi	r4,2
 1006714:	d9c14015 	stw	r7,1280(sp)
 1006718:	d8c14d15 	stw	r3,1332(sp)
 100671c:	d9414415 	stw	r5,1296(sp)
 1006720:	d8800445 	stb	r2,17(sp)
 1006724:	d8c00485 	stb	r3,18(sp)
 1006728:	d8000405 	stb	zero,16(sp)
 100672c:	003e7d06 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006730:	d8814c17 	ldw	r2,1328(sp)
 1006734:	b8c00007 	ldb	r3,0(r23)
 1006738:	10801014 	ori	r2,r2,64
 100673c:	d8814c15 	stw	r2,1328(sp)
 1006740:	003c6906 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 1006744:	d9414c17 	ldw	r5,1328(sp)
 1006748:	2880020c 	andi	r2,r5,8
 100674c:	1001e526 	beq	r2,zero,1006ee4 <___vfprintf_internal_r+0x17f8>
 1006750:	39800017 	ldw	r6,0(r7)
 1006754:	38800204 	addi	r2,r7,8
 1006758:	d8814015 	stw	r2,1280(sp)
 100675c:	d9814215 	stw	r6,1288(sp)
 1006760:	39c00117 	ldw	r7,4(r7)
 1006764:	d9c14315 	stw	r7,1292(sp)
 1006768:	d9014217 	ldw	r4,1288(sp)
 100676c:	d9414317 	ldw	r5,1292(sp)
 1006770:	100ba5c0 	call	100ba5c <__isinfd>
 1006774:	10021d26 	beq	r2,zero,1006fec <___vfprintf_internal_r+0x1900>
 1006778:	d9014217 	ldw	r4,1288(sp)
 100677c:	d9414317 	ldw	r5,1292(sp)
 1006780:	000d883a 	mov	r6,zero
 1006784:	000f883a 	mov	r7,zero
 1006788:	100d1280 	call	100d128 <__ltdf2>
 100678c:	1002d016 	blt	r2,zero,10072d0 <___vfprintf_internal_r+0x1be4>
 1006790:	d9414d17 	ldw	r5,1332(sp)
 1006794:	008011c4 	movi	r2,71
 1006798:	11421016 	blt	r2,r5,1006fdc <___vfprintf_internal_r+0x18f0>
 100679c:	01804074 	movhi	r6,257
 10067a0:	3187ea04 	addi	r6,r6,8104
 10067a4:	d9814115 	stw	r6,1284(sp)
 10067a8:	d9014c17 	ldw	r4,1328(sp)
 10067ac:	00c000c4 	movi	r3,3
 10067b0:	00bfdfc4 	movi	r2,-129
 10067b4:	2088703a 	and	r4,r4,r2
 10067b8:	180f883a 	mov	r7,r3
 10067bc:	d8c14515 	stw	r3,1300(sp)
 10067c0:	d9014c15 	stw	r4,1328(sp)
 10067c4:	d8014615 	stw	zero,1304(sp)
 10067c8:	003e6a06 	br	1006174 <___vfprintf_internal_r+0xa88>
 10067cc:	38800017 	ldw	r2,0(r7)
 10067d0:	00c00044 	movi	r3,1
 10067d4:	39c00104 	addi	r7,r7,4
 10067d8:	d9c14015 	stw	r7,1280(sp)
 10067dc:	d9000f04 	addi	r4,sp,60
 10067e0:	180f883a 	mov	r7,r3
 10067e4:	d8c14515 	stw	r3,1300(sp)
 10067e8:	d9014115 	stw	r4,1284(sp)
 10067ec:	d8800f05 	stb	r2,60(sp)
 10067f0:	d8000405 	stb	zero,16(sp)
 10067f4:	003cac06 	br	1005aa8 <___vfprintf_internal_r+0x3bc>
 10067f8:	01404074 	movhi	r5,257
 10067fc:	2947f004 	addi	r5,r5,8128
 1006800:	d9414415 	stw	r5,1296(sp)
 1006804:	d9814c17 	ldw	r6,1328(sp)
 1006808:	3080080c 	andi	r2,r6,32
 100680c:	1000ff26 	beq	r2,zero,1006c0c <___vfprintf_internal_r+0x1520>
 1006810:	3c000017 	ldw	r16,0(r7)
 1006814:	3c400117 	ldw	r17,4(r7)
 1006818:	38800204 	addi	r2,r7,8
 100681c:	d8814015 	stw	r2,1280(sp)
 1006820:	d9414c17 	ldw	r5,1328(sp)
 1006824:	2880004c 	andi	r2,r5,1
 1006828:	1005003a 	cmpeq	r2,r2,zero
 100682c:	1000b91e 	bne	r2,zero,1006b14 <___vfprintf_internal_r+0x1428>
 1006830:	8444b03a 	or	r2,r16,r17
 1006834:	1000b726 	beq	r2,zero,1006b14 <___vfprintf_internal_r+0x1428>
 1006838:	d9814d17 	ldw	r6,1332(sp)
 100683c:	29400094 	ori	r5,r5,2
 1006840:	00800c04 	movi	r2,48
 1006844:	01000084 	movi	r4,2
 1006848:	d9414c15 	stw	r5,1328(sp)
 100684c:	d8800445 	stb	r2,17(sp)
 1006850:	d9800485 	stb	r6,18(sp)
 1006854:	d8000405 	stb	zero,16(sp)
 1006858:	003e3206 	br	1006124 <___vfprintf_internal_r+0xa38>
 100685c:	01804074 	movhi	r6,257
 1006860:	3187e504 	addi	r6,r6,8084
 1006864:	d9814415 	stw	r6,1296(sp)
 1006868:	003fe606 	br	1006804 <___vfprintf_internal_r+0x1118>
 100686c:	00800ac4 	movi	r2,43
 1006870:	d8800405 	stb	r2,16(sp)
 1006874:	b8c00007 	ldb	r3,0(r23)
 1006878:	003c1b06 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 100687c:	d8814c17 	ldw	r2,1328(sp)
 1006880:	b8c00007 	ldb	r3,0(r23)
 1006884:	10800054 	ori	r2,r2,1
 1006888:	d8814c15 	stw	r2,1328(sp)
 100688c:	003c1606 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 1006890:	d8800407 	ldb	r2,16(sp)
 1006894:	10004c1e 	bne	r2,zero,10069c8 <___vfprintf_internal_r+0x12dc>
 1006898:	00800804 	movi	r2,32
 100689c:	d8800405 	stb	r2,16(sp)
 10068a0:	b8c00007 	ldb	r3,0(r23)
 10068a4:	003c1006 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 10068a8:	d9814c17 	ldw	r6,1328(sp)
 10068ac:	b8c00007 	ldb	r3,0(r23)
 10068b0:	31800214 	ori	r6,r6,8
 10068b4:	d9814c15 	stw	r6,1328(sp)
 10068b8:	003c0b06 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 10068bc:	0009883a 	mov	r4,zero
 10068c0:	04000244 	movi	r16,9
 10068c4:	01400284 	movi	r5,10
 10068c8:	d9c15115 	stw	r7,1348(sp)
 10068cc:	100435c0 	call	100435c <__mulsi3>
 10068d0:	b9000007 	ldb	r4,0(r23)
 10068d4:	d8c14d17 	ldw	r3,1332(sp)
 10068d8:	bdc00044 	addi	r23,r23,1
 10068dc:	d9014d15 	stw	r4,1332(sp)
 10068e0:	d9414d17 	ldw	r5,1332(sp)
 10068e4:	1885883a 	add	r2,r3,r2
 10068e8:	113ff404 	addi	r4,r2,-48
 10068ec:	28bff404 	addi	r2,r5,-48
 10068f0:	d9c15117 	ldw	r7,1348(sp)
 10068f4:	80bff32e 	bgeu	r16,r2,10068c4 <___vfprintf_internal_r+0x11d8>
 10068f8:	d9014a15 	stw	r4,1320(sp)
 10068fc:	003bfc06 	br	10058f0 <___vfprintf_internal_r+0x204>
 1006900:	d8814c17 	ldw	r2,1328(sp)
 1006904:	b8c00007 	ldb	r3,0(r23)
 1006908:	10802014 	ori	r2,r2,128
 100690c:	d8814c15 	stw	r2,1328(sp)
 1006910:	003bf506 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 1006914:	b8c00007 	ldb	r3,0(r23)
 1006918:	00800a84 	movi	r2,42
 100691c:	bdc00044 	addi	r23,r23,1
 1006920:	18831826 	beq	r3,r2,1007584 <___vfprintf_internal_r+0x1e98>
 1006924:	d8c14d15 	stw	r3,1332(sp)
 1006928:	18bff404 	addi	r2,r3,-48
 100692c:	00c00244 	movi	r3,9
 1006930:	18827b36 	bltu	r3,r2,1007320 <___vfprintf_internal_r+0x1c34>
 1006934:	1821883a 	mov	r16,r3
 1006938:	0009883a 	mov	r4,zero
 100693c:	01400284 	movi	r5,10
 1006940:	d9c15115 	stw	r7,1348(sp)
 1006944:	100435c0 	call	100435c <__mulsi3>
 1006948:	d9414d17 	ldw	r5,1332(sp)
 100694c:	b9800007 	ldb	r6,0(r23)
 1006950:	d9c15117 	ldw	r7,1348(sp)
 1006954:	1145883a 	add	r2,r2,r5
 1006958:	113ff404 	addi	r4,r2,-48
 100695c:	30bff404 	addi	r2,r6,-48
 1006960:	d9814d15 	stw	r6,1332(sp)
 1006964:	bdc00044 	addi	r23,r23,1
 1006968:	80bff42e 	bgeu	r16,r2,100693c <___vfprintf_internal_r+0x1250>
 100696c:	2027883a 	mov	r19,r4
 1006970:	203bdf0e 	bge	r4,zero,10058f0 <___vfprintf_internal_r+0x204>
 1006974:	04ffffc4 	movi	r19,-1
 1006978:	003bdd06 	br	10058f0 <___vfprintf_internal_r+0x204>
 100697c:	d8000405 	stb	zero,16(sp)
 1006980:	39800017 	ldw	r6,0(r7)
 1006984:	39c00104 	addi	r7,r7,4
 1006988:	d9c14015 	stw	r7,1280(sp)
 100698c:	d9814115 	stw	r6,1284(sp)
 1006990:	3001c926 	beq	r6,zero,10070b8 <___vfprintf_internal_r+0x19cc>
 1006994:	98000e16 	blt	r19,zero,10069d0 <___vfprintf_internal_r+0x12e4>
 1006998:	d9014117 	ldw	r4,1284(sp)
 100699c:	000b883a 	mov	r5,zero
 10069a0:	980d883a 	mov	r6,r19
 10069a4:	100a0e00 	call	100a0e0 <memchr>
 10069a8:	10025926 	beq	r2,zero,1007310 <___vfprintf_internal_r+0x1c24>
 10069ac:	d8c14117 	ldw	r3,1284(sp)
 10069b0:	10cfc83a 	sub	r7,r2,r3
 10069b4:	99c19e16 	blt	r19,r7,1007030 <___vfprintf_internal_r+0x1944>
 10069b8:	d9c14515 	stw	r7,1300(sp)
 10069bc:	38000916 	blt	r7,zero,10069e4 <___vfprintf_internal_r+0x12f8>
 10069c0:	d8014615 	stw	zero,1304(sp)
 10069c4:	003deb06 	br	1006174 <___vfprintf_internal_r+0xa88>
 10069c8:	b8c00007 	ldb	r3,0(r23)
 10069cc:	003bc606 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 10069d0:	d9014117 	ldw	r4,1284(sp)
 10069d4:	10056200 	call	1005620 <strlen>
 10069d8:	d8814515 	stw	r2,1300(sp)
 10069dc:	100f883a 	mov	r7,r2
 10069e0:	103ff70e 	bge	r2,zero,10069c0 <___vfprintf_internal_r+0x12d4>
 10069e4:	d8014515 	stw	zero,1300(sp)
 10069e8:	d8014615 	stw	zero,1304(sp)
 10069ec:	003de106 	br	1006174 <___vfprintf_internal_r+0xa88>
 10069f0:	20c03fcc 	andi	r3,r4,255
 10069f4:	00800044 	movi	r2,1
 10069f8:	18802d26 	beq	r3,r2,1006ab0 <___vfprintf_internal_r+0x13c4>
 10069fc:	18800e36 	bltu	r3,r2,1006a38 <___vfprintf_internal_r+0x134c>
 1006a00:	00800084 	movi	r2,2
 1006a04:	1880fa26 	beq	r3,r2,1006df0 <___vfprintf_internal_r+0x1704>
 1006a08:	01004074 	movhi	r4,257
 1006a0c:	2107f504 	addi	r4,r4,8148
 1006a10:	10056200 	call	1005620 <strlen>
 1006a14:	100f883a 	mov	r7,r2
 1006a18:	dcc14515 	stw	r19,1300(sp)
 1006a1c:	9880010e 	bge	r19,r2,1006a24 <___vfprintf_internal_r+0x1338>
 1006a20:	d8814515 	stw	r2,1300(sp)
 1006a24:	00804074 	movhi	r2,257
 1006a28:	1087f504 	addi	r2,r2,8148
 1006a2c:	dcc14615 	stw	r19,1304(sp)
 1006a30:	d8814115 	stw	r2,1284(sp)
 1006a34:	003dcf06 	br	1006174 <___vfprintf_internal_r+0xa88>
 1006a38:	d9401904 	addi	r5,sp,100
 1006a3c:	dd000f04 	addi	r20,sp,60
 1006a40:	d9414115 	stw	r5,1284(sp)
 1006a44:	880a977a 	slli	r5,r17,29
 1006a48:	d9814117 	ldw	r6,1284(sp)
 1006a4c:	8004d0fa 	srli	r2,r16,3
 1006a50:	8806d0fa 	srli	r3,r17,3
 1006a54:	810001cc 	andi	r4,r16,7
 1006a58:	2884b03a 	or	r2,r5,r2
 1006a5c:	31bfffc4 	addi	r6,r6,-1
 1006a60:	21000c04 	addi	r4,r4,48
 1006a64:	d9814115 	stw	r6,1284(sp)
 1006a68:	10cab03a 	or	r5,r2,r3
 1006a6c:	31000005 	stb	r4,0(r6)
 1006a70:	1021883a 	mov	r16,r2
 1006a74:	1823883a 	mov	r17,r3
 1006a78:	283ff21e 	bne	r5,zero,1006a44 <___vfprintf_internal_r+0x1358>
 1006a7c:	d8c14c17 	ldw	r3,1328(sp)
 1006a80:	1880004c 	andi	r2,r3,1
 1006a84:	1005003a 	cmpeq	r2,r2,zero
 1006a88:	103db31e 	bne	r2,zero,1006158 <___vfprintf_internal_r+0xa6c>
 1006a8c:	20803fcc 	andi	r2,r4,255
 1006a90:	1080201c 	xori	r2,r2,128
 1006a94:	10bfe004 	addi	r2,r2,-128
 1006a98:	00c00c04 	movi	r3,48
 1006a9c:	10fdae26 	beq	r2,r3,1006158 <___vfprintf_internal_r+0xa6c>
 1006aa0:	31bfffc4 	addi	r6,r6,-1
 1006aa4:	d9814115 	stw	r6,1284(sp)
 1006aa8:	30c00005 	stb	r3,0(r6)
 1006aac:	003daa06 	br	1006158 <___vfprintf_internal_r+0xa6c>
 1006ab0:	88800068 	cmpgeui	r2,r17,1
 1006ab4:	10002c1e 	bne	r2,zero,1006b68 <___vfprintf_internal_r+0x147c>
 1006ab8:	8800021e 	bne	r17,zero,1006ac4 <___vfprintf_internal_r+0x13d8>
 1006abc:	00800244 	movi	r2,9
 1006ac0:	14002936 	bltu	r2,r16,1006b68 <___vfprintf_internal_r+0x147c>
 1006ac4:	d90018c4 	addi	r4,sp,99
 1006ac8:	dd000f04 	addi	r20,sp,60
 1006acc:	d9014115 	stw	r4,1284(sp)
 1006ad0:	d9014117 	ldw	r4,1284(sp)
 1006ad4:	80800c04 	addi	r2,r16,48
 1006ad8:	20800005 	stb	r2,0(r4)
 1006adc:	003d9e06 	br	1006158 <___vfprintf_internal_r+0xa6c>
 1006ae0:	dc400d17 	ldw	r17,52(sp)
 1006ae4:	07004074 	movhi	fp,257
 1006ae8:	e707fc84 	addi	fp,fp,8178
 1006aec:	9425883a 	add	r18,r18,r16
 1006af0:	8c400044 	addi	r17,r17,1
 1006af4:	008001c4 	movi	r2,7
 1006af8:	1f000015 	stw	fp,0(r3)
 1006afc:	1c000115 	stw	r16,4(r3)
 1006b00:	dc800e15 	stw	r18,56(sp)
 1006b04:	dc400d15 	stw	r17,52(sp)
 1006b08:	147ddc16 	blt	r2,r17,100627c <___vfprintf_internal_r+0xb90>
 1006b0c:	18c00204 	addi	r3,r3,8
 1006b10:	003c7406 	br	1005ce4 <___vfprintf_internal_r+0x5f8>
 1006b14:	01000084 	movi	r4,2
 1006b18:	d8000405 	stb	zero,16(sp)
 1006b1c:	003d8106 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006b20:	d9814c17 	ldw	r6,1328(sp)
 1006b24:	30c4703a 	and	r2,r6,r3
 1006b28:	1005003a 	cmpeq	r2,r2,zero
 1006b2c:	103cb326 	beq	r2,zero,1005dfc <___vfprintf_internal_r+0x710>
 1006b30:	d9014117 	ldw	r4,1284(sp)
 1006b34:	94800044 	addi	r18,r18,1
 1006b38:	8c400044 	addi	r17,r17,1
 1006b3c:	008001c4 	movi	r2,7
 1006b40:	a9000015 	stw	r4,0(r21)
 1006b44:	a8c00115 	stw	r3,4(r21)
 1006b48:	dc800e15 	stw	r18,56(sp)
 1006b4c:	dc400d15 	stw	r17,52(sp)
 1006b50:	147e6016 	blt	r2,r17,10064d4 <___vfprintf_internal_r+0xde8>
 1006b54:	acc00204 	addi	r19,r21,8
 1006b58:	003cd106 	br	1005ea0 <___vfprintf_internal_r+0x7b4>
 1006b5c:	07004074 	movhi	fp,257
 1006b60:	e707fc84 	addi	fp,fp,8178
 1006b64:	003c4906 	br	1005c8c <___vfprintf_internal_r+0x5a0>
 1006b68:	dd000f04 	addi	r20,sp,60
 1006b6c:	dc801904 	addi	r18,sp,100
 1006b70:	8009883a 	mov	r4,r16
 1006b74:	880b883a 	mov	r5,r17
 1006b78:	01800284 	movi	r6,10
 1006b7c:	000f883a 	mov	r7,zero
 1006b80:	100c7e80 	call	100c7e8 <__umoddi3>
 1006b84:	12000c04 	addi	r8,r2,48
 1006b88:	94bfffc4 	addi	r18,r18,-1
 1006b8c:	8009883a 	mov	r4,r16
 1006b90:	880b883a 	mov	r5,r17
 1006b94:	01800284 	movi	r6,10
 1006b98:	000f883a 	mov	r7,zero
 1006b9c:	92000005 	stb	r8,0(r18)
 1006ba0:	100c17c0 	call	100c17c <__udivdi3>
 1006ba4:	1009883a 	mov	r4,r2
 1006ba8:	1021883a 	mov	r16,r2
 1006bac:	18800068 	cmpgeui	r2,r3,1
 1006bb0:	1823883a 	mov	r17,r3
 1006bb4:	103fee1e 	bne	r2,zero,1006b70 <___vfprintf_internal_r+0x1484>
 1006bb8:	1800021e 	bne	r3,zero,1006bc4 <___vfprintf_internal_r+0x14d8>
 1006bbc:	00800244 	movi	r2,9
 1006bc0:	113feb36 	bltu	r2,r4,1006b70 <___vfprintf_internal_r+0x1484>
 1006bc4:	94bfffc4 	addi	r18,r18,-1
 1006bc8:	dc814115 	stw	r18,1284(sp)
 1006bcc:	003fc006 	br	1006ad0 <___vfprintf_internal_r+0x13e4>
 1006bd0:	d9014c17 	ldw	r4,1328(sp)
 1006bd4:	2080004c 	andi	r2,r4,1
 1006bd8:	10009a1e 	bne	r2,zero,1006e44 <___vfprintf_internal_r+0x1758>
 1006bdc:	d9401904 	addi	r5,sp,100
 1006be0:	dd000f04 	addi	r20,sp,60
 1006be4:	d9414115 	stw	r5,1284(sp)
 1006be8:	003d5b06 	br	1006158 <___vfprintf_internal_r+0xa6c>
 1006bec:	d9014f17 	ldw	r4,1340(sp)
 1006bf0:	b00b883a 	mov	r5,r22
 1006bf4:	d9800c04 	addi	r6,sp,48
 1006bf8:	10056940 	call	1005694 <__sprint_r>
 1006bfc:	103c731e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006c00:	dc800e17 	ldw	r18,56(sp)
 1006c04:	d8c01904 	addi	r3,sp,100
 1006c08:	003cf906 	br	1005ff0 <___vfprintf_internal_r+0x904>
 1006c0c:	d8c14c17 	ldw	r3,1328(sp)
 1006c10:	1880040c 	andi	r2,r3,16
 1006c14:	1000711e 	bne	r2,zero,1006ddc <___vfprintf_internal_r+0x16f0>
 1006c18:	d9014c17 	ldw	r4,1328(sp)
 1006c1c:	2080100c 	andi	r2,r4,64
 1006c20:	10006e26 	beq	r2,zero,1006ddc <___vfprintf_internal_r+0x16f0>
 1006c24:	3c00000b 	ldhu	r16,0(r7)
 1006c28:	0023883a 	mov	r17,zero
 1006c2c:	39c00104 	addi	r7,r7,4
 1006c30:	d9c14015 	stw	r7,1280(sp)
 1006c34:	003efa06 	br	1006820 <___vfprintf_internal_r+0x1134>
 1006c38:	dc400d17 	ldw	r17,52(sp)
 1006c3c:	07004074 	movhi	fp,257
 1006c40:	e707fc84 	addi	fp,fp,8178
 1006c44:	9425883a 	add	r18,r18,r16
 1006c48:	8c400044 	addi	r17,r17,1
 1006c4c:	008001c4 	movi	r2,7
 1006c50:	1f000015 	stw	fp,0(r3)
 1006c54:	1c000115 	stw	r16,4(r3)
 1006c58:	dc800e15 	stw	r18,56(sp)
 1006c5c:	dc400d15 	stw	r17,52(sp)
 1006c60:	147d7016 	blt	r2,r17,1006224 <___vfprintf_internal_r+0xb38>
 1006c64:	18c00204 	addi	r3,r3,8
 1006c68:	003d7506 	br	1006240 <___vfprintf_internal_r+0xb54>
 1006c6c:	dc800e17 	ldw	r18,56(sp)
 1006c70:	dc400d17 	ldw	r17,52(sp)
 1006c74:	07004074 	movhi	fp,257
 1006c78:	e7080084 	addi	fp,fp,8194
 1006c7c:	003bba06 	br	1005b68 <___vfprintf_internal_r+0x47c>
 1006c80:	d9014f17 	ldw	r4,1340(sp)
 1006c84:	b00b883a 	mov	r5,r22
 1006c88:	d9800c04 	addi	r6,sp,48
 1006c8c:	10056940 	call	1005694 <__sprint_r>
 1006c90:	103c4e1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006c94:	dc800e17 	ldw	r18,56(sp)
 1006c98:	d8c01904 	addi	r3,sp,100
 1006c9c:	003ce306 	br	100602c <___vfprintf_internal_r+0x940>
 1006ca0:	3c000017 	ldw	r16,0(r7)
 1006ca4:	0009883a 	mov	r4,zero
 1006ca8:	39c00104 	addi	r7,r7,4
 1006cac:	0023883a 	mov	r17,zero
 1006cb0:	d9c14015 	stw	r7,1280(sp)
 1006cb4:	d8000405 	stb	zero,16(sp)
 1006cb8:	003d1a06 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006cbc:	38800017 	ldw	r2,0(r7)
 1006cc0:	39c00104 	addi	r7,r7,4
 1006cc4:	d9c14015 	stw	r7,1280(sp)
 1006cc8:	1023d7fa 	srai	r17,r2,31
 1006ccc:	1021883a 	mov	r16,r2
 1006cd0:	003d1206 	br	100611c <___vfprintf_internal_r+0xa30>
 1006cd4:	3c000017 	ldw	r16,0(r7)
 1006cd8:	01000044 	movi	r4,1
 1006cdc:	39c00104 	addi	r7,r7,4
 1006ce0:	0023883a 	mov	r17,zero
 1006ce4:	d9c14015 	stw	r7,1280(sp)
 1006ce8:	d8000405 	stb	zero,16(sp)
 1006cec:	003d0d06 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006cf0:	00804074 	movhi	r2,257
 1006cf4:	1087fc04 	addi	r2,r2,8176
 1006cf8:	94800044 	addi	r18,r18,1
 1006cfc:	8c400044 	addi	r17,r17,1
 1006d00:	a8800015 	stw	r2,0(r21)
 1006d04:	00c00044 	movi	r3,1
 1006d08:	008001c4 	movi	r2,7
 1006d0c:	a8c00115 	stw	r3,4(r21)
 1006d10:	dc800e15 	stw	r18,56(sp)
 1006d14:	dc400d15 	stw	r17,52(sp)
 1006d18:	1440ca16 	blt	r2,r17,1007044 <___vfprintf_internal_r+0x1958>
 1006d1c:	a8c00204 	addi	r3,r21,8
 1006d20:	2000061e 	bne	r4,zero,1006d3c <___vfprintf_internal_r+0x1650>
 1006d24:	d9414717 	ldw	r5,1308(sp)
 1006d28:	2800041e 	bne	r5,zero,1006d3c <___vfprintf_internal_r+0x1650>
 1006d2c:	d9814c17 	ldw	r6,1328(sp)
 1006d30:	3080004c 	andi	r2,r6,1
 1006d34:	1005003a 	cmpeq	r2,r2,zero
 1006d38:	103bea1e 	bne	r2,zero,1005ce4 <___vfprintf_internal_r+0x5f8>
 1006d3c:	00800044 	movi	r2,1
 1006d40:	dc400d17 	ldw	r17,52(sp)
 1006d44:	18800115 	stw	r2,4(r3)
 1006d48:	d8814917 	ldw	r2,1316(sp)
 1006d4c:	94800044 	addi	r18,r18,1
 1006d50:	8c400044 	addi	r17,r17,1
 1006d54:	18800015 	stw	r2,0(r3)
 1006d58:	008001c4 	movi	r2,7
 1006d5c:	dc800e15 	stw	r18,56(sp)
 1006d60:	dc400d15 	stw	r17,52(sp)
 1006d64:	1440ca16 	blt	r2,r17,1007090 <___vfprintf_internal_r+0x19a4>
 1006d68:	18c00204 	addi	r3,r3,8
 1006d6c:	0121c83a 	sub	r16,zero,r4
 1006d70:	0400500e 	bge	zero,r16,1006eb4 <___vfprintf_internal_r+0x17c8>
 1006d74:	00800404 	movi	r2,16
 1006d78:	1400800e 	bge	r2,r16,1006f7c <___vfprintf_internal_r+0x1890>
 1006d7c:	1027883a 	mov	r19,r2
 1006d80:	07004074 	movhi	fp,257
 1006d84:	e707fc84 	addi	fp,fp,8178
 1006d88:	050001c4 	movi	r20,7
 1006d8c:	00000306 	br	1006d9c <___vfprintf_internal_r+0x16b0>
 1006d90:	18c00204 	addi	r3,r3,8
 1006d94:	843ffc04 	addi	r16,r16,-16
 1006d98:	9c007a0e 	bge	r19,r16,1006f84 <___vfprintf_internal_r+0x1898>
 1006d9c:	94800404 	addi	r18,r18,16
 1006da0:	8c400044 	addi	r17,r17,1
 1006da4:	1f000015 	stw	fp,0(r3)
 1006da8:	1cc00115 	stw	r19,4(r3)
 1006dac:	dc800e15 	stw	r18,56(sp)
 1006db0:	dc400d15 	stw	r17,52(sp)
 1006db4:	a47ff60e 	bge	r20,r17,1006d90 <___vfprintf_internal_r+0x16a4>
 1006db8:	d9014f17 	ldw	r4,1340(sp)
 1006dbc:	b00b883a 	mov	r5,r22
 1006dc0:	d9800c04 	addi	r6,sp,48
 1006dc4:	10056940 	call	1005694 <__sprint_r>
 1006dc8:	103c001e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006dcc:	dc800e17 	ldw	r18,56(sp)
 1006dd0:	dc400d17 	ldw	r17,52(sp)
 1006dd4:	d8c01904 	addi	r3,sp,100
 1006dd8:	003fee06 	br	1006d94 <___vfprintf_internal_r+0x16a8>
 1006ddc:	3c000017 	ldw	r16,0(r7)
 1006de0:	0023883a 	mov	r17,zero
 1006de4:	39c00104 	addi	r7,r7,4
 1006de8:	d9c14015 	stw	r7,1280(sp)
 1006dec:	003e8c06 	br	1006820 <___vfprintf_internal_r+0x1134>
 1006df0:	d9401904 	addi	r5,sp,100
 1006df4:	dd000f04 	addi	r20,sp,60
 1006df8:	d9414115 	stw	r5,1284(sp)
 1006dfc:	d9814417 	ldw	r6,1296(sp)
 1006e00:	880a973a 	slli	r5,r17,28
 1006e04:	8004d13a 	srli	r2,r16,4
 1006e08:	810003cc 	andi	r4,r16,15
 1006e0c:	3109883a 	add	r4,r6,r4
 1006e10:	2884b03a 	or	r2,r5,r2
 1006e14:	21400003 	ldbu	r5,0(r4)
 1006e18:	d9014117 	ldw	r4,1284(sp)
 1006e1c:	8806d13a 	srli	r3,r17,4
 1006e20:	1021883a 	mov	r16,r2
 1006e24:	213fffc4 	addi	r4,r4,-1
 1006e28:	d9014115 	stw	r4,1284(sp)
 1006e2c:	d9814117 	ldw	r6,1284(sp)
 1006e30:	10c8b03a 	or	r4,r2,r3
 1006e34:	1823883a 	mov	r17,r3
 1006e38:	31400005 	stb	r5,0(r6)
 1006e3c:	203fef1e 	bne	r4,zero,1006dfc <___vfprintf_internal_r+0x1710>
 1006e40:	003cc506 	br	1006158 <___vfprintf_internal_r+0xa6c>
 1006e44:	00800c04 	movi	r2,48
 1006e48:	d98018c4 	addi	r6,sp,99
 1006e4c:	dd000f04 	addi	r20,sp,60
 1006e50:	d88018c5 	stb	r2,99(sp)
 1006e54:	d9814115 	stw	r6,1284(sp)
 1006e58:	003cbf06 	br	1006158 <___vfprintf_internal_r+0xa6c>
 1006e5c:	dc400d17 	ldw	r17,52(sp)
 1006e60:	07004074 	movhi	fp,257
 1006e64:	e7080084 	addi	fp,fp,8194
 1006e68:	003bc106 	br	1005d70 <___vfprintf_internal_r+0x684>
 1006e6c:	d9414c17 	ldw	r5,1328(sp)
 1006e70:	2880040c 	andi	r2,r5,16
 1006e74:	10007c26 	beq	r2,zero,1007068 <___vfprintf_internal_r+0x197c>
 1006e78:	38800017 	ldw	r2,0(r7)
 1006e7c:	39c00104 	addi	r7,r7,4
 1006e80:	d9c14015 	stw	r7,1280(sp)
 1006e84:	d9814b17 	ldw	r6,1324(sp)
 1006e88:	d9c14017 	ldw	r7,1280(sp)
 1006e8c:	11800015 	stw	r6,0(r2)
 1006e90:	003a7206 	br	100585c <___vfprintf_internal_r+0x170>
 1006e94:	d9014f17 	ldw	r4,1340(sp)
 1006e98:	b00b883a 	mov	r5,r22
 1006e9c:	d9800c04 	addi	r6,sp,48
 1006ea0:	10056940 	call	1005694 <__sprint_r>
 1006ea4:	103bc91e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006ea8:	dc800e17 	ldw	r18,56(sp)
 1006eac:	dc400d17 	ldw	r17,52(sp)
 1006eb0:	d8c01904 	addi	r3,sp,100
 1006eb4:	d9014717 	ldw	r4,1308(sp)
 1006eb8:	d9414117 	ldw	r5,1284(sp)
 1006ebc:	8c400044 	addi	r17,r17,1
 1006ec0:	9125883a 	add	r18,r18,r4
 1006ec4:	008001c4 	movi	r2,7
 1006ec8:	19400015 	stw	r5,0(r3)
 1006ecc:	19000115 	stw	r4,4(r3)
 1006ed0:	dc800e15 	stw	r18,56(sp)
 1006ed4:	dc400d15 	stw	r17,52(sp)
 1006ed8:	147ce816 	blt	r2,r17,100627c <___vfprintf_internal_r+0xb90>
 1006edc:	18c00204 	addi	r3,r3,8
 1006ee0:	003b8006 	br	1005ce4 <___vfprintf_internal_r+0x5f8>
 1006ee4:	38c00017 	ldw	r3,0(r7)
 1006ee8:	39000204 	addi	r4,r7,8
 1006eec:	d9014015 	stw	r4,1280(sp)
 1006ef0:	d8c14215 	stw	r3,1288(sp)
 1006ef4:	39c00117 	ldw	r7,4(r7)
 1006ef8:	d9c14315 	stw	r7,1292(sp)
 1006efc:	003e1a06 	br	1006768 <___vfprintf_internal_r+0x107c>
 1006f00:	0005883a 	mov	r2,zero
 1006f04:	1409c83a 	sub	r4,r2,r16
 1006f08:	1105803a 	cmpltu	r2,r2,r4
 1006f0c:	044bc83a 	sub	r5,zero,r17
 1006f10:	2885c83a 	sub	r2,r5,r2
 1006f14:	2021883a 	mov	r16,r4
 1006f18:	1023883a 	mov	r17,r2
 1006f1c:	01000044 	movi	r4,1
 1006f20:	00800b44 	movi	r2,45
 1006f24:	d8800405 	stb	r2,16(sp)
 1006f28:	003c7e06 	br	1006124 <___vfprintf_internal_r+0xa38>
 1006f2c:	d9014f17 	ldw	r4,1340(sp)
 1006f30:	b00b883a 	mov	r5,r22
 1006f34:	d9800c04 	addi	r6,sp,48
 1006f38:	10056940 	call	1005694 <__sprint_r>
 1006f3c:	103ba31e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006f40:	dc800e17 	ldw	r18,56(sp)
 1006f44:	dc400d17 	ldw	r17,52(sp)
 1006f48:	d9000517 	ldw	r4,20(sp)
 1006f4c:	d9401904 	addi	r5,sp,100
 1006f50:	003da106 	br	10065d8 <___vfprintf_internal_r+0xeec>
 1006f54:	d9014f17 	ldw	r4,1340(sp)
 1006f58:	b00b883a 	mov	r5,r22
 1006f5c:	d9800c04 	addi	r6,sp,48
 1006f60:	10056940 	call	1005694 <__sprint_r>
 1006f64:	103b991e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006f68:	dc800e17 	ldw	r18,56(sp)
 1006f6c:	dc400d17 	ldw	r17,52(sp)
 1006f70:	d9000517 	ldw	r4,20(sp)
 1006f74:	d8c01904 	addi	r3,sp,100
 1006f78:	003d8b06 	br	10065a8 <___vfprintf_internal_r+0xebc>
 1006f7c:	07004074 	movhi	fp,257
 1006f80:	e707fc84 	addi	fp,fp,8178
 1006f84:	9425883a 	add	r18,r18,r16
 1006f88:	8c400044 	addi	r17,r17,1
 1006f8c:	008001c4 	movi	r2,7
 1006f90:	1f000015 	stw	fp,0(r3)
 1006f94:	1c000115 	stw	r16,4(r3)
 1006f98:	dc800e15 	stw	r18,56(sp)
 1006f9c:	dc400d15 	stw	r17,52(sp)
 1006fa0:	147fbc16 	blt	r2,r17,1006e94 <___vfprintf_internal_r+0x17a8>
 1006fa4:	18c00204 	addi	r3,r3,8
 1006fa8:	003fc206 	br	1006eb4 <___vfprintf_internal_r+0x17c8>
 1006fac:	d9014f17 	ldw	r4,1340(sp)
 1006fb0:	b00b883a 	mov	r5,r22
 1006fb4:	d9800c04 	addi	r6,sp,48
 1006fb8:	10056940 	call	1005694 <__sprint_r>
 1006fbc:	103b831e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1006fc0:	dc800e17 	ldw	r18,56(sp)
 1006fc4:	d9000517 	ldw	r4,20(sp)
 1006fc8:	d8c01904 	addi	r3,sp,100
 1006fcc:	003cfc06 	br	10063c0 <___vfprintf_internal_r+0xcd4>
 1006fd0:	07004074 	movhi	fp,257
 1006fd4:	e707fc84 	addi	fp,fp,8178
 1006fd8:	003bde06 	br	1005f54 <___vfprintf_internal_r+0x868>
 1006fdc:	00804074 	movhi	r2,257
 1006fe0:	1087eb04 	addi	r2,r2,8108
 1006fe4:	d8814115 	stw	r2,1284(sp)
 1006fe8:	003def06 	br	10067a8 <___vfprintf_internal_r+0x10bc>
 1006fec:	d9014217 	ldw	r4,1288(sp)
 1006ff0:	d9414317 	ldw	r5,1292(sp)
 1006ff4:	100ba9c0 	call	100ba9c <__isnand>
 1006ff8:	10003926 	beq	r2,zero,10070e0 <___vfprintf_internal_r+0x19f4>
 1006ffc:	d9414d17 	ldw	r5,1332(sp)
 1007000:	008011c4 	movi	r2,71
 1007004:	1140ce16 	blt	r2,r5,1007340 <___vfprintf_internal_r+0x1c54>
 1007008:	01804074 	movhi	r6,257
 100700c:	3187ec04 	addi	r6,r6,8112
 1007010:	d9814115 	stw	r6,1284(sp)
 1007014:	003de406 	br	10067a8 <___vfprintf_internal_r+0x10bc>
 1007018:	d9014c17 	ldw	r4,1328(sp)
 100701c:	bdc00044 	addi	r23,r23,1
 1007020:	b8c00007 	ldb	r3,0(r23)
 1007024:	21000814 	ori	r4,r4,32
 1007028:	d9014c15 	stw	r4,1328(sp)
 100702c:	003a2e06 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 1007030:	dcc14515 	stw	r19,1300(sp)
 1007034:	98011016 	blt	r19,zero,1007478 <___vfprintf_internal_r+0x1d8c>
 1007038:	980f883a 	mov	r7,r19
 100703c:	d8014615 	stw	zero,1304(sp)
 1007040:	003c4c06 	br	1006174 <___vfprintf_internal_r+0xa88>
 1007044:	d9014f17 	ldw	r4,1340(sp)
 1007048:	b00b883a 	mov	r5,r22
 100704c:	d9800c04 	addi	r6,sp,48
 1007050:	10056940 	call	1005694 <__sprint_r>
 1007054:	103b5d1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 1007058:	dc800e17 	ldw	r18,56(sp)
 100705c:	d9000517 	ldw	r4,20(sp)
 1007060:	d8c01904 	addi	r3,sp,100
 1007064:	003f2e06 	br	1006d20 <___vfprintf_internal_r+0x1634>
 1007068:	d8c14c17 	ldw	r3,1328(sp)
 100706c:	1880100c 	andi	r2,r3,64
 1007070:	1000a026 	beq	r2,zero,10072f4 <___vfprintf_internal_r+0x1c08>
 1007074:	38800017 	ldw	r2,0(r7)
 1007078:	39c00104 	addi	r7,r7,4
 100707c:	d9c14015 	stw	r7,1280(sp)
 1007080:	d9014b17 	ldw	r4,1324(sp)
 1007084:	d9c14017 	ldw	r7,1280(sp)
 1007088:	1100000d 	sth	r4,0(r2)
 100708c:	0039f306 	br	100585c <___vfprintf_internal_r+0x170>
 1007090:	d9014f17 	ldw	r4,1340(sp)
 1007094:	b00b883a 	mov	r5,r22
 1007098:	d9800c04 	addi	r6,sp,48
 100709c:	10056940 	call	1005694 <__sprint_r>
 10070a0:	103b4a1e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10070a4:	dc800e17 	ldw	r18,56(sp)
 10070a8:	dc400d17 	ldw	r17,52(sp)
 10070ac:	d9000517 	ldw	r4,20(sp)
 10070b0:	d8c01904 	addi	r3,sp,100
 10070b4:	003f2d06 	br	1006d6c <___vfprintf_internal_r+0x1680>
 10070b8:	00800184 	movi	r2,6
 10070bc:	14c09a36 	bltu	r2,r19,1007328 <___vfprintf_internal_r+0x1c3c>
 10070c0:	dcc14515 	stw	r19,1300(sp)
 10070c4:	9800010e 	bge	r19,zero,10070cc <___vfprintf_internal_r+0x19e0>
 10070c8:	d8014515 	stw	zero,1300(sp)
 10070cc:	00804074 	movhi	r2,257
 10070d0:	1087ee04 	addi	r2,r2,8120
 10070d4:	980f883a 	mov	r7,r19
 10070d8:	d8814115 	stw	r2,1284(sp)
 10070dc:	003a7206 	br	1005aa8 <___vfprintf_internal_r+0x3bc>
 10070e0:	00bfffc4 	movi	r2,-1
 10070e4:	9880e226 	beq	r19,r2,1007470 <___vfprintf_internal_r+0x1d84>
 10070e8:	d9414d17 	ldw	r5,1332(sp)
 10070ec:	008019c4 	movi	r2,103
 10070f0:	2880dc26 	beq	r5,r2,1007464 <___vfprintf_internal_r+0x1d78>
 10070f4:	008011c4 	movi	r2,71
 10070f8:	2880da26 	beq	r5,r2,1007464 <___vfprintf_internal_r+0x1d78>
 10070fc:	d9414c17 	ldw	r5,1328(sp)
 1007100:	d9014317 	ldw	r4,1292(sp)
 1007104:	d9814217 	ldw	r6,1288(sp)
 1007108:	29404014 	ori	r5,r5,256
 100710c:	d9414c15 	stw	r5,1328(sp)
 1007110:	2000cc16 	blt	r4,zero,1007444 <___vfprintf_internal_r+0x1d58>
 1007114:	3021883a 	mov	r16,r6
 1007118:	2023883a 	mov	r17,r4
 100711c:	0039883a 	mov	fp,zero
 1007120:	d9414d17 	ldw	r5,1332(sp)
 1007124:	00801984 	movi	r2,102
 1007128:	2880b726 	beq	r5,r2,1007408 <___vfprintf_internal_r+0x1d1c>
 100712c:	00801184 	movi	r2,70
 1007130:	2880b526 	beq	r5,r2,1007408 <___vfprintf_internal_r+0x1d1c>
 1007134:	00801944 	movi	r2,101
 1007138:	2880c826 	beq	r5,r2,100745c <___vfprintf_internal_r+0x1d70>
 100713c:	00801144 	movi	r2,69
 1007140:	2880c626 	beq	r5,r2,100745c <___vfprintf_internal_r+0x1d70>
 1007144:	9829883a 	mov	r20,r19
 1007148:	d9014f17 	ldw	r4,1340(sp)
 100714c:	d8800504 	addi	r2,sp,20
 1007150:	880d883a 	mov	r6,r17
 1007154:	d8800115 	stw	r2,4(sp)
 1007158:	d8c00604 	addi	r3,sp,24
 100715c:	d8800704 	addi	r2,sp,28
 1007160:	800b883a 	mov	r5,r16
 1007164:	01c00084 	movi	r7,2
 1007168:	d8c00215 	stw	r3,8(sp)
 100716c:	d8800315 	stw	r2,12(sp)
 1007170:	dd000015 	stw	r20,0(sp)
 1007174:	10079540 	call	1007954 <_dtoa_r>
 1007178:	d9814d17 	ldw	r6,1332(sp)
 100717c:	d8814115 	stw	r2,1284(sp)
 1007180:	008019c4 	movi	r2,103
 1007184:	30809526 	beq	r6,r2,10073dc <___vfprintf_internal_r+0x1cf0>
 1007188:	d8c14d17 	ldw	r3,1332(sp)
 100718c:	008011c4 	movi	r2,71
 1007190:	18809226 	beq	r3,r2,10073dc <___vfprintf_internal_r+0x1cf0>
 1007194:	d9414117 	ldw	r5,1284(sp)
 1007198:	d9814d17 	ldw	r6,1332(sp)
 100719c:	00801984 	movi	r2,102
 10071a0:	2d25883a 	add	r18,r5,r20
 10071a4:	30808626 	beq	r6,r2,10073c0 <___vfprintf_internal_r+0x1cd4>
 10071a8:	00801184 	movi	r2,70
 10071ac:	30808426 	beq	r6,r2,10073c0 <___vfprintf_internal_r+0x1cd4>
 10071b0:	000d883a 	mov	r6,zero
 10071b4:	000f883a 	mov	r7,zero
 10071b8:	880b883a 	mov	r5,r17
 10071bc:	8009883a 	mov	r4,r16
 10071c0:	1003e700 	call	1003e70 <__eqdf2>
 10071c4:	1000751e 	bne	r2,zero,100739c <___vfprintf_internal_r+0x1cb0>
 10071c8:	9005883a 	mov	r2,r18
 10071cc:	dc800715 	stw	r18,28(sp)
 10071d0:	d9014117 	ldw	r4,1284(sp)
 10071d4:	d9414d17 	ldw	r5,1332(sp)
 10071d8:	00c019c4 	movi	r3,103
 10071dc:	1125c83a 	sub	r18,r2,r4
 10071e0:	28c06826 	beq	r5,r3,1007384 <___vfprintf_internal_r+0x1c98>
 10071e4:	008011c4 	movi	r2,71
 10071e8:	28806626 	beq	r5,r2,1007384 <___vfprintf_internal_r+0x1c98>
 10071ec:	d9000517 	ldw	r4,20(sp)
 10071f0:	d8c14d17 	ldw	r3,1332(sp)
 10071f4:	00801944 	movi	r2,101
 10071f8:	10c05516 	blt	r2,r3,1007350 <___vfprintf_internal_r+0x1c64>
 10071fc:	213fffc4 	addi	r4,r4,-1
 1007200:	d9000515 	stw	r4,20(sp)
 1007204:	d8c00805 	stb	r3,32(sp)
 1007208:	2021883a 	mov	r16,r4
 100720c:	2000c116 	blt	r4,zero,1007514 <___vfprintf_internal_r+0x1e28>
 1007210:	00800ac4 	movi	r2,43
 1007214:	d8800845 	stb	r2,33(sp)
 1007218:	00800244 	movi	r2,9
 100721c:	1400af0e 	bge	r2,r16,10074dc <___vfprintf_internal_r+0x1df0>
 1007220:	1027883a 	mov	r19,r2
 1007224:	dc400b84 	addi	r17,sp,46
 1007228:	8009883a 	mov	r4,r16
 100722c:	01400284 	movi	r5,10
 1007230:	10042ec0 	call	10042ec <__modsi3>
 1007234:	10800c04 	addi	r2,r2,48
 1007238:	8c7fffc4 	addi	r17,r17,-1
 100723c:	8009883a 	mov	r4,r16
 1007240:	01400284 	movi	r5,10
 1007244:	88800005 	stb	r2,0(r17)
 1007248:	100428c0 	call	100428c <__divsi3>
 100724c:	1021883a 	mov	r16,r2
 1007250:	98bff516 	blt	r19,r2,1007228 <___vfprintf_internal_r+0x1b3c>
 1007254:	10c00c04 	addi	r3,r2,48
 1007258:	d88009c4 	addi	r2,sp,39
 100725c:	108001c4 	addi	r2,r2,7
 1007260:	897fffc4 	addi	r5,r17,-1
 1007264:	88ffffc5 	stb	r3,-1(r17)
 1007268:	2880a72e 	bgeu	r5,r2,1007508 <___vfprintf_internal_r+0x1e1c>
 100726c:	1009883a 	mov	r4,r2
 1007270:	d9800804 	addi	r6,sp,32
 1007274:	d8c00884 	addi	r3,sp,34
 1007278:	28800003 	ldbu	r2,0(r5)
 100727c:	29400044 	addi	r5,r5,1
 1007280:	18800005 	stb	r2,0(r3)
 1007284:	18c00044 	addi	r3,r3,1
 1007288:	293ffb36 	bltu	r5,r4,1007278 <___vfprintf_internal_r+0x1b8c>
 100728c:	1987c83a 	sub	r3,r3,r6
 1007290:	00800044 	movi	r2,1
 1007294:	d8c14815 	stw	r3,1312(sp)
 1007298:	90cf883a 	add	r7,r18,r3
 100729c:	1480960e 	bge	r2,r18,10074f8 <___vfprintf_internal_r+0x1e0c>
 10072a0:	39c00044 	addi	r7,r7,1
 10072a4:	d9c14515 	stw	r7,1300(sp)
 10072a8:	38003416 	blt	r7,zero,100737c <___vfprintf_internal_r+0x1c90>
 10072ac:	e0803fcc 	andi	r2,fp,255
 10072b0:	1080201c 	xori	r2,r2,128
 10072b4:	10bfe004 	addi	r2,r2,-128
 10072b8:	10004e26 	beq	r2,zero,10073f4 <___vfprintf_internal_r+0x1d08>
 10072bc:	00800b44 	movi	r2,45
 10072c0:	dc814715 	stw	r18,1308(sp)
 10072c4:	d8014615 	stw	zero,1304(sp)
 10072c8:	d8800405 	stb	r2,16(sp)
 10072cc:	003bab06 	br	100617c <___vfprintf_internal_r+0xa90>
 10072d0:	00800b44 	movi	r2,45
 10072d4:	d8800405 	stb	r2,16(sp)
 10072d8:	003d2d06 	br	1006790 <___vfprintf_internal_r+0x10a4>
 10072dc:	d9014f17 	ldw	r4,1340(sp)
 10072e0:	b00b883a 	mov	r5,r22
 10072e4:	d9800c04 	addi	r6,sp,48
 10072e8:	10056940 	call	1005694 <__sprint_r>
 10072ec:	103ab71e 	bne	r2,zero,1005dcc <___vfprintf_internal_r+0x6e0>
 10072f0:	003ab506 	br	1005dc8 <___vfprintf_internal_r+0x6dc>
 10072f4:	38800017 	ldw	r2,0(r7)
 10072f8:	39c00104 	addi	r7,r7,4
 10072fc:	d9c14015 	stw	r7,1280(sp)
 1007300:	d9414b17 	ldw	r5,1324(sp)
 1007304:	d9c14017 	ldw	r7,1280(sp)
 1007308:	11400015 	stw	r5,0(r2)
 100730c:	00395306 	br	100585c <___vfprintf_internal_r+0x170>
 1007310:	980f883a 	mov	r7,r19
 1007314:	dcc14515 	stw	r19,1300(sp)
 1007318:	d8014615 	stw	zero,1304(sp)
 100731c:	003b9506 	br	1006174 <___vfprintf_internal_r+0xa88>
 1007320:	0027883a 	mov	r19,zero
 1007324:	00397206 	br	10058f0 <___vfprintf_internal_r+0x204>
 1007328:	00c04074 	movhi	r3,257
 100732c:	18c7ee04 	addi	r3,r3,8120
 1007330:	100f883a 	mov	r7,r2
 1007334:	d8814515 	stw	r2,1300(sp)
 1007338:	d8c14115 	stw	r3,1284(sp)
 100733c:	0039da06 	br	1005aa8 <___vfprintf_internal_r+0x3bc>
 1007340:	00804074 	movhi	r2,257
 1007344:	1087ed04 	addi	r2,r2,8116
 1007348:	d8814115 	stw	r2,1284(sp)
 100734c:	003d1606 	br	10067a8 <___vfprintf_internal_r+0x10bc>
 1007350:	d9414d17 	ldw	r5,1332(sp)
 1007354:	00801984 	movi	r2,102
 1007358:	28804926 	beq	r5,r2,1007480 <___vfprintf_internal_r+0x1d94>
 100735c:	200f883a 	mov	r7,r4
 1007360:	24805716 	blt	r4,r18,10074c0 <___vfprintf_internal_r+0x1dd4>
 1007364:	d9414c17 	ldw	r5,1328(sp)
 1007368:	2880004c 	andi	r2,r5,1
 100736c:	10000126 	beq	r2,zero,1007374 <___vfprintf_internal_r+0x1c88>
 1007370:	21c00044 	addi	r7,r4,1
 1007374:	d9c14515 	stw	r7,1300(sp)
 1007378:	383fcc0e 	bge	r7,zero,10072ac <___vfprintf_internal_r+0x1bc0>
 100737c:	d8014515 	stw	zero,1300(sp)
 1007380:	003fca06 	br	10072ac <___vfprintf_internal_r+0x1bc0>
 1007384:	d9000517 	ldw	r4,20(sp)
 1007388:	00bfff04 	movi	r2,-4
 100738c:	1100480e 	bge	r2,r4,10074b0 <___vfprintf_internal_r+0x1dc4>
 1007390:	99004716 	blt	r19,r4,10074b0 <___vfprintf_internal_r+0x1dc4>
 1007394:	d8c14d15 	stw	r3,1332(sp)
 1007398:	003ff006 	br	100735c <___vfprintf_internal_r+0x1c70>
 100739c:	d8800717 	ldw	r2,28(sp)
 10073a0:	14bf8b2e 	bgeu	r2,r18,10071d0 <___vfprintf_internal_r+0x1ae4>
 10073a4:	9007883a 	mov	r3,r18
 10073a8:	01000c04 	movi	r4,48
 10073ac:	11000005 	stb	r4,0(r2)
 10073b0:	10800044 	addi	r2,r2,1
 10073b4:	d8800715 	stw	r2,28(sp)
 10073b8:	18bffc1e 	bne	r3,r2,10073ac <___vfprintf_internal_r+0x1cc0>
 10073bc:	003f8406 	br	10071d0 <___vfprintf_internal_r+0x1ae4>
 10073c0:	d8814117 	ldw	r2,1284(sp)
 10073c4:	10c00007 	ldb	r3,0(r2)
 10073c8:	00800c04 	movi	r2,48
 10073cc:	18805b26 	beq	r3,r2,100753c <___vfprintf_internal_r+0x1e50>
 10073d0:	d9000517 	ldw	r4,20(sp)
 10073d4:	9125883a 	add	r18,r18,r4
 10073d8:	003f7506 	br	10071b0 <___vfprintf_internal_r+0x1ac4>
 10073dc:	d9014c17 	ldw	r4,1328(sp)
 10073e0:	2080004c 	andi	r2,r4,1
 10073e4:	1005003a 	cmpeq	r2,r2,zero
 10073e8:	103f6a26 	beq	r2,zero,1007194 <___vfprintf_internal_r+0x1aa8>
 10073ec:	d8800717 	ldw	r2,28(sp)
 10073f0:	003f7706 	br	10071d0 <___vfprintf_internal_r+0x1ae4>
 10073f4:	d9c14515 	stw	r7,1300(sp)
 10073f8:	38004d16 	blt	r7,zero,1007530 <___vfprintf_internal_r+0x1e44>
 10073fc:	dc814715 	stw	r18,1308(sp)
 1007400:	d8014615 	stw	zero,1304(sp)
 1007404:	003b5b06 	br	1006174 <___vfprintf_internal_r+0xa88>
 1007408:	d9014f17 	ldw	r4,1340(sp)
 100740c:	d8800504 	addi	r2,sp,20
 1007410:	d8800115 	stw	r2,4(sp)
 1007414:	d8c00604 	addi	r3,sp,24
 1007418:	d8800704 	addi	r2,sp,28
 100741c:	800b883a 	mov	r5,r16
 1007420:	880d883a 	mov	r6,r17
 1007424:	01c000c4 	movi	r7,3
 1007428:	d8c00215 	stw	r3,8(sp)
 100742c:	d8800315 	stw	r2,12(sp)
 1007430:	dcc00015 	stw	r19,0(sp)
 1007434:	9829883a 	mov	r20,r19
 1007438:	10079540 	call	1007954 <_dtoa_r>
 100743c:	d8814115 	stw	r2,1284(sp)
 1007440:	003f5106 	br	1007188 <___vfprintf_internal_r+0x1a9c>
 1007444:	d8c14217 	ldw	r3,1288(sp)
 1007448:	d9014317 	ldw	r4,1292(sp)
 100744c:	07000b44 	movi	fp,45
 1007450:	1821883a 	mov	r16,r3
 1007454:	2460003c 	xorhi	r17,r4,32768
 1007458:	003f3106 	br	1007120 <___vfprintf_internal_r+0x1a34>
 100745c:	9d000044 	addi	r20,r19,1
 1007460:	003f3906 	br	1007148 <___vfprintf_internal_r+0x1a5c>
 1007464:	983f251e 	bne	r19,zero,10070fc <___vfprintf_internal_r+0x1a10>
 1007468:	04c00044 	movi	r19,1
 100746c:	003f2306 	br	10070fc <___vfprintf_internal_r+0x1a10>
 1007470:	04c00184 	movi	r19,6
 1007474:	003f2106 	br	10070fc <___vfprintf_internal_r+0x1a10>
 1007478:	d8014515 	stw	zero,1300(sp)
 100747c:	003eee06 	br	1007038 <___vfprintf_internal_r+0x194c>
 1007480:	200f883a 	mov	r7,r4
 1007484:	0100370e 	bge	zero,r4,1007564 <___vfprintf_internal_r+0x1e78>
 1007488:	9800031e 	bne	r19,zero,1007498 <___vfprintf_internal_r+0x1dac>
 100748c:	d9814c17 	ldw	r6,1328(sp)
 1007490:	3080004c 	andi	r2,r6,1
 1007494:	103fb726 	beq	r2,zero,1007374 <___vfprintf_internal_r+0x1c88>
 1007498:	20800044 	addi	r2,r4,1
 100749c:	98a7883a 	add	r19,r19,r2
 10074a0:	dcc14515 	stw	r19,1300(sp)
 10074a4:	980f883a 	mov	r7,r19
 10074a8:	983f800e 	bge	r19,zero,10072ac <___vfprintf_internal_r+0x1bc0>
 10074ac:	003fb306 	br	100737c <___vfprintf_internal_r+0x1c90>
 10074b0:	d9814d17 	ldw	r6,1332(sp)
 10074b4:	31bfff84 	addi	r6,r6,-2
 10074b8:	d9814d15 	stw	r6,1332(sp)
 10074bc:	003f4c06 	br	10071f0 <___vfprintf_internal_r+0x1b04>
 10074c0:	0100180e 	bge	zero,r4,1007524 <___vfprintf_internal_r+0x1e38>
 10074c4:	00800044 	movi	r2,1
 10074c8:	1485883a 	add	r2,r2,r18
 10074cc:	d8814515 	stw	r2,1300(sp)
 10074d0:	100f883a 	mov	r7,r2
 10074d4:	103f750e 	bge	r2,zero,10072ac <___vfprintf_internal_r+0x1bc0>
 10074d8:	003fa806 	br	100737c <___vfprintf_internal_r+0x1c90>
 10074dc:	80c00c04 	addi	r3,r16,48
 10074e0:	00800c04 	movi	r2,48
 10074e4:	d8c008c5 	stb	r3,35(sp)
 10074e8:	d9800804 	addi	r6,sp,32
 10074ec:	d8c00904 	addi	r3,sp,36
 10074f0:	d8800885 	stb	r2,34(sp)
 10074f4:	003f6506 	br	100728c <___vfprintf_internal_r+0x1ba0>
 10074f8:	d9014c17 	ldw	r4,1328(sp)
 10074fc:	2084703a 	and	r2,r4,r2
 1007500:	103f9c26 	beq	r2,zero,1007374 <___vfprintf_internal_r+0x1c88>
 1007504:	003f6606 	br	10072a0 <___vfprintf_internal_r+0x1bb4>
 1007508:	d9800804 	addi	r6,sp,32
 100750c:	d8c00884 	addi	r3,sp,34
 1007510:	003f5e06 	br	100728c <___vfprintf_internal_r+0x1ba0>
 1007514:	00800b44 	movi	r2,45
 1007518:	0121c83a 	sub	r16,zero,r4
 100751c:	d8800845 	stb	r2,33(sp)
 1007520:	003f3d06 	br	1007218 <___vfprintf_internal_r+0x1b2c>
 1007524:	00800084 	movi	r2,2
 1007528:	1105c83a 	sub	r2,r2,r4
 100752c:	003fe606 	br	10074c8 <___vfprintf_internal_r+0x1ddc>
 1007530:	d8014515 	stw	zero,1300(sp)
 1007534:	dc814715 	stw	r18,1308(sp)
 1007538:	003fb106 	br	1007400 <___vfprintf_internal_r+0x1d14>
 100753c:	000d883a 	mov	r6,zero
 1007540:	000f883a 	mov	r7,zero
 1007544:	8009883a 	mov	r4,r16
 1007548:	880b883a 	mov	r5,r17
 100754c:	100d0a00 	call	100d0a0 <__nedf2>
 1007550:	103f9f26 	beq	r2,zero,10073d0 <___vfprintf_internal_r+0x1ce4>
 1007554:	00800044 	movi	r2,1
 1007558:	1509c83a 	sub	r4,r2,r20
 100755c:	d9000515 	stw	r4,20(sp)
 1007560:	003f9b06 	br	10073d0 <___vfprintf_internal_r+0x1ce4>
 1007564:	98000d1e 	bne	r19,zero,100759c <___vfprintf_internal_r+0x1eb0>
 1007568:	d8c14c17 	ldw	r3,1328(sp)
 100756c:	1880004c 	andi	r2,r3,1
 1007570:	10000a1e 	bne	r2,zero,100759c <___vfprintf_internal_r+0x1eb0>
 1007574:	01000044 	movi	r4,1
 1007578:	200f883a 	mov	r7,r4
 100757c:	d9014515 	stw	r4,1300(sp)
 1007580:	003f4a06 	br	10072ac <___vfprintf_internal_r+0x1bc0>
 1007584:	3cc00017 	ldw	r19,0(r7)
 1007588:	39c00104 	addi	r7,r7,4
 100758c:	983d0e0e 	bge	r19,zero,10069c8 <___vfprintf_internal_r+0x12dc>
 1007590:	b8c00007 	ldb	r3,0(r23)
 1007594:	04ffffc4 	movi	r19,-1
 1007598:	0038d306 	br	10058e8 <___vfprintf_internal_r+0x1fc>
 100759c:	9cc00084 	addi	r19,r19,2
 10075a0:	dcc14515 	stw	r19,1300(sp)
 10075a4:	980f883a 	mov	r7,r19
 10075a8:	983f400e 	bge	r19,zero,10072ac <___vfprintf_internal_r+0x1bc0>
 10075ac:	003f7306 	br	100737c <___vfprintf_internal_r+0x1c90>

010075b0 <__vfprintf_internal>:
 10075b0:	00804074 	movhi	r2,257
 10075b4:	108f2504 	addi	r2,r2,15508
 10075b8:	2013883a 	mov	r9,r4
 10075bc:	11000017 	ldw	r4,0(r2)
 10075c0:	2805883a 	mov	r2,r5
 10075c4:	300f883a 	mov	r7,r6
 10075c8:	480b883a 	mov	r5,r9
 10075cc:	100d883a 	mov	r6,r2
 10075d0:	10056ec1 	jmpi	10056ec <___vfprintf_internal_r>

010075d4 <__swsetup_r>:
 10075d4:	00804074 	movhi	r2,257
 10075d8:	108f2504 	addi	r2,r2,15508
 10075dc:	10c00017 	ldw	r3,0(r2)
 10075e0:	defffd04 	addi	sp,sp,-12
 10075e4:	dc400115 	stw	r17,4(sp)
 10075e8:	dc000015 	stw	r16,0(sp)
 10075ec:	dfc00215 	stw	ra,8(sp)
 10075f0:	2023883a 	mov	r17,r4
 10075f4:	2821883a 	mov	r16,r5
 10075f8:	18000226 	beq	r3,zero,1007604 <__swsetup_r+0x30>
 10075fc:	18800e17 	ldw	r2,56(r3)
 1007600:	10001f26 	beq	r2,zero,1007680 <__swsetup_r+0xac>
 1007604:	8100030b 	ldhu	r4,12(r16)
 1007608:	2080020c 	andi	r2,r4,8
 100760c:	10002826 	beq	r2,zero,10076b0 <__swsetup_r+0xdc>
 1007610:	81400417 	ldw	r5,16(r16)
 1007614:	28001d26 	beq	r5,zero,100768c <__swsetup_r+0xb8>
 1007618:	2080004c 	andi	r2,r4,1
 100761c:	1005003a 	cmpeq	r2,r2,zero
 1007620:	10000b26 	beq	r2,zero,1007650 <__swsetup_r+0x7c>
 1007624:	2080008c 	andi	r2,r4,2
 1007628:	10001226 	beq	r2,zero,1007674 <__swsetup_r+0xa0>
 100762c:	0005883a 	mov	r2,zero
 1007630:	80800215 	stw	r2,8(r16)
 1007634:	28000b26 	beq	r5,zero,1007664 <__swsetup_r+0x90>
 1007638:	0005883a 	mov	r2,zero
 100763c:	dfc00217 	ldw	ra,8(sp)
 1007640:	dc400117 	ldw	r17,4(sp)
 1007644:	dc000017 	ldw	r16,0(sp)
 1007648:	dec00304 	addi	sp,sp,12
 100764c:	f800283a 	ret
 1007650:	80800517 	ldw	r2,20(r16)
 1007654:	80000215 	stw	zero,8(r16)
 1007658:	0085c83a 	sub	r2,zero,r2
 100765c:	80800615 	stw	r2,24(r16)
 1007660:	283ff51e 	bne	r5,zero,1007638 <__swsetup_r+0x64>
 1007664:	2080200c 	andi	r2,r4,128
 1007668:	103ff326 	beq	r2,zero,1007638 <__swsetup_r+0x64>
 100766c:	00bfffc4 	movi	r2,-1
 1007670:	003ff206 	br	100763c <__swsetup_r+0x68>
 1007674:	80800517 	ldw	r2,20(r16)
 1007678:	80800215 	stw	r2,8(r16)
 100767c:	003fed06 	br	1007634 <__swsetup_r+0x60>
 1007680:	1809883a 	mov	r4,r3
 1007684:	10091a00 	call	10091a0 <__sinit>
 1007688:	003fde06 	br	1007604 <__swsetup_r+0x30>
 100768c:	20c0a00c 	andi	r3,r4,640
 1007690:	00808004 	movi	r2,512
 1007694:	18bfe026 	beq	r3,r2,1007618 <__swsetup_r+0x44>
 1007698:	8809883a 	mov	r4,r17
 100769c:	800b883a 	mov	r5,r16
 10076a0:	1009f4c0 	call	1009f4c <__smakebuf_r>
 10076a4:	8100030b 	ldhu	r4,12(r16)
 10076a8:	81400417 	ldw	r5,16(r16)
 10076ac:	003fda06 	br	1007618 <__swsetup_r+0x44>
 10076b0:	2080040c 	andi	r2,r4,16
 10076b4:	103fed26 	beq	r2,zero,100766c <__swsetup_r+0x98>
 10076b8:	2080010c 	andi	r2,r4,4
 10076bc:	10001226 	beq	r2,zero,1007708 <__swsetup_r+0x134>
 10076c0:	81400c17 	ldw	r5,48(r16)
 10076c4:	28000526 	beq	r5,zero,10076dc <__swsetup_r+0x108>
 10076c8:	80801004 	addi	r2,r16,64
 10076cc:	28800226 	beq	r5,r2,10076d8 <__swsetup_r+0x104>
 10076d0:	8809883a 	mov	r4,r17
 10076d4:	10095580 	call	1009558 <_free_r>
 10076d8:	80000c15 	stw	zero,48(r16)
 10076dc:	8080030b 	ldhu	r2,12(r16)
 10076e0:	81400417 	ldw	r5,16(r16)
 10076e4:	80000115 	stw	zero,4(r16)
 10076e8:	10bff6cc 	andi	r2,r2,65499
 10076ec:	8080030d 	sth	r2,12(r16)
 10076f0:	81400015 	stw	r5,0(r16)
 10076f4:	8080030b 	ldhu	r2,12(r16)
 10076f8:	10800214 	ori	r2,r2,8
 10076fc:	113fffcc 	andi	r4,r2,65535
 1007700:	8080030d 	sth	r2,12(r16)
 1007704:	003fc306 	br	1007614 <__swsetup_r+0x40>
 1007708:	81400417 	ldw	r5,16(r16)
 100770c:	003ff906 	br	10076f4 <__swsetup_r+0x120>

01007710 <quorem>:
 1007710:	28c00417 	ldw	r3,16(r5)
 1007714:	20800417 	ldw	r2,16(r4)
 1007718:	defff104 	addi	sp,sp,-60
 100771c:	dfc00e15 	stw	ra,56(sp)
 1007720:	df000d15 	stw	fp,52(sp)
 1007724:	ddc00c15 	stw	r23,48(sp)
 1007728:	dd800b15 	stw	r22,44(sp)
 100772c:	dd400a15 	stw	r21,40(sp)
 1007730:	dd000915 	stw	r20,36(sp)
 1007734:	dcc00815 	stw	r19,32(sp)
 1007738:	dc800715 	stw	r18,28(sp)
 100773c:	dc400615 	stw	r17,24(sp)
 1007740:	dc000515 	stw	r16,20(sp)
 1007744:	d9000315 	stw	r4,12(sp)
 1007748:	d9400415 	stw	r5,16(sp)
 100774c:	10c07f16 	blt	r2,r3,100794c <quorem+0x23c>
 1007750:	1d3fffc4 	addi	r20,r3,-1
 1007754:	d8c00417 	ldw	r3,16(sp)
 1007758:	d9000317 	ldw	r4,12(sp)
 100775c:	a505883a 	add	r2,r20,r20
 1007760:	1085883a 	add	r2,r2,r2
 1007764:	1cc00504 	addi	r19,r3,20
 1007768:	25c00504 	addi	r23,r4,20
 100776c:	98ad883a 	add	r22,r19,r2
 1007770:	15c7883a 	add	r3,r2,r23
 1007774:	b1400017 	ldw	r5,0(r22)
 1007778:	19000017 	ldw	r4,0(r3)
 100777c:	d8c00015 	stw	r3,0(sp)
 1007780:	29400044 	addi	r5,r5,1
 1007784:	d9000215 	stw	r4,8(sp)
 1007788:	100434c0 	call	100434c <__udivsi3>
 100778c:	1039883a 	mov	fp,r2
 1007790:	10003d1e 	bne	r2,zero,1007888 <quorem+0x178>
 1007794:	d9400417 	ldw	r5,16(sp)
 1007798:	d9000317 	ldw	r4,12(sp)
 100779c:	100a5380 	call	100a538 <__mcmp>
 10077a0:	10002c16 	blt	r2,zero,1007854 <quorem+0x144>
 10077a4:	e7000044 	addi	fp,fp,1
 10077a8:	b80f883a 	mov	r7,r23
 10077ac:	0011883a 	mov	r8,zero
 10077b0:	0009883a 	mov	r4,zero
 10077b4:	99400017 	ldw	r5,0(r19)
 10077b8:	38c00017 	ldw	r3,0(r7)
 10077bc:	9cc00104 	addi	r19,r19,4
 10077c0:	28bfffcc 	andi	r2,r5,65535
 10077c4:	2085883a 	add	r2,r4,r2
 10077c8:	11bfffcc 	andi	r6,r2,65535
 10077cc:	193fffcc 	andi	r4,r3,65535
 10077d0:	1004d43a 	srli	r2,r2,16
 10077d4:	280ad43a 	srli	r5,r5,16
 10077d8:	2189c83a 	sub	r4,r4,r6
 10077dc:	2209883a 	add	r4,r4,r8
 10077e0:	1806d43a 	srli	r3,r3,16
 10077e4:	288b883a 	add	r5,r5,r2
 10077e8:	200dd43a 	srai	r6,r4,16
 10077ec:	28bfffcc 	andi	r2,r5,65535
 10077f0:	1887c83a 	sub	r3,r3,r2
 10077f4:	1987883a 	add	r3,r3,r6
 10077f8:	3900000d 	sth	r4,0(r7)
 10077fc:	38c0008d 	sth	r3,2(r7)
 1007800:	2808d43a 	srli	r4,r5,16
 1007804:	39c00104 	addi	r7,r7,4
 1007808:	1811d43a 	srai	r8,r3,16
 100780c:	b4ffe92e 	bgeu	r22,r19,10077b4 <quorem+0xa4>
 1007810:	a505883a 	add	r2,r20,r20
 1007814:	1085883a 	add	r2,r2,r2
 1007818:	b885883a 	add	r2,r23,r2
 100781c:	10c00017 	ldw	r3,0(r2)
 1007820:	18000c1e 	bne	r3,zero,1007854 <quorem+0x144>
 1007824:	113fff04 	addi	r4,r2,-4
 1007828:	b900082e 	bgeu	r23,r4,100784c <quorem+0x13c>
 100782c:	10bfff17 	ldw	r2,-4(r2)
 1007830:	10000326 	beq	r2,zero,1007840 <quorem+0x130>
 1007834:	00000506 	br	100784c <quorem+0x13c>
 1007838:	20800017 	ldw	r2,0(r4)
 100783c:	1000031e 	bne	r2,zero,100784c <quorem+0x13c>
 1007840:	213fff04 	addi	r4,r4,-4
 1007844:	a53fffc4 	addi	r20,r20,-1
 1007848:	b93ffb36 	bltu	r23,r4,1007838 <quorem+0x128>
 100784c:	d9000317 	ldw	r4,12(sp)
 1007850:	25000415 	stw	r20,16(r4)
 1007854:	e005883a 	mov	r2,fp
 1007858:	dfc00e17 	ldw	ra,56(sp)
 100785c:	df000d17 	ldw	fp,52(sp)
 1007860:	ddc00c17 	ldw	r23,48(sp)
 1007864:	dd800b17 	ldw	r22,44(sp)
 1007868:	dd400a17 	ldw	r21,40(sp)
 100786c:	dd000917 	ldw	r20,36(sp)
 1007870:	dcc00817 	ldw	r19,32(sp)
 1007874:	dc800717 	ldw	r18,28(sp)
 1007878:	dc400617 	ldw	r17,24(sp)
 100787c:	dc000517 	ldw	r16,20(sp)
 1007880:	dec00f04 	addi	sp,sp,60
 1007884:	f800283a 	ret
 1007888:	b823883a 	mov	r17,r23
 100788c:	9825883a 	mov	r18,r19
 1007890:	d8000115 	stw	zero,4(sp)
 1007894:	002b883a 	mov	r21,zero
 1007898:	94000017 	ldw	r16,0(r18)
 100789c:	e009883a 	mov	r4,fp
 10078a0:	94800104 	addi	r18,r18,4
 10078a4:	817fffcc 	andi	r5,r16,65535
 10078a8:	100435c0 	call	100435c <__mulsi3>
 10078ac:	800ad43a 	srli	r5,r16,16
 10078b0:	e009883a 	mov	r4,fp
 10078b4:	a8a1883a 	add	r16,r21,r2
 10078b8:	100435c0 	call	100435c <__mulsi3>
 10078bc:	89000017 	ldw	r4,0(r17)
 10078c0:	80ffffcc 	andi	r3,r16,65535
 10078c4:	8020d43a 	srli	r16,r16,16
 10078c8:	217fffcc 	andi	r5,r4,65535
 10078cc:	28cbc83a 	sub	r5,r5,r3
 10078d0:	d8c00117 	ldw	r3,4(sp)
 10078d4:	2008d43a 	srli	r4,r4,16
 10078d8:	1405883a 	add	r2,r2,r16
 10078dc:	28cb883a 	add	r5,r5,r3
 10078e0:	280dd43a 	srai	r6,r5,16
 10078e4:	10ffffcc 	andi	r3,r2,65535
 10078e8:	20c9c83a 	sub	r4,r4,r3
 10078ec:	2189883a 	add	r4,r4,r6
 10078f0:	8900008d 	sth	r4,2(r17)
 10078f4:	2009d43a 	srai	r4,r4,16
 10078f8:	8940000d 	sth	r5,0(r17)
 10078fc:	102ad43a 	srli	r21,r2,16
 1007900:	8c400104 	addi	r17,r17,4
 1007904:	d9000115 	stw	r4,4(sp)
 1007908:	b4bfe32e 	bgeu	r22,r18,1007898 <quorem+0x188>
 100790c:	d9000217 	ldw	r4,8(sp)
 1007910:	203fa01e 	bne	r4,zero,1007794 <quorem+0x84>
 1007914:	d8800017 	ldw	r2,0(sp)
 1007918:	10ffff04 	addi	r3,r2,-4
 100791c:	b8c0082e 	bgeu	r23,r3,1007940 <quorem+0x230>
 1007920:	10bfff17 	ldw	r2,-4(r2)
 1007924:	10000326 	beq	r2,zero,1007934 <quorem+0x224>
 1007928:	00000506 	br	1007940 <quorem+0x230>
 100792c:	18800017 	ldw	r2,0(r3)
 1007930:	1000031e 	bne	r2,zero,1007940 <quorem+0x230>
 1007934:	18ffff04 	addi	r3,r3,-4
 1007938:	a53fffc4 	addi	r20,r20,-1
 100793c:	b8fffb36 	bltu	r23,r3,100792c <quorem+0x21c>
 1007940:	d8c00317 	ldw	r3,12(sp)
 1007944:	1d000415 	stw	r20,16(r3)
 1007948:	003f9206 	br	1007794 <quorem+0x84>
 100794c:	0005883a 	mov	r2,zero
 1007950:	003fc106 	br	1007858 <quorem+0x148>

01007954 <_dtoa_r>:
 1007954:	22001017 	ldw	r8,64(r4)
 1007958:	deffda04 	addi	sp,sp,-152
 100795c:	dd402115 	stw	r21,132(sp)
 1007960:	dd002015 	stw	r20,128(sp)
 1007964:	dc801e15 	stw	r18,120(sp)
 1007968:	dc401d15 	stw	r17,116(sp)
 100796c:	dfc02515 	stw	ra,148(sp)
 1007970:	df002415 	stw	fp,144(sp)
 1007974:	ddc02315 	stw	r23,140(sp)
 1007978:	dd802215 	stw	r22,136(sp)
 100797c:	dcc01f15 	stw	r19,124(sp)
 1007980:	dc001c15 	stw	r16,112(sp)
 1007984:	d9001615 	stw	r4,88(sp)
 1007988:	3023883a 	mov	r17,r6
 100798c:	2829883a 	mov	r20,r5
 1007990:	d9c01715 	stw	r7,92(sp)
 1007994:	dc802817 	ldw	r18,160(sp)
 1007998:	302b883a 	mov	r21,r6
 100799c:	40000a26 	beq	r8,zero,10079c8 <_dtoa_r+0x74>
 10079a0:	20801117 	ldw	r2,68(r4)
 10079a4:	400b883a 	mov	r5,r8
 10079a8:	40800115 	stw	r2,4(r8)
 10079ac:	20c01117 	ldw	r3,68(r4)
 10079b0:	00800044 	movi	r2,1
 10079b4:	10c4983a 	sll	r2,r2,r3
 10079b8:	40800215 	stw	r2,8(r8)
 10079bc:	100a3dc0 	call	100a3dc <_Bfree>
 10079c0:	d8c01617 	ldw	r3,88(sp)
 10079c4:	18001015 	stw	zero,64(r3)
 10079c8:	8800a316 	blt	r17,zero,1007c58 <_dtoa_r+0x304>
 10079cc:	90000015 	stw	zero,0(r18)
 10079d0:	a8dffc2c 	andhi	r3,r21,32752
 10079d4:	009ffc34 	movhi	r2,32752
 10079d8:	18809126 	beq	r3,r2,1007c20 <_dtoa_r+0x2cc>
 10079dc:	000d883a 	mov	r6,zero
 10079e0:	000f883a 	mov	r7,zero
 10079e4:	a009883a 	mov	r4,r20
 10079e8:	a80b883a 	mov	r5,r21
 10079ec:	dd001215 	stw	r20,72(sp)
 10079f0:	dd401315 	stw	r21,76(sp)
 10079f4:	100d0a00 	call	100d0a0 <__nedf2>
 10079f8:	1000171e 	bne	r2,zero,1007a58 <_dtoa_r+0x104>
 10079fc:	d9802717 	ldw	r6,156(sp)
 1007a00:	00800044 	movi	r2,1
 1007a04:	30800015 	stw	r2,0(r6)
 1007a08:	d8802917 	ldw	r2,164(sp)
 1007a0c:	10029b26 	beq	r2,zero,100847c <_dtoa_r+0xb28>
 1007a10:	d9002917 	ldw	r4,164(sp)
 1007a14:	00804074 	movhi	r2,257
 1007a18:	1087fc44 	addi	r2,r2,8177
 1007a1c:	10ffffc4 	addi	r3,r2,-1
 1007a20:	20800015 	stw	r2,0(r4)
 1007a24:	1805883a 	mov	r2,r3
 1007a28:	dfc02517 	ldw	ra,148(sp)
 1007a2c:	df002417 	ldw	fp,144(sp)
 1007a30:	ddc02317 	ldw	r23,140(sp)
 1007a34:	dd802217 	ldw	r22,136(sp)
 1007a38:	dd402117 	ldw	r21,132(sp)
 1007a3c:	dd002017 	ldw	r20,128(sp)
 1007a40:	dcc01f17 	ldw	r19,124(sp)
 1007a44:	dc801e17 	ldw	r18,120(sp)
 1007a48:	dc401d17 	ldw	r17,116(sp)
 1007a4c:	dc001c17 	ldw	r16,112(sp)
 1007a50:	dec02604 	addi	sp,sp,152
 1007a54:	f800283a 	ret
 1007a58:	d9001617 	ldw	r4,88(sp)
 1007a5c:	d9401217 	ldw	r5,72(sp)
 1007a60:	d8800104 	addi	r2,sp,4
 1007a64:	a80d883a 	mov	r6,r21
 1007a68:	d9c00204 	addi	r7,sp,8
 1007a6c:	d8800015 	stw	r2,0(sp)
 1007a70:	100aa180 	call	100aa18 <__d2b>
 1007a74:	d8800715 	stw	r2,28(sp)
 1007a78:	a804d53a 	srli	r2,r21,20
 1007a7c:	1101ffcc 	andi	r4,r2,2047
 1007a80:	20008626 	beq	r4,zero,1007c9c <_dtoa_r+0x348>
 1007a84:	d8c01217 	ldw	r3,72(sp)
 1007a88:	00800434 	movhi	r2,16
 1007a8c:	10bfffc4 	addi	r2,r2,-1
 1007a90:	ddc00117 	ldw	r23,4(sp)
 1007a94:	a884703a 	and	r2,r21,r2
 1007a98:	1811883a 	mov	r8,r3
 1007a9c:	124ffc34 	orhi	r9,r2,16368
 1007aa0:	25bf0044 	addi	r22,r4,-1023
 1007aa4:	d8000815 	stw	zero,32(sp)
 1007aa8:	0005883a 	mov	r2,zero
 1007aac:	00cffe34 	movhi	r3,16376
 1007ab0:	480b883a 	mov	r5,r9
 1007ab4:	4009883a 	mov	r4,r8
 1007ab8:	180f883a 	mov	r7,r3
 1007abc:	100d883a 	mov	r6,r2
 1007ac0:	10039b80 	call	10039b8 <__subdf3>
 1007ac4:	0218dbf4 	movhi	r8,25455
 1007ac8:	4210d844 	addi	r8,r8,17249
 1007acc:	024ff4f4 	movhi	r9,16339
 1007ad0:	4a61e9c4 	addi	r9,r9,-30809
 1007ad4:	480f883a 	mov	r7,r9
 1007ad8:	400d883a 	mov	r6,r8
 1007adc:	180b883a 	mov	r5,r3
 1007ae0:	1009883a 	mov	r4,r2
 1007ae4:	1003aac0 	call	1003aac <__muldf3>
 1007ae8:	0222d874 	movhi	r8,35681
 1007aec:	42322cc4 	addi	r8,r8,-14157
 1007af0:	024ff1f4 	movhi	r9,16327
 1007af4:	4a628a04 	addi	r9,r9,-30168
 1007af8:	480f883a 	mov	r7,r9
 1007afc:	400d883a 	mov	r6,r8
 1007b00:	180b883a 	mov	r5,r3
 1007b04:	1009883a 	mov	r4,r2
 1007b08:	1003a380 	call	1003a38 <__adddf3>
 1007b0c:	b009883a 	mov	r4,r22
 1007b10:	1021883a 	mov	r16,r2
 1007b14:	1823883a 	mov	r17,r3
 1007b18:	10040080 	call	1004008 <__floatsidf>
 1007b1c:	021427f4 	movhi	r8,20639
 1007b20:	421e7ec4 	addi	r8,r8,31227
 1007b24:	024ff4f4 	movhi	r9,16339
 1007b28:	4a5104c4 	addi	r9,r9,17427
 1007b2c:	480f883a 	mov	r7,r9
 1007b30:	400d883a 	mov	r6,r8
 1007b34:	180b883a 	mov	r5,r3
 1007b38:	1009883a 	mov	r4,r2
 1007b3c:	1003aac0 	call	1003aac <__muldf3>
 1007b40:	180f883a 	mov	r7,r3
 1007b44:	880b883a 	mov	r5,r17
 1007b48:	100d883a 	mov	r6,r2
 1007b4c:	8009883a 	mov	r4,r16
 1007b50:	1003a380 	call	1003a38 <__adddf3>
 1007b54:	1009883a 	mov	r4,r2
 1007b58:	180b883a 	mov	r5,r3
 1007b5c:	1021883a 	mov	r16,r2
 1007b60:	1823883a 	mov	r17,r3
 1007b64:	10041000 	call	1004100 <__fixdfsi>
 1007b68:	000d883a 	mov	r6,zero
 1007b6c:	000f883a 	mov	r7,zero
 1007b70:	8009883a 	mov	r4,r16
 1007b74:	880b883a 	mov	r5,r17
 1007b78:	d8800d15 	stw	r2,52(sp)
 1007b7c:	100d1280 	call	100d128 <__ltdf2>
 1007b80:	10031716 	blt	r2,zero,10087e0 <_dtoa_r+0xe8c>
 1007b84:	d8c00d17 	ldw	r3,52(sp)
 1007b88:	00800584 	movi	r2,22
 1007b8c:	10c1482e 	bgeu	r2,r3,10080b0 <_dtoa_r+0x75c>
 1007b90:	01000044 	movi	r4,1
 1007b94:	d9000c15 	stw	r4,48(sp)
 1007b98:	bd85c83a 	sub	r2,r23,r22
 1007b9c:	11bfffc4 	addi	r6,r2,-1
 1007ba0:	30030b16 	blt	r6,zero,10087d0 <_dtoa_r+0xe7c>
 1007ba4:	d9800a15 	stw	r6,40(sp)
 1007ba8:	d8001115 	stw	zero,68(sp)
 1007bac:	d8c00d17 	ldw	r3,52(sp)
 1007bb0:	1802ff16 	blt	r3,zero,10087b0 <_dtoa_r+0xe5c>
 1007bb4:	d9000a17 	ldw	r4,40(sp)
 1007bb8:	d8c00915 	stw	r3,36(sp)
 1007bbc:	d8001015 	stw	zero,64(sp)
 1007bc0:	20c9883a 	add	r4,r4,r3
 1007bc4:	d9000a15 	stw	r4,40(sp)
 1007bc8:	d9001717 	ldw	r4,92(sp)
 1007bcc:	00800244 	movi	r2,9
 1007bd0:	11004636 	bltu	r2,r4,1007cec <_dtoa_r+0x398>
 1007bd4:	00800144 	movi	r2,5
 1007bd8:	11020416 	blt	r2,r4,10083ec <_dtoa_r+0xa98>
 1007bdc:	04400044 	movi	r17,1
 1007be0:	d8c01717 	ldw	r3,92(sp)
 1007be4:	00800144 	movi	r2,5
 1007be8:	10c1ed36 	bltu	r2,r3,10083a0 <_dtoa_r+0xa4c>
 1007bec:	18c5883a 	add	r2,r3,r3
 1007bf0:	1085883a 	add	r2,r2,r2
 1007bf4:	00c04034 	movhi	r3,256
 1007bf8:	18df0204 	addi	r3,r3,31752
 1007bfc:	10c5883a 	add	r2,r2,r3
 1007c00:	11000017 	ldw	r4,0(r2)
 1007c04:	2000683a 	jmp	r4
 1007c08:	01007cf4 	movhi	r4,499
 1007c0c:	01007cf4 	movhi	r4,499
 1007c10:	010086f4 	movhi	r4,539
 1007c14:	010086cc 	andi	r4,zero,539
 1007c18:	01008710 	cmplti	r4,zero,540
 1007c1c:	0100871c 	xori	r4,zero,540
 1007c20:	d9002717 	ldw	r4,156(sp)
 1007c24:	0089c3c4 	movi	r2,9999
 1007c28:	20800015 	stw	r2,0(r4)
 1007c2c:	a0001026 	beq	r20,zero,1007c70 <_dtoa_r+0x31c>
 1007c30:	00c04074 	movhi	r3,257
 1007c34:	18c80804 	addi	r3,r3,8224
 1007c38:	d9802917 	ldw	r6,164(sp)
 1007c3c:	303f7926 	beq	r6,zero,1007a24 <_dtoa_r+0xd0>
 1007c40:	188000c7 	ldb	r2,3(r3)
 1007c44:	190000c4 	addi	r4,r3,3
 1007c48:	1000101e 	bne	r2,zero,1007c8c <_dtoa_r+0x338>
 1007c4c:	d8802917 	ldw	r2,164(sp)
 1007c50:	11000015 	stw	r4,0(r2)
 1007c54:	003f7306 	br	1007a24 <_dtoa_r+0xd0>
 1007c58:	00a00034 	movhi	r2,32768
 1007c5c:	10bfffc4 	addi	r2,r2,-1
 1007c60:	00c00044 	movi	r3,1
 1007c64:	88aa703a 	and	r21,r17,r2
 1007c68:	90c00015 	stw	r3,0(r18)
 1007c6c:	003f5806 	br	10079d0 <_dtoa_r+0x7c>
 1007c70:	00800434 	movhi	r2,16
 1007c74:	10bfffc4 	addi	r2,r2,-1
 1007c78:	a884703a 	and	r2,r21,r2
 1007c7c:	103fec1e 	bne	r2,zero,1007c30 <_dtoa_r+0x2dc>
 1007c80:	00c04074 	movhi	r3,257
 1007c84:	18c80504 	addi	r3,r3,8212
 1007c88:	003feb06 	br	1007c38 <_dtoa_r+0x2e4>
 1007c8c:	d8802917 	ldw	r2,164(sp)
 1007c90:	19000204 	addi	r4,r3,8
 1007c94:	11000015 	stw	r4,0(r2)
 1007c98:	003f6206 	br	1007a24 <_dtoa_r+0xd0>
 1007c9c:	ddc00117 	ldw	r23,4(sp)
 1007ca0:	d8800217 	ldw	r2,8(sp)
 1007ca4:	01000804 	movi	r4,32
 1007ca8:	b8c10c84 	addi	r3,r23,1074
 1007cac:	18a3883a 	add	r17,r3,r2
 1007cb0:	2441b80e 	bge	r4,r17,1008394 <_dtoa_r+0xa40>
 1007cb4:	00c01004 	movi	r3,64
 1007cb8:	1c47c83a 	sub	r3,r3,r17
 1007cbc:	88bff804 	addi	r2,r17,-32
 1007cc0:	a8c6983a 	sll	r3,r21,r3
 1007cc4:	a084d83a 	srl	r2,r20,r2
 1007cc8:	1888b03a 	or	r4,r3,r2
 1007ccc:	100d1b00 	call	100d1b0 <__floatunsidf>
 1007cd0:	1011883a 	mov	r8,r2
 1007cd4:	00bf8434 	movhi	r2,65040
 1007cd8:	01000044 	movi	r4,1
 1007cdc:	10d3883a 	add	r9,r2,r3
 1007ce0:	8dbef344 	addi	r22,r17,-1075
 1007ce4:	d9000815 	stw	r4,32(sp)
 1007ce8:	003f6f06 	br	1007aa8 <_dtoa_r+0x154>
 1007cec:	d8001715 	stw	zero,92(sp)
 1007cf0:	04400044 	movi	r17,1
 1007cf4:	00bfffc4 	movi	r2,-1
 1007cf8:	00c00044 	movi	r3,1
 1007cfc:	d8800e15 	stw	r2,56(sp)
 1007d00:	d8002615 	stw	zero,152(sp)
 1007d04:	d8800f15 	stw	r2,60(sp)
 1007d08:	d8c00b15 	stw	r3,44(sp)
 1007d0c:	1021883a 	mov	r16,r2
 1007d10:	d8801617 	ldw	r2,88(sp)
 1007d14:	10001115 	stw	zero,68(r2)
 1007d18:	d8801617 	ldw	r2,88(sp)
 1007d1c:	11401117 	ldw	r5,68(r2)
 1007d20:	1009883a 	mov	r4,r2
 1007d24:	100a95c0 	call	100a95c <_Balloc>
 1007d28:	d8c01617 	ldw	r3,88(sp)
 1007d2c:	d8800515 	stw	r2,20(sp)
 1007d30:	18801015 	stw	r2,64(r3)
 1007d34:	00800384 	movi	r2,14
 1007d38:	14006836 	bltu	r2,r16,1007edc <_dtoa_r+0x588>
 1007d3c:	8805003a 	cmpeq	r2,r17,zero
 1007d40:	1000661e 	bne	r2,zero,1007edc <_dtoa_r+0x588>
 1007d44:	d9000d17 	ldw	r4,52(sp)
 1007d48:	0102300e 	bge	zero,r4,100860c <_dtoa_r+0xcb8>
 1007d4c:	208003cc 	andi	r2,r4,15
 1007d50:	100490fa 	slli	r2,r2,3
 1007d54:	2025d13a 	srai	r18,r4,4
 1007d58:	00c04074 	movhi	r3,257
 1007d5c:	18c81a04 	addi	r3,r3,8296
 1007d60:	10c5883a 	add	r2,r2,r3
 1007d64:	90c0040c 	andi	r3,r18,16
 1007d68:	14000017 	ldw	r16,0(r2)
 1007d6c:	14400117 	ldw	r17,4(r2)
 1007d70:	18036a1e 	bne	r3,zero,1008b1c <_dtoa_r+0x11c8>
 1007d74:	05800084 	movi	r22,2
 1007d78:	90001026 	beq	r18,zero,1007dbc <_dtoa_r+0x468>
 1007d7c:	04c04074 	movhi	r19,257
 1007d80:	9cc84c04 	addi	r19,r19,8496
 1007d84:	9080004c 	andi	r2,r18,1
 1007d88:	1005003a 	cmpeq	r2,r2,zero
 1007d8c:	1000081e 	bne	r2,zero,1007db0 <_dtoa_r+0x45c>
 1007d90:	99800017 	ldw	r6,0(r19)
 1007d94:	99c00117 	ldw	r7,4(r19)
 1007d98:	880b883a 	mov	r5,r17
 1007d9c:	8009883a 	mov	r4,r16
 1007da0:	1003aac0 	call	1003aac <__muldf3>
 1007da4:	1021883a 	mov	r16,r2
 1007da8:	b5800044 	addi	r22,r22,1
 1007dac:	1823883a 	mov	r17,r3
 1007db0:	9025d07a 	srai	r18,r18,1
 1007db4:	9cc00204 	addi	r19,r19,8
 1007db8:	903ff21e 	bne	r18,zero,1007d84 <_dtoa_r+0x430>
 1007dbc:	a80b883a 	mov	r5,r21
 1007dc0:	a009883a 	mov	r4,r20
 1007dc4:	880f883a 	mov	r7,r17
 1007dc8:	800d883a 	mov	r6,r16
 1007dcc:	100ce480 	call	100ce48 <__divdf3>
 1007dd0:	1029883a 	mov	r20,r2
 1007dd4:	182b883a 	mov	r21,r3
 1007dd8:	d8c00c17 	ldw	r3,48(sp)
 1007ddc:	1805003a 	cmpeq	r2,r3,zero
 1007de0:	1000081e 	bne	r2,zero,1007e04 <_dtoa_r+0x4b0>
 1007de4:	0005883a 	mov	r2,zero
 1007de8:	00cffc34 	movhi	r3,16368
 1007dec:	180f883a 	mov	r7,r3
 1007df0:	a009883a 	mov	r4,r20
 1007df4:	a80b883a 	mov	r5,r21
 1007df8:	100d883a 	mov	r6,r2
 1007dfc:	100d1280 	call	100d128 <__ltdf2>
 1007e00:	1003fe16 	blt	r2,zero,1008dfc <_dtoa_r+0x14a8>
 1007e04:	b009883a 	mov	r4,r22
 1007e08:	10040080 	call	1004008 <__floatsidf>
 1007e0c:	180b883a 	mov	r5,r3
 1007e10:	1009883a 	mov	r4,r2
 1007e14:	a00d883a 	mov	r6,r20
 1007e18:	a80f883a 	mov	r7,r21
 1007e1c:	1003aac0 	call	1003aac <__muldf3>
 1007e20:	0011883a 	mov	r8,zero
 1007e24:	02500734 	movhi	r9,16412
 1007e28:	1009883a 	mov	r4,r2
 1007e2c:	180b883a 	mov	r5,r3
 1007e30:	480f883a 	mov	r7,r9
 1007e34:	400d883a 	mov	r6,r8
 1007e38:	1003a380 	call	1003a38 <__adddf3>
 1007e3c:	d9000f17 	ldw	r4,60(sp)
 1007e40:	102d883a 	mov	r22,r2
 1007e44:	00bf3034 	movhi	r2,64704
 1007e48:	18b9883a 	add	fp,r3,r2
 1007e4c:	e02f883a 	mov	r23,fp
 1007e50:	20028f1e 	bne	r4,zero,1008890 <_dtoa_r+0xf3c>
 1007e54:	0005883a 	mov	r2,zero
 1007e58:	00d00534 	movhi	r3,16404
 1007e5c:	a009883a 	mov	r4,r20
 1007e60:	a80b883a 	mov	r5,r21
 1007e64:	180f883a 	mov	r7,r3
 1007e68:	100d883a 	mov	r6,r2
 1007e6c:	10039b80 	call	10039b8 <__subdf3>
 1007e70:	1009883a 	mov	r4,r2
 1007e74:	e00f883a 	mov	r7,fp
 1007e78:	180b883a 	mov	r5,r3
 1007e7c:	b00d883a 	mov	r6,r22
 1007e80:	1025883a 	mov	r18,r2
 1007e84:	1827883a 	mov	r19,r3
 1007e88:	1003ef80 	call	1003ef8 <__gtdf2>
 1007e8c:	00834f16 	blt	zero,r2,1008bcc <_dtoa_r+0x1278>
 1007e90:	e0e0003c 	xorhi	r3,fp,32768
 1007e94:	9009883a 	mov	r4,r18
 1007e98:	980b883a 	mov	r5,r19
 1007e9c:	180f883a 	mov	r7,r3
 1007ea0:	b00d883a 	mov	r6,r22
 1007ea4:	100d1280 	call	100d128 <__ltdf2>
 1007ea8:	1000080e 	bge	r2,zero,1007ecc <_dtoa_r+0x578>
 1007eac:	0027883a 	mov	r19,zero
 1007eb0:	0025883a 	mov	r18,zero
 1007eb4:	d8802617 	ldw	r2,152(sp)
 1007eb8:	df000517 	ldw	fp,20(sp)
 1007ebc:	d8000615 	stw	zero,24(sp)
 1007ec0:	0084303a 	nor	r2,zero,r2
 1007ec4:	d8800d15 	stw	r2,52(sp)
 1007ec8:	00019b06 	br	1008538 <_dtoa_r+0xbe4>
 1007ecc:	d9801217 	ldw	r6,72(sp)
 1007ed0:	d8801317 	ldw	r2,76(sp)
 1007ed4:	3029883a 	mov	r20,r6
 1007ed8:	102b883a 	mov	r21,r2
 1007edc:	d8c00217 	ldw	r3,8(sp)
 1007ee0:	18008516 	blt	r3,zero,10080f8 <_dtoa_r+0x7a4>
 1007ee4:	d9000d17 	ldw	r4,52(sp)
 1007ee8:	00800384 	movi	r2,14
 1007eec:	11008216 	blt	r2,r4,10080f8 <_dtoa_r+0x7a4>
 1007ef0:	200490fa 	slli	r2,r4,3
 1007ef4:	d9802617 	ldw	r6,152(sp)
 1007ef8:	00c04074 	movhi	r3,257
 1007efc:	18c81a04 	addi	r3,r3,8296
 1007f00:	10c5883a 	add	r2,r2,r3
 1007f04:	14800017 	ldw	r18,0(r2)
 1007f08:	14c00117 	ldw	r19,4(r2)
 1007f0c:	30031e16 	blt	r6,zero,1008b88 <_dtoa_r+0x1234>
 1007f10:	d9000517 	ldw	r4,20(sp)
 1007f14:	d8c00f17 	ldw	r3,60(sp)
 1007f18:	a823883a 	mov	r17,r21
 1007f1c:	a021883a 	mov	r16,r20
 1007f20:	192b883a 	add	r21,r3,r4
 1007f24:	2039883a 	mov	fp,r4
 1007f28:	00000f06 	br	1007f68 <_dtoa_r+0x614>
 1007f2c:	0005883a 	mov	r2,zero
 1007f30:	00d00934 	movhi	r3,16420
 1007f34:	5009883a 	mov	r4,r10
 1007f38:	580b883a 	mov	r5,r11
 1007f3c:	180f883a 	mov	r7,r3
 1007f40:	100d883a 	mov	r6,r2
 1007f44:	1003aac0 	call	1003aac <__muldf3>
 1007f48:	180b883a 	mov	r5,r3
 1007f4c:	000d883a 	mov	r6,zero
 1007f50:	000f883a 	mov	r7,zero
 1007f54:	1009883a 	mov	r4,r2
 1007f58:	1021883a 	mov	r16,r2
 1007f5c:	1823883a 	mov	r17,r3
 1007f60:	100d0a00 	call	100d0a0 <__nedf2>
 1007f64:	10004526 	beq	r2,zero,100807c <_dtoa_r+0x728>
 1007f68:	900d883a 	mov	r6,r18
 1007f6c:	980f883a 	mov	r7,r19
 1007f70:	8009883a 	mov	r4,r16
 1007f74:	880b883a 	mov	r5,r17
 1007f78:	100ce480 	call	100ce48 <__divdf3>
 1007f7c:	180b883a 	mov	r5,r3
 1007f80:	1009883a 	mov	r4,r2
 1007f84:	10041000 	call	1004100 <__fixdfsi>
 1007f88:	1009883a 	mov	r4,r2
 1007f8c:	1029883a 	mov	r20,r2
 1007f90:	10040080 	call	1004008 <__floatsidf>
 1007f94:	180f883a 	mov	r7,r3
 1007f98:	9009883a 	mov	r4,r18
 1007f9c:	980b883a 	mov	r5,r19
 1007fa0:	100d883a 	mov	r6,r2
 1007fa4:	1003aac0 	call	1003aac <__muldf3>
 1007fa8:	180f883a 	mov	r7,r3
 1007fac:	880b883a 	mov	r5,r17
 1007fb0:	8009883a 	mov	r4,r16
 1007fb4:	100d883a 	mov	r6,r2
 1007fb8:	10039b80 	call	10039b8 <__subdf3>
 1007fbc:	1015883a 	mov	r10,r2
 1007fc0:	a0800c04 	addi	r2,r20,48
 1007fc4:	e0800005 	stb	r2,0(fp)
 1007fc8:	e7000044 	addi	fp,fp,1
 1007fcc:	1817883a 	mov	r11,r3
 1007fd0:	e57fd61e 	bne	fp,r21,1007f2c <_dtoa_r+0x5d8>
 1007fd4:	500d883a 	mov	r6,r10
 1007fd8:	180f883a 	mov	r7,r3
 1007fdc:	5009883a 	mov	r4,r10
 1007fe0:	180b883a 	mov	r5,r3
 1007fe4:	1003a380 	call	1003a38 <__adddf3>
 1007fe8:	100d883a 	mov	r6,r2
 1007fec:	9009883a 	mov	r4,r18
 1007ff0:	980b883a 	mov	r5,r19
 1007ff4:	180f883a 	mov	r7,r3
 1007ff8:	1021883a 	mov	r16,r2
 1007ffc:	1823883a 	mov	r17,r3
 1008000:	100d1280 	call	100d128 <__ltdf2>
 1008004:	10000816 	blt	r2,zero,1008028 <_dtoa_r+0x6d4>
 1008008:	980b883a 	mov	r5,r19
 100800c:	800d883a 	mov	r6,r16
 1008010:	880f883a 	mov	r7,r17
 1008014:	9009883a 	mov	r4,r18
 1008018:	1003e700 	call	1003e70 <__eqdf2>
 100801c:	1000171e 	bne	r2,zero,100807c <_dtoa_r+0x728>
 1008020:	a080004c 	andi	r2,r20,1
 1008024:	10001526 	beq	r2,zero,100807c <_dtoa_r+0x728>
 1008028:	d8800d17 	ldw	r2,52(sp)
 100802c:	d8800415 	stw	r2,16(sp)
 1008030:	e009883a 	mov	r4,fp
 1008034:	213fffc4 	addi	r4,r4,-1
 1008038:	20c00007 	ldb	r3,0(r4)
 100803c:	00800e44 	movi	r2,57
 1008040:	1880081e 	bne	r3,r2,1008064 <_dtoa_r+0x710>
 1008044:	d8800517 	ldw	r2,20(sp)
 1008048:	113ffa1e 	bne	r2,r4,1008034 <_dtoa_r+0x6e0>
 100804c:	d8c00417 	ldw	r3,16(sp)
 1008050:	d9800517 	ldw	r6,20(sp)
 1008054:	00800c04 	movi	r2,48
 1008058:	18c00044 	addi	r3,r3,1
 100805c:	d8c00415 	stw	r3,16(sp)
 1008060:	30800005 	stb	r2,0(r6)
 1008064:	20800003 	ldbu	r2,0(r4)
 1008068:	d8c00417 	ldw	r3,16(sp)
 100806c:	27000044 	addi	fp,r4,1
 1008070:	10800044 	addi	r2,r2,1
 1008074:	d8c00d15 	stw	r3,52(sp)
 1008078:	20800005 	stb	r2,0(r4)
 100807c:	d9001617 	ldw	r4,88(sp)
 1008080:	d9400717 	ldw	r5,28(sp)
 1008084:	100a3dc0 	call	100a3dc <_Bfree>
 1008088:	e0000005 	stb	zero,0(fp)
 100808c:	d9800d17 	ldw	r6,52(sp)
 1008090:	d8c02717 	ldw	r3,156(sp)
 1008094:	d9002917 	ldw	r4,164(sp)
 1008098:	30800044 	addi	r2,r6,1
 100809c:	18800015 	stw	r2,0(r3)
 10080a0:	20029c26 	beq	r4,zero,1008b14 <_dtoa_r+0x11c0>
 10080a4:	d8c00517 	ldw	r3,20(sp)
 10080a8:	27000015 	stw	fp,0(r4)
 10080ac:	003e5d06 	br	1007a24 <_dtoa_r+0xd0>
 10080b0:	d9800d17 	ldw	r6,52(sp)
 10080b4:	00c04074 	movhi	r3,257
 10080b8:	18c81a04 	addi	r3,r3,8296
 10080bc:	d9001217 	ldw	r4,72(sp)
 10080c0:	300490fa 	slli	r2,r6,3
 10080c4:	d9401317 	ldw	r5,76(sp)
 10080c8:	10c5883a 	add	r2,r2,r3
 10080cc:	12000017 	ldw	r8,0(r2)
 10080d0:	12400117 	ldw	r9,4(r2)
 10080d4:	400d883a 	mov	r6,r8
 10080d8:	480f883a 	mov	r7,r9
 10080dc:	100d1280 	call	100d128 <__ltdf2>
 10080e0:	1000030e 	bge	r2,zero,10080f0 <_dtoa_r+0x79c>
 10080e4:	d8800d17 	ldw	r2,52(sp)
 10080e8:	10bfffc4 	addi	r2,r2,-1
 10080ec:	d8800d15 	stw	r2,52(sp)
 10080f0:	d8000c15 	stw	zero,48(sp)
 10080f4:	003ea806 	br	1007b98 <_dtoa_r+0x244>
 10080f8:	d9000b17 	ldw	r4,44(sp)
 10080fc:	202cc03a 	cmpne	r22,r4,zero
 1008100:	b000c71e 	bne	r22,zero,1008420 <_dtoa_r+0xacc>
 1008104:	dc001117 	ldw	r16,68(sp)
 1008108:	dc801017 	ldw	r18,64(sp)
 100810c:	0027883a 	mov	r19,zero
 1008110:	04000b0e 	bge	zero,r16,1008140 <_dtoa_r+0x7ec>
 1008114:	d8c00a17 	ldw	r3,40(sp)
 1008118:	00c0090e 	bge	zero,r3,1008140 <_dtoa_r+0x7ec>
 100811c:	8005883a 	mov	r2,r16
 1008120:	1c011316 	blt	r3,r16,1008570 <_dtoa_r+0xc1c>
 1008124:	d9000a17 	ldw	r4,40(sp)
 1008128:	d9801117 	ldw	r6,68(sp)
 100812c:	80a1c83a 	sub	r16,r16,r2
 1008130:	2089c83a 	sub	r4,r4,r2
 1008134:	308dc83a 	sub	r6,r6,r2
 1008138:	d9000a15 	stw	r4,40(sp)
 100813c:	d9801115 	stw	r6,68(sp)
 1008140:	d8801017 	ldw	r2,64(sp)
 1008144:	0080150e 	bge	zero,r2,100819c <_dtoa_r+0x848>
 1008148:	d8c00b17 	ldw	r3,44(sp)
 100814c:	1805003a 	cmpeq	r2,r3,zero
 1008150:	1001c91e 	bne	r2,zero,1008878 <_dtoa_r+0xf24>
 1008154:	04800e0e 	bge	zero,r18,1008190 <_dtoa_r+0x83c>
 1008158:	d9001617 	ldw	r4,88(sp)
 100815c:	980b883a 	mov	r5,r19
 1008160:	900d883a 	mov	r6,r18
 1008164:	100b2280 	call	100b228 <__pow5mult>
 1008168:	d9001617 	ldw	r4,88(sp)
 100816c:	d9800717 	ldw	r6,28(sp)
 1008170:	100b883a 	mov	r5,r2
 1008174:	1027883a 	mov	r19,r2
 1008178:	100ae6c0 	call	100ae6c <__multiply>
 100817c:	d9001617 	ldw	r4,88(sp)
 1008180:	d9400717 	ldw	r5,28(sp)
 1008184:	1023883a 	mov	r17,r2
 1008188:	100a3dc0 	call	100a3dc <_Bfree>
 100818c:	dc400715 	stw	r17,28(sp)
 1008190:	d9001017 	ldw	r4,64(sp)
 1008194:	248dc83a 	sub	r6,r4,r18
 1008198:	30010e1e 	bne	r6,zero,10085d4 <_dtoa_r+0xc80>
 100819c:	d9001617 	ldw	r4,88(sp)
 10081a0:	04400044 	movi	r17,1
 10081a4:	880b883a 	mov	r5,r17
 10081a8:	100b0c00 	call	100b0c0 <__i2b>
 10081ac:	d9800917 	ldw	r6,36(sp)
 10081b0:	1025883a 	mov	r18,r2
 10081b4:	0180040e 	bge	zero,r6,10081c8 <_dtoa_r+0x874>
 10081b8:	d9001617 	ldw	r4,88(sp)
 10081bc:	100b883a 	mov	r5,r2
 10081c0:	100b2280 	call	100b228 <__pow5mult>
 10081c4:	1025883a 	mov	r18,r2
 10081c8:	d8801717 	ldw	r2,92(sp)
 10081cc:	8880f30e 	bge	r17,r2,100859c <_dtoa_r+0xc48>
 10081d0:	0023883a 	mov	r17,zero
 10081d4:	d9800917 	ldw	r6,36(sp)
 10081d8:	30019e1e 	bne	r6,zero,1008854 <_dtoa_r+0xf00>
 10081dc:	00c00044 	movi	r3,1
 10081e0:	d9000a17 	ldw	r4,40(sp)
 10081e4:	20c5883a 	add	r2,r4,r3
 10081e8:	10c007cc 	andi	r3,r2,31
 10081ec:	1800841e 	bne	r3,zero,1008400 <_dtoa_r+0xaac>
 10081f0:	00800704 	movi	r2,28
 10081f4:	d9000a17 	ldw	r4,40(sp)
 10081f8:	d9801117 	ldw	r6,68(sp)
 10081fc:	80a1883a 	add	r16,r16,r2
 1008200:	2089883a 	add	r4,r4,r2
 1008204:	308d883a 	add	r6,r6,r2
 1008208:	d9000a15 	stw	r4,40(sp)
 100820c:	d9801115 	stw	r6,68(sp)
 1008210:	d8801117 	ldw	r2,68(sp)
 1008214:	0080050e 	bge	zero,r2,100822c <_dtoa_r+0x8d8>
 1008218:	d9400717 	ldw	r5,28(sp)
 100821c:	d9001617 	ldw	r4,88(sp)
 1008220:	100d883a 	mov	r6,r2
 1008224:	100ad200 	call	100ad20 <__lshift>
 1008228:	d8800715 	stw	r2,28(sp)
 100822c:	d8c00a17 	ldw	r3,40(sp)
 1008230:	00c0050e 	bge	zero,r3,1008248 <_dtoa_r+0x8f4>
 1008234:	d9001617 	ldw	r4,88(sp)
 1008238:	900b883a 	mov	r5,r18
 100823c:	180d883a 	mov	r6,r3
 1008240:	100ad200 	call	100ad20 <__lshift>
 1008244:	1025883a 	mov	r18,r2
 1008248:	d9000c17 	ldw	r4,48(sp)
 100824c:	2005003a 	cmpeq	r2,r4,zero
 1008250:	10016f26 	beq	r2,zero,1008810 <_dtoa_r+0xebc>
 1008254:	d9000f17 	ldw	r4,60(sp)
 1008258:	0102170e 	bge	zero,r4,1008ab8 <_dtoa_r+0x1164>
 100825c:	d9800b17 	ldw	r6,44(sp)
 1008260:	3005003a 	cmpeq	r2,r6,zero
 1008264:	1000881e 	bne	r2,zero,1008488 <_dtoa_r+0xb34>
 1008268:	0400050e 	bge	zero,r16,1008280 <_dtoa_r+0x92c>
 100826c:	d9001617 	ldw	r4,88(sp)
 1008270:	980b883a 	mov	r5,r19
 1008274:	800d883a 	mov	r6,r16
 1008278:	100ad200 	call	100ad20 <__lshift>
 100827c:	1027883a 	mov	r19,r2
 1008280:	8804c03a 	cmpne	r2,r17,zero
 1008284:	1002541e 	bne	r2,zero,1008bd8 <_dtoa_r+0x1284>
 1008288:	980b883a 	mov	r5,r19
 100828c:	dd800517 	ldw	r22,20(sp)
 1008290:	dcc00615 	stw	r19,24(sp)
 1008294:	a700004c 	andi	fp,r20,1
 1008298:	2827883a 	mov	r19,r5
 100829c:	d9000717 	ldw	r4,28(sp)
 10082a0:	900b883a 	mov	r5,r18
 10082a4:	10077100 	call	1007710 <quorem>
 10082a8:	d9000717 	ldw	r4,28(sp)
 10082ac:	d9400617 	ldw	r5,24(sp)
 10082b0:	1023883a 	mov	r17,r2
 10082b4:	8dc00c04 	addi	r23,r17,48
 10082b8:	100a5380 	call	100a538 <__mcmp>
 10082bc:	d9001617 	ldw	r4,88(sp)
 10082c0:	900b883a 	mov	r5,r18
 10082c4:	980d883a 	mov	r6,r19
 10082c8:	1029883a 	mov	r20,r2
 10082cc:	100ab940 	call	100ab94 <__mdiff>
 10082d0:	102b883a 	mov	r21,r2
 10082d4:	10800317 	ldw	r2,12(r2)
 10082d8:	1001281e 	bne	r2,zero,100877c <_dtoa_r+0xe28>
 10082dc:	d9000717 	ldw	r4,28(sp)
 10082e0:	a80b883a 	mov	r5,r21
 10082e4:	100a5380 	call	100a538 <__mcmp>
 10082e8:	d9001617 	ldw	r4,88(sp)
 10082ec:	1021883a 	mov	r16,r2
 10082f0:	a80b883a 	mov	r5,r21
 10082f4:	100a3dc0 	call	100a3dc <_Bfree>
 10082f8:	8000041e 	bne	r16,zero,100830c <_dtoa_r+0x9b8>
 10082fc:	d8801717 	ldw	r2,92(sp)
 1008300:	1000021e 	bne	r2,zero,100830c <_dtoa_r+0x9b8>
 1008304:	e004c03a 	cmpne	r2,fp,zero
 1008308:	10011726 	beq	r2,zero,1008768 <_dtoa_r+0xe14>
 100830c:	a0010616 	blt	r20,zero,1008728 <_dtoa_r+0xdd4>
 1008310:	a000041e 	bne	r20,zero,1008324 <_dtoa_r+0x9d0>
 1008314:	d8c01717 	ldw	r3,92(sp)
 1008318:	1800021e 	bne	r3,zero,1008324 <_dtoa_r+0x9d0>
 100831c:	e004c03a 	cmpne	r2,fp,zero
 1008320:	10010126 	beq	r2,zero,1008728 <_dtoa_r+0xdd4>
 1008324:	04023d16 	blt	zero,r16,1008c1c <_dtoa_r+0x12c8>
 1008328:	b5c00005 	stb	r23,0(r22)
 100832c:	d9800517 	ldw	r6,20(sp)
 1008330:	d9000f17 	ldw	r4,60(sp)
 1008334:	b5800044 	addi	r22,r22,1
 1008338:	3105883a 	add	r2,r6,r4
 100833c:	b0806526 	beq	r22,r2,10084d4 <_dtoa_r+0xb80>
 1008340:	d9400717 	ldw	r5,28(sp)
 1008344:	d9001617 	ldw	r4,88(sp)
 1008348:	01800284 	movi	r6,10
 100834c:	000f883a 	mov	r7,zero
 1008350:	100b0fc0 	call	100b0fc <__multadd>
 1008354:	d8800715 	stw	r2,28(sp)
 1008358:	d8800617 	ldw	r2,24(sp)
 100835c:	14c10c26 	beq	r2,r19,1008790 <_dtoa_r+0xe3c>
 1008360:	d9400617 	ldw	r5,24(sp)
 1008364:	d9001617 	ldw	r4,88(sp)
 1008368:	01800284 	movi	r6,10
 100836c:	000f883a 	mov	r7,zero
 1008370:	100b0fc0 	call	100b0fc <__multadd>
 1008374:	d9001617 	ldw	r4,88(sp)
 1008378:	980b883a 	mov	r5,r19
 100837c:	01800284 	movi	r6,10
 1008380:	000f883a 	mov	r7,zero
 1008384:	d8800615 	stw	r2,24(sp)
 1008388:	100b0fc0 	call	100b0fc <__multadd>
 100838c:	1027883a 	mov	r19,r2
 1008390:	003fc206 	br	100829c <_dtoa_r+0x948>
 1008394:	2445c83a 	sub	r2,r4,r17
 1008398:	a088983a 	sll	r4,r20,r2
 100839c:	003e4b06 	br	1007ccc <_dtoa_r+0x378>
 10083a0:	01bfffc4 	movi	r6,-1
 10083a4:	00800044 	movi	r2,1
 10083a8:	d9800e15 	stw	r6,56(sp)
 10083ac:	d9800f15 	stw	r6,60(sp)
 10083b0:	d8800b15 	stw	r2,44(sp)
 10083b4:	d8c01617 	ldw	r3,88(sp)
 10083b8:	008005c4 	movi	r2,23
 10083bc:	18001115 	stw	zero,68(r3)
 10083c0:	1580082e 	bgeu	r2,r22,10083e4 <_dtoa_r+0xa90>
 10083c4:	00c00104 	movi	r3,4
 10083c8:	0009883a 	mov	r4,zero
 10083cc:	18c7883a 	add	r3,r3,r3
 10083d0:	18800504 	addi	r2,r3,20
 10083d4:	21000044 	addi	r4,r4,1
 10083d8:	b0bffc2e 	bgeu	r22,r2,10083cc <_dtoa_r+0xa78>
 10083dc:	d9801617 	ldw	r6,88(sp)
 10083e0:	31001115 	stw	r4,68(r6)
 10083e4:	dc000f17 	ldw	r16,60(sp)
 10083e8:	003e4b06 	br	1007d18 <_dtoa_r+0x3c4>
 10083ec:	d9801717 	ldw	r6,92(sp)
 10083f0:	0023883a 	mov	r17,zero
 10083f4:	31bfff04 	addi	r6,r6,-4
 10083f8:	d9801715 	stw	r6,92(sp)
 10083fc:	003df806 	br	1007be0 <_dtoa_r+0x28c>
 1008400:	00800804 	movi	r2,32
 1008404:	10c9c83a 	sub	r4,r2,r3
 1008408:	00c00104 	movi	r3,4
 100840c:	19005a16 	blt	r3,r4,1008578 <_dtoa_r+0xc24>
 1008410:	008000c4 	movi	r2,3
 1008414:	113f7e16 	blt	r2,r4,1008210 <_dtoa_r+0x8bc>
 1008418:	20800704 	addi	r2,r4,28
 100841c:	003f7506 	br	10081f4 <_dtoa_r+0x8a0>
 1008420:	d9801717 	ldw	r6,92(sp)
 1008424:	00800044 	movi	r2,1
 1008428:	1180a10e 	bge	r2,r6,10086b0 <_dtoa_r+0xd5c>
 100842c:	d9800f17 	ldw	r6,60(sp)
 1008430:	d8c01017 	ldw	r3,64(sp)
 1008434:	30bfffc4 	addi	r2,r6,-1
 1008438:	1881c616 	blt	r3,r2,1008b54 <_dtoa_r+0x1200>
 100843c:	18a5c83a 	sub	r18,r3,r2
 1008440:	d8800f17 	ldw	r2,60(sp)
 1008444:	10026216 	blt	r2,zero,1008dd0 <_dtoa_r+0x147c>
 1008448:	dc001117 	ldw	r16,68(sp)
 100844c:	1007883a 	mov	r3,r2
 1008450:	d9800a17 	ldw	r6,40(sp)
 1008454:	d8801117 	ldw	r2,68(sp)
 1008458:	d9001617 	ldw	r4,88(sp)
 100845c:	30cd883a 	add	r6,r6,r3
 1008460:	10c5883a 	add	r2,r2,r3
 1008464:	01400044 	movi	r5,1
 1008468:	d9800a15 	stw	r6,40(sp)
 100846c:	d8801115 	stw	r2,68(sp)
 1008470:	100b0c00 	call	100b0c0 <__i2b>
 1008474:	1027883a 	mov	r19,r2
 1008478:	003f2506 	br	1008110 <_dtoa_r+0x7bc>
 100847c:	00c04074 	movhi	r3,257
 1008480:	18c7fc04 	addi	r3,r3,8176
 1008484:	003d6706 	br	1007a24 <_dtoa_r+0xd0>
 1008488:	dd800517 	ldw	r22,20(sp)
 100848c:	04000044 	movi	r16,1
 1008490:	00000706 	br	10084b0 <_dtoa_r+0xb5c>
 1008494:	d9400717 	ldw	r5,28(sp)
 1008498:	d9001617 	ldw	r4,88(sp)
 100849c:	01800284 	movi	r6,10
 10084a0:	000f883a 	mov	r7,zero
 10084a4:	100b0fc0 	call	100b0fc <__multadd>
 10084a8:	d8800715 	stw	r2,28(sp)
 10084ac:	84000044 	addi	r16,r16,1
 10084b0:	d9000717 	ldw	r4,28(sp)
 10084b4:	900b883a 	mov	r5,r18
 10084b8:	10077100 	call	1007710 <quorem>
 10084bc:	15c00c04 	addi	r23,r2,48
 10084c0:	b5c00005 	stb	r23,0(r22)
 10084c4:	d8c00f17 	ldw	r3,60(sp)
 10084c8:	b5800044 	addi	r22,r22,1
 10084cc:	80fff116 	blt	r16,r3,1008494 <_dtoa_r+0xb40>
 10084d0:	d8000615 	stw	zero,24(sp)
 10084d4:	d9400717 	ldw	r5,28(sp)
 10084d8:	d9001617 	ldw	r4,88(sp)
 10084dc:	01800044 	movi	r6,1
 10084e0:	100ad200 	call	100ad20 <__lshift>
 10084e4:	1009883a 	mov	r4,r2
 10084e8:	900b883a 	mov	r5,r18
 10084ec:	d8800715 	stw	r2,28(sp)
 10084f0:	100a5380 	call	100a538 <__mcmp>
 10084f4:	00803c0e 	bge	zero,r2,10085e8 <_dtoa_r+0xc94>
 10084f8:	b009883a 	mov	r4,r22
 10084fc:	213fffc4 	addi	r4,r4,-1
 1008500:	21400003 	ldbu	r5,0(r4)
 1008504:	00800e44 	movi	r2,57
 1008508:	28c03fcc 	andi	r3,r5,255
 100850c:	18c0201c 	xori	r3,r3,128
 1008510:	18ffe004 	addi	r3,r3,-128
 1008514:	1881981e 	bne	r3,r2,1008b78 <_dtoa_r+0x1224>
 1008518:	d9800517 	ldw	r6,20(sp)
 100851c:	21bff71e 	bne	r4,r6,10084fc <_dtoa_r+0xba8>
 1008520:	d8800d17 	ldw	r2,52(sp)
 1008524:	37000044 	addi	fp,r6,1
 1008528:	10800044 	addi	r2,r2,1
 100852c:	d8800d15 	stw	r2,52(sp)
 1008530:	00800c44 	movi	r2,49
 1008534:	30800005 	stb	r2,0(r6)
 1008538:	d9001617 	ldw	r4,88(sp)
 100853c:	900b883a 	mov	r5,r18
 1008540:	100a3dc0 	call	100a3dc <_Bfree>
 1008544:	983ecd26 	beq	r19,zero,100807c <_dtoa_r+0x728>
 1008548:	d8c00617 	ldw	r3,24(sp)
 100854c:	18000426 	beq	r3,zero,1008560 <_dtoa_r+0xc0c>
 1008550:	1cc00326 	beq	r3,r19,1008560 <_dtoa_r+0xc0c>
 1008554:	d9001617 	ldw	r4,88(sp)
 1008558:	180b883a 	mov	r5,r3
 100855c:	100a3dc0 	call	100a3dc <_Bfree>
 1008560:	d9001617 	ldw	r4,88(sp)
 1008564:	980b883a 	mov	r5,r19
 1008568:	100a3dc0 	call	100a3dc <_Bfree>
 100856c:	003ec306 	br	100807c <_dtoa_r+0x728>
 1008570:	1805883a 	mov	r2,r3
 1008574:	003eeb06 	br	1008124 <_dtoa_r+0x7d0>
 1008578:	d9800a17 	ldw	r6,40(sp)
 100857c:	d8c01117 	ldw	r3,68(sp)
 1008580:	20bfff04 	addi	r2,r4,-4
 1008584:	308d883a 	add	r6,r6,r2
 1008588:	1887883a 	add	r3,r3,r2
 100858c:	80a1883a 	add	r16,r16,r2
 1008590:	d9800a15 	stw	r6,40(sp)
 1008594:	d8c01115 	stw	r3,68(sp)
 1008598:	003f1d06 	br	1008210 <_dtoa_r+0x8bc>
 100859c:	a03f0c1e 	bne	r20,zero,10081d0 <_dtoa_r+0x87c>
 10085a0:	00800434 	movhi	r2,16
 10085a4:	10bfffc4 	addi	r2,r2,-1
 10085a8:	a884703a 	and	r2,r21,r2
 10085ac:	103f081e 	bne	r2,zero,10081d0 <_dtoa_r+0x87c>
 10085b0:	a89ffc2c 	andhi	r2,r21,32752
 10085b4:	103f0626 	beq	r2,zero,10081d0 <_dtoa_r+0x87c>
 10085b8:	d8c01117 	ldw	r3,68(sp)
 10085bc:	d9000a17 	ldw	r4,40(sp)
 10085c0:	18c00044 	addi	r3,r3,1
 10085c4:	21000044 	addi	r4,r4,1
 10085c8:	d8c01115 	stw	r3,68(sp)
 10085cc:	d9000a15 	stw	r4,40(sp)
 10085d0:	003f0006 	br	10081d4 <_dtoa_r+0x880>
 10085d4:	d9400717 	ldw	r5,28(sp)
 10085d8:	d9001617 	ldw	r4,88(sp)
 10085dc:	100b2280 	call	100b228 <__pow5mult>
 10085e0:	d8800715 	stw	r2,28(sp)
 10085e4:	003eed06 	br	100819c <_dtoa_r+0x848>
 10085e8:	1000021e 	bne	r2,zero,10085f4 <_dtoa_r+0xca0>
 10085ec:	b880004c 	andi	r2,r23,1
 10085f0:	103fc11e 	bne	r2,zero,10084f8 <_dtoa_r+0xba4>
 10085f4:	b5bfffc4 	addi	r22,r22,-1
 10085f8:	b0c00007 	ldb	r3,0(r22)
 10085fc:	00800c04 	movi	r2,48
 1008600:	18bffc26 	beq	r3,r2,10085f4 <_dtoa_r+0xca0>
 1008604:	b7000044 	addi	fp,r22,1
 1008608:	003fcb06 	br	1008538 <_dtoa_r+0xbe4>
 100860c:	d9800d17 	ldw	r6,52(sp)
 1008610:	018fc83a 	sub	r7,zero,r6
 1008614:	3801f726 	beq	r7,zero,1008df4 <_dtoa_r+0x14a0>
 1008618:	398003cc 	andi	r6,r7,15
 100861c:	300c90fa 	slli	r6,r6,3
 1008620:	01404074 	movhi	r5,257
 1008624:	29481a04 	addi	r5,r5,8296
 1008628:	d9001217 	ldw	r4,72(sp)
 100862c:	314d883a 	add	r6,r6,r5
 1008630:	30c00117 	ldw	r3,4(r6)
 1008634:	30800017 	ldw	r2,0(r6)
 1008638:	d9401317 	ldw	r5,76(sp)
 100863c:	3821d13a 	srai	r16,r7,4
 1008640:	100d883a 	mov	r6,r2
 1008644:	180f883a 	mov	r7,r3
 1008648:	1003aac0 	call	1003aac <__muldf3>
 100864c:	1011883a 	mov	r8,r2
 1008650:	1813883a 	mov	r9,r3
 1008654:	1029883a 	mov	r20,r2
 1008658:	182b883a 	mov	r21,r3
 100865c:	8001e526 	beq	r16,zero,1008df4 <_dtoa_r+0x14a0>
 1008660:	05800084 	movi	r22,2
 1008664:	04404074 	movhi	r17,257
 1008668:	8c484c04 	addi	r17,r17,8496
 100866c:	8080004c 	andi	r2,r16,1
 1008670:	1005003a 	cmpeq	r2,r2,zero
 1008674:	1000081e 	bne	r2,zero,1008698 <_dtoa_r+0xd44>
 1008678:	89800017 	ldw	r6,0(r17)
 100867c:	89c00117 	ldw	r7,4(r17)
 1008680:	480b883a 	mov	r5,r9
 1008684:	4009883a 	mov	r4,r8
 1008688:	1003aac0 	call	1003aac <__muldf3>
 100868c:	1011883a 	mov	r8,r2
 1008690:	b5800044 	addi	r22,r22,1
 1008694:	1813883a 	mov	r9,r3
 1008698:	8021d07a 	srai	r16,r16,1
 100869c:	8c400204 	addi	r17,r17,8
 10086a0:	803ff21e 	bne	r16,zero,100866c <_dtoa_r+0xd18>
 10086a4:	4029883a 	mov	r20,r8
 10086a8:	482b883a 	mov	r21,r9
 10086ac:	003dca06 	br	1007dd8 <_dtoa_r+0x484>
 10086b0:	d9000817 	ldw	r4,32(sp)
 10086b4:	2005003a 	cmpeq	r2,r4,zero
 10086b8:	1001f61e 	bne	r2,zero,1008e94 <_dtoa_r+0x1540>
 10086bc:	dc001117 	ldw	r16,68(sp)
 10086c0:	dc801017 	ldw	r18,64(sp)
 10086c4:	18c10cc4 	addi	r3,r3,1075
 10086c8:	003f6106 	br	1008450 <_dtoa_r+0xafc>
 10086cc:	d8000b15 	stw	zero,44(sp)
 10086d0:	d9802617 	ldw	r6,152(sp)
 10086d4:	d8c00d17 	ldw	r3,52(sp)
 10086d8:	30800044 	addi	r2,r6,1
 10086dc:	18ad883a 	add	r22,r3,r2
 10086e0:	b13fffc4 	addi	r4,r22,-1
 10086e4:	d9000e15 	stw	r4,56(sp)
 10086e8:	0581f60e 	bge	zero,r22,1008ec4 <_dtoa_r+0x1570>
 10086ec:	dd800f15 	stw	r22,60(sp)
 10086f0:	003f3006 	br	10083b4 <_dtoa_r+0xa60>
 10086f4:	d8000b15 	stw	zero,44(sp)
 10086f8:	d9002617 	ldw	r4,152(sp)
 10086fc:	0101eb0e 	bge	zero,r4,1008eac <_dtoa_r+0x1558>
 1008700:	202d883a 	mov	r22,r4
 1008704:	d9000e15 	stw	r4,56(sp)
 1008708:	d9000f15 	stw	r4,60(sp)
 100870c:	003f2906 	br	10083b4 <_dtoa_r+0xa60>
 1008710:	01800044 	movi	r6,1
 1008714:	d9800b15 	stw	r6,44(sp)
 1008718:	003ff706 	br	10086f8 <_dtoa_r+0xda4>
 100871c:	01000044 	movi	r4,1
 1008720:	d9000b15 	stw	r4,44(sp)
 1008724:	003fea06 	br	10086d0 <_dtoa_r+0xd7c>
 1008728:	04000c0e 	bge	zero,r16,100875c <_dtoa_r+0xe08>
 100872c:	d9400717 	ldw	r5,28(sp)
 1008730:	d9001617 	ldw	r4,88(sp)
 1008734:	01800044 	movi	r6,1
 1008738:	100ad200 	call	100ad20 <__lshift>
 100873c:	1009883a 	mov	r4,r2
 1008740:	900b883a 	mov	r5,r18
 1008744:	d8800715 	stw	r2,28(sp)
 1008748:	100a5380 	call	100a538 <__mcmp>
 100874c:	0081e00e 	bge	zero,r2,1008ed0 <_dtoa_r+0x157c>
 1008750:	bdc00044 	addi	r23,r23,1
 1008754:	00800e84 	movi	r2,58
 1008758:	b881a226 	beq	r23,r2,1008de4 <_dtoa_r+0x1490>
 100875c:	b7000044 	addi	fp,r22,1
 1008760:	b5c00005 	stb	r23,0(r22)
 1008764:	003f7406 	br	1008538 <_dtoa_r+0xbe4>
 1008768:	00800e44 	movi	r2,57
 100876c:	b8819d26 	beq	r23,r2,1008de4 <_dtoa_r+0x1490>
 1008770:	053ffa0e 	bge	zero,r20,100875c <_dtoa_r+0xe08>
 1008774:	8dc00c44 	addi	r23,r17,49
 1008778:	003ff806 	br	100875c <_dtoa_r+0xe08>
 100877c:	d9001617 	ldw	r4,88(sp)
 1008780:	a80b883a 	mov	r5,r21
 1008784:	04000044 	movi	r16,1
 1008788:	100a3dc0 	call	100a3dc <_Bfree>
 100878c:	003edf06 	br	100830c <_dtoa_r+0x9b8>
 1008790:	d9001617 	ldw	r4,88(sp)
 1008794:	980b883a 	mov	r5,r19
 1008798:	01800284 	movi	r6,10
 100879c:	000f883a 	mov	r7,zero
 10087a0:	100b0fc0 	call	100b0fc <__multadd>
 10087a4:	1027883a 	mov	r19,r2
 10087a8:	d8800615 	stw	r2,24(sp)
 10087ac:	003ebb06 	br	100829c <_dtoa_r+0x948>
 10087b0:	d9801117 	ldw	r6,68(sp)
 10087b4:	d8800d17 	ldw	r2,52(sp)
 10087b8:	d8000915 	stw	zero,36(sp)
 10087bc:	308dc83a 	sub	r6,r6,r2
 10087c0:	0087c83a 	sub	r3,zero,r2
 10087c4:	d9801115 	stw	r6,68(sp)
 10087c8:	d8c01015 	stw	r3,64(sp)
 10087cc:	003cfe06 	br	1007bc8 <_dtoa_r+0x274>
 10087d0:	018dc83a 	sub	r6,zero,r6
 10087d4:	d9801115 	stw	r6,68(sp)
 10087d8:	d8000a15 	stw	zero,40(sp)
 10087dc:	003cf306 	br	1007bac <_dtoa_r+0x258>
 10087e0:	d9000d17 	ldw	r4,52(sp)
 10087e4:	10040080 	call	1004008 <__floatsidf>
 10087e8:	880b883a 	mov	r5,r17
 10087ec:	8009883a 	mov	r4,r16
 10087f0:	180f883a 	mov	r7,r3
 10087f4:	100d883a 	mov	r6,r2
 10087f8:	100d0a00 	call	100d0a0 <__nedf2>
 10087fc:	103ce126 	beq	r2,zero,1007b84 <_dtoa_r+0x230>
 1008800:	d9800d17 	ldw	r6,52(sp)
 1008804:	31bfffc4 	addi	r6,r6,-1
 1008808:	d9800d15 	stw	r6,52(sp)
 100880c:	003cdd06 	br	1007b84 <_dtoa_r+0x230>
 1008810:	d9000717 	ldw	r4,28(sp)
 1008814:	900b883a 	mov	r5,r18
 1008818:	100a5380 	call	100a538 <__mcmp>
 100881c:	103e8d0e 	bge	r2,zero,1008254 <_dtoa_r+0x900>
 1008820:	d9400717 	ldw	r5,28(sp)
 1008824:	d9001617 	ldw	r4,88(sp)
 1008828:	01800284 	movi	r6,10
 100882c:	000f883a 	mov	r7,zero
 1008830:	100b0fc0 	call	100b0fc <__multadd>
 1008834:	d9800d17 	ldw	r6,52(sp)
 1008838:	d8800715 	stw	r2,28(sp)
 100883c:	31bfffc4 	addi	r6,r6,-1
 1008840:	d9800d15 	stw	r6,52(sp)
 1008844:	b001a71e 	bne	r22,zero,1008ee4 <_dtoa_r+0x1590>
 1008848:	d8800e17 	ldw	r2,56(sp)
 100884c:	d8800f15 	stw	r2,60(sp)
 1008850:	003e8006 	br	1008254 <_dtoa_r+0x900>
 1008854:	90800417 	ldw	r2,16(r18)
 1008858:	1085883a 	add	r2,r2,r2
 100885c:	1085883a 	add	r2,r2,r2
 1008860:	1485883a 	add	r2,r2,r18
 1008864:	11000417 	ldw	r4,16(r2)
 1008868:	100a4040 	call	100a404 <__hi0bits>
 100886c:	00c00804 	movi	r3,32
 1008870:	1887c83a 	sub	r3,r3,r2
 1008874:	003e5a06 	br	10081e0 <_dtoa_r+0x88c>
 1008878:	d9400717 	ldw	r5,28(sp)
 100887c:	d9801017 	ldw	r6,64(sp)
 1008880:	d9001617 	ldw	r4,88(sp)
 1008884:	100b2280 	call	100b228 <__pow5mult>
 1008888:	d8800715 	stw	r2,28(sp)
 100888c:	003e4306 	br	100819c <_dtoa_r+0x848>
 1008890:	d9800f17 	ldw	r6,60(sp)
 1008894:	d8800d17 	ldw	r2,52(sp)
 1008898:	d9800315 	stw	r6,12(sp)
 100889c:	d8800415 	stw	r2,16(sp)
 10088a0:	d8c00b17 	ldw	r3,44(sp)
 10088a4:	1805003a 	cmpeq	r2,r3,zero
 10088a8:	1000e21e 	bne	r2,zero,1008c34 <_dtoa_r+0x12e0>
 10088ac:	d9000317 	ldw	r4,12(sp)
 10088b0:	0005883a 	mov	r2,zero
 10088b4:	00cff834 	movhi	r3,16352
 10088b8:	200c90fa 	slli	r6,r4,3
 10088bc:	01004074 	movhi	r4,257
 10088c0:	21081a04 	addi	r4,r4,8296
 10088c4:	180b883a 	mov	r5,r3
 10088c8:	310d883a 	add	r6,r6,r4
 10088cc:	327fff17 	ldw	r9,-4(r6)
 10088d0:	323ffe17 	ldw	r8,-8(r6)
 10088d4:	1009883a 	mov	r4,r2
 10088d8:	480f883a 	mov	r7,r9
 10088dc:	400d883a 	mov	r6,r8
 10088e0:	100ce480 	call	100ce48 <__divdf3>
 10088e4:	180b883a 	mov	r5,r3
 10088e8:	b00d883a 	mov	r6,r22
 10088ec:	b80f883a 	mov	r7,r23
 10088f0:	1009883a 	mov	r4,r2
 10088f4:	10039b80 	call	10039b8 <__subdf3>
 10088f8:	a80b883a 	mov	r5,r21
 10088fc:	a009883a 	mov	r4,r20
 1008900:	d8c01915 	stw	r3,100(sp)
 1008904:	d8801815 	stw	r2,96(sp)
 1008908:	10041000 	call	1004100 <__fixdfsi>
 100890c:	1009883a 	mov	r4,r2
 1008910:	1027883a 	mov	r19,r2
 1008914:	10040080 	call	1004008 <__floatsidf>
 1008918:	a80b883a 	mov	r5,r21
 100891c:	a009883a 	mov	r4,r20
 1008920:	180f883a 	mov	r7,r3
 1008924:	100d883a 	mov	r6,r2
 1008928:	10039b80 	call	10039b8 <__subdf3>
 100892c:	d9801817 	ldw	r6,96(sp)
 1008930:	1823883a 	mov	r17,r3
 1008934:	d8801415 	stw	r2,80(sp)
 1008938:	302d883a 	mov	r22,r6
 100893c:	d9800517 	ldw	r6,20(sp)
 1008940:	9cc00c04 	addi	r19,r19,48
 1008944:	dc401515 	stw	r17,84(sp)
 1008948:	d8c01917 	ldw	r3,100(sp)
 100894c:	34c00005 	stb	r19,0(r6)
 1008950:	d8800517 	ldw	r2,20(sp)
 1008954:	d9401917 	ldw	r5,100(sp)
 1008958:	d9801417 	ldw	r6,80(sp)
 100895c:	b009883a 	mov	r4,r22
 1008960:	880f883a 	mov	r7,r17
 1008964:	182f883a 	mov	r23,r3
 1008968:	17000044 	addi	fp,r2,1
 100896c:	1003ef80 	call	1003ef8 <__gtdf2>
 1008970:	00804e16 	blt	zero,r2,1008aac <_dtoa_r+0x1158>
 1008974:	d9801417 	ldw	r6,80(sp)
 1008978:	0005883a 	mov	r2,zero
 100897c:	00cffc34 	movhi	r3,16368
 1008980:	180b883a 	mov	r5,r3
 1008984:	880f883a 	mov	r7,r17
 1008988:	1009883a 	mov	r4,r2
 100898c:	10039b80 	call	10039b8 <__subdf3>
 1008990:	d9401917 	ldw	r5,100(sp)
 1008994:	180f883a 	mov	r7,r3
 1008998:	b009883a 	mov	r4,r22
 100899c:	100d883a 	mov	r6,r2
 10089a0:	1003ef80 	call	1003ef8 <__gtdf2>
 10089a4:	00bda216 	blt	zero,r2,1008030 <_dtoa_r+0x6dc>
 10089a8:	d8c00317 	ldw	r3,12(sp)
 10089ac:	00800044 	movi	r2,1
 10089b0:	10c01216 	blt	r2,r3,10089fc <_dtoa_r+0x10a8>
 10089b4:	003d4506 	br	1007ecc <_dtoa_r+0x578>
 10089b8:	d9801417 	ldw	r6,80(sp)
 10089bc:	0005883a 	mov	r2,zero
 10089c0:	00cffc34 	movhi	r3,16368
 10089c4:	180b883a 	mov	r5,r3
 10089c8:	880f883a 	mov	r7,r17
 10089cc:	1009883a 	mov	r4,r2
 10089d0:	10039b80 	call	10039b8 <__subdf3>
 10089d4:	d9c01b17 	ldw	r7,108(sp)
 10089d8:	180b883a 	mov	r5,r3
 10089dc:	1009883a 	mov	r4,r2
 10089e0:	b00d883a 	mov	r6,r22
 10089e4:	100d1280 	call	100d128 <__ltdf2>
 10089e8:	103d9116 	blt	r2,zero,1008030 <_dtoa_r+0x6dc>
 10089ec:	d9800517 	ldw	r6,20(sp)
 10089f0:	d9000317 	ldw	r4,12(sp)
 10089f4:	3105883a 	add	r2,r6,r4
 10089f8:	e0bd3426 	beq	fp,r2,1007ecc <_dtoa_r+0x578>
 10089fc:	04500934 	movhi	r17,16420
 1008a00:	0021883a 	mov	r16,zero
 1008a04:	b80b883a 	mov	r5,r23
 1008a08:	b009883a 	mov	r4,r22
 1008a0c:	800d883a 	mov	r6,r16
 1008a10:	880f883a 	mov	r7,r17
 1008a14:	1003aac0 	call	1003aac <__muldf3>
 1008a18:	d9401517 	ldw	r5,84(sp)
 1008a1c:	d9001417 	ldw	r4,80(sp)
 1008a20:	880f883a 	mov	r7,r17
 1008a24:	000d883a 	mov	r6,zero
 1008a28:	d8801a15 	stw	r2,104(sp)
 1008a2c:	d8c01b15 	stw	r3,108(sp)
 1008a30:	1003aac0 	call	1003aac <__muldf3>
 1008a34:	180b883a 	mov	r5,r3
 1008a38:	1009883a 	mov	r4,r2
 1008a3c:	1823883a 	mov	r17,r3
 1008a40:	1021883a 	mov	r16,r2
 1008a44:	10041000 	call	1004100 <__fixdfsi>
 1008a48:	1009883a 	mov	r4,r2
 1008a4c:	102b883a 	mov	r21,r2
 1008a50:	10040080 	call	1004008 <__floatsidf>
 1008a54:	880b883a 	mov	r5,r17
 1008a58:	8009883a 	mov	r4,r16
 1008a5c:	180f883a 	mov	r7,r3
 1008a60:	100d883a 	mov	r6,r2
 1008a64:	10039b80 	call	10039b8 <__subdf3>
 1008a68:	1021883a 	mov	r16,r2
 1008a6c:	d9001b17 	ldw	r4,108(sp)
 1008a70:	1823883a 	mov	r17,r3
 1008a74:	dc001415 	stw	r16,80(sp)
 1008a78:	ad400c04 	addi	r21,r21,48
 1008a7c:	dc401515 	stw	r17,84(sp)
 1008a80:	d8801a17 	ldw	r2,104(sp)
 1008a84:	e5400005 	stb	r21,0(fp)
 1008a88:	202f883a 	mov	r23,r4
 1008a8c:	d9c01b17 	ldw	r7,108(sp)
 1008a90:	d9001417 	ldw	r4,80(sp)
 1008a94:	880b883a 	mov	r5,r17
 1008a98:	100d883a 	mov	r6,r2
 1008a9c:	102d883a 	mov	r22,r2
 1008aa0:	e7000044 	addi	fp,fp,1
 1008aa4:	100d1280 	call	100d128 <__ltdf2>
 1008aa8:	103fc30e 	bge	r2,zero,10089b8 <_dtoa_r+0x1064>
 1008aac:	d9000417 	ldw	r4,16(sp)
 1008ab0:	d9000d15 	stw	r4,52(sp)
 1008ab4:	003d7106 	br	100807c <_dtoa_r+0x728>
 1008ab8:	d9801717 	ldw	r6,92(sp)
 1008abc:	00800084 	movi	r2,2
 1008ac0:	11bde60e 	bge	r2,r6,100825c <_dtoa_r+0x908>
 1008ac4:	203cfb1e 	bne	r4,zero,1007eb4 <_dtoa_r+0x560>
 1008ac8:	d9001617 	ldw	r4,88(sp)
 1008acc:	900b883a 	mov	r5,r18
 1008ad0:	01800144 	movi	r6,5
 1008ad4:	000f883a 	mov	r7,zero
 1008ad8:	100b0fc0 	call	100b0fc <__multadd>
 1008adc:	d9000717 	ldw	r4,28(sp)
 1008ae0:	100b883a 	mov	r5,r2
 1008ae4:	1025883a 	mov	r18,r2
 1008ae8:	100a5380 	call	100a538 <__mcmp>
 1008aec:	00bcf10e 	bge	zero,r2,1007eb4 <_dtoa_r+0x560>
 1008af0:	d8c00d17 	ldw	r3,52(sp)
 1008af4:	d9000517 	ldw	r4,20(sp)
 1008af8:	d8000615 	stw	zero,24(sp)
 1008afc:	18c00044 	addi	r3,r3,1
 1008b00:	d8c00d15 	stw	r3,52(sp)
 1008b04:	00800c44 	movi	r2,49
 1008b08:	27000044 	addi	fp,r4,1
 1008b0c:	20800005 	stb	r2,0(r4)
 1008b10:	003e8906 	br	1008538 <_dtoa_r+0xbe4>
 1008b14:	d8c00517 	ldw	r3,20(sp)
 1008b18:	003bc206 	br	1007a24 <_dtoa_r+0xd0>
 1008b1c:	01804074 	movhi	r6,257
 1008b20:	31884c04 	addi	r6,r6,8496
 1008b24:	30c00917 	ldw	r3,36(r6)
 1008b28:	30800817 	ldw	r2,32(r6)
 1008b2c:	d9001217 	ldw	r4,72(sp)
 1008b30:	d9401317 	ldw	r5,76(sp)
 1008b34:	180f883a 	mov	r7,r3
 1008b38:	100d883a 	mov	r6,r2
 1008b3c:	100ce480 	call	100ce48 <__divdf3>
 1008b40:	948003cc 	andi	r18,r18,15
 1008b44:	058000c4 	movi	r22,3
 1008b48:	1029883a 	mov	r20,r2
 1008b4c:	182b883a 	mov	r21,r3
 1008b50:	003c8906 	br	1007d78 <_dtoa_r+0x424>
 1008b54:	d9001017 	ldw	r4,64(sp)
 1008b58:	d9800917 	ldw	r6,36(sp)
 1008b5c:	0025883a 	mov	r18,zero
 1008b60:	1105c83a 	sub	r2,r2,r4
 1008b64:	2089883a 	add	r4,r4,r2
 1008b68:	308d883a 	add	r6,r6,r2
 1008b6c:	d9001015 	stw	r4,64(sp)
 1008b70:	d9800915 	stw	r6,36(sp)
 1008b74:	003e3206 	br	1008440 <_dtoa_r+0xaec>
 1008b78:	28800044 	addi	r2,r5,1
 1008b7c:	27000044 	addi	fp,r4,1
 1008b80:	20800005 	stb	r2,0(r4)
 1008b84:	003e6c06 	br	1008538 <_dtoa_r+0xbe4>
 1008b88:	d8800f17 	ldw	r2,60(sp)
 1008b8c:	00bce016 	blt	zero,r2,1007f10 <_dtoa_r+0x5bc>
 1008b90:	d9800f17 	ldw	r6,60(sp)
 1008b94:	303cc51e 	bne	r6,zero,1007eac <_dtoa_r+0x558>
 1008b98:	0005883a 	mov	r2,zero
 1008b9c:	00d00534 	movhi	r3,16404
 1008ba0:	980b883a 	mov	r5,r19
 1008ba4:	180f883a 	mov	r7,r3
 1008ba8:	9009883a 	mov	r4,r18
 1008bac:	100d883a 	mov	r6,r2
 1008bb0:	1003aac0 	call	1003aac <__muldf3>
 1008bb4:	180b883a 	mov	r5,r3
 1008bb8:	a80f883a 	mov	r7,r21
 1008bbc:	1009883a 	mov	r4,r2
 1008bc0:	a00d883a 	mov	r6,r20
 1008bc4:	1003f800 	call	1003f80 <__gedf2>
 1008bc8:	103cb80e 	bge	r2,zero,1007eac <_dtoa_r+0x558>
 1008bcc:	0027883a 	mov	r19,zero
 1008bd0:	0025883a 	mov	r18,zero
 1008bd4:	003fc606 	br	1008af0 <_dtoa_r+0x119c>
 1008bd8:	99400117 	ldw	r5,4(r19)
 1008bdc:	d9001617 	ldw	r4,88(sp)
 1008be0:	100a95c0 	call	100a95c <_Balloc>
 1008be4:	99800417 	ldw	r6,16(r19)
 1008be8:	11000304 	addi	r4,r2,12
 1008bec:	99400304 	addi	r5,r19,12
 1008bf0:	318d883a 	add	r6,r6,r6
 1008bf4:	318d883a 	add	r6,r6,r6
 1008bf8:	31800204 	addi	r6,r6,8
 1008bfc:	1023883a 	mov	r17,r2
 1008c00:	100a1c40 	call	100a1c4 <memcpy>
 1008c04:	d9001617 	ldw	r4,88(sp)
 1008c08:	880b883a 	mov	r5,r17
 1008c0c:	01800044 	movi	r6,1
 1008c10:	100ad200 	call	100ad20 <__lshift>
 1008c14:	100b883a 	mov	r5,r2
 1008c18:	003d9c06 	br	100828c <_dtoa_r+0x938>
 1008c1c:	00800e44 	movi	r2,57
 1008c20:	b8807026 	beq	r23,r2,1008de4 <_dtoa_r+0x1490>
 1008c24:	b8800044 	addi	r2,r23,1
 1008c28:	b7000044 	addi	fp,r22,1
 1008c2c:	b0800005 	stb	r2,0(r22)
 1008c30:	003e4106 	br	1008538 <_dtoa_r+0xbe4>
 1008c34:	d8800317 	ldw	r2,12(sp)
 1008c38:	01804074 	movhi	r6,257
 1008c3c:	31881a04 	addi	r6,r6,8296
 1008c40:	b009883a 	mov	r4,r22
 1008c44:	100e90fa 	slli	r7,r2,3
 1008c48:	b80b883a 	mov	r5,r23
 1008c4c:	398f883a 	add	r7,r7,r6
 1008c50:	38bffe17 	ldw	r2,-8(r7)
 1008c54:	d9800517 	ldw	r6,20(sp)
 1008c58:	38ffff17 	ldw	r3,-4(r7)
 1008c5c:	37000044 	addi	fp,r6,1
 1008c60:	180f883a 	mov	r7,r3
 1008c64:	100d883a 	mov	r6,r2
 1008c68:	1003aac0 	call	1003aac <__muldf3>
 1008c6c:	a80b883a 	mov	r5,r21
 1008c70:	a009883a 	mov	r4,r20
 1008c74:	182f883a 	mov	r23,r3
 1008c78:	102d883a 	mov	r22,r2
 1008c7c:	10041000 	call	1004100 <__fixdfsi>
 1008c80:	1009883a 	mov	r4,r2
 1008c84:	1027883a 	mov	r19,r2
 1008c88:	10040080 	call	1004008 <__floatsidf>
 1008c8c:	a80b883a 	mov	r5,r21
 1008c90:	a009883a 	mov	r4,r20
 1008c94:	180f883a 	mov	r7,r3
 1008c98:	100d883a 	mov	r6,r2
 1008c9c:	10039b80 	call	10039b8 <__subdf3>
 1008ca0:	180b883a 	mov	r5,r3
 1008ca4:	d8c00517 	ldw	r3,20(sp)
 1008ca8:	9cc00c04 	addi	r19,r19,48
 1008cac:	1009883a 	mov	r4,r2
 1008cb0:	1cc00005 	stb	r19,0(r3)
 1008cb4:	2021883a 	mov	r16,r4
 1008cb8:	d9000317 	ldw	r4,12(sp)
 1008cbc:	00800044 	movi	r2,1
 1008cc0:	2823883a 	mov	r17,r5
 1008cc4:	20802226 	beq	r4,r2,1008d50 <_dtoa_r+0x13fc>
 1008cc8:	1029883a 	mov	r20,r2
 1008ccc:	0005883a 	mov	r2,zero
 1008cd0:	00d00934 	movhi	r3,16420
 1008cd4:	180f883a 	mov	r7,r3
 1008cd8:	100d883a 	mov	r6,r2
 1008cdc:	880b883a 	mov	r5,r17
 1008ce0:	8009883a 	mov	r4,r16
 1008ce4:	1003aac0 	call	1003aac <__muldf3>
 1008ce8:	180b883a 	mov	r5,r3
 1008cec:	1009883a 	mov	r4,r2
 1008cf0:	1823883a 	mov	r17,r3
 1008cf4:	1021883a 	mov	r16,r2
 1008cf8:	10041000 	call	1004100 <__fixdfsi>
 1008cfc:	1009883a 	mov	r4,r2
 1008d00:	102b883a 	mov	r21,r2
 1008d04:	10040080 	call	1004008 <__floatsidf>
 1008d08:	880b883a 	mov	r5,r17
 1008d0c:	8009883a 	mov	r4,r16
 1008d10:	180f883a 	mov	r7,r3
 1008d14:	100d883a 	mov	r6,r2
 1008d18:	10039b80 	call	10039b8 <__subdf3>
 1008d1c:	180b883a 	mov	r5,r3
 1008d20:	d8c00517 	ldw	r3,20(sp)
 1008d24:	1009883a 	mov	r4,r2
 1008d28:	ad400c04 	addi	r21,r21,48
 1008d2c:	1d05883a 	add	r2,r3,r20
 1008d30:	15400005 	stb	r21,0(r2)
 1008d34:	2021883a 	mov	r16,r4
 1008d38:	d9000317 	ldw	r4,12(sp)
 1008d3c:	a5000044 	addi	r20,r20,1
 1008d40:	2823883a 	mov	r17,r5
 1008d44:	a13fe11e 	bne	r20,r4,1008ccc <_dtoa_r+0x1378>
 1008d48:	e505883a 	add	r2,fp,r20
 1008d4c:	173fffc4 	addi	fp,r2,-1
 1008d50:	0025883a 	mov	r18,zero
 1008d54:	04cff834 	movhi	r19,16352
 1008d58:	b009883a 	mov	r4,r22
 1008d5c:	b80b883a 	mov	r5,r23
 1008d60:	900d883a 	mov	r6,r18
 1008d64:	980f883a 	mov	r7,r19
 1008d68:	1003a380 	call	1003a38 <__adddf3>
 1008d6c:	180b883a 	mov	r5,r3
 1008d70:	1009883a 	mov	r4,r2
 1008d74:	800d883a 	mov	r6,r16
 1008d78:	880f883a 	mov	r7,r17
 1008d7c:	100d1280 	call	100d128 <__ltdf2>
 1008d80:	103cab16 	blt	r2,zero,1008030 <_dtoa_r+0x6dc>
 1008d84:	0009883a 	mov	r4,zero
 1008d88:	980b883a 	mov	r5,r19
 1008d8c:	b80f883a 	mov	r7,r23
 1008d90:	b00d883a 	mov	r6,r22
 1008d94:	10039b80 	call	10039b8 <__subdf3>
 1008d98:	180b883a 	mov	r5,r3
 1008d9c:	880f883a 	mov	r7,r17
 1008da0:	1009883a 	mov	r4,r2
 1008da4:	800d883a 	mov	r6,r16
 1008da8:	1003ef80 	call	1003ef8 <__gtdf2>
 1008dac:	00bc470e 	bge	zero,r2,1007ecc <_dtoa_r+0x578>
 1008db0:	00c00c04 	movi	r3,48
 1008db4:	e73fffc4 	addi	fp,fp,-1
 1008db8:	e0800007 	ldb	r2,0(fp)
 1008dbc:	10fffd26 	beq	r2,r3,1008db4 <_dtoa_r+0x1460>
 1008dc0:	d9800417 	ldw	r6,16(sp)
 1008dc4:	e7000044 	addi	fp,fp,1
 1008dc8:	d9800d15 	stw	r6,52(sp)
 1008dcc:	003cab06 	br	100807c <_dtoa_r+0x728>
 1008dd0:	d8c00f17 	ldw	r3,60(sp)
 1008dd4:	d9001117 	ldw	r4,68(sp)
 1008dd8:	20e1c83a 	sub	r16,r4,r3
 1008ddc:	0007883a 	mov	r3,zero
 1008de0:	003d9b06 	br	1008450 <_dtoa_r+0xafc>
 1008de4:	00800e44 	movi	r2,57
 1008de8:	b0800005 	stb	r2,0(r22)
 1008dec:	b5800044 	addi	r22,r22,1
 1008df0:	003dc106 	br	10084f8 <_dtoa_r+0xba4>
 1008df4:	05800084 	movi	r22,2
 1008df8:	003bf706 	br	1007dd8 <_dtoa_r+0x484>
 1008dfc:	d9000f17 	ldw	r4,60(sp)
 1008e00:	013c000e 	bge	zero,r4,1007e04 <_dtoa_r+0x4b0>
 1008e04:	d9800e17 	ldw	r6,56(sp)
 1008e08:	01bc300e 	bge	zero,r6,1007ecc <_dtoa_r+0x578>
 1008e0c:	0005883a 	mov	r2,zero
 1008e10:	00d00934 	movhi	r3,16420
 1008e14:	a80b883a 	mov	r5,r21
 1008e18:	180f883a 	mov	r7,r3
 1008e1c:	a009883a 	mov	r4,r20
 1008e20:	100d883a 	mov	r6,r2
 1008e24:	1003aac0 	call	1003aac <__muldf3>
 1008e28:	b1000044 	addi	r4,r22,1
 1008e2c:	1021883a 	mov	r16,r2
 1008e30:	1823883a 	mov	r17,r3
 1008e34:	10040080 	call	1004008 <__floatsidf>
 1008e38:	880b883a 	mov	r5,r17
 1008e3c:	8009883a 	mov	r4,r16
 1008e40:	180f883a 	mov	r7,r3
 1008e44:	100d883a 	mov	r6,r2
 1008e48:	1003aac0 	call	1003aac <__muldf3>
 1008e4c:	0011883a 	mov	r8,zero
 1008e50:	02500734 	movhi	r9,16412
 1008e54:	180b883a 	mov	r5,r3
 1008e58:	480f883a 	mov	r7,r9
 1008e5c:	1009883a 	mov	r4,r2
 1008e60:	400d883a 	mov	r6,r8
 1008e64:	1003a380 	call	1003a38 <__adddf3>
 1008e68:	102d883a 	mov	r22,r2
 1008e6c:	00bf3034 	movhi	r2,64704
 1008e70:	10ef883a 	add	r23,r2,r3
 1008e74:	d8800d17 	ldw	r2,52(sp)
 1008e78:	d8c00e17 	ldw	r3,56(sp)
 1008e7c:	8029883a 	mov	r20,r16
 1008e80:	10bfffc4 	addi	r2,r2,-1
 1008e84:	882b883a 	mov	r21,r17
 1008e88:	d8800415 	stw	r2,16(sp)
 1008e8c:	d8c00315 	stw	r3,12(sp)
 1008e90:	003e8306 	br	10088a0 <_dtoa_r+0xf4c>
 1008e94:	d8800117 	ldw	r2,4(sp)
 1008e98:	dc001117 	ldw	r16,68(sp)
 1008e9c:	dc801017 	ldw	r18,64(sp)
 1008ea0:	00c00d84 	movi	r3,54
 1008ea4:	1887c83a 	sub	r3,r3,r2
 1008ea8:	003d6906 	br	1008450 <_dtoa_r+0xafc>
 1008eac:	01800044 	movi	r6,1
 1008eb0:	3021883a 	mov	r16,r6
 1008eb4:	d9800f15 	stw	r6,60(sp)
 1008eb8:	d9802615 	stw	r6,152(sp)
 1008ebc:	d9800e15 	stw	r6,56(sp)
 1008ec0:	003b9306 	br	1007d10 <_dtoa_r+0x3bc>
 1008ec4:	b021883a 	mov	r16,r22
 1008ec8:	dd800f15 	stw	r22,60(sp)
 1008ecc:	003b9006 	br	1007d10 <_dtoa_r+0x3bc>
 1008ed0:	103e221e 	bne	r2,zero,100875c <_dtoa_r+0xe08>
 1008ed4:	b880004c 	andi	r2,r23,1
 1008ed8:	1005003a 	cmpeq	r2,r2,zero
 1008edc:	103e1f1e 	bne	r2,zero,100875c <_dtoa_r+0xe08>
 1008ee0:	003e1b06 	br	1008750 <_dtoa_r+0xdfc>
 1008ee4:	d9001617 	ldw	r4,88(sp)
 1008ee8:	980b883a 	mov	r5,r19
 1008eec:	01800284 	movi	r6,10
 1008ef0:	000f883a 	mov	r7,zero
 1008ef4:	100b0fc0 	call	100b0fc <__multadd>
 1008ef8:	d8c00e17 	ldw	r3,56(sp)
 1008efc:	1027883a 	mov	r19,r2
 1008f00:	d8c00f15 	stw	r3,60(sp)
 1008f04:	003cd306 	br	1008254 <_dtoa_r+0x900>

01008f08 <_fflush_r>:
 1008f08:	defffb04 	addi	sp,sp,-20
 1008f0c:	dcc00315 	stw	r19,12(sp)
 1008f10:	dc800215 	stw	r18,8(sp)
 1008f14:	dfc00415 	stw	ra,16(sp)
 1008f18:	dc400115 	stw	r17,4(sp)
 1008f1c:	dc000015 	stw	r16,0(sp)
 1008f20:	2027883a 	mov	r19,r4
 1008f24:	2825883a 	mov	r18,r5
 1008f28:	20000226 	beq	r4,zero,1008f34 <_fflush_r+0x2c>
 1008f2c:	20800e17 	ldw	r2,56(r4)
 1008f30:	10005626 	beq	r2,zero,100908c <_fflush_r+0x184>
 1008f34:	9100030b 	ldhu	r4,12(r18)
 1008f38:	20ffffcc 	andi	r3,r4,65535
 1008f3c:	18e0001c 	xori	r3,r3,32768
 1008f40:	18e00004 	addi	r3,r3,-32768
 1008f44:	1880020c 	andi	r2,r3,8
 1008f48:	1000261e 	bne	r2,zero,1008fe4 <_fflush_r+0xdc>
 1008f4c:	90c00117 	ldw	r3,4(r18)
 1008f50:	20820014 	ori	r2,r4,2048
 1008f54:	9080030d 	sth	r2,12(r18)
 1008f58:	1009883a 	mov	r4,r2
 1008f5c:	00c0400e 	bge	zero,r3,1009060 <_fflush_r+0x158>
 1008f60:	92000a17 	ldw	r8,40(r18)
 1008f64:	40004026 	beq	r8,zero,1009068 <_fflush_r+0x160>
 1008f68:	2084000c 	andi	r2,r4,4096
 1008f6c:	10005326 	beq	r2,zero,10090bc <_fflush_r+0x1b4>
 1008f70:	94001417 	ldw	r16,80(r18)
 1008f74:	9080030b 	ldhu	r2,12(r18)
 1008f78:	1080010c 	andi	r2,r2,4
 1008f7c:	1000481e 	bne	r2,zero,10090a0 <_fflush_r+0x198>
 1008f80:	91400717 	ldw	r5,28(r18)
 1008f84:	9809883a 	mov	r4,r19
 1008f88:	800d883a 	mov	r6,r16
 1008f8c:	000f883a 	mov	r7,zero
 1008f90:	403ee83a 	callr	r8
 1008f94:	8080261e 	bne	r16,r2,1009030 <_fflush_r+0x128>
 1008f98:	9080030b 	ldhu	r2,12(r18)
 1008f9c:	91000417 	ldw	r4,16(r18)
 1008fa0:	90000115 	stw	zero,4(r18)
 1008fa4:	10bdffcc 	andi	r2,r2,63487
 1008fa8:	10ffffcc 	andi	r3,r2,65535
 1008fac:	18c4000c 	andi	r3,r3,4096
 1008fb0:	9080030d 	sth	r2,12(r18)
 1008fb4:	91000015 	stw	r4,0(r18)
 1008fb8:	18002b26 	beq	r3,zero,1009068 <_fflush_r+0x160>
 1008fbc:	0007883a 	mov	r3,zero
 1008fc0:	1805883a 	mov	r2,r3
 1008fc4:	94001415 	stw	r16,80(r18)
 1008fc8:	dfc00417 	ldw	ra,16(sp)
 1008fcc:	dcc00317 	ldw	r19,12(sp)
 1008fd0:	dc800217 	ldw	r18,8(sp)
 1008fd4:	dc400117 	ldw	r17,4(sp)
 1008fd8:	dc000017 	ldw	r16,0(sp)
 1008fdc:	dec00504 	addi	sp,sp,20
 1008fe0:	f800283a 	ret
 1008fe4:	94400417 	ldw	r17,16(r18)
 1008fe8:	88001f26 	beq	r17,zero,1009068 <_fflush_r+0x160>
 1008fec:	90800017 	ldw	r2,0(r18)
 1008ff0:	18c000cc 	andi	r3,r3,3
 1008ff4:	94400015 	stw	r17,0(r18)
 1008ff8:	1461c83a 	sub	r16,r2,r17
 1008ffc:	18002526 	beq	r3,zero,1009094 <_fflush_r+0x18c>
 1009000:	0005883a 	mov	r2,zero
 1009004:	90800215 	stw	r2,8(r18)
 1009008:	0400170e 	bge	zero,r16,1009068 <_fflush_r+0x160>
 100900c:	90c00917 	ldw	r3,36(r18)
 1009010:	91400717 	ldw	r5,28(r18)
 1009014:	880d883a 	mov	r6,r17
 1009018:	800f883a 	mov	r7,r16
 100901c:	9809883a 	mov	r4,r19
 1009020:	183ee83a 	callr	r3
 1009024:	88a3883a 	add	r17,r17,r2
 1009028:	80a1c83a 	sub	r16,r16,r2
 100902c:	00bff616 	blt	zero,r2,1009008 <_fflush_r+0x100>
 1009030:	9080030b 	ldhu	r2,12(r18)
 1009034:	00ffffc4 	movi	r3,-1
 1009038:	10801014 	ori	r2,r2,64
 100903c:	9080030d 	sth	r2,12(r18)
 1009040:	1805883a 	mov	r2,r3
 1009044:	dfc00417 	ldw	ra,16(sp)
 1009048:	dcc00317 	ldw	r19,12(sp)
 100904c:	dc800217 	ldw	r18,8(sp)
 1009050:	dc400117 	ldw	r17,4(sp)
 1009054:	dc000017 	ldw	r16,0(sp)
 1009058:	dec00504 	addi	sp,sp,20
 100905c:	f800283a 	ret
 1009060:	90800f17 	ldw	r2,60(r18)
 1009064:	00bfbe16 	blt	zero,r2,1008f60 <_fflush_r+0x58>
 1009068:	0007883a 	mov	r3,zero
 100906c:	1805883a 	mov	r2,r3
 1009070:	dfc00417 	ldw	ra,16(sp)
 1009074:	dcc00317 	ldw	r19,12(sp)
 1009078:	dc800217 	ldw	r18,8(sp)
 100907c:	dc400117 	ldw	r17,4(sp)
 1009080:	dc000017 	ldw	r16,0(sp)
 1009084:	dec00504 	addi	sp,sp,20
 1009088:	f800283a 	ret
 100908c:	10091a00 	call	10091a0 <__sinit>
 1009090:	003fa806 	br	1008f34 <_fflush_r+0x2c>
 1009094:	90800517 	ldw	r2,20(r18)
 1009098:	90800215 	stw	r2,8(r18)
 100909c:	003fda06 	br	1009008 <_fflush_r+0x100>
 10090a0:	90800117 	ldw	r2,4(r18)
 10090a4:	90c00c17 	ldw	r3,48(r18)
 10090a8:	80a1c83a 	sub	r16,r16,r2
 10090ac:	183fb426 	beq	r3,zero,1008f80 <_fflush_r+0x78>
 10090b0:	90800f17 	ldw	r2,60(r18)
 10090b4:	80a1c83a 	sub	r16,r16,r2
 10090b8:	003fb106 	br	1008f80 <_fflush_r+0x78>
 10090bc:	91400717 	ldw	r5,28(r18)
 10090c0:	9809883a 	mov	r4,r19
 10090c4:	000d883a 	mov	r6,zero
 10090c8:	01c00044 	movi	r7,1
 10090cc:	403ee83a 	callr	r8
 10090d0:	1021883a 	mov	r16,r2
 10090d4:	00bfffc4 	movi	r2,-1
 10090d8:	80800226 	beq	r16,r2,10090e4 <_fflush_r+0x1dc>
 10090dc:	92000a17 	ldw	r8,40(r18)
 10090e0:	003fa406 	br	1008f74 <_fflush_r+0x6c>
 10090e4:	98c00017 	ldw	r3,0(r19)
 10090e8:	00800744 	movi	r2,29
 10090ec:	18bfde26 	beq	r3,r2,1009068 <_fflush_r+0x160>
 10090f0:	9080030b 	ldhu	r2,12(r18)
 10090f4:	8007883a 	mov	r3,r16
 10090f8:	10801014 	ori	r2,r2,64
 10090fc:	9080030d 	sth	r2,12(r18)
 1009100:	003fcf06 	br	1009040 <_fflush_r+0x138>

01009104 <fflush>:
 1009104:	01404074 	movhi	r5,257
 1009108:	2963c204 	addi	r5,r5,-28920
 100910c:	2007883a 	mov	r3,r4
 1009110:	20000526 	beq	r4,zero,1009128 <fflush+0x24>
 1009114:	00804074 	movhi	r2,257
 1009118:	108f2504 	addi	r2,r2,15508
 100911c:	11000017 	ldw	r4,0(r2)
 1009120:	180b883a 	mov	r5,r3
 1009124:	1008f081 	jmpi	1008f08 <_fflush_r>
 1009128:	00804074 	movhi	r2,257
 100912c:	108f2604 	addi	r2,r2,15512
 1009130:	11000017 	ldw	r4,0(r2)
 1009134:	1009d081 	jmpi	1009d08 <_fwalk_reent>

01009138 <std>:
 1009138:	00804074 	movhi	r2,257
 100913c:	10aeb304 	addi	r2,r2,-17716
 1009140:	20800b15 	stw	r2,44(r4)
 1009144:	00804074 	movhi	r2,257
 1009148:	10aeee04 	addi	r2,r2,-17480
 100914c:	20800815 	stw	r2,32(r4)
 1009150:	00c04074 	movhi	r3,257
 1009154:	18eecf04 	addi	r3,r3,-17604
 1009158:	00804074 	movhi	r2,257
 100915c:	10aeb504 	addi	r2,r2,-17708
 1009160:	2140030d 	sth	r5,12(r4)
 1009164:	2180038d 	sth	r6,14(r4)
 1009168:	20c00915 	stw	r3,36(r4)
 100916c:	20800a15 	stw	r2,40(r4)
 1009170:	20000015 	stw	zero,0(r4)
 1009174:	20000115 	stw	zero,4(r4)
 1009178:	20000215 	stw	zero,8(r4)
 100917c:	20000415 	stw	zero,16(r4)
 1009180:	20000515 	stw	zero,20(r4)
 1009184:	20000615 	stw	zero,24(r4)
 1009188:	21000715 	stw	r4,28(r4)
 100918c:	f800283a 	ret

01009190 <__sfp_lock_acquire>:
 1009190:	f800283a 	ret

01009194 <__sfp_lock_release>:
 1009194:	f800283a 	ret

01009198 <__sinit_lock_acquire>:
 1009198:	f800283a 	ret

0100919c <__sinit_lock_release>:
 100919c:	f800283a 	ret

010091a0 <__sinit>:
 10091a0:	20800e17 	ldw	r2,56(r4)
 10091a4:	defffd04 	addi	sp,sp,-12
 10091a8:	dc400115 	stw	r17,4(sp)
 10091ac:	dc000015 	stw	r16,0(sp)
 10091b0:	dfc00215 	stw	ra,8(sp)
 10091b4:	04400044 	movi	r17,1
 10091b8:	01400104 	movi	r5,4
 10091bc:	000d883a 	mov	r6,zero
 10091c0:	2021883a 	mov	r16,r4
 10091c4:	2200bb04 	addi	r8,r4,748
 10091c8:	200f883a 	mov	r7,r4
 10091cc:	10000526 	beq	r2,zero,10091e4 <__sinit+0x44>
 10091d0:	dfc00217 	ldw	ra,8(sp)
 10091d4:	dc400117 	ldw	r17,4(sp)
 10091d8:	dc000017 	ldw	r16,0(sp)
 10091dc:	dec00304 	addi	sp,sp,12
 10091e0:	f800283a 	ret
 10091e4:	21000117 	ldw	r4,4(r4)
 10091e8:	00804074 	movhi	r2,257
 10091ec:	10a4a104 	addi	r2,r2,-28028
 10091f0:	00c000c4 	movi	r3,3
 10091f4:	80800f15 	stw	r2,60(r16)
 10091f8:	80c0b915 	stw	r3,740(r16)
 10091fc:	8200ba15 	stw	r8,744(r16)
 1009200:	84400e15 	stw	r17,56(r16)
 1009204:	8000b815 	stw	zero,736(r16)
 1009208:	10091380 	call	1009138 <std>
 100920c:	81000217 	ldw	r4,8(r16)
 1009210:	880d883a 	mov	r6,r17
 1009214:	800f883a 	mov	r7,r16
 1009218:	01400284 	movi	r5,10
 100921c:	10091380 	call	1009138 <std>
 1009220:	81000317 	ldw	r4,12(r16)
 1009224:	800f883a 	mov	r7,r16
 1009228:	01400484 	movi	r5,18
 100922c:	01800084 	movi	r6,2
 1009230:	dfc00217 	ldw	ra,8(sp)
 1009234:	dc400117 	ldw	r17,4(sp)
 1009238:	dc000017 	ldw	r16,0(sp)
 100923c:	dec00304 	addi	sp,sp,12
 1009240:	10091381 	jmpi	1009138 <std>

01009244 <__fp_lock>:
 1009244:	0005883a 	mov	r2,zero
 1009248:	f800283a 	ret

0100924c <__fp_unlock>:
 100924c:	0005883a 	mov	r2,zero
 1009250:	f800283a 	ret

01009254 <__fp_unlock_all>:
 1009254:	00804074 	movhi	r2,257
 1009258:	108f2504 	addi	r2,r2,15508
 100925c:	11000017 	ldw	r4,0(r2)
 1009260:	01404074 	movhi	r5,257
 1009264:	29649304 	addi	r5,r5,-28084
 1009268:	1009dd01 	jmpi	1009dd0 <_fwalk>

0100926c <__fp_lock_all>:
 100926c:	00804074 	movhi	r2,257
 1009270:	108f2504 	addi	r2,r2,15508
 1009274:	11000017 	ldw	r4,0(r2)
 1009278:	01404074 	movhi	r5,257
 100927c:	29649104 	addi	r5,r5,-28092
 1009280:	1009dd01 	jmpi	1009dd0 <_fwalk>

01009284 <_cleanup_r>:
 1009284:	01404074 	movhi	r5,257
 1009288:	296fe504 	addi	r5,r5,-16492
 100928c:	1009dd01 	jmpi	1009dd0 <_fwalk>

01009290 <_cleanup>:
 1009290:	00804074 	movhi	r2,257
 1009294:	108f2604 	addi	r2,r2,15512
 1009298:	11000017 	ldw	r4,0(r2)
 100929c:	10092841 	jmpi	1009284 <_cleanup_r>

010092a0 <__sfmoreglue>:
 10092a0:	defffc04 	addi	sp,sp,-16
 10092a4:	dc000015 	stw	r16,0(sp)
 10092a8:	2821883a 	mov	r16,r5
 10092ac:	dc400115 	stw	r17,4(sp)
 10092b0:	01401704 	movi	r5,92
 10092b4:	2023883a 	mov	r17,r4
 10092b8:	8009883a 	mov	r4,r16
 10092bc:	dfc00315 	stw	ra,12(sp)
 10092c0:	dcc00215 	stw	r19,8(sp)
 10092c4:	100435c0 	call	100435c <__mulsi3>
 10092c8:	11400304 	addi	r5,r2,12
 10092cc:	8809883a 	mov	r4,r17
 10092d0:	1027883a 	mov	r19,r2
 10092d4:	1004d440 	call	1004d44 <_malloc_r>
 10092d8:	10c00304 	addi	r3,r2,12
 10092dc:	1023883a 	mov	r17,r2
 10092e0:	1809883a 	mov	r4,r3
 10092e4:	980d883a 	mov	r6,r19
 10092e8:	000b883a 	mov	r5,zero
 10092ec:	10000b26 	beq	r2,zero,100931c <__sfmoreglue+0x7c>
 10092f0:	14000115 	stw	r16,4(r2)
 10092f4:	10c00215 	stw	r3,8(r2)
 10092f8:	10000015 	stw	zero,0(r2)
 10092fc:	100a3440 	call	100a344 <memset>
 1009300:	8805883a 	mov	r2,r17
 1009304:	dfc00317 	ldw	ra,12(sp)
 1009308:	dcc00217 	ldw	r19,8(sp)
 100930c:	dc400117 	ldw	r17,4(sp)
 1009310:	dc000017 	ldw	r16,0(sp)
 1009314:	dec00404 	addi	sp,sp,16
 1009318:	f800283a 	ret
 100931c:	0023883a 	mov	r17,zero
 1009320:	8805883a 	mov	r2,r17
 1009324:	dfc00317 	ldw	ra,12(sp)
 1009328:	dcc00217 	ldw	r19,8(sp)
 100932c:	dc400117 	ldw	r17,4(sp)
 1009330:	dc000017 	ldw	r16,0(sp)
 1009334:	dec00404 	addi	sp,sp,16
 1009338:	f800283a 	ret

0100933c <__sfp>:
 100933c:	defffd04 	addi	sp,sp,-12
 1009340:	00804074 	movhi	r2,257
 1009344:	108f2604 	addi	r2,r2,15512
 1009348:	dc000015 	stw	r16,0(sp)
 100934c:	14000017 	ldw	r16,0(r2)
 1009350:	dc400115 	stw	r17,4(sp)
 1009354:	dfc00215 	stw	ra,8(sp)
 1009358:	80800e17 	ldw	r2,56(r16)
 100935c:	2023883a 	mov	r17,r4
 1009360:	10002626 	beq	r2,zero,10093fc <__sfp+0xc0>
 1009364:	8400b804 	addi	r16,r16,736
 1009368:	80800117 	ldw	r2,4(r16)
 100936c:	81000217 	ldw	r4,8(r16)
 1009370:	10ffffc4 	addi	r3,r2,-1
 1009374:	18000916 	blt	r3,zero,100939c <__sfp+0x60>
 1009378:	2080030f 	ldh	r2,12(r4)
 100937c:	10000b26 	beq	r2,zero,10093ac <__sfp+0x70>
 1009380:	017fffc4 	movi	r5,-1
 1009384:	00000206 	br	1009390 <__sfp+0x54>
 1009388:	2080030f 	ldh	r2,12(r4)
 100938c:	10000726 	beq	r2,zero,10093ac <__sfp+0x70>
 1009390:	18ffffc4 	addi	r3,r3,-1
 1009394:	21001704 	addi	r4,r4,92
 1009398:	197ffb1e 	bne	r3,r5,1009388 <__sfp+0x4c>
 100939c:	80800017 	ldw	r2,0(r16)
 10093a0:	10001926 	beq	r2,zero,1009408 <__sfp+0xcc>
 10093a4:	1021883a 	mov	r16,r2
 10093a8:	003fef06 	br	1009368 <__sfp+0x2c>
 10093ac:	00bfffc4 	movi	r2,-1
 10093b0:	00c00044 	movi	r3,1
 10093b4:	2080038d 	sth	r2,14(r4)
 10093b8:	20c0030d 	sth	r3,12(r4)
 10093bc:	20000015 	stw	zero,0(r4)
 10093c0:	20000215 	stw	zero,8(r4)
 10093c4:	20000115 	stw	zero,4(r4)
 10093c8:	20000415 	stw	zero,16(r4)
 10093cc:	20000515 	stw	zero,20(r4)
 10093d0:	20000615 	stw	zero,24(r4)
 10093d4:	20000c15 	stw	zero,48(r4)
 10093d8:	20000d15 	stw	zero,52(r4)
 10093dc:	20001115 	stw	zero,68(r4)
 10093e0:	20001215 	stw	zero,72(r4)
 10093e4:	2005883a 	mov	r2,r4
 10093e8:	dfc00217 	ldw	ra,8(sp)
 10093ec:	dc400117 	ldw	r17,4(sp)
 10093f0:	dc000017 	ldw	r16,0(sp)
 10093f4:	dec00304 	addi	sp,sp,12
 10093f8:	f800283a 	ret
 10093fc:	8009883a 	mov	r4,r16
 1009400:	10091a00 	call	10091a0 <__sinit>
 1009404:	003fd706 	br	1009364 <__sfp+0x28>
 1009408:	8809883a 	mov	r4,r17
 100940c:	01400104 	movi	r5,4
 1009410:	10092a00 	call	10092a0 <__sfmoreglue>
 1009414:	80800015 	stw	r2,0(r16)
 1009418:	103fe21e 	bne	r2,zero,10093a4 <__sfp+0x68>
 100941c:	00800304 	movi	r2,12
 1009420:	0009883a 	mov	r4,zero
 1009424:	88800015 	stw	r2,0(r17)
 1009428:	003fee06 	br	10093e4 <__sfp+0xa8>

0100942c <_malloc_trim_r>:
 100942c:	defffb04 	addi	sp,sp,-20
 1009430:	dcc00315 	stw	r19,12(sp)
 1009434:	04c04074 	movhi	r19,257
 1009438:	9cc87c04 	addi	r19,r19,8688
 100943c:	dc800215 	stw	r18,8(sp)
 1009440:	dc400115 	stw	r17,4(sp)
 1009444:	dc000015 	stw	r16,0(sp)
 1009448:	2823883a 	mov	r17,r5
 100944c:	2025883a 	mov	r18,r4
 1009450:	dfc00415 	stw	ra,16(sp)
 1009454:	100d9d80 	call	100d9d8 <__malloc_lock>
 1009458:	98800217 	ldw	r2,8(r19)
 100945c:	9009883a 	mov	r4,r18
 1009460:	000b883a 	mov	r5,zero
 1009464:	10c00117 	ldw	r3,4(r2)
 1009468:	00bfff04 	movi	r2,-4
 100946c:	18a0703a 	and	r16,r3,r2
 1009470:	8463c83a 	sub	r17,r16,r17
 1009474:	8c43fbc4 	addi	r17,r17,4079
 1009478:	8822d33a 	srli	r17,r17,12
 100947c:	0083ffc4 	movi	r2,4095
 1009480:	8c7fffc4 	addi	r17,r17,-1
 1009484:	8822933a 	slli	r17,r17,12
 1009488:	1440060e 	bge	r2,r17,10094a4 <_malloc_trim_r+0x78>
 100948c:	10055b00 	call	10055b0 <_sbrk_r>
 1009490:	98c00217 	ldw	r3,8(r19)
 1009494:	9009883a 	mov	r4,r18
 1009498:	044bc83a 	sub	r5,zero,r17
 100949c:	80c7883a 	add	r3,r16,r3
 10094a0:	10c00926 	beq	r2,r3,10094c8 <_malloc_trim_r+0x9c>
 10094a4:	100d9f80 	call	100d9f8 <__malloc_unlock>
 10094a8:	0005883a 	mov	r2,zero
 10094ac:	dfc00417 	ldw	ra,16(sp)
 10094b0:	dcc00317 	ldw	r19,12(sp)
 10094b4:	dc800217 	ldw	r18,8(sp)
 10094b8:	dc400117 	ldw	r17,4(sp)
 10094bc:	dc000017 	ldw	r16,0(sp)
 10094c0:	dec00504 	addi	sp,sp,20
 10094c4:	f800283a 	ret
 10094c8:	9009883a 	mov	r4,r18
 10094cc:	10055b00 	call	10055b0 <_sbrk_r>
 10094d0:	844dc83a 	sub	r6,r16,r17
 10094d4:	00ffffc4 	movi	r3,-1
 10094d8:	9009883a 	mov	r4,r18
 10094dc:	000b883a 	mov	r5,zero
 10094e0:	01c04074 	movhi	r7,257
 10094e4:	39d5f704 	addi	r7,r7,22492
 10094e8:	31800054 	ori	r6,r6,1
 10094ec:	10c00926 	beq	r2,r3,1009514 <_malloc_trim_r+0xe8>
 10094f0:	38800017 	ldw	r2,0(r7)
 10094f4:	98c00217 	ldw	r3,8(r19)
 10094f8:	9009883a 	mov	r4,r18
 10094fc:	1445c83a 	sub	r2,r2,r17
 1009500:	38800015 	stw	r2,0(r7)
 1009504:	19800115 	stw	r6,4(r3)
 1009508:	100d9f80 	call	100d9f8 <__malloc_unlock>
 100950c:	00800044 	movi	r2,1
 1009510:	003fe606 	br	10094ac <_malloc_trim_r+0x80>
 1009514:	10055b00 	call	10055b0 <_sbrk_r>
 1009518:	99800217 	ldw	r6,8(r19)
 100951c:	100f883a 	mov	r7,r2
 1009520:	9009883a 	mov	r4,r18
 1009524:	1187c83a 	sub	r3,r2,r6
 1009528:	008003c4 	movi	r2,15
 100952c:	19400054 	ori	r5,r3,1
 1009530:	10ffdc0e 	bge	r2,r3,10094a4 <_malloc_trim_r+0x78>
 1009534:	00804074 	movhi	r2,257
 1009538:	108f2404 	addi	r2,r2,15504
 100953c:	10c00017 	ldw	r3,0(r2)
 1009540:	00804074 	movhi	r2,257
 1009544:	1095f704 	addi	r2,r2,22492
 1009548:	31400115 	stw	r5,4(r6)
 100954c:	38c7c83a 	sub	r3,r7,r3
 1009550:	10c00015 	stw	r3,0(r2)
 1009554:	003fd306 	br	10094a4 <_malloc_trim_r+0x78>

01009558 <_free_r>:
 1009558:	defffd04 	addi	sp,sp,-12
 100955c:	dc400115 	stw	r17,4(sp)
 1009560:	dc000015 	stw	r16,0(sp)
 1009564:	dfc00215 	stw	ra,8(sp)
 1009568:	2821883a 	mov	r16,r5
 100956c:	2023883a 	mov	r17,r4
 1009570:	28005a26 	beq	r5,zero,10096dc <_free_r+0x184>
 1009574:	100d9d80 	call	100d9d8 <__malloc_lock>
 1009578:	823ffe04 	addi	r8,r16,-8
 100957c:	41400117 	ldw	r5,4(r8)
 1009580:	00bfff84 	movi	r2,-2
 1009584:	02804074 	movhi	r10,257
 1009588:	52887c04 	addi	r10,r10,8688
 100958c:	288e703a 	and	r7,r5,r2
 1009590:	41cd883a 	add	r6,r8,r7
 1009594:	30c00117 	ldw	r3,4(r6)
 1009598:	51000217 	ldw	r4,8(r10)
 100959c:	00bfff04 	movi	r2,-4
 10095a0:	1892703a 	and	r9,r3,r2
 10095a4:	5017883a 	mov	r11,r10
 10095a8:	31006726 	beq	r6,r4,1009748 <_free_r+0x1f0>
 10095ac:	2880004c 	andi	r2,r5,1
 10095b0:	1005003a 	cmpeq	r2,r2,zero
 10095b4:	32400115 	stw	r9,4(r6)
 10095b8:	10001a1e 	bne	r2,zero,1009624 <_free_r+0xcc>
 10095bc:	000b883a 	mov	r5,zero
 10095c0:	3247883a 	add	r3,r6,r9
 10095c4:	18800117 	ldw	r2,4(r3)
 10095c8:	1080004c 	andi	r2,r2,1
 10095cc:	1000231e 	bne	r2,zero,100965c <_free_r+0x104>
 10095d0:	280ac03a 	cmpne	r5,r5,zero
 10095d4:	3a4f883a 	add	r7,r7,r9
 10095d8:	2800451e 	bne	r5,zero,10096f0 <_free_r+0x198>
 10095dc:	31000217 	ldw	r4,8(r6)
 10095e0:	00804074 	movhi	r2,257
 10095e4:	10887e04 	addi	r2,r2,8696
 10095e8:	20807b26 	beq	r4,r2,10097d8 <_free_r+0x280>
 10095ec:	30800317 	ldw	r2,12(r6)
 10095f0:	3a07883a 	add	r3,r7,r8
 10095f4:	19c00015 	stw	r7,0(r3)
 10095f8:	11000215 	stw	r4,8(r2)
 10095fc:	20800315 	stw	r2,12(r4)
 1009600:	38800054 	ori	r2,r7,1
 1009604:	40800115 	stw	r2,4(r8)
 1009608:	28001a26 	beq	r5,zero,1009674 <_free_r+0x11c>
 100960c:	8809883a 	mov	r4,r17
 1009610:	dfc00217 	ldw	ra,8(sp)
 1009614:	dc400117 	ldw	r17,4(sp)
 1009618:	dc000017 	ldw	r16,0(sp)
 100961c:	dec00304 	addi	sp,sp,12
 1009620:	100d9f81 	jmpi	100d9f8 <__malloc_unlock>
 1009624:	80bffe17 	ldw	r2,-8(r16)
 1009628:	50c00204 	addi	r3,r10,8
 100962c:	4091c83a 	sub	r8,r8,r2
 1009630:	41000217 	ldw	r4,8(r8)
 1009634:	388f883a 	add	r7,r7,r2
 1009638:	20c06126 	beq	r4,r3,10097c0 <_free_r+0x268>
 100963c:	40800317 	ldw	r2,12(r8)
 1009640:	3247883a 	add	r3,r6,r9
 1009644:	000b883a 	mov	r5,zero
 1009648:	11000215 	stw	r4,8(r2)
 100964c:	20800315 	stw	r2,12(r4)
 1009650:	18800117 	ldw	r2,4(r3)
 1009654:	1080004c 	andi	r2,r2,1
 1009658:	103fdd26 	beq	r2,zero,10095d0 <_free_r+0x78>
 100965c:	38800054 	ori	r2,r7,1
 1009660:	3a07883a 	add	r3,r7,r8
 1009664:	280ac03a 	cmpne	r5,r5,zero
 1009668:	40800115 	stw	r2,4(r8)
 100966c:	19c00015 	stw	r7,0(r3)
 1009670:	283fe61e 	bne	r5,zero,100960c <_free_r+0xb4>
 1009674:	00807fc4 	movi	r2,511
 1009678:	11c01f2e 	bgeu	r2,r7,10096f8 <_free_r+0x1a0>
 100967c:	3806d27a 	srli	r3,r7,9
 1009680:	1800481e 	bne	r3,zero,10097a4 <_free_r+0x24c>
 1009684:	3804d0fa 	srli	r2,r7,3
 1009688:	100690fa 	slli	r3,r2,3
 100968c:	1acd883a 	add	r6,r3,r11
 1009690:	31400217 	ldw	r5,8(r6)
 1009694:	31405926 	beq	r6,r5,10097fc <_free_r+0x2a4>
 1009698:	28800117 	ldw	r2,4(r5)
 100969c:	00ffff04 	movi	r3,-4
 10096a0:	10c4703a 	and	r2,r2,r3
 10096a4:	3880022e 	bgeu	r7,r2,10096b0 <_free_r+0x158>
 10096a8:	29400217 	ldw	r5,8(r5)
 10096ac:	317ffa1e 	bne	r6,r5,1009698 <_free_r+0x140>
 10096b0:	29800317 	ldw	r6,12(r5)
 10096b4:	41800315 	stw	r6,12(r8)
 10096b8:	41400215 	stw	r5,8(r8)
 10096bc:	8809883a 	mov	r4,r17
 10096c0:	2a000315 	stw	r8,12(r5)
 10096c4:	32000215 	stw	r8,8(r6)
 10096c8:	dfc00217 	ldw	ra,8(sp)
 10096cc:	dc400117 	ldw	r17,4(sp)
 10096d0:	dc000017 	ldw	r16,0(sp)
 10096d4:	dec00304 	addi	sp,sp,12
 10096d8:	100d9f81 	jmpi	100d9f8 <__malloc_unlock>
 10096dc:	dfc00217 	ldw	ra,8(sp)
 10096e0:	dc400117 	ldw	r17,4(sp)
 10096e4:	dc000017 	ldw	r16,0(sp)
 10096e8:	dec00304 	addi	sp,sp,12
 10096ec:	f800283a 	ret
 10096f0:	31000217 	ldw	r4,8(r6)
 10096f4:	003fbd06 	br	10095ec <_free_r+0x94>
 10096f8:	3806d0fa 	srli	r3,r7,3
 10096fc:	00800044 	movi	r2,1
 1009700:	51400117 	ldw	r5,4(r10)
 1009704:	180890fa 	slli	r4,r3,3
 1009708:	1807d0ba 	srai	r3,r3,2
 100970c:	22c9883a 	add	r4,r4,r11
 1009710:	21800217 	ldw	r6,8(r4)
 1009714:	10c4983a 	sll	r2,r2,r3
 1009718:	41000315 	stw	r4,12(r8)
 100971c:	41800215 	stw	r6,8(r8)
 1009720:	288ab03a 	or	r5,r5,r2
 1009724:	22000215 	stw	r8,8(r4)
 1009728:	8809883a 	mov	r4,r17
 100972c:	51400115 	stw	r5,4(r10)
 1009730:	32000315 	stw	r8,12(r6)
 1009734:	dfc00217 	ldw	ra,8(sp)
 1009738:	dc400117 	ldw	r17,4(sp)
 100973c:	dc000017 	ldw	r16,0(sp)
 1009740:	dec00304 	addi	sp,sp,12
 1009744:	100d9f81 	jmpi	100d9f8 <__malloc_unlock>
 1009748:	2880004c 	andi	r2,r5,1
 100974c:	3a4d883a 	add	r6,r7,r9
 1009750:	1000071e 	bne	r2,zero,1009770 <_free_r+0x218>
 1009754:	80bffe17 	ldw	r2,-8(r16)
 1009758:	4091c83a 	sub	r8,r8,r2
 100975c:	41000317 	ldw	r4,12(r8)
 1009760:	40c00217 	ldw	r3,8(r8)
 1009764:	308d883a 	add	r6,r6,r2
 1009768:	20c00215 	stw	r3,8(r4)
 100976c:	19000315 	stw	r4,12(r3)
 1009770:	00804074 	movhi	r2,257
 1009774:	108f2304 	addi	r2,r2,15500
 1009778:	11000017 	ldw	r4,0(r2)
 100977c:	30c00054 	ori	r3,r6,1
 1009780:	52000215 	stw	r8,8(r10)
 1009784:	40c00115 	stw	r3,4(r8)
 1009788:	313fa036 	bltu	r6,r4,100960c <_free_r+0xb4>
 100978c:	00804074 	movhi	r2,257
 1009790:	1095ea04 	addi	r2,r2,22440
 1009794:	11400017 	ldw	r5,0(r2)
 1009798:	8809883a 	mov	r4,r17
 100979c:	100942c0 	call	100942c <_malloc_trim_r>
 10097a0:	003f9a06 	br	100960c <_free_r+0xb4>
 10097a4:	00800104 	movi	r2,4
 10097a8:	10c0072e 	bgeu	r2,r3,10097c8 <_free_r+0x270>
 10097ac:	00800504 	movi	r2,20
 10097b0:	10c01936 	bltu	r2,r3,1009818 <_free_r+0x2c0>
 10097b4:	188016c4 	addi	r2,r3,91
 10097b8:	100690fa 	slli	r3,r2,3
 10097bc:	003fb306 	br	100968c <_free_r+0x134>
 10097c0:	01400044 	movi	r5,1
 10097c4:	003f7e06 	br	10095c0 <_free_r+0x68>
 10097c8:	3804d1ba 	srli	r2,r7,6
 10097cc:	10800e04 	addi	r2,r2,56
 10097d0:	100690fa 	slli	r3,r2,3
 10097d4:	003fad06 	br	100968c <_free_r+0x134>
 10097d8:	22000315 	stw	r8,12(r4)
 10097dc:	22000215 	stw	r8,8(r4)
 10097e0:	3a05883a 	add	r2,r7,r8
 10097e4:	38c00054 	ori	r3,r7,1
 10097e8:	11c00015 	stw	r7,0(r2)
 10097ec:	41000215 	stw	r4,8(r8)
 10097f0:	40c00115 	stw	r3,4(r8)
 10097f4:	41000315 	stw	r4,12(r8)
 10097f8:	003f8406 	br	100960c <_free_r+0xb4>
 10097fc:	1005d0ba 	srai	r2,r2,2
 1009800:	00c00044 	movi	r3,1
 1009804:	51000117 	ldw	r4,4(r10)
 1009808:	1886983a 	sll	r3,r3,r2
 100980c:	20c8b03a 	or	r4,r4,r3
 1009810:	51000115 	stw	r4,4(r10)
 1009814:	003fa706 	br	10096b4 <_free_r+0x15c>
 1009818:	00801504 	movi	r2,84
 100981c:	10c00436 	bltu	r2,r3,1009830 <_free_r+0x2d8>
 1009820:	3804d33a 	srli	r2,r7,12
 1009824:	10801b84 	addi	r2,r2,110
 1009828:	100690fa 	slli	r3,r2,3
 100982c:	003f9706 	br	100968c <_free_r+0x134>
 1009830:	00805504 	movi	r2,340
 1009834:	10c00436 	bltu	r2,r3,1009848 <_free_r+0x2f0>
 1009838:	3804d3fa 	srli	r2,r7,15
 100983c:	10801dc4 	addi	r2,r2,119
 1009840:	100690fa 	slli	r3,r2,3
 1009844:	003f9106 	br	100968c <_free_r+0x134>
 1009848:	00815504 	movi	r2,1364
 100984c:	10c0032e 	bgeu	r2,r3,100985c <_free_r+0x304>
 1009850:	00801f84 	movi	r2,126
 1009854:	00c0fc04 	movi	r3,1008
 1009858:	003f8c06 	br	100968c <_free_r+0x134>
 100985c:	3804d4ba 	srli	r2,r7,18
 1009860:	10801f04 	addi	r2,r2,124
 1009864:	100690fa 	slli	r3,r2,3
 1009868:	003f8806 	br	100968c <_free_r+0x134>

0100986c <__sfvwrite_r>:
 100986c:	30800217 	ldw	r2,8(r6)
 1009870:	defff504 	addi	sp,sp,-44
 1009874:	df000915 	stw	fp,36(sp)
 1009878:	dd800715 	stw	r22,28(sp)
 100987c:	dc800315 	stw	r18,12(sp)
 1009880:	dfc00a15 	stw	ra,40(sp)
 1009884:	ddc00815 	stw	r23,32(sp)
 1009888:	dd400615 	stw	r21,24(sp)
 100988c:	dd000515 	stw	r20,20(sp)
 1009890:	dcc00415 	stw	r19,16(sp)
 1009894:	dc400215 	stw	r17,8(sp)
 1009898:	dc000115 	stw	r16,4(sp)
 100989c:	302d883a 	mov	r22,r6
 10098a0:	2039883a 	mov	fp,r4
 10098a4:	2825883a 	mov	r18,r5
 10098a8:	10001c26 	beq	r2,zero,100991c <__sfvwrite_r+0xb0>
 10098ac:	29c0030b 	ldhu	r7,12(r5)
 10098b0:	3880020c 	andi	r2,r7,8
 10098b4:	10002726 	beq	r2,zero,1009954 <__sfvwrite_r+0xe8>
 10098b8:	28800417 	ldw	r2,16(r5)
 10098bc:	10002526 	beq	r2,zero,1009954 <__sfvwrite_r+0xe8>
 10098c0:	3880008c 	andi	r2,r7,2
 10098c4:	b5400017 	ldw	r21,0(r22)
 10098c8:	10002826 	beq	r2,zero,100996c <__sfvwrite_r+0x100>
 10098cc:	0021883a 	mov	r16,zero
 10098d0:	0023883a 	mov	r17,zero
 10098d4:	880d883a 	mov	r6,r17
 10098d8:	e009883a 	mov	r4,fp
 10098dc:	00810004 	movi	r2,1024
 10098e0:	80006e26 	beq	r16,zero,1009a9c <__sfvwrite_r+0x230>
 10098e4:	800f883a 	mov	r7,r16
 10098e8:	91400717 	ldw	r5,28(r18)
 10098ec:	1400012e 	bgeu	r2,r16,10098f4 <__sfvwrite_r+0x88>
 10098f0:	100f883a 	mov	r7,r2
 10098f4:	90c00917 	ldw	r3,36(r18)
 10098f8:	183ee83a 	callr	r3
 10098fc:	1007883a 	mov	r3,r2
 1009900:	80a1c83a 	sub	r16,r16,r2
 1009904:	88a3883a 	add	r17,r17,r2
 1009908:	00806d0e 	bge	zero,r2,1009ac0 <__sfvwrite_r+0x254>
 100990c:	b0800217 	ldw	r2,8(r22)
 1009910:	10c5c83a 	sub	r2,r2,r3
 1009914:	b0800215 	stw	r2,8(r22)
 1009918:	103fee1e 	bne	r2,zero,10098d4 <__sfvwrite_r+0x68>
 100991c:	0009883a 	mov	r4,zero
 1009920:	2005883a 	mov	r2,r4
 1009924:	dfc00a17 	ldw	ra,40(sp)
 1009928:	df000917 	ldw	fp,36(sp)
 100992c:	ddc00817 	ldw	r23,32(sp)
 1009930:	dd800717 	ldw	r22,28(sp)
 1009934:	dd400617 	ldw	r21,24(sp)
 1009938:	dd000517 	ldw	r20,20(sp)
 100993c:	dcc00417 	ldw	r19,16(sp)
 1009940:	dc800317 	ldw	r18,12(sp)
 1009944:	dc400217 	ldw	r17,8(sp)
 1009948:	dc000117 	ldw	r16,4(sp)
 100994c:	dec00b04 	addi	sp,sp,44
 1009950:	f800283a 	ret
 1009954:	10075d40 	call	10075d4 <__swsetup_r>
 1009958:	1000e41e 	bne	r2,zero,1009cec <__sfvwrite_r+0x480>
 100995c:	91c0030b 	ldhu	r7,12(r18)
 1009960:	b5400017 	ldw	r21,0(r22)
 1009964:	3880008c 	andi	r2,r7,2
 1009968:	103fd81e 	bne	r2,zero,10098cc <__sfvwrite_r+0x60>
 100996c:	3880004c 	andi	r2,r7,1
 1009970:	1005003a 	cmpeq	r2,r2,zero
 1009974:	10005726 	beq	r2,zero,1009ad4 <__sfvwrite_r+0x268>
 1009978:	0029883a 	mov	r20,zero
 100997c:	002f883a 	mov	r23,zero
 1009980:	a0004226 	beq	r20,zero,1009a8c <__sfvwrite_r+0x220>
 1009984:	3880800c 	andi	r2,r7,512
 1009988:	94000217 	ldw	r16,8(r18)
 100998c:	10008b26 	beq	r2,zero,1009bbc <__sfvwrite_r+0x350>
 1009990:	800d883a 	mov	r6,r16
 1009994:	a400a536 	bltu	r20,r16,1009c2c <__sfvwrite_r+0x3c0>
 1009998:	3881200c 	andi	r2,r7,1152
 100999c:	10002726 	beq	r2,zero,1009a3c <__sfvwrite_r+0x1d0>
 10099a0:	90800517 	ldw	r2,20(r18)
 10099a4:	92000417 	ldw	r8,16(r18)
 10099a8:	91400017 	ldw	r5,0(r18)
 10099ac:	1087883a 	add	r3,r2,r2
 10099b0:	1887883a 	add	r3,r3,r2
 10099b4:	1808d7fa 	srli	r4,r3,31
 10099b8:	2a21c83a 	sub	r16,r5,r8
 10099bc:	80800044 	addi	r2,r16,1
 10099c0:	20c9883a 	add	r4,r4,r3
 10099c4:	2027d07a 	srai	r19,r4,1
 10099c8:	a085883a 	add	r2,r20,r2
 10099cc:	980d883a 	mov	r6,r19
 10099d0:	9880022e 	bgeu	r19,r2,10099dc <__sfvwrite_r+0x170>
 10099d4:	1027883a 	mov	r19,r2
 10099d8:	100d883a 	mov	r6,r2
 10099dc:	3881000c 	andi	r2,r7,1024
 10099e0:	1000b826 	beq	r2,zero,1009cc4 <__sfvwrite_r+0x458>
 10099e4:	300b883a 	mov	r5,r6
 10099e8:	e009883a 	mov	r4,fp
 10099ec:	1004d440 	call	1004d44 <_malloc_r>
 10099f0:	10003126 	beq	r2,zero,1009ab8 <__sfvwrite_r+0x24c>
 10099f4:	91400417 	ldw	r5,16(r18)
 10099f8:	1009883a 	mov	r4,r2
 10099fc:	800d883a 	mov	r6,r16
 1009a00:	1023883a 	mov	r17,r2
 1009a04:	100a1c40 	call	100a1c4 <memcpy>
 1009a08:	90c0030b 	ldhu	r3,12(r18)
 1009a0c:	00beffc4 	movi	r2,-1025
 1009a10:	1886703a 	and	r3,r3,r2
 1009a14:	18c02014 	ori	r3,r3,128
 1009a18:	90c0030d 	sth	r3,12(r18)
 1009a1c:	9c07c83a 	sub	r3,r19,r16
 1009a20:	8c05883a 	add	r2,r17,r16
 1009a24:	a00d883a 	mov	r6,r20
 1009a28:	a021883a 	mov	r16,r20
 1009a2c:	90800015 	stw	r2,0(r18)
 1009a30:	90c00215 	stw	r3,8(r18)
 1009a34:	94400415 	stw	r17,16(r18)
 1009a38:	94c00515 	stw	r19,20(r18)
 1009a3c:	91000017 	ldw	r4,0(r18)
 1009a40:	b80b883a 	mov	r5,r23
 1009a44:	a023883a 	mov	r17,r20
 1009a48:	100a2640 	call	100a264 <memmove>
 1009a4c:	90c00217 	ldw	r3,8(r18)
 1009a50:	90800017 	ldw	r2,0(r18)
 1009a54:	a027883a 	mov	r19,r20
 1009a58:	1c07c83a 	sub	r3,r3,r16
 1009a5c:	1405883a 	add	r2,r2,r16
 1009a60:	90c00215 	stw	r3,8(r18)
 1009a64:	a021883a 	mov	r16,r20
 1009a68:	90800015 	stw	r2,0(r18)
 1009a6c:	b0800217 	ldw	r2,8(r22)
 1009a70:	1405c83a 	sub	r2,r2,r16
 1009a74:	b0800215 	stw	r2,8(r22)
 1009a78:	103fa826 	beq	r2,zero,100991c <__sfvwrite_r+0xb0>
 1009a7c:	a469c83a 	sub	r20,r20,r17
 1009a80:	91c0030b 	ldhu	r7,12(r18)
 1009a84:	bcef883a 	add	r23,r23,r19
 1009a88:	a03fbe1e 	bne	r20,zero,1009984 <__sfvwrite_r+0x118>
 1009a8c:	adc00017 	ldw	r23,0(r21)
 1009a90:	ad000117 	ldw	r20,4(r21)
 1009a94:	ad400204 	addi	r21,r21,8
 1009a98:	003fb906 	br	1009980 <__sfvwrite_r+0x114>
 1009a9c:	ac400017 	ldw	r17,0(r21)
 1009aa0:	ac000117 	ldw	r16,4(r21)
 1009aa4:	ad400204 	addi	r21,r21,8
 1009aa8:	003f8a06 	br	10098d4 <__sfvwrite_r+0x68>
 1009aac:	91400417 	ldw	r5,16(r18)
 1009ab0:	e009883a 	mov	r4,fp
 1009ab4:	10095580 	call	1009558 <_free_r>
 1009ab8:	00800304 	movi	r2,12
 1009abc:	e0800015 	stw	r2,0(fp)
 1009ac0:	9080030b 	ldhu	r2,12(r18)
 1009ac4:	013fffc4 	movi	r4,-1
 1009ac8:	10801014 	ori	r2,r2,64
 1009acc:	9080030d 	sth	r2,12(r18)
 1009ad0:	003f9306 	br	1009920 <__sfvwrite_r+0xb4>
 1009ad4:	0027883a 	mov	r19,zero
 1009ad8:	002f883a 	mov	r23,zero
 1009adc:	d8000015 	stw	zero,0(sp)
 1009ae0:	0029883a 	mov	r20,zero
 1009ae4:	98001e26 	beq	r19,zero,1009b60 <__sfvwrite_r+0x2f4>
 1009ae8:	d8c00017 	ldw	r3,0(sp)
 1009aec:	1804c03a 	cmpne	r2,r3,zero
 1009af0:	10005e26 	beq	r2,zero,1009c6c <__sfvwrite_r+0x400>
 1009af4:	9821883a 	mov	r16,r19
 1009af8:	a4c0012e 	bgeu	r20,r19,1009b00 <__sfvwrite_r+0x294>
 1009afc:	a021883a 	mov	r16,r20
 1009b00:	91000017 	ldw	r4,0(r18)
 1009b04:	90800417 	ldw	r2,16(r18)
 1009b08:	91800217 	ldw	r6,8(r18)
 1009b0c:	91c00517 	ldw	r7,20(r18)
 1009b10:	1100022e 	bgeu	r2,r4,1009b1c <__sfvwrite_r+0x2b0>
 1009b14:	31e3883a 	add	r17,r6,r7
 1009b18:	8c001616 	blt	r17,r16,1009b74 <__sfvwrite_r+0x308>
 1009b1c:	81c03816 	blt	r16,r7,1009c00 <__sfvwrite_r+0x394>
 1009b20:	90c00917 	ldw	r3,36(r18)
 1009b24:	91400717 	ldw	r5,28(r18)
 1009b28:	e009883a 	mov	r4,fp
 1009b2c:	b80d883a 	mov	r6,r23
 1009b30:	183ee83a 	callr	r3
 1009b34:	1023883a 	mov	r17,r2
 1009b38:	00bfe10e 	bge	zero,r2,1009ac0 <__sfvwrite_r+0x254>
 1009b3c:	a469c83a 	sub	r20,r20,r17
 1009b40:	a0001826 	beq	r20,zero,1009ba4 <__sfvwrite_r+0x338>
 1009b44:	b0800217 	ldw	r2,8(r22)
 1009b48:	1445c83a 	sub	r2,r2,r17
 1009b4c:	b0800215 	stw	r2,8(r22)
 1009b50:	103f7226 	beq	r2,zero,100991c <__sfvwrite_r+0xb0>
 1009b54:	9c67c83a 	sub	r19,r19,r17
 1009b58:	bc6f883a 	add	r23,r23,r17
 1009b5c:	983fe21e 	bne	r19,zero,1009ae8 <__sfvwrite_r+0x27c>
 1009b60:	adc00017 	ldw	r23,0(r21)
 1009b64:	acc00117 	ldw	r19,4(r21)
 1009b68:	ad400204 	addi	r21,r21,8
 1009b6c:	d8000015 	stw	zero,0(sp)
 1009b70:	003fdc06 	br	1009ae4 <__sfvwrite_r+0x278>
 1009b74:	b80b883a 	mov	r5,r23
 1009b78:	880d883a 	mov	r6,r17
 1009b7c:	100a2640 	call	100a264 <memmove>
 1009b80:	90c00017 	ldw	r3,0(r18)
 1009b84:	e009883a 	mov	r4,fp
 1009b88:	900b883a 	mov	r5,r18
 1009b8c:	1c47883a 	add	r3,r3,r17
 1009b90:	90c00015 	stw	r3,0(r18)
 1009b94:	1008f080 	call	1008f08 <_fflush_r>
 1009b98:	103fc91e 	bne	r2,zero,1009ac0 <__sfvwrite_r+0x254>
 1009b9c:	a469c83a 	sub	r20,r20,r17
 1009ba0:	a03fe81e 	bne	r20,zero,1009b44 <__sfvwrite_r+0x2d8>
 1009ba4:	e009883a 	mov	r4,fp
 1009ba8:	900b883a 	mov	r5,r18
 1009bac:	1008f080 	call	1008f08 <_fflush_r>
 1009bb0:	103fc31e 	bne	r2,zero,1009ac0 <__sfvwrite_r+0x254>
 1009bb4:	d8000015 	stw	zero,0(sp)
 1009bb8:	003fe206 	br	1009b44 <__sfvwrite_r+0x2d8>
 1009bbc:	91000017 	ldw	r4,0(r18)
 1009bc0:	90800417 	ldw	r2,16(r18)
 1009bc4:	1100022e 	bgeu	r2,r4,1009bd0 <__sfvwrite_r+0x364>
 1009bc8:	8023883a 	mov	r17,r16
 1009bcc:	85003136 	bltu	r16,r20,1009c94 <__sfvwrite_r+0x428>
 1009bd0:	91c00517 	ldw	r7,20(r18)
 1009bd4:	a1c01836 	bltu	r20,r7,1009c38 <__sfvwrite_r+0x3cc>
 1009bd8:	90c00917 	ldw	r3,36(r18)
 1009bdc:	91400717 	ldw	r5,28(r18)
 1009be0:	e009883a 	mov	r4,fp
 1009be4:	b80d883a 	mov	r6,r23
 1009be8:	183ee83a 	callr	r3
 1009bec:	1021883a 	mov	r16,r2
 1009bf0:	00bfb30e 	bge	zero,r2,1009ac0 <__sfvwrite_r+0x254>
 1009bf4:	1023883a 	mov	r17,r2
 1009bf8:	1027883a 	mov	r19,r2
 1009bfc:	003f9b06 	br	1009a6c <__sfvwrite_r+0x200>
 1009c00:	b80b883a 	mov	r5,r23
 1009c04:	800d883a 	mov	r6,r16
 1009c08:	100a2640 	call	100a264 <memmove>
 1009c0c:	90c00217 	ldw	r3,8(r18)
 1009c10:	90800017 	ldw	r2,0(r18)
 1009c14:	8023883a 	mov	r17,r16
 1009c18:	1c07c83a 	sub	r3,r3,r16
 1009c1c:	1405883a 	add	r2,r2,r16
 1009c20:	90c00215 	stw	r3,8(r18)
 1009c24:	90800015 	stw	r2,0(r18)
 1009c28:	003fc406 	br	1009b3c <__sfvwrite_r+0x2d0>
 1009c2c:	a00d883a 	mov	r6,r20
 1009c30:	a021883a 	mov	r16,r20
 1009c34:	003f8106 	br	1009a3c <__sfvwrite_r+0x1d0>
 1009c38:	b80b883a 	mov	r5,r23
 1009c3c:	a00d883a 	mov	r6,r20
 1009c40:	100a2640 	call	100a264 <memmove>
 1009c44:	90c00217 	ldw	r3,8(r18)
 1009c48:	90800017 	ldw	r2,0(r18)
 1009c4c:	a021883a 	mov	r16,r20
 1009c50:	1d07c83a 	sub	r3,r3,r20
 1009c54:	1505883a 	add	r2,r2,r20
 1009c58:	a023883a 	mov	r17,r20
 1009c5c:	a027883a 	mov	r19,r20
 1009c60:	90c00215 	stw	r3,8(r18)
 1009c64:	90800015 	stw	r2,0(r18)
 1009c68:	003f8006 	br	1009a6c <__sfvwrite_r+0x200>
 1009c6c:	b809883a 	mov	r4,r23
 1009c70:	01400284 	movi	r5,10
 1009c74:	980d883a 	mov	r6,r19
 1009c78:	100a0e00 	call	100a0e0 <memchr>
 1009c7c:	10001726 	beq	r2,zero,1009cdc <__sfvwrite_r+0x470>
 1009c80:	15c5c83a 	sub	r2,r2,r23
 1009c84:	15000044 	addi	r20,r2,1
 1009c88:	00800044 	movi	r2,1
 1009c8c:	d8800015 	stw	r2,0(sp)
 1009c90:	003f9806 	br	1009af4 <__sfvwrite_r+0x288>
 1009c94:	b80b883a 	mov	r5,r23
 1009c98:	800d883a 	mov	r6,r16
 1009c9c:	100a2640 	call	100a264 <memmove>
 1009ca0:	90c00017 	ldw	r3,0(r18)
 1009ca4:	e009883a 	mov	r4,fp
 1009ca8:	900b883a 	mov	r5,r18
 1009cac:	1c07883a 	add	r3,r3,r16
 1009cb0:	90c00015 	stw	r3,0(r18)
 1009cb4:	8027883a 	mov	r19,r16
 1009cb8:	1008f080 	call	1008f08 <_fflush_r>
 1009cbc:	103f6b26 	beq	r2,zero,1009a6c <__sfvwrite_r+0x200>
 1009cc0:	003f7f06 	br	1009ac0 <__sfvwrite_r+0x254>
 1009cc4:	400b883a 	mov	r5,r8
 1009cc8:	e009883a 	mov	r4,fp
 1009ccc:	100b4680 	call	100b468 <_realloc_r>
 1009cd0:	103f7626 	beq	r2,zero,1009aac <__sfvwrite_r+0x240>
 1009cd4:	1023883a 	mov	r17,r2
 1009cd8:	003f5006 	br	1009a1c <__sfvwrite_r+0x1b0>
 1009cdc:	00c00044 	movi	r3,1
 1009ce0:	9d000044 	addi	r20,r19,1
 1009ce4:	d8c00015 	stw	r3,0(sp)
 1009ce8:	003f8206 	br	1009af4 <__sfvwrite_r+0x288>
 1009cec:	9080030b 	ldhu	r2,12(r18)
 1009cf0:	00c00244 	movi	r3,9
 1009cf4:	013fffc4 	movi	r4,-1
 1009cf8:	10801014 	ori	r2,r2,64
 1009cfc:	9080030d 	sth	r2,12(r18)
 1009d00:	e0c00015 	stw	r3,0(fp)
 1009d04:	003f0606 	br	1009920 <__sfvwrite_r+0xb4>

01009d08 <_fwalk_reent>:
 1009d08:	defff704 	addi	sp,sp,-36
 1009d0c:	dcc00315 	stw	r19,12(sp)
 1009d10:	24c0b804 	addi	r19,r4,736
 1009d14:	dd800615 	stw	r22,24(sp)
 1009d18:	dd400515 	stw	r21,20(sp)
 1009d1c:	dfc00815 	stw	ra,32(sp)
 1009d20:	ddc00715 	stw	r23,28(sp)
 1009d24:	dd000415 	stw	r20,16(sp)
 1009d28:	dc800215 	stw	r18,8(sp)
 1009d2c:	dc400115 	stw	r17,4(sp)
 1009d30:	dc000015 	stw	r16,0(sp)
 1009d34:	202b883a 	mov	r21,r4
 1009d38:	282d883a 	mov	r22,r5
 1009d3c:	10091900 	call	1009190 <__sfp_lock_acquire>
 1009d40:	98002126 	beq	r19,zero,1009dc8 <_fwalk_reent+0xc0>
 1009d44:	002f883a 	mov	r23,zero
 1009d48:	9c800117 	ldw	r18,4(r19)
 1009d4c:	9c000217 	ldw	r16,8(r19)
 1009d50:	90bfffc4 	addi	r2,r18,-1
 1009d54:	10000d16 	blt	r2,zero,1009d8c <_fwalk_reent+0x84>
 1009d58:	0023883a 	mov	r17,zero
 1009d5c:	053fffc4 	movi	r20,-1
 1009d60:	8080030f 	ldh	r2,12(r16)
 1009d64:	8c400044 	addi	r17,r17,1
 1009d68:	10000626 	beq	r2,zero,1009d84 <_fwalk_reent+0x7c>
 1009d6c:	8080038f 	ldh	r2,14(r16)
 1009d70:	800b883a 	mov	r5,r16
 1009d74:	a809883a 	mov	r4,r21
 1009d78:	15000226 	beq	r2,r20,1009d84 <_fwalk_reent+0x7c>
 1009d7c:	b03ee83a 	callr	r22
 1009d80:	b8aeb03a 	or	r23,r23,r2
 1009d84:	84001704 	addi	r16,r16,92
 1009d88:	947ff51e 	bne	r18,r17,1009d60 <_fwalk_reent+0x58>
 1009d8c:	9cc00017 	ldw	r19,0(r19)
 1009d90:	983fed1e 	bne	r19,zero,1009d48 <_fwalk_reent+0x40>
 1009d94:	10091940 	call	1009194 <__sfp_lock_release>
 1009d98:	b805883a 	mov	r2,r23
 1009d9c:	dfc00817 	ldw	ra,32(sp)
 1009da0:	ddc00717 	ldw	r23,28(sp)
 1009da4:	dd800617 	ldw	r22,24(sp)
 1009da8:	dd400517 	ldw	r21,20(sp)
 1009dac:	dd000417 	ldw	r20,16(sp)
 1009db0:	dcc00317 	ldw	r19,12(sp)
 1009db4:	dc800217 	ldw	r18,8(sp)
 1009db8:	dc400117 	ldw	r17,4(sp)
 1009dbc:	dc000017 	ldw	r16,0(sp)
 1009dc0:	dec00904 	addi	sp,sp,36
 1009dc4:	f800283a 	ret
 1009dc8:	002f883a 	mov	r23,zero
 1009dcc:	003ff106 	br	1009d94 <_fwalk_reent+0x8c>

01009dd0 <_fwalk>:
 1009dd0:	defff804 	addi	sp,sp,-32
 1009dd4:	dcc00315 	stw	r19,12(sp)
 1009dd8:	24c0b804 	addi	r19,r4,736
 1009ddc:	dd400515 	stw	r21,20(sp)
 1009de0:	dfc00715 	stw	ra,28(sp)
 1009de4:	dd800615 	stw	r22,24(sp)
 1009de8:	dd000415 	stw	r20,16(sp)
 1009dec:	dc800215 	stw	r18,8(sp)
 1009df0:	dc400115 	stw	r17,4(sp)
 1009df4:	dc000015 	stw	r16,0(sp)
 1009df8:	282b883a 	mov	r21,r5
 1009dfc:	10091900 	call	1009190 <__sfp_lock_acquire>
 1009e00:	98001f26 	beq	r19,zero,1009e80 <_fwalk+0xb0>
 1009e04:	002d883a 	mov	r22,zero
 1009e08:	9c800117 	ldw	r18,4(r19)
 1009e0c:	9c000217 	ldw	r16,8(r19)
 1009e10:	90bfffc4 	addi	r2,r18,-1
 1009e14:	10000c16 	blt	r2,zero,1009e48 <_fwalk+0x78>
 1009e18:	0023883a 	mov	r17,zero
 1009e1c:	053fffc4 	movi	r20,-1
 1009e20:	8080030f 	ldh	r2,12(r16)
 1009e24:	8c400044 	addi	r17,r17,1
 1009e28:	10000526 	beq	r2,zero,1009e40 <_fwalk+0x70>
 1009e2c:	8080038f 	ldh	r2,14(r16)
 1009e30:	8009883a 	mov	r4,r16
 1009e34:	15000226 	beq	r2,r20,1009e40 <_fwalk+0x70>
 1009e38:	a83ee83a 	callr	r21
 1009e3c:	b0acb03a 	or	r22,r22,r2
 1009e40:	84001704 	addi	r16,r16,92
 1009e44:	947ff61e 	bne	r18,r17,1009e20 <_fwalk+0x50>
 1009e48:	9cc00017 	ldw	r19,0(r19)
 1009e4c:	983fee1e 	bne	r19,zero,1009e08 <_fwalk+0x38>
 1009e50:	10091940 	call	1009194 <__sfp_lock_release>
 1009e54:	b005883a 	mov	r2,r22
 1009e58:	dfc00717 	ldw	ra,28(sp)
 1009e5c:	dd800617 	ldw	r22,24(sp)
 1009e60:	dd400517 	ldw	r21,20(sp)
 1009e64:	dd000417 	ldw	r20,16(sp)
 1009e68:	dcc00317 	ldw	r19,12(sp)
 1009e6c:	dc800217 	ldw	r18,8(sp)
 1009e70:	dc400117 	ldw	r17,4(sp)
 1009e74:	dc000017 	ldw	r16,0(sp)
 1009e78:	dec00804 	addi	sp,sp,32
 1009e7c:	f800283a 	ret
 1009e80:	002d883a 	mov	r22,zero
 1009e84:	003ff206 	br	1009e50 <_fwalk+0x80>

01009e88 <__locale_charset>:
 1009e88:	d0a00517 	ldw	r2,-32748(gp)
 1009e8c:	f800283a 	ret

01009e90 <_localeconv_r>:
 1009e90:	00804074 	movhi	r2,257
 1009e94:	10880e04 	addi	r2,r2,8248
 1009e98:	f800283a 	ret

01009e9c <localeconv>:
 1009e9c:	00804074 	movhi	r2,257
 1009ea0:	108f2504 	addi	r2,r2,15508
 1009ea4:	11000017 	ldw	r4,0(r2)
 1009ea8:	1009e901 	jmpi	1009e90 <_localeconv_r>

01009eac <_setlocale_r>:
 1009eac:	defffc04 	addi	sp,sp,-16
 1009eb0:	00c04074 	movhi	r3,257
 1009eb4:	18c80904 	addi	r3,r3,8228
 1009eb8:	dc800215 	stw	r18,8(sp)
 1009ebc:	dc400115 	stw	r17,4(sp)
 1009ec0:	dc000015 	stw	r16,0(sp)
 1009ec4:	2023883a 	mov	r17,r4
 1009ec8:	2825883a 	mov	r18,r5
 1009ecc:	dfc00315 	stw	ra,12(sp)
 1009ed0:	3021883a 	mov	r16,r6
 1009ed4:	3009883a 	mov	r4,r6
 1009ed8:	180b883a 	mov	r5,r3
 1009edc:	30000926 	beq	r6,zero,1009f04 <_setlocale_r+0x58>
 1009ee0:	100bc180 	call	100bc18 <strcmp>
 1009ee4:	8009883a 	mov	r4,r16
 1009ee8:	01404074 	movhi	r5,257
 1009eec:	2947f404 	addi	r5,r5,8144
 1009ef0:	10000b1e 	bne	r2,zero,1009f20 <_setlocale_r+0x74>
 1009ef4:	8c000d15 	stw	r16,52(r17)
 1009ef8:	8c800c15 	stw	r18,48(r17)
 1009efc:	00c04074 	movhi	r3,257
 1009f00:	18c80904 	addi	r3,r3,8228
 1009f04:	1805883a 	mov	r2,r3
 1009f08:	dfc00317 	ldw	ra,12(sp)
 1009f0c:	dc800217 	ldw	r18,8(sp)
 1009f10:	dc400117 	ldw	r17,4(sp)
 1009f14:	dc000017 	ldw	r16,0(sp)
 1009f18:	dec00404 	addi	sp,sp,16
 1009f1c:	f800283a 	ret
 1009f20:	100bc180 	call	100bc18 <strcmp>
 1009f24:	0007883a 	mov	r3,zero
 1009f28:	103ff226 	beq	r2,zero,1009ef4 <_setlocale_r+0x48>
 1009f2c:	003ff506 	br	1009f04 <_setlocale_r+0x58>

01009f30 <setlocale>:
 1009f30:	01804074 	movhi	r6,257
 1009f34:	318f2504 	addi	r6,r6,15508
 1009f38:	2007883a 	mov	r3,r4
 1009f3c:	31000017 	ldw	r4,0(r6)
 1009f40:	280d883a 	mov	r6,r5
 1009f44:	180b883a 	mov	r5,r3
 1009f48:	1009eac1 	jmpi	1009eac <_setlocale_r>

01009f4c <__smakebuf_r>:
 1009f4c:	2880030b 	ldhu	r2,12(r5)
 1009f50:	deffed04 	addi	sp,sp,-76
 1009f54:	dc401015 	stw	r17,64(sp)
 1009f58:	1080008c 	andi	r2,r2,2
 1009f5c:	dc000f15 	stw	r16,60(sp)
 1009f60:	dfc01215 	stw	ra,72(sp)
 1009f64:	dc801115 	stw	r18,68(sp)
 1009f68:	2821883a 	mov	r16,r5
 1009f6c:	2023883a 	mov	r17,r4
 1009f70:	10000b26 	beq	r2,zero,1009fa0 <__smakebuf_r+0x54>
 1009f74:	28c010c4 	addi	r3,r5,67
 1009f78:	00800044 	movi	r2,1
 1009f7c:	28800515 	stw	r2,20(r5)
 1009f80:	28c00415 	stw	r3,16(r5)
 1009f84:	28c00015 	stw	r3,0(r5)
 1009f88:	dfc01217 	ldw	ra,72(sp)
 1009f8c:	dc801117 	ldw	r18,68(sp)
 1009f90:	dc401017 	ldw	r17,64(sp)
 1009f94:	dc000f17 	ldw	r16,60(sp)
 1009f98:	dec01304 	addi	sp,sp,76
 1009f9c:	f800283a 	ret
 1009fa0:	2940038f 	ldh	r5,14(r5)
 1009fa4:	28002116 	blt	r5,zero,100a02c <__smakebuf_r+0xe0>
 1009fa8:	d80d883a 	mov	r6,sp
 1009fac:	100bfa80 	call	100bfa8 <_fstat_r>
 1009fb0:	10001e16 	blt	r2,zero,100a02c <__smakebuf_r+0xe0>
 1009fb4:	d8800117 	ldw	r2,4(sp)
 1009fb8:	00e00014 	movui	r3,32768
 1009fbc:	113c000c 	andi	r4,r2,61440
 1009fc0:	20c03126 	beq	r4,r3,100a088 <__smakebuf_r+0x13c>
 1009fc4:	8080030b 	ldhu	r2,12(r16)
 1009fc8:	00c80004 	movi	r3,8192
 1009fcc:	10820014 	ori	r2,r2,2048
 1009fd0:	8080030d 	sth	r2,12(r16)
 1009fd4:	20c01e26 	beq	r4,r3,100a050 <__smakebuf_r+0x104>
 1009fd8:	04810004 	movi	r18,1024
 1009fdc:	8809883a 	mov	r4,r17
 1009fe0:	900b883a 	mov	r5,r18
 1009fe4:	1004d440 	call	1004d44 <_malloc_r>
 1009fe8:	1009883a 	mov	r4,r2
 1009fec:	10003126 	beq	r2,zero,100a0b4 <__smakebuf_r+0x168>
 1009ff0:	80c0030b 	ldhu	r3,12(r16)
 1009ff4:	00804074 	movhi	r2,257
 1009ff8:	10a4a104 	addi	r2,r2,-28028
 1009ffc:	88800f15 	stw	r2,60(r17)
 100a000:	18c02014 	ori	r3,r3,128
 100a004:	84800515 	stw	r18,20(r16)
 100a008:	80c0030d 	sth	r3,12(r16)
 100a00c:	81000415 	stw	r4,16(r16)
 100a010:	81000015 	stw	r4,0(r16)
 100a014:	dfc01217 	ldw	ra,72(sp)
 100a018:	dc801117 	ldw	r18,68(sp)
 100a01c:	dc401017 	ldw	r17,64(sp)
 100a020:	dc000f17 	ldw	r16,60(sp)
 100a024:	dec01304 	addi	sp,sp,76
 100a028:	f800283a 	ret
 100a02c:	80c0030b 	ldhu	r3,12(r16)
 100a030:	1880200c 	andi	r2,r3,128
 100a034:	10000426 	beq	r2,zero,100a048 <__smakebuf_r+0xfc>
 100a038:	04801004 	movi	r18,64
 100a03c:	18820014 	ori	r2,r3,2048
 100a040:	8080030d 	sth	r2,12(r16)
 100a044:	003fe506 	br	1009fdc <__smakebuf_r+0x90>
 100a048:	04810004 	movi	r18,1024
 100a04c:	003ffb06 	br	100a03c <__smakebuf_r+0xf0>
 100a050:	8140038f 	ldh	r5,14(r16)
 100a054:	8809883a 	mov	r4,r17
 100a058:	100c01c0 	call	100c01c <_isatty_r>
 100a05c:	103fde26 	beq	r2,zero,1009fd8 <__smakebuf_r+0x8c>
 100a060:	8080030b 	ldhu	r2,12(r16)
 100a064:	80c010c4 	addi	r3,r16,67
 100a068:	04810004 	movi	r18,1024
 100a06c:	10800054 	ori	r2,r2,1
 100a070:	8080030d 	sth	r2,12(r16)
 100a074:	00800044 	movi	r2,1
 100a078:	80c00415 	stw	r3,16(r16)
 100a07c:	80800515 	stw	r2,20(r16)
 100a080:	80c00015 	stw	r3,0(r16)
 100a084:	003fd506 	br	1009fdc <__smakebuf_r+0x90>
 100a088:	80c00a17 	ldw	r3,40(r16)
 100a08c:	00804074 	movhi	r2,257
 100a090:	10aeb504 	addi	r2,r2,-17708
 100a094:	18bfcb1e 	bne	r3,r2,1009fc4 <__smakebuf_r+0x78>
 100a098:	8080030b 	ldhu	r2,12(r16)
 100a09c:	00c10004 	movi	r3,1024
 100a0a0:	1825883a 	mov	r18,r3
 100a0a4:	10c4b03a 	or	r2,r2,r3
 100a0a8:	8080030d 	sth	r2,12(r16)
 100a0ac:	80c01315 	stw	r3,76(r16)
 100a0b0:	003fca06 	br	1009fdc <__smakebuf_r+0x90>
 100a0b4:	8100030b 	ldhu	r4,12(r16)
 100a0b8:	2080800c 	andi	r2,r4,512
 100a0bc:	103fb21e 	bne	r2,zero,1009f88 <__smakebuf_r+0x3c>
 100a0c0:	80c010c4 	addi	r3,r16,67
 100a0c4:	21000094 	ori	r4,r4,2
 100a0c8:	00800044 	movi	r2,1
 100a0cc:	80800515 	stw	r2,20(r16)
 100a0d0:	8100030d 	sth	r4,12(r16)
 100a0d4:	80c00415 	stw	r3,16(r16)
 100a0d8:	80c00015 	stw	r3,0(r16)
 100a0dc:	003faa06 	br	1009f88 <__smakebuf_r+0x3c>

0100a0e0 <memchr>:
 100a0e0:	008000c4 	movi	r2,3
 100a0e4:	29403fcc 	andi	r5,r5,255
 100a0e8:	2007883a 	mov	r3,r4
 100a0ec:	1180022e 	bgeu	r2,r6,100a0f8 <memchr+0x18>
 100a0f0:	2084703a 	and	r2,r4,r2
 100a0f4:	10000b26 	beq	r2,zero,100a124 <memchr+0x44>
 100a0f8:	313fffc4 	addi	r4,r6,-1
 100a0fc:	3000051e 	bne	r6,zero,100a114 <memchr+0x34>
 100a100:	00002c06 	br	100a1b4 <memchr+0xd4>
 100a104:	213fffc4 	addi	r4,r4,-1
 100a108:	00bfffc4 	movi	r2,-1
 100a10c:	18c00044 	addi	r3,r3,1
 100a110:	20802826 	beq	r4,r2,100a1b4 <memchr+0xd4>
 100a114:	18800003 	ldbu	r2,0(r3)
 100a118:	28bffa1e 	bne	r5,r2,100a104 <memchr+0x24>
 100a11c:	1805883a 	mov	r2,r3
 100a120:	f800283a 	ret
 100a124:	0011883a 	mov	r8,zero
 100a128:	0007883a 	mov	r3,zero
 100a12c:	01c00104 	movi	r7,4
 100a130:	4004923a 	slli	r2,r8,8
 100a134:	18c00044 	addi	r3,r3,1
 100a138:	1151883a 	add	r8,r2,r5
 100a13c:	19fffc1e 	bne	r3,r7,100a130 <memchr+0x50>
 100a140:	02bfbff4 	movhi	r10,65279
 100a144:	52bfbfc4 	addi	r10,r10,-257
 100a148:	02602074 	movhi	r9,32897
 100a14c:	4a602004 	addi	r9,r9,-32640
 100a150:	02c000c4 	movi	r11,3
 100a154:	20800017 	ldw	r2,0(r4)
 100a158:	31bfff04 	addi	r6,r6,-4
 100a15c:	200f883a 	mov	r7,r4
 100a160:	1204f03a 	xor	r2,r2,r8
 100a164:	1287883a 	add	r3,r2,r10
 100a168:	1a46703a 	and	r3,r3,r9
 100a16c:	0084303a 	nor	r2,zero,r2
 100a170:	10c4703a 	and	r2,r2,r3
 100a174:	10000b26 	beq	r2,zero,100a1a4 <memchr+0xc4>
 100a178:	20800003 	ldbu	r2,0(r4)
 100a17c:	28800f26 	beq	r5,r2,100a1bc <memchr+0xdc>
 100a180:	20800043 	ldbu	r2,1(r4)
 100a184:	21c00044 	addi	r7,r4,1
 100a188:	28800c26 	beq	r5,r2,100a1bc <memchr+0xdc>
 100a18c:	20800083 	ldbu	r2,2(r4)
 100a190:	21c00084 	addi	r7,r4,2
 100a194:	28800926 	beq	r5,r2,100a1bc <memchr+0xdc>
 100a198:	208000c3 	ldbu	r2,3(r4)
 100a19c:	21c000c4 	addi	r7,r4,3
 100a1a0:	28800626 	beq	r5,r2,100a1bc <memchr+0xdc>
 100a1a4:	21000104 	addi	r4,r4,4
 100a1a8:	59bfea36 	bltu	r11,r6,100a154 <memchr+0x74>
 100a1ac:	2007883a 	mov	r3,r4
 100a1b0:	003fd106 	br	100a0f8 <memchr+0x18>
 100a1b4:	0005883a 	mov	r2,zero
 100a1b8:	f800283a 	ret
 100a1bc:	3805883a 	mov	r2,r7
 100a1c0:	f800283a 	ret

0100a1c4 <memcpy>:
 100a1c4:	01c003c4 	movi	r7,15
 100a1c8:	2007883a 	mov	r3,r4
 100a1cc:	3980032e 	bgeu	r7,r6,100a1dc <memcpy+0x18>
 100a1d0:	2904b03a 	or	r2,r5,r4
 100a1d4:	108000cc 	andi	r2,r2,3
 100a1d8:	10000926 	beq	r2,zero,100a200 <memcpy+0x3c>
 100a1dc:	30000626 	beq	r6,zero,100a1f8 <memcpy+0x34>
 100a1e0:	30cd883a 	add	r6,r6,r3
 100a1e4:	28800003 	ldbu	r2,0(r5)
 100a1e8:	29400044 	addi	r5,r5,1
 100a1ec:	18800005 	stb	r2,0(r3)
 100a1f0:	18c00044 	addi	r3,r3,1
 100a1f4:	30fffb1e 	bne	r6,r3,100a1e4 <memcpy+0x20>
 100a1f8:	2005883a 	mov	r2,r4
 100a1fc:	f800283a 	ret
 100a200:	3811883a 	mov	r8,r7
 100a204:	200f883a 	mov	r7,r4
 100a208:	28c00017 	ldw	r3,0(r5)
 100a20c:	31bffc04 	addi	r6,r6,-16
 100a210:	38c00015 	stw	r3,0(r7)
 100a214:	28800117 	ldw	r2,4(r5)
 100a218:	38800115 	stw	r2,4(r7)
 100a21c:	28c00217 	ldw	r3,8(r5)
 100a220:	38c00215 	stw	r3,8(r7)
 100a224:	28800317 	ldw	r2,12(r5)
 100a228:	29400404 	addi	r5,r5,16
 100a22c:	38800315 	stw	r2,12(r7)
 100a230:	39c00404 	addi	r7,r7,16
 100a234:	41bff436 	bltu	r8,r6,100a208 <memcpy+0x44>
 100a238:	008000c4 	movi	r2,3
 100a23c:	1180072e 	bgeu	r2,r6,100a25c <memcpy+0x98>
 100a240:	1007883a 	mov	r3,r2
 100a244:	28800017 	ldw	r2,0(r5)
 100a248:	31bfff04 	addi	r6,r6,-4
 100a24c:	29400104 	addi	r5,r5,4
 100a250:	38800015 	stw	r2,0(r7)
 100a254:	39c00104 	addi	r7,r7,4
 100a258:	19bffa36 	bltu	r3,r6,100a244 <memcpy+0x80>
 100a25c:	3807883a 	mov	r3,r7
 100a260:	003fde06 	br	100a1dc <memcpy+0x18>

0100a264 <memmove>:
 100a264:	2807883a 	mov	r3,r5
 100a268:	2011883a 	mov	r8,r4
 100a26c:	29000c2e 	bgeu	r5,r4,100a2a0 <memmove+0x3c>
 100a270:	298f883a 	add	r7,r5,r6
 100a274:	21c00a2e 	bgeu	r4,r7,100a2a0 <memmove+0x3c>
 100a278:	30000726 	beq	r6,zero,100a298 <memmove+0x34>
 100a27c:	2187883a 	add	r3,r4,r6
 100a280:	198dc83a 	sub	r6,r3,r6
 100a284:	39ffffc4 	addi	r7,r7,-1
 100a288:	38800003 	ldbu	r2,0(r7)
 100a28c:	18ffffc4 	addi	r3,r3,-1
 100a290:	18800005 	stb	r2,0(r3)
 100a294:	19bffb1e 	bne	r3,r6,100a284 <memmove+0x20>
 100a298:	2005883a 	mov	r2,r4
 100a29c:	f800283a 	ret
 100a2a0:	01c003c4 	movi	r7,15
 100a2a4:	39800a36 	bltu	r7,r6,100a2d0 <memmove+0x6c>
 100a2a8:	303ffb26 	beq	r6,zero,100a298 <memmove+0x34>
 100a2ac:	400f883a 	mov	r7,r8
 100a2b0:	320d883a 	add	r6,r6,r8
 100a2b4:	28800003 	ldbu	r2,0(r5)
 100a2b8:	29400044 	addi	r5,r5,1
 100a2bc:	38800005 	stb	r2,0(r7)
 100a2c0:	39c00044 	addi	r7,r7,1
 100a2c4:	39bffb1e 	bne	r7,r6,100a2b4 <memmove+0x50>
 100a2c8:	2005883a 	mov	r2,r4
 100a2cc:	f800283a 	ret
 100a2d0:	1904b03a 	or	r2,r3,r4
 100a2d4:	108000cc 	andi	r2,r2,3
 100a2d8:	103ff31e 	bne	r2,zero,100a2a8 <memmove+0x44>
 100a2dc:	3811883a 	mov	r8,r7
 100a2e0:	180b883a 	mov	r5,r3
 100a2e4:	200f883a 	mov	r7,r4
 100a2e8:	28c00017 	ldw	r3,0(r5)
 100a2ec:	31bffc04 	addi	r6,r6,-16
 100a2f0:	38c00015 	stw	r3,0(r7)
 100a2f4:	28800117 	ldw	r2,4(r5)
 100a2f8:	38800115 	stw	r2,4(r7)
 100a2fc:	28c00217 	ldw	r3,8(r5)
 100a300:	38c00215 	stw	r3,8(r7)
 100a304:	28800317 	ldw	r2,12(r5)
 100a308:	29400404 	addi	r5,r5,16
 100a30c:	38800315 	stw	r2,12(r7)
 100a310:	39c00404 	addi	r7,r7,16
 100a314:	41bff436 	bltu	r8,r6,100a2e8 <memmove+0x84>
 100a318:	008000c4 	movi	r2,3
 100a31c:	1180072e 	bgeu	r2,r6,100a33c <memmove+0xd8>
 100a320:	1007883a 	mov	r3,r2
 100a324:	28800017 	ldw	r2,0(r5)
 100a328:	31bfff04 	addi	r6,r6,-4
 100a32c:	29400104 	addi	r5,r5,4
 100a330:	38800015 	stw	r2,0(r7)
 100a334:	39c00104 	addi	r7,r7,4
 100a338:	19bffa36 	bltu	r3,r6,100a324 <memmove+0xc0>
 100a33c:	3811883a 	mov	r8,r7
 100a340:	003fd906 	br	100a2a8 <memmove+0x44>

0100a344 <memset>:
 100a344:	008000c4 	movi	r2,3
 100a348:	29403fcc 	andi	r5,r5,255
 100a34c:	2007883a 	mov	r3,r4
 100a350:	1180022e 	bgeu	r2,r6,100a35c <memset+0x18>
 100a354:	2084703a 	and	r2,r4,r2
 100a358:	10000826 	beq	r2,zero,100a37c <memset+0x38>
 100a35c:	30000526 	beq	r6,zero,100a374 <memset+0x30>
 100a360:	2805883a 	mov	r2,r5
 100a364:	30cd883a 	add	r6,r6,r3
 100a368:	18800005 	stb	r2,0(r3)
 100a36c:	18c00044 	addi	r3,r3,1
 100a370:	19bffd1e 	bne	r3,r6,100a368 <memset+0x24>
 100a374:	2005883a 	mov	r2,r4
 100a378:	f800283a 	ret
 100a37c:	2804923a 	slli	r2,r5,8
 100a380:	020003c4 	movi	r8,15
 100a384:	200f883a 	mov	r7,r4
 100a388:	2884b03a 	or	r2,r5,r2
 100a38c:	1006943a 	slli	r3,r2,16
 100a390:	10c6b03a 	or	r3,r2,r3
 100a394:	41800a2e 	bgeu	r8,r6,100a3c0 <memset+0x7c>
 100a398:	4005883a 	mov	r2,r8
 100a39c:	31bffc04 	addi	r6,r6,-16
 100a3a0:	38c00015 	stw	r3,0(r7)
 100a3a4:	38c00115 	stw	r3,4(r7)
 100a3a8:	38c00215 	stw	r3,8(r7)
 100a3ac:	38c00315 	stw	r3,12(r7)
 100a3b0:	39c00404 	addi	r7,r7,16
 100a3b4:	11bff936 	bltu	r2,r6,100a39c <memset+0x58>
 100a3b8:	008000c4 	movi	r2,3
 100a3bc:	1180052e 	bgeu	r2,r6,100a3d4 <memset+0x90>
 100a3c0:	31bfff04 	addi	r6,r6,-4
 100a3c4:	008000c4 	movi	r2,3
 100a3c8:	38c00015 	stw	r3,0(r7)
 100a3cc:	39c00104 	addi	r7,r7,4
 100a3d0:	11bffb36 	bltu	r2,r6,100a3c0 <memset+0x7c>
 100a3d4:	3807883a 	mov	r3,r7
 100a3d8:	003fe006 	br	100a35c <memset+0x18>

0100a3dc <_Bfree>:
 100a3dc:	28000826 	beq	r5,zero,100a400 <_Bfree+0x24>
 100a3e0:	28800117 	ldw	r2,4(r5)
 100a3e4:	21001317 	ldw	r4,76(r4)
 100a3e8:	1085883a 	add	r2,r2,r2
 100a3ec:	1085883a 	add	r2,r2,r2
 100a3f0:	1105883a 	add	r2,r2,r4
 100a3f4:	10c00017 	ldw	r3,0(r2)
 100a3f8:	28c00015 	stw	r3,0(r5)
 100a3fc:	11400015 	stw	r5,0(r2)
 100a400:	f800283a 	ret

0100a404 <__hi0bits>:
 100a404:	20bfffec 	andhi	r2,r4,65535
 100a408:	10001426 	beq	r2,zero,100a45c <__hi0bits+0x58>
 100a40c:	0007883a 	mov	r3,zero
 100a410:	20bfc02c 	andhi	r2,r4,65280
 100a414:	1000021e 	bne	r2,zero,100a420 <__hi0bits+0x1c>
 100a418:	2008923a 	slli	r4,r4,8
 100a41c:	18c00204 	addi	r3,r3,8
 100a420:	20bc002c 	andhi	r2,r4,61440
 100a424:	1000021e 	bne	r2,zero,100a430 <__hi0bits+0x2c>
 100a428:	2008913a 	slli	r4,r4,4
 100a42c:	18c00104 	addi	r3,r3,4
 100a430:	20b0002c 	andhi	r2,r4,49152
 100a434:	1000031e 	bne	r2,zero,100a444 <__hi0bits+0x40>
 100a438:	2105883a 	add	r2,r4,r4
 100a43c:	18c00084 	addi	r3,r3,2
 100a440:	1089883a 	add	r4,r2,r2
 100a444:	20000316 	blt	r4,zero,100a454 <__hi0bits+0x50>
 100a448:	2090002c 	andhi	r2,r4,16384
 100a44c:	10000626 	beq	r2,zero,100a468 <__hi0bits+0x64>
 100a450:	18c00044 	addi	r3,r3,1
 100a454:	1805883a 	mov	r2,r3
 100a458:	f800283a 	ret
 100a45c:	2008943a 	slli	r4,r4,16
 100a460:	00c00404 	movi	r3,16
 100a464:	003fea06 	br	100a410 <__hi0bits+0xc>
 100a468:	00c00804 	movi	r3,32
 100a46c:	1805883a 	mov	r2,r3
 100a470:	f800283a 	ret

0100a474 <__lo0bits>:
 100a474:	20c00017 	ldw	r3,0(r4)
 100a478:	188001cc 	andi	r2,r3,7
 100a47c:	10000a26 	beq	r2,zero,100a4a8 <__lo0bits+0x34>
 100a480:	1880004c 	andi	r2,r3,1
 100a484:	1005003a 	cmpeq	r2,r2,zero
 100a488:	10002126 	beq	r2,zero,100a510 <__lo0bits+0x9c>
 100a48c:	1880008c 	andi	r2,r3,2
 100a490:	1000251e 	bne	r2,zero,100a528 <__lo0bits+0xb4>
 100a494:	1804d0ba 	srli	r2,r3,2
 100a498:	01400084 	movi	r5,2
 100a49c:	20800015 	stw	r2,0(r4)
 100a4a0:	2805883a 	mov	r2,r5
 100a4a4:	f800283a 	ret
 100a4a8:	18bfffcc 	andi	r2,r3,65535
 100a4ac:	10001526 	beq	r2,zero,100a504 <__lo0bits+0x90>
 100a4b0:	000b883a 	mov	r5,zero
 100a4b4:	18803fcc 	andi	r2,r3,255
 100a4b8:	1000021e 	bne	r2,zero,100a4c4 <__lo0bits+0x50>
 100a4bc:	1806d23a 	srli	r3,r3,8
 100a4c0:	29400204 	addi	r5,r5,8
 100a4c4:	188003cc 	andi	r2,r3,15
 100a4c8:	1000021e 	bne	r2,zero,100a4d4 <__lo0bits+0x60>
 100a4cc:	1806d13a 	srli	r3,r3,4
 100a4d0:	29400104 	addi	r5,r5,4
 100a4d4:	188000cc 	andi	r2,r3,3
 100a4d8:	1000021e 	bne	r2,zero,100a4e4 <__lo0bits+0x70>
 100a4dc:	1806d0ba 	srli	r3,r3,2
 100a4e0:	29400084 	addi	r5,r5,2
 100a4e4:	1880004c 	andi	r2,r3,1
 100a4e8:	1000031e 	bne	r2,zero,100a4f8 <__lo0bits+0x84>
 100a4ec:	1806d07a 	srli	r3,r3,1
 100a4f0:	18000a26 	beq	r3,zero,100a51c <__lo0bits+0xa8>
 100a4f4:	29400044 	addi	r5,r5,1
 100a4f8:	2805883a 	mov	r2,r5
 100a4fc:	20c00015 	stw	r3,0(r4)
 100a500:	f800283a 	ret
 100a504:	1806d43a 	srli	r3,r3,16
 100a508:	01400404 	movi	r5,16
 100a50c:	003fe906 	br	100a4b4 <__lo0bits+0x40>
 100a510:	000b883a 	mov	r5,zero
 100a514:	2805883a 	mov	r2,r5
 100a518:	f800283a 	ret
 100a51c:	01400804 	movi	r5,32
 100a520:	2805883a 	mov	r2,r5
 100a524:	f800283a 	ret
 100a528:	1804d07a 	srli	r2,r3,1
 100a52c:	01400044 	movi	r5,1
 100a530:	20800015 	stw	r2,0(r4)
 100a534:	003fda06 	br	100a4a0 <__lo0bits+0x2c>

0100a538 <__mcmp>:
 100a538:	20800417 	ldw	r2,16(r4)
 100a53c:	28c00417 	ldw	r3,16(r5)
 100a540:	10cfc83a 	sub	r7,r2,r3
 100a544:	38000c1e 	bne	r7,zero,100a578 <__mcmp+0x40>
 100a548:	18c5883a 	add	r2,r3,r3
 100a54c:	1085883a 	add	r2,r2,r2
 100a550:	10c00504 	addi	r3,r2,20
 100a554:	21000504 	addi	r4,r4,20
 100a558:	28cb883a 	add	r5,r5,r3
 100a55c:	2085883a 	add	r2,r4,r2
 100a560:	10bfff04 	addi	r2,r2,-4
 100a564:	297fff04 	addi	r5,r5,-4
 100a568:	11800017 	ldw	r6,0(r2)
 100a56c:	28c00017 	ldw	r3,0(r5)
 100a570:	30c0031e 	bne	r6,r3,100a580 <__mcmp+0x48>
 100a574:	20bffa36 	bltu	r4,r2,100a560 <__mcmp+0x28>
 100a578:	3805883a 	mov	r2,r7
 100a57c:	f800283a 	ret
 100a580:	30c00336 	bltu	r6,r3,100a590 <__mcmp+0x58>
 100a584:	01c00044 	movi	r7,1
 100a588:	3805883a 	mov	r2,r7
 100a58c:	f800283a 	ret
 100a590:	01ffffc4 	movi	r7,-1
 100a594:	003ff806 	br	100a578 <__mcmp+0x40>

0100a598 <__ulp>:
 100a598:	295ffc2c 	andhi	r5,r5,32752
 100a59c:	013f3034 	movhi	r4,64704
 100a5a0:	290b883a 	add	r5,r5,r4
 100a5a4:	0145c83a 	sub	r2,zero,r5
 100a5a8:	1007d53a 	srai	r3,r2,20
 100a5ac:	000d883a 	mov	r6,zero
 100a5b0:	0140040e 	bge	zero,r5,100a5c4 <__ulp+0x2c>
 100a5b4:	280f883a 	mov	r7,r5
 100a5b8:	3807883a 	mov	r3,r7
 100a5bc:	3005883a 	mov	r2,r6
 100a5c0:	f800283a 	ret
 100a5c4:	008004c4 	movi	r2,19
 100a5c8:	193ffb04 	addi	r4,r3,-20
 100a5cc:	10c00c0e 	bge	r2,r3,100a600 <__ulp+0x68>
 100a5d0:	008007c4 	movi	r2,31
 100a5d4:	1107c83a 	sub	r3,r2,r4
 100a5d8:	00800784 	movi	r2,30
 100a5dc:	01400044 	movi	r5,1
 100a5e0:	11000216 	blt	r2,r4,100a5ec <__ulp+0x54>
 100a5e4:	00800044 	movi	r2,1
 100a5e8:	10ca983a 	sll	r5,r2,r3
 100a5ec:	000f883a 	mov	r7,zero
 100a5f0:	280d883a 	mov	r6,r5
 100a5f4:	3807883a 	mov	r3,r7
 100a5f8:	3005883a 	mov	r2,r6
 100a5fc:	f800283a 	ret
 100a600:	00800234 	movhi	r2,8
 100a604:	10cfd83a 	sra	r7,r2,r3
 100a608:	000d883a 	mov	r6,zero
 100a60c:	3005883a 	mov	r2,r6
 100a610:	3807883a 	mov	r3,r7
 100a614:	f800283a 	ret

0100a618 <__b2d>:
 100a618:	20800417 	ldw	r2,16(r4)
 100a61c:	defff904 	addi	sp,sp,-28
 100a620:	dd000415 	stw	r20,16(sp)
 100a624:	1085883a 	add	r2,r2,r2
 100a628:	25000504 	addi	r20,r4,20
 100a62c:	1085883a 	add	r2,r2,r2
 100a630:	dc000015 	stw	r16,0(sp)
 100a634:	a0a1883a 	add	r16,r20,r2
 100a638:	dd400515 	stw	r21,20(sp)
 100a63c:	857fff17 	ldw	r21,-4(r16)
 100a640:	dc400115 	stw	r17,4(sp)
 100a644:	dfc00615 	stw	ra,24(sp)
 100a648:	a809883a 	mov	r4,r21
 100a64c:	2823883a 	mov	r17,r5
 100a650:	dcc00315 	stw	r19,12(sp)
 100a654:	dc800215 	stw	r18,8(sp)
 100a658:	100a4040 	call	100a404 <__hi0bits>
 100a65c:	100b883a 	mov	r5,r2
 100a660:	00800804 	movi	r2,32
 100a664:	1145c83a 	sub	r2,r2,r5
 100a668:	88800015 	stw	r2,0(r17)
 100a66c:	00800284 	movi	r2,10
 100a670:	80ffff04 	addi	r3,r16,-4
 100a674:	11401416 	blt	r2,r5,100a6c8 <__b2d+0xb0>
 100a678:	008002c4 	movi	r2,11
 100a67c:	1149c83a 	sub	r4,r2,r5
 100a680:	a0c02736 	bltu	r20,r3,100a720 <__b2d+0x108>
 100a684:	000d883a 	mov	r6,zero
 100a688:	28800544 	addi	r2,r5,21
 100a68c:	a906d83a 	srl	r3,r21,r4
 100a690:	a884983a 	sll	r2,r21,r2
 100a694:	1ccffc34 	orhi	r19,r3,16368
 100a698:	11a4b03a 	or	r18,r2,r6
 100a69c:	9005883a 	mov	r2,r18
 100a6a0:	9807883a 	mov	r3,r19
 100a6a4:	dfc00617 	ldw	ra,24(sp)
 100a6a8:	dd400517 	ldw	r21,20(sp)
 100a6ac:	dd000417 	ldw	r20,16(sp)
 100a6b0:	dcc00317 	ldw	r19,12(sp)
 100a6b4:	dc800217 	ldw	r18,8(sp)
 100a6b8:	dc400117 	ldw	r17,4(sp)
 100a6bc:	dc000017 	ldw	r16,0(sp)
 100a6c0:	dec00704 	addi	sp,sp,28
 100a6c4:	f800283a 	ret
 100a6c8:	a0c00e36 	bltu	r20,r3,100a704 <__b2d+0xec>
 100a6cc:	293ffd44 	addi	r4,r5,-11
 100a6d0:	000d883a 	mov	r6,zero
 100a6d4:	20000f26 	beq	r4,zero,100a714 <__b2d+0xfc>
 100a6d8:	00800804 	movi	r2,32
 100a6dc:	110bc83a 	sub	r5,r2,r4
 100a6e0:	a0c01236 	bltu	r20,r3,100a72c <__b2d+0x114>
 100a6e4:	000f883a 	mov	r7,zero
 100a6e8:	a904983a 	sll	r2,r21,r4
 100a6ec:	3146d83a 	srl	r3,r6,r5
 100a6f0:	3108983a 	sll	r4,r6,r4
 100a6f4:	108ffc34 	orhi	r2,r2,16368
 100a6f8:	18a6b03a 	or	r19,r3,r2
 100a6fc:	3924b03a 	or	r18,r7,r4
 100a700:	003fe606 	br	100a69c <__b2d+0x84>
 100a704:	293ffd44 	addi	r4,r5,-11
 100a708:	81bffe17 	ldw	r6,-8(r16)
 100a70c:	80fffe04 	addi	r3,r16,-8
 100a710:	203ff11e 	bne	r4,zero,100a6d8 <__b2d+0xc0>
 100a714:	accffc34 	orhi	r19,r21,16368
 100a718:	3025883a 	mov	r18,r6
 100a71c:	003fdf06 	br	100a69c <__b2d+0x84>
 100a720:	18bfff17 	ldw	r2,-4(r3)
 100a724:	110cd83a 	srl	r6,r2,r4
 100a728:	003fd706 	br	100a688 <__b2d+0x70>
 100a72c:	18bfff17 	ldw	r2,-4(r3)
 100a730:	114ed83a 	srl	r7,r2,r5
 100a734:	003fec06 	br	100a6e8 <__b2d+0xd0>

0100a738 <__ratio>:
 100a738:	defff904 	addi	sp,sp,-28
 100a73c:	dc400215 	stw	r17,8(sp)
 100a740:	2823883a 	mov	r17,r5
 100a744:	d80b883a 	mov	r5,sp
 100a748:	dfc00615 	stw	ra,24(sp)
 100a74c:	dd000515 	stw	r20,20(sp)
 100a750:	dcc00415 	stw	r19,16(sp)
 100a754:	dc800315 	stw	r18,12(sp)
 100a758:	2025883a 	mov	r18,r4
 100a75c:	100a6180 	call	100a618 <__b2d>
 100a760:	8809883a 	mov	r4,r17
 100a764:	d9400104 	addi	r5,sp,4
 100a768:	1027883a 	mov	r19,r2
 100a76c:	1829883a 	mov	r20,r3
 100a770:	100a6180 	call	100a618 <__b2d>
 100a774:	89000417 	ldw	r4,16(r17)
 100a778:	91c00417 	ldw	r7,16(r18)
 100a77c:	d9800117 	ldw	r6,4(sp)
 100a780:	180b883a 	mov	r5,r3
 100a784:	390fc83a 	sub	r7,r7,r4
 100a788:	1009883a 	mov	r4,r2
 100a78c:	d8800017 	ldw	r2,0(sp)
 100a790:	380e917a 	slli	r7,r7,5
 100a794:	2011883a 	mov	r8,r4
 100a798:	1185c83a 	sub	r2,r2,r6
 100a79c:	11c5883a 	add	r2,r2,r7
 100a7a0:	1006953a 	slli	r3,r2,20
 100a7a4:	2813883a 	mov	r9,r5
 100a7a8:	00800d0e 	bge	zero,r2,100a7e0 <__ratio+0xa8>
 100a7ac:	1d29883a 	add	r20,r3,r20
 100a7b0:	a00b883a 	mov	r5,r20
 100a7b4:	480f883a 	mov	r7,r9
 100a7b8:	9809883a 	mov	r4,r19
 100a7bc:	400d883a 	mov	r6,r8
 100a7c0:	100ce480 	call	100ce48 <__divdf3>
 100a7c4:	dfc00617 	ldw	ra,24(sp)
 100a7c8:	dd000517 	ldw	r20,20(sp)
 100a7cc:	dcc00417 	ldw	r19,16(sp)
 100a7d0:	dc800317 	ldw	r18,12(sp)
 100a7d4:	dc400217 	ldw	r17,8(sp)
 100a7d8:	dec00704 	addi	sp,sp,28
 100a7dc:	f800283a 	ret
 100a7e0:	28d3c83a 	sub	r9,r5,r3
 100a7e4:	003ff206 	br	100a7b0 <__ratio+0x78>

0100a7e8 <_mprec_log10>:
 100a7e8:	defffe04 	addi	sp,sp,-8
 100a7ec:	008005c4 	movi	r2,23
 100a7f0:	dc000015 	stw	r16,0(sp)
 100a7f4:	dfc00115 	stw	ra,4(sp)
 100a7f8:	2021883a 	mov	r16,r4
 100a7fc:	11000c16 	blt	r2,r4,100a830 <_mprec_log10+0x48>
 100a800:	200490fa 	slli	r2,r4,3
 100a804:	00c04074 	movhi	r3,257
 100a808:	18c81a04 	addi	r3,r3,8296
 100a80c:	10c5883a 	add	r2,r2,r3
 100a810:	12400117 	ldw	r9,4(r2)
 100a814:	12000017 	ldw	r8,0(r2)
 100a818:	4807883a 	mov	r3,r9
 100a81c:	4005883a 	mov	r2,r8
 100a820:	dfc00117 	ldw	ra,4(sp)
 100a824:	dc000017 	ldw	r16,0(sp)
 100a828:	dec00204 	addi	sp,sp,8
 100a82c:	f800283a 	ret
 100a830:	0011883a 	mov	r8,zero
 100a834:	024ffc34 	movhi	r9,16368
 100a838:	0005883a 	mov	r2,zero
 100a83c:	00d00934 	movhi	r3,16420
 100a840:	480b883a 	mov	r5,r9
 100a844:	4009883a 	mov	r4,r8
 100a848:	180f883a 	mov	r7,r3
 100a84c:	100d883a 	mov	r6,r2
 100a850:	1003aac0 	call	1003aac <__muldf3>
 100a854:	843fffc4 	addi	r16,r16,-1
 100a858:	1011883a 	mov	r8,r2
 100a85c:	1813883a 	mov	r9,r3
 100a860:	803ff51e 	bne	r16,zero,100a838 <_mprec_log10+0x50>
 100a864:	4005883a 	mov	r2,r8
 100a868:	4807883a 	mov	r3,r9
 100a86c:	dfc00117 	ldw	ra,4(sp)
 100a870:	dc000017 	ldw	r16,0(sp)
 100a874:	dec00204 	addi	sp,sp,8
 100a878:	f800283a 	ret

0100a87c <__copybits>:
 100a87c:	297fffc4 	addi	r5,r5,-1
 100a880:	30800417 	ldw	r2,16(r6)
 100a884:	280bd17a 	srai	r5,r5,5
 100a888:	31800504 	addi	r6,r6,20
 100a88c:	1085883a 	add	r2,r2,r2
 100a890:	294b883a 	add	r5,r5,r5
 100a894:	294b883a 	add	r5,r5,r5
 100a898:	1085883a 	add	r2,r2,r2
 100a89c:	290b883a 	add	r5,r5,r4
 100a8a0:	3087883a 	add	r3,r6,r2
 100a8a4:	29400104 	addi	r5,r5,4
 100a8a8:	30c0052e 	bgeu	r6,r3,100a8c0 <__copybits+0x44>
 100a8ac:	30800017 	ldw	r2,0(r6)
 100a8b0:	31800104 	addi	r6,r6,4
 100a8b4:	20800015 	stw	r2,0(r4)
 100a8b8:	21000104 	addi	r4,r4,4
 100a8bc:	30fffb36 	bltu	r6,r3,100a8ac <__copybits+0x30>
 100a8c0:	2140032e 	bgeu	r4,r5,100a8d0 <__copybits+0x54>
 100a8c4:	20000015 	stw	zero,0(r4)
 100a8c8:	21000104 	addi	r4,r4,4
 100a8cc:	217ffd36 	bltu	r4,r5,100a8c4 <__copybits+0x48>
 100a8d0:	f800283a 	ret

0100a8d4 <__any_on>:
 100a8d4:	20800417 	ldw	r2,16(r4)
 100a8d8:	2807d17a 	srai	r3,r5,5
 100a8dc:	21000504 	addi	r4,r4,20
 100a8e0:	10c00d0e 	bge	r2,r3,100a918 <__any_on+0x44>
 100a8e4:	1085883a 	add	r2,r2,r2
 100a8e8:	1085883a 	add	r2,r2,r2
 100a8ec:	208d883a 	add	r6,r4,r2
 100a8f0:	2180182e 	bgeu	r4,r6,100a954 <__any_on+0x80>
 100a8f4:	30bfff17 	ldw	r2,-4(r6)
 100a8f8:	30ffff04 	addi	r3,r6,-4
 100a8fc:	1000041e 	bne	r2,zero,100a910 <__any_on+0x3c>
 100a900:	20c0142e 	bgeu	r4,r3,100a954 <__any_on+0x80>
 100a904:	18ffff04 	addi	r3,r3,-4
 100a908:	18800017 	ldw	r2,0(r3)
 100a90c:	103ffc26 	beq	r2,zero,100a900 <__any_on+0x2c>
 100a910:	00800044 	movi	r2,1
 100a914:	f800283a 	ret
 100a918:	18800a0e 	bge	r3,r2,100a944 <__any_on+0x70>
 100a91c:	294007cc 	andi	r5,r5,31
 100a920:	28000826 	beq	r5,zero,100a944 <__any_on+0x70>
 100a924:	18c5883a 	add	r2,r3,r3
 100a928:	1085883a 	add	r2,r2,r2
 100a92c:	208d883a 	add	r6,r4,r2
 100a930:	30c00017 	ldw	r3,0(r6)
 100a934:	1944d83a 	srl	r2,r3,r5
 100a938:	1144983a 	sll	r2,r2,r5
 100a93c:	18bff41e 	bne	r3,r2,100a910 <__any_on+0x3c>
 100a940:	003feb06 	br	100a8f0 <__any_on+0x1c>
 100a944:	18c5883a 	add	r2,r3,r3
 100a948:	1085883a 	add	r2,r2,r2
 100a94c:	208d883a 	add	r6,r4,r2
 100a950:	003fe706 	br	100a8f0 <__any_on+0x1c>
 100a954:	0005883a 	mov	r2,zero
 100a958:	f800283a 	ret

0100a95c <_Balloc>:
 100a95c:	20c01317 	ldw	r3,76(r4)
 100a960:	defffb04 	addi	sp,sp,-20
 100a964:	dcc00315 	stw	r19,12(sp)
 100a968:	dc800215 	stw	r18,8(sp)
 100a96c:	dfc00415 	stw	ra,16(sp)
 100a970:	2825883a 	mov	r18,r5
 100a974:	dc400115 	stw	r17,4(sp)
 100a978:	dc000015 	stw	r16,0(sp)
 100a97c:	2027883a 	mov	r19,r4
 100a980:	01800404 	movi	r6,16
 100a984:	01400104 	movi	r5,4
 100a988:	18001726 	beq	r3,zero,100a9e8 <_Balloc+0x8c>
 100a98c:	01400044 	movi	r5,1
 100a990:	9485883a 	add	r2,r18,r18
 100a994:	2ca2983a 	sll	r17,r5,r18
 100a998:	1085883a 	add	r2,r2,r2
 100a99c:	10c7883a 	add	r3,r2,r3
 100a9a0:	1c000017 	ldw	r16,0(r3)
 100a9a4:	8c4d883a 	add	r6,r17,r17
 100a9a8:	318d883a 	add	r6,r6,r6
 100a9ac:	9809883a 	mov	r4,r19
 100a9b0:	31800504 	addi	r6,r6,20
 100a9b4:	80001226 	beq	r16,zero,100aa00 <_Balloc+0xa4>
 100a9b8:	80800017 	ldw	r2,0(r16)
 100a9bc:	18800015 	stw	r2,0(r3)
 100a9c0:	80000415 	stw	zero,16(r16)
 100a9c4:	80000315 	stw	zero,12(r16)
 100a9c8:	8005883a 	mov	r2,r16
 100a9cc:	dfc00417 	ldw	ra,16(sp)
 100a9d0:	dcc00317 	ldw	r19,12(sp)
 100a9d4:	dc800217 	ldw	r18,8(sp)
 100a9d8:	dc400117 	ldw	r17,4(sp)
 100a9dc:	dc000017 	ldw	r16,0(sp)
 100a9e0:	dec00504 	addi	sp,sp,20
 100a9e4:	f800283a 	ret
 100a9e8:	100bd4c0 	call	100bd4c <_calloc_r>
 100a9ec:	1007883a 	mov	r3,r2
 100a9f0:	0021883a 	mov	r16,zero
 100a9f4:	98801315 	stw	r2,76(r19)
 100a9f8:	103fe41e 	bne	r2,zero,100a98c <_Balloc+0x30>
 100a9fc:	003ff206 	br	100a9c8 <_Balloc+0x6c>
 100aa00:	100bd4c0 	call	100bd4c <_calloc_r>
 100aa04:	103ff026 	beq	r2,zero,100a9c8 <_Balloc+0x6c>
 100aa08:	1021883a 	mov	r16,r2
 100aa0c:	14800115 	stw	r18,4(r2)
 100aa10:	14400215 	stw	r17,8(r2)
 100aa14:	003fea06 	br	100a9c0 <_Balloc+0x64>

0100aa18 <__d2b>:
 100aa18:	defff504 	addi	sp,sp,-44
 100aa1c:	dcc00515 	stw	r19,20(sp)
 100aa20:	04c00044 	movi	r19,1
 100aa24:	dc000215 	stw	r16,8(sp)
 100aa28:	2821883a 	mov	r16,r5
 100aa2c:	980b883a 	mov	r5,r19
 100aa30:	ddc00915 	stw	r23,36(sp)
 100aa34:	dd800815 	stw	r22,32(sp)
 100aa38:	dd400715 	stw	r21,28(sp)
 100aa3c:	dd000615 	stw	r20,24(sp)
 100aa40:	dc800415 	stw	r18,16(sp)
 100aa44:	dc400315 	stw	r17,12(sp)
 100aa48:	dfc00a15 	stw	ra,40(sp)
 100aa4c:	3023883a 	mov	r17,r6
 100aa50:	382d883a 	mov	r22,r7
 100aa54:	ddc00b17 	ldw	r23,44(sp)
 100aa58:	100a95c0 	call	100a95c <_Balloc>
 100aa5c:	1025883a 	mov	r18,r2
 100aa60:	00a00034 	movhi	r2,32768
 100aa64:	10bfffc4 	addi	r2,r2,-1
 100aa68:	8888703a 	and	r4,r17,r2
 100aa6c:	202ad53a 	srli	r21,r4,20
 100aa70:	00800434 	movhi	r2,16
 100aa74:	10bfffc4 	addi	r2,r2,-1
 100aa78:	8886703a 	and	r3,r17,r2
 100aa7c:	a829003a 	cmpeq	r20,r21,zero
 100aa80:	800b883a 	mov	r5,r16
 100aa84:	d8c00115 	stw	r3,4(sp)
 100aa88:	94000504 	addi	r16,r18,20
 100aa8c:	a000021e 	bne	r20,zero,100aa98 <__d2b+0x80>
 100aa90:	18c00434 	orhi	r3,r3,16
 100aa94:	d8c00115 	stw	r3,4(sp)
 100aa98:	28002726 	beq	r5,zero,100ab38 <__d2b+0x120>
 100aa9c:	d809883a 	mov	r4,sp
 100aaa0:	d9400015 	stw	r5,0(sp)
 100aaa4:	100a4740 	call	100a474 <__lo0bits>
 100aaa8:	100d883a 	mov	r6,r2
 100aaac:	10003526 	beq	r2,zero,100ab84 <__d2b+0x16c>
 100aab0:	d8c00117 	ldw	r3,4(sp)
 100aab4:	00800804 	movi	r2,32
 100aab8:	1185c83a 	sub	r2,r2,r6
 100aabc:	d9000017 	ldw	r4,0(sp)
 100aac0:	1886983a 	sll	r3,r3,r2
 100aac4:	1906b03a 	or	r3,r3,r4
 100aac8:	90c00515 	stw	r3,20(r18)
 100aacc:	d8c00117 	ldw	r3,4(sp)
 100aad0:	1986d83a 	srl	r3,r3,r6
 100aad4:	d8c00115 	stw	r3,4(sp)
 100aad8:	180b003a 	cmpeq	r5,r3,zero
 100aadc:	00800084 	movi	r2,2
 100aae0:	114bc83a 	sub	r5,r2,r5
 100aae4:	80c00115 	stw	r3,4(r16)
 100aae8:	91400415 	stw	r5,16(r18)
 100aaec:	a0001a1e 	bne	r20,zero,100ab58 <__d2b+0x140>
 100aaf0:	3545883a 	add	r2,r6,r21
 100aaf4:	10bef344 	addi	r2,r2,-1075
 100aaf8:	00c00d44 	movi	r3,53
 100aafc:	b0800015 	stw	r2,0(r22)
 100ab00:	1987c83a 	sub	r3,r3,r6
 100ab04:	b8c00015 	stw	r3,0(r23)
 100ab08:	9005883a 	mov	r2,r18
 100ab0c:	dfc00a17 	ldw	ra,40(sp)
 100ab10:	ddc00917 	ldw	r23,36(sp)
 100ab14:	dd800817 	ldw	r22,32(sp)
 100ab18:	dd400717 	ldw	r21,28(sp)
 100ab1c:	dd000617 	ldw	r20,24(sp)
 100ab20:	dcc00517 	ldw	r19,20(sp)
 100ab24:	dc800417 	ldw	r18,16(sp)
 100ab28:	dc400317 	ldw	r17,12(sp)
 100ab2c:	dc000217 	ldw	r16,8(sp)
 100ab30:	dec00b04 	addi	sp,sp,44
 100ab34:	f800283a 	ret
 100ab38:	d9000104 	addi	r4,sp,4
 100ab3c:	100a4740 	call	100a474 <__lo0bits>
 100ab40:	11800804 	addi	r6,r2,32
 100ab44:	d8800117 	ldw	r2,4(sp)
 100ab48:	94c00415 	stw	r19,16(r18)
 100ab4c:	980b883a 	mov	r5,r19
 100ab50:	90800515 	stw	r2,20(r18)
 100ab54:	a03fe626 	beq	r20,zero,100aaf0 <__d2b+0xd8>
 100ab58:	2945883a 	add	r2,r5,r5
 100ab5c:	1085883a 	add	r2,r2,r2
 100ab60:	1405883a 	add	r2,r2,r16
 100ab64:	113fff17 	ldw	r4,-4(r2)
 100ab68:	30fef384 	addi	r3,r6,-1074
 100ab6c:	2820917a 	slli	r16,r5,5
 100ab70:	b0c00015 	stw	r3,0(r22)
 100ab74:	100a4040 	call	100a404 <__hi0bits>
 100ab78:	80a1c83a 	sub	r16,r16,r2
 100ab7c:	bc000015 	stw	r16,0(r23)
 100ab80:	003fe106 	br	100ab08 <__d2b+0xf0>
 100ab84:	d8800017 	ldw	r2,0(sp)
 100ab88:	90800515 	stw	r2,20(r18)
 100ab8c:	d8c00117 	ldw	r3,4(sp)
 100ab90:	003fd106 	br	100aad8 <__d2b+0xc0>

0100ab94 <__mdiff>:
 100ab94:	defffb04 	addi	sp,sp,-20
 100ab98:	dc000015 	stw	r16,0(sp)
 100ab9c:	2821883a 	mov	r16,r5
 100aba0:	dc800215 	stw	r18,8(sp)
 100aba4:	300b883a 	mov	r5,r6
 100aba8:	2025883a 	mov	r18,r4
 100abac:	8009883a 	mov	r4,r16
 100abb0:	dc400115 	stw	r17,4(sp)
 100abb4:	dfc00415 	stw	ra,16(sp)
 100abb8:	dcc00315 	stw	r19,12(sp)
 100abbc:	3023883a 	mov	r17,r6
 100abc0:	100a5380 	call	100a538 <__mcmp>
 100abc4:	10004226 	beq	r2,zero,100acd0 <__mdiff+0x13c>
 100abc8:	10005016 	blt	r2,zero,100ad0c <__mdiff+0x178>
 100abcc:	0027883a 	mov	r19,zero
 100abd0:	81400117 	ldw	r5,4(r16)
 100abd4:	9009883a 	mov	r4,r18
 100abd8:	100a95c0 	call	100a95c <_Balloc>
 100abdc:	1019883a 	mov	r12,r2
 100abe0:	82800417 	ldw	r10,16(r16)
 100abe4:	88800417 	ldw	r2,16(r17)
 100abe8:	81800504 	addi	r6,r16,20
 100abec:	5287883a 	add	r3,r10,r10
 100abf0:	1085883a 	add	r2,r2,r2
 100abf4:	18c7883a 	add	r3,r3,r3
 100abf8:	1085883a 	add	r2,r2,r2
 100abfc:	8a000504 	addi	r8,r17,20
 100ac00:	64c00315 	stw	r19,12(r12)
 100ac04:	30db883a 	add	r13,r6,r3
 100ac08:	4097883a 	add	r11,r8,r2
 100ac0c:	61c00504 	addi	r7,r12,20
 100ac10:	0013883a 	mov	r9,zero
 100ac14:	31000017 	ldw	r4,0(r6)
 100ac18:	41400017 	ldw	r5,0(r8)
 100ac1c:	42000104 	addi	r8,r8,4
 100ac20:	20bfffcc 	andi	r2,r4,65535
 100ac24:	28ffffcc 	andi	r3,r5,65535
 100ac28:	10c5c83a 	sub	r2,r2,r3
 100ac2c:	1245883a 	add	r2,r2,r9
 100ac30:	2008d43a 	srli	r4,r4,16
 100ac34:	280ad43a 	srli	r5,r5,16
 100ac38:	1007d43a 	srai	r3,r2,16
 100ac3c:	3880000d 	sth	r2,0(r7)
 100ac40:	2149c83a 	sub	r4,r4,r5
 100ac44:	20c9883a 	add	r4,r4,r3
 100ac48:	3900008d 	sth	r4,2(r7)
 100ac4c:	31800104 	addi	r6,r6,4
 100ac50:	39c00104 	addi	r7,r7,4
 100ac54:	2013d43a 	srai	r9,r4,16
 100ac58:	42ffee36 	bltu	r8,r11,100ac14 <__mdiff+0x80>
 100ac5c:	33400c2e 	bgeu	r6,r13,100ac90 <__mdiff+0xfc>
 100ac60:	30800017 	ldw	r2,0(r6)
 100ac64:	31800104 	addi	r6,r6,4
 100ac68:	10ffffcc 	andi	r3,r2,65535
 100ac6c:	1a47883a 	add	r3,r3,r9
 100ac70:	1004d43a 	srli	r2,r2,16
 100ac74:	1809d43a 	srai	r4,r3,16
 100ac78:	38c0000d 	sth	r3,0(r7)
 100ac7c:	1105883a 	add	r2,r2,r4
 100ac80:	3880008d 	sth	r2,2(r7)
 100ac84:	1013d43a 	srai	r9,r2,16
 100ac88:	39c00104 	addi	r7,r7,4
 100ac8c:	337ff436 	bltu	r6,r13,100ac60 <__mdiff+0xcc>
 100ac90:	38bfff17 	ldw	r2,-4(r7)
 100ac94:	38ffff04 	addi	r3,r7,-4
 100ac98:	1000041e 	bne	r2,zero,100acac <__mdiff+0x118>
 100ac9c:	18ffff04 	addi	r3,r3,-4
 100aca0:	18800017 	ldw	r2,0(r3)
 100aca4:	52bfffc4 	addi	r10,r10,-1
 100aca8:	103ffc26 	beq	r2,zero,100ac9c <__mdiff+0x108>
 100acac:	6005883a 	mov	r2,r12
 100acb0:	62800415 	stw	r10,16(r12)
 100acb4:	dfc00417 	ldw	ra,16(sp)
 100acb8:	dcc00317 	ldw	r19,12(sp)
 100acbc:	dc800217 	ldw	r18,8(sp)
 100acc0:	dc400117 	ldw	r17,4(sp)
 100acc4:	dc000017 	ldw	r16,0(sp)
 100acc8:	dec00504 	addi	sp,sp,20
 100accc:	f800283a 	ret
 100acd0:	9009883a 	mov	r4,r18
 100acd4:	000b883a 	mov	r5,zero
 100acd8:	100a95c0 	call	100a95c <_Balloc>
 100acdc:	1019883a 	mov	r12,r2
 100ace0:	00800044 	movi	r2,1
 100ace4:	60800415 	stw	r2,16(r12)
 100ace8:	6005883a 	mov	r2,r12
 100acec:	60000515 	stw	zero,20(r12)
 100acf0:	dfc00417 	ldw	ra,16(sp)
 100acf4:	dcc00317 	ldw	r19,12(sp)
 100acf8:	dc800217 	ldw	r18,8(sp)
 100acfc:	dc400117 	ldw	r17,4(sp)
 100ad00:	dc000017 	ldw	r16,0(sp)
 100ad04:	dec00504 	addi	sp,sp,20
 100ad08:	f800283a 	ret
 100ad0c:	880d883a 	mov	r6,r17
 100ad10:	04c00044 	movi	r19,1
 100ad14:	8023883a 	mov	r17,r16
 100ad18:	3021883a 	mov	r16,r6
 100ad1c:	003fac06 	br	100abd0 <__mdiff+0x3c>

0100ad20 <__lshift>:
 100ad20:	defff904 	addi	sp,sp,-28
 100ad24:	28800417 	ldw	r2,16(r5)
 100ad28:	dc000015 	stw	r16,0(sp)
 100ad2c:	3021d17a 	srai	r16,r6,5
 100ad30:	28c00217 	ldw	r3,8(r5)
 100ad34:	10800044 	addi	r2,r2,1
 100ad38:	dc400115 	stw	r17,4(sp)
 100ad3c:	80a3883a 	add	r17,r16,r2
 100ad40:	dd400515 	stw	r21,20(sp)
 100ad44:	dd000415 	stw	r20,16(sp)
 100ad48:	dc800215 	stw	r18,8(sp)
 100ad4c:	dfc00615 	stw	ra,24(sp)
 100ad50:	2825883a 	mov	r18,r5
 100ad54:	dcc00315 	stw	r19,12(sp)
 100ad58:	3029883a 	mov	r20,r6
 100ad5c:	202b883a 	mov	r21,r4
 100ad60:	29400117 	ldw	r5,4(r5)
 100ad64:	1c40030e 	bge	r3,r17,100ad74 <__lshift+0x54>
 100ad68:	18c7883a 	add	r3,r3,r3
 100ad6c:	29400044 	addi	r5,r5,1
 100ad70:	1c7ffd16 	blt	r3,r17,100ad68 <__lshift+0x48>
 100ad74:	a809883a 	mov	r4,r21
 100ad78:	100a95c0 	call	100a95c <_Balloc>
 100ad7c:	1027883a 	mov	r19,r2
 100ad80:	11400504 	addi	r5,r2,20
 100ad84:	0400090e 	bge	zero,r16,100adac <__lshift+0x8c>
 100ad88:	2805883a 	mov	r2,r5
 100ad8c:	0007883a 	mov	r3,zero
 100ad90:	18c00044 	addi	r3,r3,1
 100ad94:	10000015 	stw	zero,0(r2)
 100ad98:	10800104 	addi	r2,r2,4
 100ad9c:	80fffc1e 	bne	r16,r3,100ad90 <__lshift+0x70>
 100ada0:	8405883a 	add	r2,r16,r16
 100ada4:	1085883a 	add	r2,r2,r2
 100ada8:	288b883a 	add	r5,r5,r2
 100adac:	90800417 	ldw	r2,16(r18)
 100adb0:	91000504 	addi	r4,r18,20
 100adb4:	a18007cc 	andi	r6,r20,31
 100adb8:	1085883a 	add	r2,r2,r2
 100adbc:	1085883a 	add	r2,r2,r2
 100adc0:	208f883a 	add	r7,r4,r2
 100adc4:	30001e26 	beq	r6,zero,100ae40 <__lshift+0x120>
 100adc8:	00800804 	movi	r2,32
 100adcc:	1191c83a 	sub	r8,r2,r6
 100add0:	0007883a 	mov	r3,zero
 100add4:	20800017 	ldw	r2,0(r4)
 100add8:	1184983a 	sll	r2,r2,r6
 100addc:	1884b03a 	or	r2,r3,r2
 100ade0:	28800015 	stw	r2,0(r5)
 100ade4:	20c00017 	ldw	r3,0(r4)
 100ade8:	21000104 	addi	r4,r4,4
 100adec:	29400104 	addi	r5,r5,4
 100adf0:	1a06d83a 	srl	r3,r3,r8
 100adf4:	21fff736 	bltu	r4,r7,100add4 <__lshift+0xb4>
 100adf8:	28c00015 	stw	r3,0(r5)
 100adfc:	18000126 	beq	r3,zero,100ae04 <__lshift+0xe4>
 100ae00:	8c400044 	addi	r17,r17,1
 100ae04:	88bfffc4 	addi	r2,r17,-1
 100ae08:	98800415 	stw	r2,16(r19)
 100ae0c:	a809883a 	mov	r4,r21
 100ae10:	900b883a 	mov	r5,r18
 100ae14:	100a3dc0 	call	100a3dc <_Bfree>
 100ae18:	9805883a 	mov	r2,r19
 100ae1c:	dfc00617 	ldw	ra,24(sp)
 100ae20:	dd400517 	ldw	r21,20(sp)
 100ae24:	dd000417 	ldw	r20,16(sp)
 100ae28:	dcc00317 	ldw	r19,12(sp)
 100ae2c:	dc800217 	ldw	r18,8(sp)
 100ae30:	dc400117 	ldw	r17,4(sp)
 100ae34:	dc000017 	ldw	r16,0(sp)
 100ae38:	dec00704 	addi	sp,sp,28
 100ae3c:	f800283a 	ret
 100ae40:	20800017 	ldw	r2,0(r4)
 100ae44:	21000104 	addi	r4,r4,4
 100ae48:	28800015 	stw	r2,0(r5)
 100ae4c:	29400104 	addi	r5,r5,4
 100ae50:	21ffec2e 	bgeu	r4,r7,100ae04 <__lshift+0xe4>
 100ae54:	20800017 	ldw	r2,0(r4)
 100ae58:	21000104 	addi	r4,r4,4
 100ae5c:	28800015 	stw	r2,0(r5)
 100ae60:	29400104 	addi	r5,r5,4
 100ae64:	21fff636 	bltu	r4,r7,100ae40 <__lshift+0x120>
 100ae68:	003fe606 	br	100ae04 <__lshift+0xe4>

0100ae6c <__multiply>:
 100ae6c:	defff004 	addi	sp,sp,-64
 100ae70:	dc800815 	stw	r18,32(sp)
 100ae74:	dc400715 	stw	r17,28(sp)
 100ae78:	2c800417 	ldw	r18,16(r5)
 100ae7c:	34400417 	ldw	r17,16(r6)
 100ae80:	dcc00915 	stw	r19,36(sp)
 100ae84:	dc000615 	stw	r16,24(sp)
 100ae88:	dfc00f15 	stw	ra,60(sp)
 100ae8c:	df000e15 	stw	fp,56(sp)
 100ae90:	ddc00d15 	stw	r23,52(sp)
 100ae94:	dd800c15 	stw	r22,48(sp)
 100ae98:	dd400b15 	stw	r21,44(sp)
 100ae9c:	dd000a15 	stw	r20,40(sp)
 100aea0:	2821883a 	mov	r16,r5
 100aea4:	3027883a 	mov	r19,r6
 100aea8:	9440040e 	bge	r18,r17,100aebc <__multiply+0x50>
 100aeac:	8825883a 	mov	r18,r17
 100aeb0:	2c400417 	ldw	r17,16(r5)
 100aeb4:	2827883a 	mov	r19,r5
 100aeb8:	3021883a 	mov	r16,r6
 100aebc:	80800217 	ldw	r2,8(r16)
 100aec0:	9447883a 	add	r3,r18,r17
 100aec4:	d8c00415 	stw	r3,16(sp)
 100aec8:	81400117 	ldw	r5,4(r16)
 100aecc:	10c0010e 	bge	r2,r3,100aed4 <__multiply+0x68>
 100aed0:	29400044 	addi	r5,r5,1
 100aed4:	100a95c0 	call	100a95c <_Balloc>
 100aed8:	d8800515 	stw	r2,20(sp)
 100aedc:	d9000417 	ldw	r4,16(sp)
 100aee0:	d8c00517 	ldw	r3,20(sp)
 100aee4:	2105883a 	add	r2,r4,r4
 100aee8:	1085883a 	add	r2,r2,r2
 100aeec:	19000504 	addi	r4,r3,20
 100aef0:	2085883a 	add	r2,r4,r2
 100aef4:	d8800315 	stw	r2,12(sp)
 100aef8:	2080052e 	bgeu	r4,r2,100af10 <__multiply+0xa4>
 100aefc:	2005883a 	mov	r2,r4
 100af00:	d8c00317 	ldw	r3,12(sp)
 100af04:	10000015 	stw	zero,0(r2)
 100af08:	10800104 	addi	r2,r2,4
 100af0c:	10fffc36 	bltu	r2,r3,100af00 <__multiply+0x94>
 100af10:	8c45883a 	add	r2,r17,r17
 100af14:	9487883a 	add	r3,r18,r18
 100af18:	9dc00504 	addi	r23,r19,20
 100af1c:	1085883a 	add	r2,r2,r2
 100af20:	84000504 	addi	r16,r16,20
 100af24:	18c7883a 	add	r3,r3,r3
 100af28:	b885883a 	add	r2,r23,r2
 100af2c:	dc000015 	stw	r16,0(sp)
 100af30:	d8800215 	stw	r2,8(sp)
 100af34:	80f9883a 	add	fp,r16,r3
 100af38:	b880432e 	bgeu	r23,r2,100b048 <__multiply+0x1dc>
 100af3c:	d9000115 	stw	r4,4(sp)
 100af40:	b9000017 	ldw	r4,0(r23)
 100af44:	253fffcc 	andi	r20,r4,65535
 100af48:	a0001a26 	beq	r20,zero,100afb4 <__multiply+0x148>
 100af4c:	dcc00017 	ldw	r19,0(sp)
 100af50:	dc800117 	ldw	r18,4(sp)
 100af54:	002b883a 	mov	r21,zero
 100af58:	9c400017 	ldw	r17,0(r19)
 100af5c:	94000017 	ldw	r16,0(r18)
 100af60:	a009883a 	mov	r4,r20
 100af64:	897fffcc 	andi	r5,r17,65535
 100af68:	100435c0 	call	100435c <__mulsi3>
 100af6c:	880ad43a 	srli	r5,r17,16
 100af70:	80ffffcc 	andi	r3,r16,65535
 100af74:	a8c7883a 	add	r3,r21,r3
 100af78:	a009883a 	mov	r4,r20
 100af7c:	10e3883a 	add	r17,r2,r3
 100af80:	8020d43a 	srli	r16,r16,16
 100af84:	100435c0 	call	100435c <__mulsi3>
 100af88:	8806d43a 	srli	r3,r17,16
 100af8c:	1405883a 	add	r2,r2,r16
 100af90:	9cc00104 	addi	r19,r19,4
 100af94:	1887883a 	add	r3,r3,r2
 100af98:	90c0008d 	sth	r3,2(r18)
 100af9c:	9440000d 	sth	r17,0(r18)
 100afa0:	182ad43a 	srli	r21,r3,16
 100afa4:	94800104 	addi	r18,r18,4
 100afa8:	9f3feb36 	bltu	r19,fp,100af58 <__multiply+0xec>
 100afac:	95400015 	stw	r21,0(r18)
 100afb0:	b9000017 	ldw	r4,0(r23)
 100afb4:	202ad43a 	srli	r21,r4,16
 100afb8:	a8001c26 	beq	r21,zero,100b02c <__multiply+0x1c0>
 100afbc:	d9000117 	ldw	r4,4(sp)
 100afc0:	dd000017 	ldw	r20,0(sp)
 100afc4:	002d883a 	mov	r22,zero
 100afc8:	24c00017 	ldw	r19,0(r4)
 100afcc:	2025883a 	mov	r18,r4
 100afd0:	9823883a 	mov	r17,r19
 100afd4:	a4000017 	ldw	r16,0(r20)
 100afd8:	a809883a 	mov	r4,r21
 100afdc:	a5000104 	addi	r20,r20,4
 100afe0:	817fffcc 	andi	r5,r16,65535
 100afe4:	100435c0 	call	100435c <__mulsi3>
 100afe8:	8806d43a 	srli	r3,r17,16
 100afec:	800ad43a 	srli	r5,r16,16
 100aff0:	94c0000d 	sth	r19,0(r18)
 100aff4:	b0c7883a 	add	r3,r22,r3
 100aff8:	10e1883a 	add	r16,r2,r3
 100affc:	9400008d 	sth	r16,2(r18)
 100b000:	a809883a 	mov	r4,r21
 100b004:	94800104 	addi	r18,r18,4
 100b008:	100435c0 	call	100435c <__mulsi3>
 100b00c:	94400017 	ldw	r17,0(r18)
 100b010:	8020d43a 	srli	r16,r16,16
 100b014:	88ffffcc 	andi	r3,r17,65535
 100b018:	10c5883a 	add	r2,r2,r3
 100b01c:	80a7883a 	add	r19,r16,r2
 100b020:	982cd43a 	srli	r22,r19,16
 100b024:	a73feb36 	bltu	r20,fp,100afd4 <__multiply+0x168>
 100b028:	94c00015 	stw	r19,0(r18)
 100b02c:	d8800217 	ldw	r2,8(sp)
 100b030:	bdc00104 	addi	r23,r23,4
 100b034:	b880042e 	bgeu	r23,r2,100b048 <__multiply+0x1dc>
 100b038:	d8c00117 	ldw	r3,4(sp)
 100b03c:	18c00104 	addi	r3,r3,4
 100b040:	d8c00115 	stw	r3,4(sp)
 100b044:	003fbe06 	br	100af40 <__multiply+0xd4>
 100b048:	d9000417 	ldw	r4,16(sp)
 100b04c:	01000c0e 	bge	zero,r4,100b080 <__multiply+0x214>
 100b050:	d8c00317 	ldw	r3,12(sp)
 100b054:	18bfff17 	ldw	r2,-4(r3)
 100b058:	18ffff04 	addi	r3,r3,-4
 100b05c:	10000326 	beq	r2,zero,100b06c <__multiply+0x200>
 100b060:	00000706 	br	100b080 <__multiply+0x214>
 100b064:	18800017 	ldw	r2,0(r3)
 100b068:	1000051e 	bne	r2,zero,100b080 <__multiply+0x214>
 100b06c:	d9000417 	ldw	r4,16(sp)
 100b070:	18ffff04 	addi	r3,r3,-4
 100b074:	213fffc4 	addi	r4,r4,-1
 100b078:	d9000415 	stw	r4,16(sp)
 100b07c:	203ff91e 	bne	r4,zero,100b064 <__multiply+0x1f8>
 100b080:	d8800417 	ldw	r2,16(sp)
 100b084:	d8c00517 	ldw	r3,20(sp)
 100b088:	18800415 	stw	r2,16(r3)
 100b08c:	1805883a 	mov	r2,r3
 100b090:	dfc00f17 	ldw	ra,60(sp)
 100b094:	df000e17 	ldw	fp,56(sp)
 100b098:	ddc00d17 	ldw	r23,52(sp)
 100b09c:	dd800c17 	ldw	r22,48(sp)
 100b0a0:	dd400b17 	ldw	r21,44(sp)
 100b0a4:	dd000a17 	ldw	r20,40(sp)
 100b0a8:	dcc00917 	ldw	r19,36(sp)
 100b0ac:	dc800817 	ldw	r18,32(sp)
 100b0b0:	dc400717 	ldw	r17,28(sp)
 100b0b4:	dc000617 	ldw	r16,24(sp)
 100b0b8:	dec01004 	addi	sp,sp,64
 100b0bc:	f800283a 	ret

0100b0c0 <__i2b>:
 100b0c0:	defffd04 	addi	sp,sp,-12
 100b0c4:	dc000015 	stw	r16,0(sp)
 100b0c8:	04000044 	movi	r16,1
 100b0cc:	dc800115 	stw	r18,4(sp)
 100b0d0:	2825883a 	mov	r18,r5
 100b0d4:	800b883a 	mov	r5,r16
 100b0d8:	dfc00215 	stw	ra,8(sp)
 100b0dc:	100a95c0 	call	100a95c <_Balloc>
 100b0e0:	14000415 	stw	r16,16(r2)
 100b0e4:	14800515 	stw	r18,20(r2)
 100b0e8:	dfc00217 	ldw	ra,8(sp)
 100b0ec:	dc800117 	ldw	r18,4(sp)
 100b0f0:	dc000017 	ldw	r16,0(sp)
 100b0f4:	dec00304 	addi	sp,sp,12
 100b0f8:	f800283a 	ret

0100b0fc <__multadd>:
 100b0fc:	defff604 	addi	sp,sp,-40
 100b100:	dd800615 	stw	r22,24(sp)
 100b104:	2d800417 	ldw	r22,16(r5)
 100b108:	df000815 	stw	fp,32(sp)
 100b10c:	ddc00715 	stw	r23,28(sp)
 100b110:	dd400515 	stw	r21,20(sp)
 100b114:	dd000415 	stw	r20,16(sp)
 100b118:	dcc00315 	stw	r19,12(sp)
 100b11c:	dc800215 	stw	r18,8(sp)
 100b120:	dfc00915 	stw	ra,36(sp)
 100b124:	dc400115 	stw	r17,4(sp)
 100b128:	dc000015 	stw	r16,0(sp)
 100b12c:	282f883a 	mov	r23,r5
 100b130:	2039883a 	mov	fp,r4
 100b134:	302b883a 	mov	r21,r6
 100b138:	3829883a 	mov	r20,r7
 100b13c:	2c800504 	addi	r18,r5,20
 100b140:	0027883a 	mov	r19,zero
 100b144:	94400017 	ldw	r17,0(r18)
 100b148:	a80b883a 	mov	r5,r21
 100b14c:	9cc00044 	addi	r19,r19,1
 100b150:	893fffcc 	andi	r4,r17,65535
 100b154:	100435c0 	call	100435c <__mulsi3>
 100b158:	8808d43a 	srli	r4,r17,16
 100b15c:	1521883a 	add	r16,r2,r20
 100b160:	a80b883a 	mov	r5,r21
 100b164:	100435c0 	call	100435c <__mulsi3>
 100b168:	8008d43a 	srli	r4,r16,16
 100b16c:	843fffcc 	andi	r16,r16,65535
 100b170:	1105883a 	add	r2,r2,r4
 100b174:	1006943a 	slli	r3,r2,16
 100b178:	1028d43a 	srli	r20,r2,16
 100b17c:	1c07883a 	add	r3,r3,r16
 100b180:	90c00015 	stw	r3,0(r18)
 100b184:	94800104 	addi	r18,r18,4
 100b188:	9dbfee16 	blt	r19,r22,100b144 <__multadd+0x48>
 100b18c:	a0000826 	beq	r20,zero,100b1b0 <__multadd+0xb4>
 100b190:	b8800217 	ldw	r2,8(r23)
 100b194:	b080130e 	bge	r22,r2,100b1e4 <__multadd+0xe8>
 100b198:	b585883a 	add	r2,r22,r22
 100b19c:	1085883a 	add	r2,r2,r2
 100b1a0:	15c5883a 	add	r2,r2,r23
 100b1a4:	b0c00044 	addi	r3,r22,1
 100b1a8:	15000515 	stw	r20,20(r2)
 100b1ac:	b8c00415 	stw	r3,16(r23)
 100b1b0:	b805883a 	mov	r2,r23
 100b1b4:	dfc00917 	ldw	ra,36(sp)
 100b1b8:	df000817 	ldw	fp,32(sp)
 100b1bc:	ddc00717 	ldw	r23,28(sp)
 100b1c0:	dd800617 	ldw	r22,24(sp)
 100b1c4:	dd400517 	ldw	r21,20(sp)
 100b1c8:	dd000417 	ldw	r20,16(sp)
 100b1cc:	dcc00317 	ldw	r19,12(sp)
 100b1d0:	dc800217 	ldw	r18,8(sp)
 100b1d4:	dc400117 	ldw	r17,4(sp)
 100b1d8:	dc000017 	ldw	r16,0(sp)
 100b1dc:	dec00a04 	addi	sp,sp,40
 100b1e0:	f800283a 	ret
 100b1e4:	b9400117 	ldw	r5,4(r23)
 100b1e8:	e009883a 	mov	r4,fp
 100b1ec:	29400044 	addi	r5,r5,1
 100b1f0:	100a95c0 	call	100a95c <_Balloc>
 100b1f4:	b9800417 	ldw	r6,16(r23)
 100b1f8:	b9400304 	addi	r5,r23,12
 100b1fc:	11000304 	addi	r4,r2,12
 100b200:	318d883a 	add	r6,r6,r6
 100b204:	318d883a 	add	r6,r6,r6
 100b208:	31800204 	addi	r6,r6,8
 100b20c:	1023883a 	mov	r17,r2
 100b210:	100a1c40 	call	100a1c4 <memcpy>
 100b214:	b80b883a 	mov	r5,r23
 100b218:	e009883a 	mov	r4,fp
 100b21c:	100a3dc0 	call	100a3dc <_Bfree>
 100b220:	882f883a 	mov	r23,r17
 100b224:	003fdc06 	br	100b198 <__multadd+0x9c>

0100b228 <__pow5mult>:
 100b228:	defffa04 	addi	sp,sp,-24
 100b22c:	308000cc 	andi	r2,r6,3
 100b230:	dd000415 	stw	r20,16(sp)
 100b234:	dcc00315 	stw	r19,12(sp)
 100b238:	dc000015 	stw	r16,0(sp)
 100b23c:	dfc00515 	stw	ra,20(sp)
 100b240:	dc800215 	stw	r18,8(sp)
 100b244:	dc400115 	stw	r17,4(sp)
 100b248:	3021883a 	mov	r16,r6
 100b24c:	2027883a 	mov	r19,r4
 100b250:	2829883a 	mov	r20,r5
 100b254:	10002b1e 	bne	r2,zero,100b304 <__pow5mult+0xdc>
 100b258:	8025d0ba 	srai	r18,r16,2
 100b25c:	90001b26 	beq	r18,zero,100b2cc <__pow5mult+0xa4>
 100b260:	9c001217 	ldw	r16,72(r19)
 100b264:	8000081e 	bne	r16,zero,100b288 <__pow5mult+0x60>
 100b268:	00003006 	br	100b32c <__pow5mult+0x104>
 100b26c:	800b883a 	mov	r5,r16
 100b270:	800d883a 	mov	r6,r16
 100b274:	9809883a 	mov	r4,r19
 100b278:	90001426 	beq	r18,zero,100b2cc <__pow5mult+0xa4>
 100b27c:	80800017 	ldw	r2,0(r16)
 100b280:	10001b26 	beq	r2,zero,100b2f0 <__pow5mult+0xc8>
 100b284:	1021883a 	mov	r16,r2
 100b288:	9080004c 	andi	r2,r18,1
 100b28c:	1005003a 	cmpeq	r2,r2,zero
 100b290:	9025d07a 	srai	r18,r18,1
 100b294:	800d883a 	mov	r6,r16
 100b298:	9809883a 	mov	r4,r19
 100b29c:	a00b883a 	mov	r5,r20
 100b2a0:	103ff21e 	bne	r2,zero,100b26c <__pow5mult+0x44>
 100b2a4:	100ae6c0 	call	100ae6c <__multiply>
 100b2a8:	a00b883a 	mov	r5,r20
 100b2ac:	9809883a 	mov	r4,r19
 100b2b0:	1023883a 	mov	r17,r2
 100b2b4:	100a3dc0 	call	100a3dc <_Bfree>
 100b2b8:	8829883a 	mov	r20,r17
 100b2bc:	800b883a 	mov	r5,r16
 100b2c0:	800d883a 	mov	r6,r16
 100b2c4:	9809883a 	mov	r4,r19
 100b2c8:	903fec1e 	bne	r18,zero,100b27c <__pow5mult+0x54>
 100b2cc:	a005883a 	mov	r2,r20
 100b2d0:	dfc00517 	ldw	ra,20(sp)
 100b2d4:	dd000417 	ldw	r20,16(sp)
 100b2d8:	dcc00317 	ldw	r19,12(sp)
 100b2dc:	dc800217 	ldw	r18,8(sp)
 100b2e0:	dc400117 	ldw	r17,4(sp)
 100b2e4:	dc000017 	ldw	r16,0(sp)
 100b2e8:	dec00604 	addi	sp,sp,24
 100b2ec:	f800283a 	ret
 100b2f0:	100ae6c0 	call	100ae6c <__multiply>
 100b2f4:	80800015 	stw	r2,0(r16)
 100b2f8:	1021883a 	mov	r16,r2
 100b2fc:	10000015 	stw	zero,0(r2)
 100b300:	003fe106 	br	100b288 <__pow5mult+0x60>
 100b304:	1085883a 	add	r2,r2,r2
 100b308:	00c04074 	movhi	r3,257
 100b30c:	18c86004 	addi	r3,r3,8576
 100b310:	1085883a 	add	r2,r2,r2
 100b314:	10c5883a 	add	r2,r2,r3
 100b318:	11bfff17 	ldw	r6,-4(r2)
 100b31c:	000f883a 	mov	r7,zero
 100b320:	100b0fc0 	call	100b0fc <__multadd>
 100b324:	1029883a 	mov	r20,r2
 100b328:	003fcb06 	br	100b258 <__pow5mult+0x30>
 100b32c:	9809883a 	mov	r4,r19
 100b330:	01409c44 	movi	r5,625
 100b334:	100b0c00 	call	100b0c0 <__i2b>
 100b338:	98801215 	stw	r2,72(r19)
 100b33c:	1021883a 	mov	r16,r2
 100b340:	10000015 	stw	zero,0(r2)
 100b344:	003fd006 	br	100b288 <__pow5mult+0x60>

0100b348 <__s2b>:
 100b348:	defff904 	addi	sp,sp,-28
 100b34c:	dcc00315 	stw	r19,12(sp)
 100b350:	dc800215 	stw	r18,8(sp)
 100b354:	2827883a 	mov	r19,r5
 100b358:	2025883a 	mov	r18,r4
 100b35c:	01400244 	movi	r5,9
 100b360:	39000204 	addi	r4,r7,8
 100b364:	dd000415 	stw	r20,16(sp)
 100b368:	dc400115 	stw	r17,4(sp)
 100b36c:	dfc00615 	stw	ra,24(sp)
 100b370:	dd400515 	stw	r21,20(sp)
 100b374:	dc000015 	stw	r16,0(sp)
 100b378:	3829883a 	mov	r20,r7
 100b37c:	3023883a 	mov	r17,r6
 100b380:	100428c0 	call	100428c <__divsi3>
 100b384:	00c00044 	movi	r3,1
 100b388:	1880350e 	bge	r3,r2,100b460 <__s2b+0x118>
 100b38c:	000b883a 	mov	r5,zero
 100b390:	18c7883a 	add	r3,r3,r3
 100b394:	29400044 	addi	r5,r5,1
 100b398:	18bffd16 	blt	r3,r2,100b390 <__s2b+0x48>
 100b39c:	9009883a 	mov	r4,r18
 100b3a0:	100a95c0 	call	100a95c <_Balloc>
 100b3a4:	1011883a 	mov	r8,r2
 100b3a8:	d8800717 	ldw	r2,28(sp)
 100b3ac:	00c00044 	movi	r3,1
 100b3b0:	01800244 	movi	r6,9
 100b3b4:	40800515 	stw	r2,20(r8)
 100b3b8:	40c00415 	stw	r3,16(r8)
 100b3bc:	3440260e 	bge	r6,r17,100b458 <__s2b+0x110>
 100b3c0:	3021883a 	mov	r16,r6
 100b3c4:	99ab883a 	add	r21,r19,r6
 100b3c8:	9c05883a 	add	r2,r19,r16
 100b3cc:	11c00007 	ldb	r7,0(r2)
 100b3d0:	400b883a 	mov	r5,r8
 100b3d4:	9009883a 	mov	r4,r18
 100b3d8:	39fff404 	addi	r7,r7,-48
 100b3dc:	01800284 	movi	r6,10
 100b3e0:	100b0fc0 	call	100b0fc <__multadd>
 100b3e4:	84000044 	addi	r16,r16,1
 100b3e8:	1011883a 	mov	r8,r2
 100b3ec:	8c3ff61e 	bne	r17,r16,100b3c8 <__s2b+0x80>
 100b3f0:	ac45883a 	add	r2,r21,r17
 100b3f4:	117ffe04 	addi	r5,r2,-8
 100b3f8:	880d883a 	mov	r6,r17
 100b3fc:	35000c0e 	bge	r6,r20,100b430 <__s2b+0xe8>
 100b400:	a185c83a 	sub	r2,r20,r6
 100b404:	2821883a 	mov	r16,r5
 100b408:	28a3883a 	add	r17,r5,r2
 100b40c:	81c00007 	ldb	r7,0(r16)
 100b410:	400b883a 	mov	r5,r8
 100b414:	9009883a 	mov	r4,r18
 100b418:	39fff404 	addi	r7,r7,-48
 100b41c:	01800284 	movi	r6,10
 100b420:	100b0fc0 	call	100b0fc <__multadd>
 100b424:	84000044 	addi	r16,r16,1
 100b428:	1011883a 	mov	r8,r2
 100b42c:	847ff71e 	bne	r16,r17,100b40c <__s2b+0xc4>
 100b430:	4005883a 	mov	r2,r8
 100b434:	dfc00617 	ldw	ra,24(sp)
 100b438:	dd400517 	ldw	r21,20(sp)
 100b43c:	dd000417 	ldw	r20,16(sp)
 100b440:	dcc00317 	ldw	r19,12(sp)
 100b444:	dc800217 	ldw	r18,8(sp)
 100b448:	dc400117 	ldw	r17,4(sp)
 100b44c:	dc000017 	ldw	r16,0(sp)
 100b450:	dec00704 	addi	sp,sp,28
 100b454:	f800283a 	ret
 100b458:	99400284 	addi	r5,r19,10
 100b45c:	003fe706 	br	100b3fc <__s2b+0xb4>
 100b460:	000b883a 	mov	r5,zero
 100b464:	003fcd06 	br	100b39c <__s2b+0x54>

0100b468 <_realloc_r>:
 100b468:	defff404 	addi	sp,sp,-48
 100b46c:	dd800815 	stw	r22,32(sp)
 100b470:	dc800415 	stw	r18,16(sp)
 100b474:	dc400315 	stw	r17,12(sp)
 100b478:	dfc00b15 	stw	ra,44(sp)
 100b47c:	df000a15 	stw	fp,40(sp)
 100b480:	ddc00915 	stw	r23,36(sp)
 100b484:	dd400715 	stw	r21,28(sp)
 100b488:	dd000615 	stw	r20,24(sp)
 100b48c:	dcc00515 	stw	r19,20(sp)
 100b490:	dc000215 	stw	r16,8(sp)
 100b494:	2825883a 	mov	r18,r5
 100b498:	3023883a 	mov	r17,r6
 100b49c:	202d883a 	mov	r22,r4
 100b4a0:	2800c926 	beq	r5,zero,100b7c8 <_realloc_r+0x360>
 100b4a4:	100d9d80 	call	100d9d8 <__malloc_lock>
 100b4a8:	943ffe04 	addi	r16,r18,-8
 100b4ac:	88c002c4 	addi	r3,r17,11
 100b4b0:	00800584 	movi	r2,22
 100b4b4:	82000117 	ldw	r8,4(r16)
 100b4b8:	10c01b2e 	bgeu	r2,r3,100b528 <_realloc_r+0xc0>
 100b4bc:	00bffe04 	movi	r2,-8
 100b4c0:	188e703a 	and	r7,r3,r2
 100b4c4:	3839883a 	mov	fp,r7
 100b4c8:	38001a16 	blt	r7,zero,100b534 <_realloc_r+0xcc>
 100b4cc:	e4401936 	bltu	fp,r17,100b534 <_realloc_r+0xcc>
 100b4d0:	013fff04 	movi	r4,-4
 100b4d4:	4126703a 	and	r19,r8,r4
 100b4d8:	99c02616 	blt	r19,r7,100b574 <_realloc_r+0x10c>
 100b4dc:	802b883a 	mov	r21,r16
 100b4e0:	9829883a 	mov	r20,r19
 100b4e4:	84000204 	addi	r16,r16,8
 100b4e8:	a80f883a 	mov	r7,r21
 100b4ec:	a70dc83a 	sub	r6,r20,fp
 100b4f0:	008003c4 	movi	r2,15
 100b4f4:	1180c136 	bltu	r2,r6,100b7fc <_realloc_r+0x394>
 100b4f8:	38800117 	ldw	r2,4(r7)
 100b4fc:	a549883a 	add	r4,r20,r21
 100b500:	1080004c 	andi	r2,r2,1
 100b504:	a084b03a 	or	r2,r20,r2
 100b508:	38800115 	stw	r2,4(r7)
 100b50c:	20c00117 	ldw	r3,4(r4)
 100b510:	18c00054 	ori	r3,r3,1
 100b514:	20c00115 	stw	r3,4(r4)
 100b518:	b009883a 	mov	r4,r22
 100b51c:	100d9f80 	call	100d9f8 <__malloc_unlock>
 100b520:	8023883a 	mov	r17,r16
 100b524:	00000606 	br	100b540 <_realloc_r+0xd8>
 100b528:	01c00404 	movi	r7,16
 100b52c:	3839883a 	mov	fp,r7
 100b530:	e47fe72e 	bgeu	fp,r17,100b4d0 <_realloc_r+0x68>
 100b534:	00800304 	movi	r2,12
 100b538:	0023883a 	mov	r17,zero
 100b53c:	b0800015 	stw	r2,0(r22)
 100b540:	8805883a 	mov	r2,r17
 100b544:	dfc00b17 	ldw	ra,44(sp)
 100b548:	df000a17 	ldw	fp,40(sp)
 100b54c:	ddc00917 	ldw	r23,36(sp)
 100b550:	dd800817 	ldw	r22,32(sp)
 100b554:	dd400717 	ldw	r21,28(sp)
 100b558:	dd000617 	ldw	r20,24(sp)
 100b55c:	dcc00517 	ldw	r19,20(sp)
 100b560:	dc800417 	ldw	r18,16(sp)
 100b564:	dc400317 	ldw	r17,12(sp)
 100b568:	dc000217 	ldw	r16,8(sp)
 100b56c:	dec00c04 	addi	sp,sp,48
 100b570:	f800283a 	ret
 100b574:	00804074 	movhi	r2,257
 100b578:	10887c04 	addi	r2,r2,8688
 100b57c:	12400217 	ldw	r9,8(r2)
 100b580:	84cd883a 	add	r6,r16,r19
 100b584:	802b883a 	mov	r21,r16
 100b588:	3240b926 	beq	r6,r9,100b870 <_realloc_r+0x408>
 100b58c:	31400117 	ldw	r5,4(r6)
 100b590:	00bfff84 	movi	r2,-2
 100b594:	2884703a 	and	r2,r5,r2
 100b598:	1185883a 	add	r2,r2,r6
 100b59c:	10c00117 	ldw	r3,4(r2)
 100b5a0:	18c0004c 	andi	r3,r3,1
 100b5a4:	1807003a 	cmpeq	r3,r3,zero
 100b5a8:	1800a326 	beq	r3,zero,100b838 <_realloc_r+0x3d0>
 100b5ac:	2908703a 	and	r4,r5,r4
 100b5b0:	9929883a 	add	r20,r19,r4
 100b5b4:	a1c0a30e 	bge	r20,r7,100b844 <_realloc_r+0x3dc>
 100b5b8:	4080004c 	andi	r2,r8,1
 100b5bc:	1000551e 	bne	r2,zero,100b714 <_realloc_r+0x2ac>
 100b5c0:	80800017 	ldw	r2,0(r16)
 100b5c4:	80afc83a 	sub	r23,r16,r2
 100b5c8:	b8c00117 	ldw	r3,4(r23)
 100b5cc:	00bfff04 	movi	r2,-4
 100b5d0:	1884703a 	and	r2,r3,r2
 100b5d4:	30002e26 	beq	r6,zero,100b690 <_realloc_r+0x228>
 100b5d8:	3240b926 	beq	r6,r9,100b8c0 <_realloc_r+0x458>
 100b5dc:	98a9883a 	add	r20,r19,r2
 100b5e0:	2509883a 	add	r4,r4,r20
 100b5e4:	d9000015 	stw	r4,0(sp)
 100b5e8:	21c02a16 	blt	r4,r7,100b694 <_realloc_r+0x22c>
 100b5ec:	30800317 	ldw	r2,12(r6)
 100b5f0:	30c00217 	ldw	r3,8(r6)
 100b5f4:	01400904 	movi	r5,36
 100b5f8:	99bfff04 	addi	r6,r19,-4
 100b5fc:	18800315 	stw	r2,12(r3)
 100b600:	10c00215 	stw	r3,8(r2)
 100b604:	b9000317 	ldw	r4,12(r23)
 100b608:	b8800217 	ldw	r2,8(r23)
 100b60c:	b82b883a 	mov	r21,r23
 100b610:	bc000204 	addi	r16,r23,8
 100b614:	20800215 	stw	r2,8(r4)
 100b618:	11000315 	stw	r4,12(r2)
 100b61c:	2980e436 	bltu	r5,r6,100b9b0 <_realloc_r+0x548>
 100b620:	008004c4 	movi	r2,19
 100b624:	9009883a 	mov	r4,r18
 100b628:	8011883a 	mov	r8,r16
 100b62c:	11800f2e 	bgeu	r2,r6,100b66c <_realloc_r+0x204>
 100b630:	90800017 	ldw	r2,0(r18)
 100b634:	ba000404 	addi	r8,r23,16
 100b638:	91000204 	addi	r4,r18,8
 100b63c:	b8800215 	stw	r2,8(r23)
 100b640:	90c00117 	ldw	r3,4(r18)
 100b644:	008006c4 	movi	r2,27
 100b648:	b8c00315 	stw	r3,12(r23)
 100b64c:	1180072e 	bgeu	r2,r6,100b66c <_realloc_r+0x204>
 100b650:	90c00217 	ldw	r3,8(r18)
 100b654:	ba000604 	addi	r8,r23,24
 100b658:	91000404 	addi	r4,r18,16
 100b65c:	b8c00415 	stw	r3,16(r23)
 100b660:	90800317 	ldw	r2,12(r18)
 100b664:	b8800515 	stw	r2,20(r23)
 100b668:	3140e726 	beq	r6,r5,100ba08 <_realloc_r+0x5a0>
 100b66c:	20800017 	ldw	r2,0(r4)
 100b670:	dd000017 	ldw	r20,0(sp)
 100b674:	b80f883a 	mov	r7,r23
 100b678:	40800015 	stw	r2,0(r8)
 100b67c:	20c00117 	ldw	r3,4(r4)
 100b680:	40c00115 	stw	r3,4(r8)
 100b684:	20800217 	ldw	r2,8(r4)
 100b688:	40800215 	stw	r2,8(r8)
 100b68c:	003f9706 	br	100b4ec <_realloc_r+0x84>
 100b690:	98a9883a 	add	r20,r19,r2
 100b694:	a1c01f16 	blt	r20,r7,100b714 <_realloc_r+0x2ac>
 100b698:	b8c00317 	ldw	r3,12(r23)
 100b69c:	b8800217 	ldw	r2,8(r23)
 100b6a0:	99bfff04 	addi	r6,r19,-4
 100b6a4:	01400904 	movi	r5,36
 100b6a8:	b82b883a 	mov	r21,r23
 100b6ac:	18800215 	stw	r2,8(r3)
 100b6b0:	10c00315 	stw	r3,12(r2)
 100b6b4:	bc000204 	addi	r16,r23,8
 100b6b8:	2980c336 	bltu	r5,r6,100b9c8 <_realloc_r+0x560>
 100b6bc:	008004c4 	movi	r2,19
 100b6c0:	9009883a 	mov	r4,r18
 100b6c4:	8011883a 	mov	r8,r16
 100b6c8:	11800f2e 	bgeu	r2,r6,100b708 <_realloc_r+0x2a0>
 100b6cc:	90800017 	ldw	r2,0(r18)
 100b6d0:	ba000404 	addi	r8,r23,16
 100b6d4:	91000204 	addi	r4,r18,8
 100b6d8:	b8800215 	stw	r2,8(r23)
 100b6dc:	90c00117 	ldw	r3,4(r18)
 100b6e0:	008006c4 	movi	r2,27
 100b6e4:	b8c00315 	stw	r3,12(r23)
 100b6e8:	1180072e 	bgeu	r2,r6,100b708 <_realloc_r+0x2a0>
 100b6ec:	90c00217 	ldw	r3,8(r18)
 100b6f0:	ba000604 	addi	r8,r23,24
 100b6f4:	91000404 	addi	r4,r18,16
 100b6f8:	b8c00415 	stw	r3,16(r23)
 100b6fc:	90800317 	ldw	r2,12(r18)
 100b700:	b8800515 	stw	r2,20(r23)
 100b704:	3140c726 	beq	r6,r5,100ba24 <_realloc_r+0x5bc>
 100b708:	20800017 	ldw	r2,0(r4)
 100b70c:	b80f883a 	mov	r7,r23
 100b710:	003fd906 	br	100b678 <_realloc_r+0x210>
 100b714:	880b883a 	mov	r5,r17
 100b718:	b009883a 	mov	r4,r22
 100b71c:	1004d440 	call	1004d44 <_malloc_r>
 100b720:	1023883a 	mov	r17,r2
 100b724:	10002526 	beq	r2,zero,100b7bc <_realloc_r+0x354>
 100b728:	80800117 	ldw	r2,4(r16)
 100b72c:	00ffff84 	movi	r3,-2
 100b730:	893ffe04 	addi	r4,r17,-8
 100b734:	10c4703a 	and	r2,r2,r3
 100b738:	8085883a 	add	r2,r16,r2
 100b73c:	20809526 	beq	r4,r2,100b994 <_realloc_r+0x52c>
 100b740:	99bfff04 	addi	r6,r19,-4
 100b744:	01c00904 	movi	r7,36
 100b748:	39804536 	bltu	r7,r6,100b860 <_realloc_r+0x3f8>
 100b74c:	008004c4 	movi	r2,19
 100b750:	9009883a 	mov	r4,r18
 100b754:	880b883a 	mov	r5,r17
 100b758:	11800f2e 	bgeu	r2,r6,100b798 <_realloc_r+0x330>
 100b75c:	90800017 	ldw	r2,0(r18)
 100b760:	89400204 	addi	r5,r17,8
 100b764:	91000204 	addi	r4,r18,8
 100b768:	88800015 	stw	r2,0(r17)
 100b76c:	90c00117 	ldw	r3,4(r18)
 100b770:	008006c4 	movi	r2,27
 100b774:	88c00115 	stw	r3,4(r17)
 100b778:	1180072e 	bgeu	r2,r6,100b798 <_realloc_r+0x330>
 100b77c:	90c00217 	ldw	r3,8(r18)
 100b780:	89400404 	addi	r5,r17,16
 100b784:	91000404 	addi	r4,r18,16
 100b788:	88c00215 	stw	r3,8(r17)
 100b78c:	90800317 	ldw	r2,12(r18)
 100b790:	88800315 	stw	r2,12(r17)
 100b794:	31c09126 	beq	r6,r7,100b9dc <_realloc_r+0x574>
 100b798:	20800017 	ldw	r2,0(r4)
 100b79c:	28800015 	stw	r2,0(r5)
 100b7a0:	20c00117 	ldw	r3,4(r4)
 100b7a4:	28c00115 	stw	r3,4(r5)
 100b7a8:	20800217 	ldw	r2,8(r4)
 100b7ac:	28800215 	stw	r2,8(r5)
 100b7b0:	900b883a 	mov	r5,r18
 100b7b4:	b009883a 	mov	r4,r22
 100b7b8:	10095580 	call	1009558 <_free_r>
 100b7bc:	b009883a 	mov	r4,r22
 100b7c0:	100d9f80 	call	100d9f8 <__malloc_unlock>
 100b7c4:	003f5e06 	br	100b540 <_realloc_r+0xd8>
 100b7c8:	300b883a 	mov	r5,r6
 100b7cc:	dfc00b17 	ldw	ra,44(sp)
 100b7d0:	df000a17 	ldw	fp,40(sp)
 100b7d4:	ddc00917 	ldw	r23,36(sp)
 100b7d8:	dd800817 	ldw	r22,32(sp)
 100b7dc:	dd400717 	ldw	r21,28(sp)
 100b7e0:	dd000617 	ldw	r20,24(sp)
 100b7e4:	dcc00517 	ldw	r19,20(sp)
 100b7e8:	dc800417 	ldw	r18,16(sp)
 100b7ec:	dc400317 	ldw	r17,12(sp)
 100b7f0:	dc000217 	ldw	r16,8(sp)
 100b7f4:	dec00c04 	addi	sp,sp,48
 100b7f8:	1004d441 	jmpi	1004d44 <_malloc_r>
 100b7fc:	38800117 	ldw	r2,4(r7)
 100b800:	e54b883a 	add	r5,fp,r21
 100b804:	31000054 	ori	r4,r6,1
 100b808:	1080004c 	andi	r2,r2,1
 100b80c:	1704b03a 	or	r2,r2,fp
 100b810:	38800115 	stw	r2,4(r7)
 100b814:	29000115 	stw	r4,4(r5)
 100b818:	2987883a 	add	r3,r5,r6
 100b81c:	18800117 	ldw	r2,4(r3)
 100b820:	29400204 	addi	r5,r5,8
 100b824:	b009883a 	mov	r4,r22
 100b828:	10800054 	ori	r2,r2,1
 100b82c:	18800115 	stw	r2,4(r3)
 100b830:	10095580 	call	1009558 <_free_r>
 100b834:	003f3806 	br	100b518 <_realloc_r+0xb0>
 100b838:	000d883a 	mov	r6,zero
 100b83c:	0009883a 	mov	r4,zero
 100b840:	003f5d06 	br	100b5b8 <_realloc_r+0x150>
 100b844:	30c00217 	ldw	r3,8(r6)
 100b848:	30800317 	ldw	r2,12(r6)
 100b84c:	800f883a 	mov	r7,r16
 100b850:	84000204 	addi	r16,r16,8
 100b854:	10c00215 	stw	r3,8(r2)
 100b858:	18800315 	stw	r2,12(r3)
 100b85c:	003f2306 	br	100b4ec <_realloc_r+0x84>
 100b860:	8809883a 	mov	r4,r17
 100b864:	900b883a 	mov	r5,r18
 100b868:	100a2640 	call	100a264 <memmove>
 100b86c:	003fd006 	br	100b7b0 <_realloc_r+0x348>
 100b870:	30800117 	ldw	r2,4(r6)
 100b874:	e0c00404 	addi	r3,fp,16
 100b878:	1108703a 	and	r4,r2,r4
 100b87c:	9905883a 	add	r2,r19,r4
 100b880:	10ff4d16 	blt	r2,r3,100b5b8 <_realloc_r+0x150>
 100b884:	1705c83a 	sub	r2,r2,fp
 100b888:	870b883a 	add	r5,r16,fp
 100b88c:	10800054 	ori	r2,r2,1
 100b890:	28800115 	stw	r2,4(r5)
 100b894:	80c00117 	ldw	r3,4(r16)
 100b898:	00804074 	movhi	r2,257
 100b89c:	10887c04 	addi	r2,r2,8688
 100b8a0:	b009883a 	mov	r4,r22
 100b8a4:	18c0004c 	andi	r3,r3,1
 100b8a8:	e0c6b03a 	or	r3,fp,r3
 100b8ac:	11400215 	stw	r5,8(r2)
 100b8b0:	80c00115 	stw	r3,4(r16)
 100b8b4:	100d9f80 	call	100d9f8 <__malloc_unlock>
 100b8b8:	84400204 	addi	r17,r16,8
 100b8bc:	003f2006 	br	100b540 <_realloc_r+0xd8>
 100b8c0:	98a9883a 	add	r20,r19,r2
 100b8c4:	2509883a 	add	r4,r4,r20
 100b8c8:	e0800404 	addi	r2,fp,16
 100b8cc:	d9000115 	stw	r4,4(sp)
 100b8d0:	20bf7016 	blt	r4,r2,100b694 <_realloc_r+0x22c>
 100b8d4:	b8c00317 	ldw	r3,12(r23)
 100b8d8:	b8800217 	ldw	r2,8(r23)
 100b8dc:	99bfff04 	addi	r6,r19,-4
 100b8e0:	01400904 	movi	r5,36
 100b8e4:	18800215 	stw	r2,8(r3)
 100b8e8:	10c00315 	stw	r3,12(r2)
 100b8ec:	bc400204 	addi	r17,r23,8
 100b8f0:	29804136 	bltu	r5,r6,100b9f8 <_realloc_r+0x590>
 100b8f4:	008004c4 	movi	r2,19
 100b8f8:	9009883a 	mov	r4,r18
 100b8fc:	880f883a 	mov	r7,r17
 100b900:	11800f2e 	bgeu	r2,r6,100b940 <_realloc_r+0x4d8>
 100b904:	90800017 	ldw	r2,0(r18)
 100b908:	b9c00404 	addi	r7,r23,16
 100b90c:	91000204 	addi	r4,r18,8
 100b910:	b8800215 	stw	r2,8(r23)
 100b914:	90c00117 	ldw	r3,4(r18)
 100b918:	008006c4 	movi	r2,27
 100b91c:	b8c00315 	stw	r3,12(r23)
 100b920:	1180072e 	bgeu	r2,r6,100b940 <_realloc_r+0x4d8>
 100b924:	90c00217 	ldw	r3,8(r18)
 100b928:	b9c00604 	addi	r7,r23,24
 100b92c:	91000404 	addi	r4,r18,16
 100b930:	b8c00415 	stw	r3,16(r23)
 100b934:	90800317 	ldw	r2,12(r18)
 100b938:	b8800515 	stw	r2,20(r23)
 100b93c:	31404026 	beq	r6,r5,100ba40 <_realloc_r+0x5d8>
 100b940:	20800017 	ldw	r2,0(r4)
 100b944:	38800015 	stw	r2,0(r7)
 100b948:	20c00117 	ldw	r3,4(r4)
 100b94c:	38c00115 	stw	r3,4(r7)
 100b950:	20800217 	ldw	r2,8(r4)
 100b954:	38800215 	stw	r2,8(r7)
 100b958:	d8c00117 	ldw	r3,4(sp)
 100b95c:	bf0b883a 	add	r5,r23,fp
 100b960:	b009883a 	mov	r4,r22
 100b964:	1f05c83a 	sub	r2,r3,fp
 100b968:	10800054 	ori	r2,r2,1
 100b96c:	28800115 	stw	r2,4(r5)
 100b970:	b8c00117 	ldw	r3,4(r23)
 100b974:	00804074 	movhi	r2,257
 100b978:	10887c04 	addi	r2,r2,8688
 100b97c:	11400215 	stw	r5,8(r2)
 100b980:	18c0004c 	andi	r3,r3,1
 100b984:	e0c6b03a 	or	r3,fp,r3
 100b988:	b8c00115 	stw	r3,4(r23)
 100b98c:	100d9f80 	call	100d9f8 <__malloc_unlock>
 100b990:	003eeb06 	br	100b540 <_realloc_r+0xd8>
 100b994:	20800117 	ldw	r2,4(r4)
 100b998:	00ffff04 	movi	r3,-4
 100b99c:	800f883a 	mov	r7,r16
 100b9a0:	10c4703a 	and	r2,r2,r3
 100b9a4:	98a9883a 	add	r20,r19,r2
 100b9a8:	84000204 	addi	r16,r16,8
 100b9ac:	003ecf06 	br	100b4ec <_realloc_r+0x84>
 100b9b0:	900b883a 	mov	r5,r18
 100b9b4:	8009883a 	mov	r4,r16
 100b9b8:	100a2640 	call	100a264 <memmove>
 100b9bc:	dd000017 	ldw	r20,0(sp)
 100b9c0:	b80f883a 	mov	r7,r23
 100b9c4:	003ec906 	br	100b4ec <_realloc_r+0x84>
 100b9c8:	900b883a 	mov	r5,r18
 100b9cc:	8009883a 	mov	r4,r16
 100b9d0:	100a2640 	call	100a264 <memmove>
 100b9d4:	b80f883a 	mov	r7,r23
 100b9d8:	003ec406 	br	100b4ec <_realloc_r+0x84>
 100b9dc:	90c00417 	ldw	r3,16(r18)
 100b9e0:	89400604 	addi	r5,r17,24
 100b9e4:	91000604 	addi	r4,r18,24
 100b9e8:	88c00415 	stw	r3,16(r17)
 100b9ec:	90800517 	ldw	r2,20(r18)
 100b9f0:	88800515 	stw	r2,20(r17)
 100b9f4:	003f6806 	br	100b798 <_realloc_r+0x330>
 100b9f8:	900b883a 	mov	r5,r18
 100b9fc:	8809883a 	mov	r4,r17
 100ba00:	100a2640 	call	100a264 <memmove>
 100ba04:	003fd406 	br	100b958 <_realloc_r+0x4f0>
 100ba08:	90c00417 	ldw	r3,16(r18)
 100ba0c:	91000604 	addi	r4,r18,24
 100ba10:	ba000804 	addi	r8,r23,32
 100ba14:	b8c00615 	stw	r3,24(r23)
 100ba18:	90800517 	ldw	r2,20(r18)
 100ba1c:	b8800715 	stw	r2,28(r23)
 100ba20:	003f1206 	br	100b66c <_realloc_r+0x204>
 100ba24:	90c00417 	ldw	r3,16(r18)
 100ba28:	91000604 	addi	r4,r18,24
 100ba2c:	ba000804 	addi	r8,r23,32
 100ba30:	b8c00615 	stw	r3,24(r23)
 100ba34:	90800517 	ldw	r2,20(r18)
 100ba38:	b8800715 	stw	r2,28(r23)
 100ba3c:	003f3206 	br	100b708 <_realloc_r+0x2a0>
 100ba40:	90c00417 	ldw	r3,16(r18)
 100ba44:	91000604 	addi	r4,r18,24
 100ba48:	b9c00804 	addi	r7,r23,32
 100ba4c:	b8c00615 	stw	r3,24(r23)
 100ba50:	90800517 	ldw	r2,20(r18)
 100ba54:	b8800715 	stw	r2,28(r23)
 100ba58:	003fb906 	br	100b940 <_realloc_r+0x4d8>

0100ba5c <__isinfd>:
 100ba5c:	200d883a 	mov	r6,r4
 100ba60:	0109c83a 	sub	r4,zero,r4
 100ba64:	2188b03a 	or	r4,r4,r6
 100ba68:	2008d7fa 	srli	r4,r4,31
 100ba6c:	00a00034 	movhi	r2,32768
 100ba70:	10bfffc4 	addi	r2,r2,-1
 100ba74:	1144703a 	and	r2,r2,r5
 100ba78:	2088b03a 	or	r4,r4,r2
 100ba7c:	009ffc34 	movhi	r2,32752
 100ba80:	1105c83a 	sub	r2,r2,r4
 100ba84:	0087c83a 	sub	r3,zero,r2
 100ba88:	10c4b03a 	or	r2,r2,r3
 100ba8c:	1004d7fa 	srli	r2,r2,31
 100ba90:	00c00044 	movi	r3,1
 100ba94:	1885c83a 	sub	r2,r3,r2
 100ba98:	f800283a 	ret

0100ba9c <__isnand>:
 100ba9c:	200d883a 	mov	r6,r4
 100baa0:	0109c83a 	sub	r4,zero,r4
 100baa4:	2188b03a 	or	r4,r4,r6
 100baa8:	2008d7fa 	srli	r4,r4,31
 100baac:	00a00034 	movhi	r2,32768
 100bab0:	10bfffc4 	addi	r2,r2,-1
 100bab4:	1144703a 	and	r2,r2,r5
 100bab8:	2088b03a 	or	r4,r4,r2
 100babc:	009ffc34 	movhi	r2,32752
 100bac0:	1105c83a 	sub	r2,r2,r4
 100bac4:	1004d7fa 	srli	r2,r2,31
 100bac8:	f800283a 	ret

0100bacc <__sclose>:
 100bacc:	2940038f 	ldh	r5,14(r5)
 100bad0:	100be141 	jmpi	100be14 <_close_r>

0100bad4 <__sseek>:
 100bad4:	defffe04 	addi	sp,sp,-8
 100bad8:	dc000015 	stw	r16,0(sp)
 100badc:	2821883a 	mov	r16,r5
 100bae0:	2940038f 	ldh	r5,14(r5)
 100bae4:	dfc00115 	stw	ra,4(sp)
 100bae8:	100c08c0 	call	100c08c <_lseek_r>
 100baec:	1007883a 	mov	r3,r2
 100baf0:	00bfffc4 	movi	r2,-1
 100baf4:	18800926 	beq	r3,r2,100bb1c <__sseek+0x48>
 100baf8:	8080030b 	ldhu	r2,12(r16)
 100bafc:	80c01415 	stw	r3,80(r16)
 100bb00:	10840014 	ori	r2,r2,4096
 100bb04:	8080030d 	sth	r2,12(r16)
 100bb08:	1805883a 	mov	r2,r3
 100bb0c:	dfc00117 	ldw	ra,4(sp)
 100bb10:	dc000017 	ldw	r16,0(sp)
 100bb14:	dec00204 	addi	sp,sp,8
 100bb18:	f800283a 	ret
 100bb1c:	8080030b 	ldhu	r2,12(r16)
 100bb20:	10bbffcc 	andi	r2,r2,61439
 100bb24:	8080030d 	sth	r2,12(r16)
 100bb28:	1805883a 	mov	r2,r3
 100bb2c:	dfc00117 	ldw	ra,4(sp)
 100bb30:	dc000017 	ldw	r16,0(sp)
 100bb34:	dec00204 	addi	sp,sp,8
 100bb38:	f800283a 	ret

0100bb3c <__swrite>:
 100bb3c:	2880030b 	ldhu	r2,12(r5)
 100bb40:	defffb04 	addi	sp,sp,-20
 100bb44:	dcc00315 	stw	r19,12(sp)
 100bb48:	1080400c 	andi	r2,r2,256
 100bb4c:	dc800215 	stw	r18,8(sp)
 100bb50:	dc400115 	stw	r17,4(sp)
 100bb54:	dc000015 	stw	r16,0(sp)
 100bb58:	3027883a 	mov	r19,r6
 100bb5c:	3825883a 	mov	r18,r7
 100bb60:	dfc00415 	stw	ra,16(sp)
 100bb64:	2821883a 	mov	r16,r5
 100bb68:	000d883a 	mov	r6,zero
 100bb6c:	01c00084 	movi	r7,2
 100bb70:	2023883a 	mov	r17,r4
 100bb74:	10000226 	beq	r2,zero,100bb80 <__swrite+0x44>
 100bb78:	2940038f 	ldh	r5,14(r5)
 100bb7c:	100c08c0 	call	100c08c <_lseek_r>
 100bb80:	8080030b 	ldhu	r2,12(r16)
 100bb84:	8140038f 	ldh	r5,14(r16)
 100bb88:	8809883a 	mov	r4,r17
 100bb8c:	10bbffcc 	andi	r2,r2,61439
 100bb90:	980d883a 	mov	r6,r19
 100bb94:	900f883a 	mov	r7,r18
 100bb98:	8080030d 	sth	r2,12(r16)
 100bb9c:	dfc00417 	ldw	ra,16(sp)
 100bba0:	dcc00317 	ldw	r19,12(sp)
 100bba4:	dc800217 	ldw	r18,8(sp)
 100bba8:	dc400117 	ldw	r17,4(sp)
 100bbac:	dc000017 	ldw	r16,0(sp)
 100bbb0:	dec00504 	addi	sp,sp,20
 100bbb4:	100bcd41 	jmpi	100bcd4 <_write_r>

0100bbb8 <__sread>:
 100bbb8:	defffe04 	addi	sp,sp,-8
 100bbbc:	dc000015 	stw	r16,0(sp)
 100bbc0:	2821883a 	mov	r16,r5
 100bbc4:	2940038f 	ldh	r5,14(r5)
 100bbc8:	dfc00115 	stw	ra,4(sp)
 100bbcc:	100c1040 	call	100c104 <_read_r>
 100bbd0:	1007883a 	mov	r3,r2
 100bbd4:	10000816 	blt	r2,zero,100bbf8 <__sread+0x40>
 100bbd8:	80801417 	ldw	r2,80(r16)
 100bbdc:	10c5883a 	add	r2,r2,r3
 100bbe0:	80801415 	stw	r2,80(r16)
 100bbe4:	1805883a 	mov	r2,r3
 100bbe8:	dfc00117 	ldw	ra,4(sp)
 100bbec:	dc000017 	ldw	r16,0(sp)
 100bbf0:	dec00204 	addi	sp,sp,8
 100bbf4:	f800283a 	ret
 100bbf8:	8080030b 	ldhu	r2,12(r16)
 100bbfc:	10bbffcc 	andi	r2,r2,61439
 100bc00:	8080030d 	sth	r2,12(r16)
 100bc04:	1805883a 	mov	r2,r3
 100bc08:	dfc00117 	ldw	ra,4(sp)
 100bc0c:	dc000017 	ldw	r16,0(sp)
 100bc10:	dec00204 	addi	sp,sp,8
 100bc14:	f800283a 	ret

0100bc18 <strcmp>:
 100bc18:	2144b03a 	or	r2,r4,r5
 100bc1c:	108000cc 	andi	r2,r2,3
 100bc20:	10001d1e 	bne	r2,zero,100bc98 <strcmp+0x80>
 100bc24:	200f883a 	mov	r7,r4
 100bc28:	28800017 	ldw	r2,0(r5)
 100bc2c:	21000017 	ldw	r4,0(r4)
 100bc30:	280d883a 	mov	r6,r5
 100bc34:	2080161e 	bne	r4,r2,100bc90 <strcmp+0x78>
 100bc38:	023fbff4 	movhi	r8,65279
 100bc3c:	423fbfc4 	addi	r8,r8,-257
 100bc40:	2207883a 	add	r3,r4,r8
 100bc44:	01602074 	movhi	r5,32897
 100bc48:	29602004 	addi	r5,r5,-32640
 100bc4c:	1946703a 	and	r3,r3,r5
 100bc50:	0104303a 	nor	r2,zero,r4
 100bc54:	10c4703a 	and	r2,r2,r3
 100bc58:	10001c1e 	bne	r2,zero,100bccc <strcmp+0xb4>
 100bc5c:	4013883a 	mov	r9,r8
 100bc60:	2811883a 	mov	r8,r5
 100bc64:	00000106 	br	100bc6c <strcmp+0x54>
 100bc68:	1800181e 	bne	r3,zero,100bccc <strcmp+0xb4>
 100bc6c:	39c00104 	addi	r7,r7,4
 100bc70:	39000017 	ldw	r4,0(r7)
 100bc74:	31800104 	addi	r6,r6,4
 100bc78:	31400017 	ldw	r5,0(r6)
 100bc7c:	2245883a 	add	r2,r4,r9
 100bc80:	1204703a 	and	r2,r2,r8
 100bc84:	0106303a 	nor	r3,zero,r4
 100bc88:	1886703a 	and	r3,r3,r2
 100bc8c:	217ff626 	beq	r4,r5,100bc68 <strcmp+0x50>
 100bc90:	3809883a 	mov	r4,r7
 100bc94:	300b883a 	mov	r5,r6
 100bc98:	20c00007 	ldb	r3,0(r4)
 100bc9c:	1800051e 	bne	r3,zero,100bcb4 <strcmp+0x9c>
 100bca0:	00000606 	br	100bcbc <strcmp+0xa4>
 100bca4:	21000044 	addi	r4,r4,1
 100bca8:	20c00007 	ldb	r3,0(r4)
 100bcac:	29400044 	addi	r5,r5,1
 100bcb0:	18000226 	beq	r3,zero,100bcbc <strcmp+0xa4>
 100bcb4:	28800007 	ldb	r2,0(r5)
 100bcb8:	18bffa26 	beq	r3,r2,100bca4 <strcmp+0x8c>
 100bcbc:	20c00003 	ldbu	r3,0(r4)
 100bcc0:	28800003 	ldbu	r2,0(r5)
 100bcc4:	1885c83a 	sub	r2,r3,r2
 100bcc8:	f800283a 	ret
 100bccc:	0005883a 	mov	r2,zero
 100bcd0:	f800283a 	ret

0100bcd4 <_write_r>:
 100bcd4:	defffd04 	addi	sp,sp,-12
 100bcd8:	dc000015 	stw	r16,0(sp)
 100bcdc:	04004074 	movhi	r16,257
 100bce0:	8415ed04 	addi	r16,r16,22452
 100bce4:	dc400115 	stw	r17,4(sp)
 100bce8:	80000015 	stw	zero,0(r16)
 100bcec:	2023883a 	mov	r17,r4
 100bcf0:	2809883a 	mov	r4,r5
 100bcf4:	300b883a 	mov	r5,r6
 100bcf8:	380d883a 	mov	r6,r7
 100bcfc:	dfc00215 	stw	ra,8(sp)
 100bd00:	100dd000 	call	100dd00 <write>
 100bd04:	1007883a 	mov	r3,r2
 100bd08:	00bfffc4 	movi	r2,-1
 100bd0c:	18800626 	beq	r3,r2,100bd28 <_write_r+0x54>
 100bd10:	1805883a 	mov	r2,r3
 100bd14:	dfc00217 	ldw	ra,8(sp)
 100bd18:	dc400117 	ldw	r17,4(sp)
 100bd1c:	dc000017 	ldw	r16,0(sp)
 100bd20:	dec00304 	addi	sp,sp,12
 100bd24:	f800283a 	ret
 100bd28:	80800017 	ldw	r2,0(r16)
 100bd2c:	103ff826 	beq	r2,zero,100bd10 <_write_r+0x3c>
 100bd30:	88800015 	stw	r2,0(r17)
 100bd34:	1805883a 	mov	r2,r3
 100bd38:	dfc00217 	ldw	ra,8(sp)
 100bd3c:	dc400117 	ldw	r17,4(sp)
 100bd40:	dc000017 	ldw	r16,0(sp)
 100bd44:	dec00304 	addi	sp,sp,12
 100bd48:	f800283a 	ret

0100bd4c <_calloc_r>:
 100bd4c:	defffe04 	addi	sp,sp,-8
 100bd50:	dc400015 	stw	r17,0(sp)
 100bd54:	2023883a 	mov	r17,r4
 100bd58:	2809883a 	mov	r4,r5
 100bd5c:	300b883a 	mov	r5,r6
 100bd60:	dfc00115 	stw	ra,4(sp)
 100bd64:	100435c0 	call	100435c <__mulsi3>
 100bd68:	100b883a 	mov	r5,r2
 100bd6c:	8809883a 	mov	r4,r17
 100bd70:	1004d440 	call	1004d44 <_malloc_r>
 100bd74:	1023883a 	mov	r17,r2
 100bd78:	01c00904 	movi	r7,36
 100bd7c:	10000d26 	beq	r2,zero,100bdb4 <_calloc_r+0x68>
 100bd80:	10ffff17 	ldw	r3,-4(r2)
 100bd84:	1009883a 	mov	r4,r2
 100bd88:	00bfff04 	movi	r2,-4
 100bd8c:	1886703a 	and	r3,r3,r2
 100bd90:	1887883a 	add	r3,r3,r2
 100bd94:	180d883a 	mov	r6,r3
 100bd98:	000b883a 	mov	r5,zero
 100bd9c:	38c01736 	bltu	r7,r3,100bdfc <_calloc_r+0xb0>
 100bda0:	008004c4 	movi	r2,19
 100bda4:	10c00836 	bltu	r2,r3,100bdc8 <_calloc_r+0x7c>
 100bda8:	20000215 	stw	zero,8(r4)
 100bdac:	20000015 	stw	zero,0(r4)
 100bdb0:	20000115 	stw	zero,4(r4)
 100bdb4:	8805883a 	mov	r2,r17
 100bdb8:	dfc00117 	ldw	ra,4(sp)
 100bdbc:	dc400017 	ldw	r17,0(sp)
 100bdc0:	dec00204 	addi	sp,sp,8
 100bdc4:	f800283a 	ret
 100bdc8:	008006c4 	movi	r2,27
 100bdcc:	88000015 	stw	zero,0(r17)
 100bdd0:	88000115 	stw	zero,4(r17)
 100bdd4:	89000204 	addi	r4,r17,8
 100bdd8:	10fff32e 	bgeu	r2,r3,100bda8 <_calloc_r+0x5c>
 100bddc:	88000215 	stw	zero,8(r17)
 100bde0:	88000315 	stw	zero,12(r17)
 100bde4:	89000404 	addi	r4,r17,16
 100bde8:	19ffef1e 	bne	r3,r7,100bda8 <_calloc_r+0x5c>
 100bdec:	89000604 	addi	r4,r17,24
 100bdf0:	88000415 	stw	zero,16(r17)
 100bdf4:	88000515 	stw	zero,20(r17)
 100bdf8:	003feb06 	br	100bda8 <_calloc_r+0x5c>
 100bdfc:	100a3440 	call	100a344 <memset>
 100be00:	8805883a 	mov	r2,r17
 100be04:	dfc00117 	ldw	ra,4(sp)
 100be08:	dc400017 	ldw	r17,0(sp)
 100be0c:	dec00204 	addi	sp,sp,8
 100be10:	f800283a 	ret

0100be14 <_close_r>:
 100be14:	defffd04 	addi	sp,sp,-12
 100be18:	dc000015 	stw	r16,0(sp)
 100be1c:	04004074 	movhi	r16,257
 100be20:	8415ed04 	addi	r16,r16,22452
 100be24:	dc400115 	stw	r17,4(sp)
 100be28:	80000015 	stw	zero,0(r16)
 100be2c:	2023883a 	mov	r17,r4
 100be30:	2809883a 	mov	r4,r5
 100be34:	dfc00215 	stw	ra,8(sp)
 100be38:	100d3440 	call	100d344 <close>
 100be3c:	1007883a 	mov	r3,r2
 100be40:	00bfffc4 	movi	r2,-1
 100be44:	18800626 	beq	r3,r2,100be60 <_close_r+0x4c>
 100be48:	1805883a 	mov	r2,r3
 100be4c:	dfc00217 	ldw	ra,8(sp)
 100be50:	dc400117 	ldw	r17,4(sp)
 100be54:	dc000017 	ldw	r16,0(sp)
 100be58:	dec00304 	addi	sp,sp,12
 100be5c:	f800283a 	ret
 100be60:	80800017 	ldw	r2,0(r16)
 100be64:	103ff826 	beq	r2,zero,100be48 <_close_r+0x34>
 100be68:	88800015 	stw	r2,0(r17)
 100be6c:	1805883a 	mov	r2,r3
 100be70:	dfc00217 	ldw	ra,8(sp)
 100be74:	dc400117 	ldw	r17,4(sp)
 100be78:	dc000017 	ldw	r16,0(sp)
 100be7c:	dec00304 	addi	sp,sp,12
 100be80:	f800283a 	ret

0100be84 <_fclose_r>:
 100be84:	defffc04 	addi	sp,sp,-16
 100be88:	dc400115 	stw	r17,4(sp)
 100be8c:	dc000015 	stw	r16,0(sp)
 100be90:	dfc00315 	stw	ra,12(sp)
 100be94:	dc800215 	stw	r18,8(sp)
 100be98:	2821883a 	mov	r16,r5
 100be9c:	2023883a 	mov	r17,r4
 100bea0:	28002926 	beq	r5,zero,100bf48 <_fclose_r+0xc4>
 100bea4:	10091900 	call	1009190 <__sfp_lock_acquire>
 100bea8:	88000226 	beq	r17,zero,100beb4 <_fclose_r+0x30>
 100beac:	88800e17 	ldw	r2,56(r17)
 100beb0:	10002d26 	beq	r2,zero,100bf68 <_fclose_r+0xe4>
 100beb4:	8080030f 	ldh	r2,12(r16)
 100beb8:	10002226 	beq	r2,zero,100bf44 <_fclose_r+0xc0>
 100bebc:	8809883a 	mov	r4,r17
 100bec0:	800b883a 	mov	r5,r16
 100bec4:	1008f080 	call	1008f08 <_fflush_r>
 100bec8:	1025883a 	mov	r18,r2
 100becc:	80800b17 	ldw	r2,44(r16)
 100bed0:	10000426 	beq	r2,zero,100bee4 <_fclose_r+0x60>
 100bed4:	81400717 	ldw	r5,28(r16)
 100bed8:	8809883a 	mov	r4,r17
 100bedc:	103ee83a 	callr	r2
 100bee0:	10002a16 	blt	r2,zero,100bf8c <_fclose_r+0x108>
 100bee4:	8080030b 	ldhu	r2,12(r16)
 100bee8:	1080200c 	andi	r2,r2,128
 100beec:	1000231e 	bne	r2,zero,100bf7c <_fclose_r+0xf8>
 100bef0:	81400c17 	ldw	r5,48(r16)
 100bef4:	28000526 	beq	r5,zero,100bf0c <_fclose_r+0x88>
 100bef8:	80801004 	addi	r2,r16,64
 100befc:	28800226 	beq	r5,r2,100bf08 <_fclose_r+0x84>
 100bf00:	8809883a 	mov	r4,r17
 100bf04:	10095580 	call	1009558 <_free_r>
 100bf08:	80000c15 	stw	zero,48(r16)
 100bf0c:	81401117 	ldw	r5,68(r16)
 100bf10:	28000326 	beq	r5,zero,100bf20 <_fclose_r+0x9c>
 100bf14:	8809883a 	mov	r4,r17
 100bf18:	10095580 	call	1009558 <_free_r>
 100bf1c:	80001115 	stw	zero,68(r16)
 100bf20:	8000030d 	sth	zero,12(r16)
 100bf24:	10091940 	call	1009194 <__sfp_lock_release>
 100bf28:	9005883a 	mov	r2,r18
 100bf2c:	dfc00317 	ldw	ra,12(sp)
 100bf30:	dc800217 	ldw	r18,8(sp)
 100bf34:	dc400117 	ldw	r17,4(sp)
 100bf38:	dc000017 	ldw	r16,0(sp)
 100bf3c:	dec00404 	addi	sp,sp,16
 100bf40:	f800283a 	ret
 100bf44:	10091940 	call	1009194 <__sfp_lock_release>
 100bf48:	0025883a 	mov	r18,zero
 100bf4c:	9005883a 	mov	r2,r18
 100bf50:	dfc00317 	ldw	ra,12(sp)
 100bf54:	dc800217 	ldw	r18,8(sp)
 100bf58:	dc400117 	ldw	r17,4(sp)
 100bf5c:	dc000017 	ldw	r16,0(sp)
 100bf60:	dec00404 	addi	sp,sp,16
 100bf64:	f800283a 	ret
 100bf68:	8809883a 	mov	r4,r17
 100bf6c:	10091a00 	call	10091a0 <__sinit>
 100bf70:	8080030f 	ldh	r2,12(r16)
 100bf74:	103fd11e 	bne	r2,zero,100bebc <_fclose_r+0x38>
 100bf78:	003ff206 	br	100bf44 <_fclose_r+0xc0>
 100bf7c:	81400417 	ldw	r5,16(r16)
 100bf80:	8809883a 	mov	r4,r17
 100bf84:	10095580 	call	1009558 <_free_r>
 100bf88:	003fd906 	br	100bef0 <_fclose_r+0x6c>
 100bf8c:	04bfffc4 	movi	r18,-1
 100bf90:	003fd406 	br	100bee4 <_fclose_r+0x60>

0100bf94 <fclose>:
 100bf94:	00804074 	movhi	r2,257
 100bf98:	108f2504 	addi	r2,r2,15508
 100bf9c:	200b883a 	mov	r5,r4
 100bfa0:	11000017 	ldw	r4,0(r2)
 100bfa4:	100be841 	jmpi	100be84 <_fclose_r>

0100bfa8 <_fstat_r>:
 100bfa8:	defffd04 	addi	sp,sp,-12
 100bfac:	dc000015 	stw	r16,0(sp)
 100bfb0:	04004074 	movhi	r16,257
 100bfb4:	8415ed04 	addi	r16,r16,22452
 100bfb8:	dc400115 	stw	r17,4(sp)
 100bfbc:	80000015 	stw	zero,0(r16)
 100bfc0:	2023883a 	mov	r17,r4
 100bfc4:	2809883a 	mov	r4,r5
 100bfc8:	300b883a 	mov	r5,r6
 100bfcc:	dfc00215 	stw	ra,8(sp)
 100bfd0:	100d4d00 	call	100d4d0 <fstat>
 100bfd4:	1007883a 	mov	r3,r2
 100bfd8:	00bfffc4 	movi	r2,-1
 100bfdc:	18800626 	beq	r3,r2,100bff8 <_fstat_r+0x50>
 100bfe0:	1805883a 	mov	r2,r3
 100bfe4:	dfc00217 	ldw	ra,8(sp)
 100bfe8:	dc400117 	ldw	r17,4(sp)
 100bfec:	dc000017 	ldw	r16,0(sp)
 100bff0:	dec00304 	addi	sp,sp,12
 100bff4:	f800283a 	ret
 100bff8:	80800017 	ldw	r2,0(r16)
 100bffc:	103ff826 	beq	r2,zero,100bfe0 <_fstat_r+0x38>
 100c000:	88800015 	stw	r2,0(r17)
 100c004:	1805883a 	mov	r2,r3
 100c008:	dfc00217 	ldw	ra,8(sp)
 100c00c:	dc400117 	ldw	r17,4(sp)
 100c010:	dc000017 	ldw	r16,0(sp)
 100c014:	dec00304 	addi	sp,sp,12
 100c018:	f800283a 	ret

0100c01c <_isatty_r>:
 100c01c:	defffd04 	addi	sp,sp,-12
 100c020:	dc000015 	stw	r16,0(sp)
 100c024:	04004074 	movhi	r16,257
 100c028:	8415ed04 	addi	r16,r16,22452
 100c02c:	dc400115 	stw	r17,4(sp)
 100c030:	80000015 	stw	zero,0(r16)
 100c034:	2023883a 	mov	r17,r4
 100c038:	2809883a 	mov	r4,r5
 100c03c:	dfc00215 	stw	ra,8(sp)
 100c040:	100d6080 	call	100d608 <isatty>
 100c044:	1007883a 	mov	r3,r2
 100c048:	00bfffc4 	movi	r2,-1
 100c04c:	18800626 	beq	r3,r2,100c068 <_isatty_r+0x4c>
 100c050:	1805883a 	mov	r2,r3
 100c054:	dfc00217 	ldw	ra,8(sp)
 100c058:	dc400117 	ldw	r17,4(sp)
 100c05c:	dc000017 	ldw	r16,0(sp)
 100c060:	dec00304 	addi	sp,sp,12
 100c064:	f800283a 	ret
 100c068:	80800017 	ldw	r2,0(r16)
 100c06c:	103ff826 	beq	r2,zero,100c050 <_isatty_r+0x34>
 100c070:	88800015 	stw	r2,0(r17)
 100c074:	1805883a 	mov	r2,r3
 100c078:	dfc00217 	ldw	ra,8(sp)
 100c07c:	dc400117 	ldw	r17,4(sp)
 100c080:	dc000017 	ldw	r16,0(sp)
 100c084:	dec00304 	addi	sp,sp,12
 100c088:	f800283a 	ret

0100c08c <_lseek_r>:
 100c08c:	defffd04 	addi	sp,sp,-12
 100c090:	dc000015 	stw	r16,0(sp)
 100c094:	04004074 	movhi	r16,257
 100c098:	8415ed04 	addi	r16,r16,22452
 100c09c:	dc400115 	stw	r17,4(sp)
 100c0a0:	80000015 	stw	zero,0(r16)
 100c0a4:	2023883a 	mov	r17,r4
 100c0a8:	2809883a 	mov	r4,r5
 100c0ac:	300b883a 	mov	r5,r6
 100c0b0:	380d883a 	mov	r6,r7
 100c0b4:	dfc00215 	stw	ra,8(sp)
 100c0b8:	100d8180 	call	100d818 <lseek>
 100c0bc:	1007883a 	mov	r3,r2
 100c0c0:	00bfffc4 	movi	r2,-1
 100c0c4:	18800626 	beq	r3,r2,100c0e0 <_lseek_r+0x54>
 100c0c8:	1805883a 	mov	r2,r3
 100c0cc:	dfc00217 	ldw	ra,8(sp)
 100c0d0:	dc400117 	ldw	r17,4(sp)
 100c0d4:	dc000017 	ldw	r16,0(sp)
 100c0d8:	dec00304 	addi	sp,sp,12
 100c0dc:	f800283a 	ret
 100c0e0:	80800017 	ldw	r2,0(r16)
 100c0e4:	103ff826 	beq	r2,zero,100c0c8 <_lseek_r+0x3c>
 100c0e8:	88800015 	stw	r2,0(r17)
 100c0ec:	1805883a 	mov	r2,r3
 100c0f0:	dfc00217 	ldw	ra,8(sp)
 100c0f4:	dc400117 	ldw	r17,4(sp)
 100c0f8:	dc000017 	ldw	r16,0(sp)
 100c0fc:	dec00304 	addi	sp,sp,12
 100c100:	f800283a 	ret

0100c104 <_read_r>:
 100c104:	defffd04 	addi	sp,sp,-12
 100c108:	dc000015 	stw	r16,0(sp)
 100c10c:	04004074 	movhi	r16,257
 100c110:	8415ed04 	addi	r16,r16,22452
 100c114:	dc400115 	stw	r17,4(sp)
 100c118:	80000015 	stw	zero,0(r16)
 100c11c:	2023883a 	mov	r17,r4
 100c120:	2809883a 	mov	r4,r5
 100c124:	300b883a 	mov	r5,r6
 100c128:	380d883a 	mov	r6,r7
 100c12c:	dfc00215 	stw	ra,8(sp)
 100c130:	100da180 	call	100da18 <read>
 100c134:	1007883a 	mov	r3,r2
 100c138:	00bfffc4 	movi	r2,-1
 100c13c:	18800626 	beq	r3,r2,100c158 <_read_r+0x54>
 100c140:	1805883a 	mov	r2,r3
 100c144:	dfc00217 	ldw	ra,8(sp)
 100c148:	dc400117 	ldw	r17,4(sp)
 100c14c:	dc000017 	ldw	r16,0(sp)
 100c150:	dec00304 	addi	sp,sp,12
 100c154:	f800283a 	ret
 100c158:	80800017 	ldw	r2,0(r16)
 100c15c:	103ff826 	beq	r2,zero,100c140 <_read_r+0x3c>
 100c160:	88800015 	stw	r2,0(r17)
 100c164:	1805883a 	mov	r2,r3
 100c168:	dfc00217 	ldw	ra,8(sp)
 100c16c:	dc400117 	ldw	r17,4(sp)
 100c170:	dc000017 	ldw	r16,0(sp)
 100c174:	dec00304 	addi	sp,sp,12
 100c178:	f800283a 	ret

0100c17c <__udivdi3>:
 100c17c:	defff104 	addi	sp,sp,-60
 100c180:	0015883a 	mov	r10,zero
 100c184:	2005883a 	mov	r2,r4
 100c188:	3011883a 	mov	r8,r6
 100c18c:	df000d15 	stw	fp,52(sp)
 100c190:	dd400a15 	stw	r21,40(sp)
 100c194:	dcc00815 	stw	r19,32(sp)
 100c198:	dfc00e15 	stw	ra,56(sp)
 100c19c:	ddc00c15 	stw	r23,48(sp)
 100c1a0:	dd800b15 	stw	r22,44(sp)
 100c1a4:	dd000915 	stw	r20,36(sp)
 100c1a8:	dc800715 	stw	r18,28(sp)
 100c1ac:	dc400615 	stw	r17,24(sp)
 100c1b0:	dc000515 	stw	r16,20(sp)
 100c1b4:	da800315 	stw	r10,12(sp)
 100c1b8:	4027883a 	mov	r19,r8
 100c1bc:	1039883a 	mov	fp,r2
 100c1c0:	282b883a 	mov	r21,r5
 100c1c4:	da800415 	stw	r10,16(sp)
 100c1c8:	3800401e 	bne	r7,zero,100c2cc <__udivdi3+0x150>
 100c1cc:	2a006536 	bltu	r5,r8,100c364 <__udivdi3+0x1e8>
 100c1d0:	4000b526 	beq	r8,zero,100c4a8 <__udivdi3+0x32c>
 100c1d4:	00bfffd4 	movui	r2,65535
 100c1d8:	14c0ad36 	bltu	r2,r19,100c490 <__udivdi3+0x314>
 100c1dc:	00803fc4 	movi	r2,255
 100c1e0:	14c15e36 	bltu	r2,r19,100c75c <__udivdi3+0x5e0>
 100c1e4:	000b883a 	mov	r5,zero
 100c1e8:	0005883a 	mov	r2,zero
 100c1ec:	9884d83a 	srl	r2,r19,r2
 100c1f0:	01004074 	movhi	r4,257
 100c1f4:	2107a404 	addi	r4,r4,7824
 100c1f8:	01800804 	movi	r6,32
 100c1fc:	1105883a 	add	r2,r2,r4
 100c200:	10c00003 	ldbu	r3,0(r2)
 100c204:	28c7883a 	add	r3,r5,r3
 100c208:	30e9c83a 	sub	r20,r6,r3
 100c20c:	a0010a1e 	bne	r20,zero,100c638 <__udivdi3+0x4bc>
 100c210:	982ed43a 	srli	r23,r19,16
 100c214:	acebc83a 	sub	r21,r21,r19
 100c218:	9dbfffcc 	andi	r22,r19,65535
 100c21c:	05000044 	movi	r20,1
 100c220:	a809883a 	mov	r4,r21
 100c224:	b80b883a 	mov	r5,r23
 100c228:	100434c0 	call	100434c <__udivsi3>
 100c22c:	100b883a 	mov	r5,r2
 100c230:	b009883a 	mov	r4,r22
 100c234:	1021883a 	mov	r16,r2
 100c238:	100435c0 	call	100435c <__mulsi3>
 100c23c:	a809883a 	mov	r4,r21
 100c240:	b80b883a 	mov	r5,r23
 100c244:	1023883a 	mov	r17,r2
 100c248:	10043540 	call	1004354 <__umodsi3>
 100c24c:	1004943a 	slli	r2,r2,16
 100c250:	e006d43a 	srli	r3,fp,16
 100c254:	10c4b03a 	or	r2,r2,r3
 100c258:	1440042e 	bgeu	r2,r17,100c26c <__udivdi3+0xf0>
 100c25c:	14c5883a 	add	r2,r2,r19
 100c260:	843fffc4 	addi	r16,r16,-1
 100c264:	14c00136 	bltu	r2,r19,100c26c <__udivdi3+0xf0>
 100c268:	14415c36 	bltu	r2,r17,100c7dc <__udivdi3+0x660>
 100c26c:	1463c83a 	sub	r17,r2,r17
 100c270:	8809883a 	mov	r4,r17
 100c274:	b80b883a 	mov	r5,r23
 100c278:	100434c0 	call	100434c <__udivsi3>
 100c27c:	100b883a 	mov	r5,r2
 100c280:	b009883a 	mov	r4,r22
 100c284:	102b883a 	mov	r21,r2
 100c288:	100435c0 	call	100435c <__mulsi3>
 100c28c:	8809883a 	mov	r4,r17
 100c290:	b80b883a 	mov	r5,r23
 100c294:	1025883a 	mov	r18,r2
 100c298:	10043540 	call	1004354 <__umodsi3>
 100c29c:	1004943a 	slli	r2,r2,16
 100c2a0:	e0ffffcc 	andi	r3,fp,65535
 100c2a4:	10c4b03a 	or	r2,r2,r3
 100c2a8:	1480042e 	bgeu	r2,r18,100c2bc <__udivdi3+0x140>
 100c2ac:	9885883a 	add	r2,r19,r2
 100c2b0:	ad7fffc4 	addi	r21,r21,-1
 100c2b4:	14c00136 	bltu	r2,r19,100c2bc <__udivdi3+0x140>
 100c2b8:	14813c36 	bltu	r2,r18,100c7ac <__udivdi3+0x630>
 100c2bc:	8004943a 	slli	r2,r16,16
 100c2c0:	a009883a 	mov	r4,r20
 100c2c4:	a884b03a 	or	r2,r21,r2
 100c2c8:	00001506 	br	100c320 <__udivdi3+0x1a4>
 100c2cc:	380d883a 	mov	r6,r7
 100c2d0:	29c06c36 	bltu	r5,r7,100c484 <__udivdi3+0x308>
 100c2d4:	00bfffd4 	movui	r2,65535
 100c2d8:	11c06436 	bltu	r2,r7,100c46c <__udivdi3+0x2f0>
 100c2dc:	00803fc4 	movi	r2,255
 100c2e0:	11c11836 	bltu	r2,r7,100c744 <__udivdi3+0x5c8>
 100c2e4:	000b883a 	mov	r5,zero
 100c2e8:	0005883a 	mov	r2,zero
 100c2ec:	3084d83a 	srl	r2,r6,r2
 100c2f0:	01004074 	movhi	r4,257
 100c2f4:	2107a404 	addi	r4,r4,7824
 100c2f8:	01c00804 	movi	r7,32
 100c2fc:	1105883a 	add	r2,r2,r4
 100c300:	10c00003 	ldbu	r3,0(r2)
 100c304:	28c7883a 	add	r3,r5,r3
 100c308:	38edc83a 	sub	r22,r7,r3
 100c30c:	b000731e 	bne	r22,zero,100c4dc <__udivdi3+0x360>
 100c310:	35400136 	bltu	r6,r21,100c318 <__udivdi3+0x19c>
 100c314:	e4c05b36 	bltu	fp,r19,100c484 <__udivdi3+0x308>
 100c318:	00800044 	movi	r2,1
 100c31c:	0009883a 	mov	r4,zero
 100c320:	d8800315 	stw	r2,12(sp)
 100c324:	d9400317 	ldw	r5,12(sp)
 100c328:	d9000415 	stw	r4,16(sp)
 100c32c:	2007883a 	mov	r3,r4
 100c330:	2805883a 	mov	r2,r5
 100c334:	dfc00e17 	ldw	ra,56(sp)
 100c338:	df000d17 	ldw	fp,52(sp)
 100c33c:	ddc00c17 	ldw	r23,48(sp)
 100c340:	dd800b17 	ldw	r22,44(sp)
 100c344:	dd400a17 	ldw	r21,40(sp)
 100c348:	dd000917 	ldw	r20,36(sp)
 100c34c:	dcc00817 	ldw	r19,32(sp)
 100c350:	dc800717 	ldw	r18,28(sp)
 100c354:	dc400617 	ldw	r17,24(sp)
 100c358:	dc000517 	ldw	r16,20(sp)
 100c35c:	dec00f04 	addi	sp,sp,60
 100c360:	f800283a 	ret
 100c364:	00bfffd4 	movui	r2,65535
 100c368:	12005636 	bltu	r2,r8,100c4c4 <__udivdi3+0x348>
 100c36c:	00803fc4 	movi	r2,255
 100c370:	12010036 	bltu	r2,r8,100c774 <__udivdi3+0x5f8>
 100c374:	000b883a 	mov	r5,zero
 100c378:	0005883a 	mov	r2,zero
 100c37c:	9884d83a 	srl	r2,r19,r2
 100c380:	01004074 	movhi	r4,257
 100c384:	2107a404 	addi	r4,r4,7824
 100c388:	01800804 	movi	r6,32
 100c38c:	1105883a 	add	r2,r2,r4
 100c390:	10c00003 	ldbu	r3,0(r2)
 100c394:	28c7883a 	add	r3,r5,r3
 100c398:	30cbc83a 	sub	r5,r6,r3
 100c39c:	28000626 	beq	r5,zero,100c3b8 <__udivdi3+0x23c>
 100c3a0:	3145c83a 	sub	r2,r6,r5
 100c3a4:	e084d83a 	srl	r2,fp,r2
 100c3a8:	a946983a 	sll	r3,r21,r5
 100c3ac:	e178983a 	sll	fp,fp,r5
 100c3b0:	9966983a 	sll	r19,r19,r5
 100c3b4:	18aab03a 	or	r21,r3,r2
 100c3b8:	982ed43a 	srli	r23,r19,16
 100c3bc:	a809883a 	mov	r4,r21
 100c3c0:	9cbfffcc 	andi	r18,r19,65535
 100c3c4:	b80b883a 	mov	r5,r23
 100c3c8:	100434c0 	call	100434c <__udivsi3>
 100c3cc:	100b883a 	mov	r5,r2
 100c3d0:	9009883a 	mov	r4,r18
 100c3d4:	1021883a 	mov	r16,r2
 100c3d8:	100435c0 	call	100435c <__mulsi3>
 100c3dc:	a809883a 	mov	r4,r21
 100c3e0:	b80b883a 	mov	r5,r23
 100c3e4:	1023883a 	mov	r17,r2
 100c3e8:	10043540 	call	1004354 <__umodsi3>
 100c3ec:	1004943a 	slli	r2,r2,16
 100c3f0:	e006d43a 	srli	r3,fp,16
 100c3f4:	10c4b03a 	or	r2,r2,r3
 100c3f8:	1440042e 	bgeu	r2,r17,100c40c <__udivdi3+0x290>
 100c3fc:	14c5883a 	add	r2,r2,r19
 100c400:	843fffc4 	addi	r16,r16,-1
 100c404:	14c00136 	bltu	r2,r19,100c40c <__udivdi3+0x290>
 100c408:	1440ea36 	bltu	r2,r17,100c7b4 <__udivdi3+0x638>
 100c40c:	1463c83a 	sub	r17,r2,r17
 100c410:	8809883a 	mov	r4,r17
 100c414:	b80b883a 	mov	r5,r23
 100c418:	100434c0 	call	100434c <__udivsi3>
 100c41c:	100b883a 	mov	r5,r2
 100c420:	9009883a 	mov	r4,r18
 100c424:	102b883a 	mov	r21,r2
 100c428:	100435c0 	call	100435c <__mulsi3>
 100c42c:	8809883a 	mov	r4,r17
 100c430:	b80b883a 	mov	r5,r23
 100c434:	1025883a 	mov	r18,r2
 100c438:	10043540 	call	1004354 <__umodsi3>
 100c43c:	1004943a 	slli	r2,r2,16
 100c440:	e0ffffcc 	andi	r3,fp,65535
 100c444:	10c4b03a 	or	r2,r2,r3
 100c448:	1480042e 	bgeu	r2,r18,100c45c <__udivdi3+0x2e0>
 100c44c:	9885883a 	add	r2,r19,r2
 100c450:	ad7fffc4 	addi	r21,r21,-1
 100c454:	14c00136 	bltu	r2,r19,100c45c <__udivdi3+0x2e0>
 100c458:	1480d936 	bltu	r2,r18,100c7c0 <__udivdi3+0x644>
 100c45c:	8004943a 	slli	r2,r16,16
 100c460:	0009883a 	mov	r4,zero
 100c464:	a884b03a 	or	r2,r21,r2
 100c468:	003fad06 	br	100c320 <__udivdi3+0x1a4>
 100c46c:	00804034 	movhi	r2,256
 100c470:	10bfffc4 	addi	r2,r2,-1
 100c474:	11c0b636 	bltu	r2,r7,100c750 <__udivdi3+0x5d4>
 100c478:	01400404 	movi	r5,16
 100c47c:	2805883a 	mov	r2,r5
 100c480:	003f9a06 	br	100c2ec <__udivdi3+0x170>
 100c484:	0005883a 	mov	r2,zero
 100c488:	0009883a 	mov	r4,zero
 100c48c:	003fa406 	br	100c320 <__udivdi3+0x1a4>
 100c490:	00804034 	movhi	r2,256
 100c494:	10bfffc4 	addi	r2,r2,-1
 100c498:	14c0b336 	bltu	r2,r19,100c768 <__udivdi3+0x5ec>
 100c49c:	01400404 	movi	r5,16
 100c4a0:	2805883a 	mov	r2,r5
 100c4a4:	003f5106 	br	100c1ec <__udivdi3+0x70>
 100c4a8:	01000044 	movi	r4,1
 100c4ac:	000b883a 	mov	r5,zero
 100c4b0:	100434c0 	call	100434c <__udivsi3>
 100c4b4:	1027883a 	mov	r19,r2
 100c4b8:	00bfffd4 	movui	r2,65535
 100c4bc:	14fff436 	bltu	r2,r19,100c490 <__udivdi3+0x314>
 100c4c0:	003f4606 	br	100c1dc <__udivdi3+0x60>
 100c4c4:	00804034 	movhi	r2,256
 100c4c8:	10bfffc4 	addi	r2,r2,-1
 100c4cc:	1200ac36 	bltu	r2,r8,100c780 <__udivdi3+0x604>
 100c4d0:	01400404 	movi	r5,16
 100c4d4:	2805883a 	mov	r2,r5
 100c4d8:	003fa806 	br	100c37c <__udivdi3+0x200>
 100c4dc:	3d85c83a 	sub	r2,r7,r22
 100c4e0:	3588983a 	sll	r4,r6,r22
 100c4e4:	9886d83a 	srl	r3,r19,r2
 100c4e8:	a8a2d83a 	srl	r17,r21,r2
 100c4ec:	e084d83a 	srl	r2,fp,r2
 100c4f0:	20eeb03a 	or	r23,r4,r3
 100c4f4:	b824d43a 	srli	r18,r23,16
 100c4f8:	ad86983a 	sll	r3,r21,r22
 100c4fc:	8809883a 	mov	r4,r17
 100c500:	900b883a 	mov	r5,r18
 100c504:	1886b03a 	or	r3,r3,r2
 100c508:	d8c00115 	stw	r3,4(sp)
 100c50c:	bc3fffcc 	andi	r16,r23,65535
 100c510:	100434c0 	call	100434c <__udivsi3>
 100c514:	100b883a 	mov	r5,r2
 100c518:	8009883a 	mov	r4,r16
 100c51c:	1029883a 	mov	r20,r2
 100c520:	100435c0 	call	100435c <__mulsi3>
 100c524:	900b883a 	mov	r5,r18
 100c528:	8809883a 	mov	r4,r17
 100c52c:	102b883a 	mov	r21,r2
 100c530:	10043540 	call	1004354 <__umodsi3>
 100c534:	d9400117 	ldw	r5,4(sp)
 100c538:	1004943a 	slli	r2,r2,16
 100c53c:	9da6983a 	sll	r19,r19,r22
 100c540:	2806d43a 	srli	r3,r5,16
 100c544:	10c4b03a 	or	r2,r2,r3
 100c548:	1540032e 	bgeu	r2,r21,100c558 <__udivdi3+0x3dc>
 100c54c:	15c5883a 	add	r2,r2,r23
 100c550:	a53fffc4 	addi	r20,r20,-1
 100c554:	15c0912e 	bgeu	r2,r23,100c79c <__udivdi3+0x620>
 100c558:	1563c83a 	sub	r17,r2,r21
 100c55c:	8809883a 	mov	r4,r17
 100c560:	900b883a 	mov	r5,r18
 100c564:	100434c0 	call	100434c <__udivsi3>
 100c568:	100b883a 	mov	r5,r2
 100c56c:	8009883a 	mov	r4,r16
 100c570:	102b883a 	mov	r21,r2
 100c574:	100435c0 	call	100435c <__mulsi3>
 100c578:	8809883a 	mov	r4,r17
 100c57c:	900b883a 	mov	r5,r18
 100c580:	1021883a 	mov	r16,r2
 100c584:	10043540 	call	1004354 <__umodsi3>
 100c588:	da800117 	ldw	r10,4(sp)
 100c58c:	1004943a 	slli	r2,r2,16
 100c590:	50ffffcc 	andi	r3,r10,65535
 100c594:	10c6b03a 	or	r3,r2,r3
 100c598:	1c00032e 	bgeu	r3,r16,100c5a8 <__udivdi3+0x42c>
 100c59c:	1dc7883a 	add	r3,r3,r23
 100c5a0:	ad7fffc4 	addi	r21,r21,-1
 100c5a4:	1dc0792e 	bgeu	r3,r23,100c78c <__udivdi3+0x610>
 100c5a8:	a004943a 	slli	r2,r20,16
 100c5ac:	982ed43a 	srli	r23,r19,16
 100c5b0:	9cffffcc 	andi	r19,r19,65535
 100c5b4:	a8a4b03a 	or	r18,r21,r2
 100c5b8:	947fffcc 	andi	r17,r18,65535
 100c5bc:	902ad43a 	srli	r21,r18,16
 100c5c0:	8809883a 	mov	r4,r17
 100c5c4:	980b883a 	mov	r5,r19
 100c5c8:	1c21c83a 	sub	r16,r3,r16
 100c5cc:	100435c0 	call	100435c <__mulsi3>
 100c5d0:	8809883a 	mov	r4,r17
 100c5d4:	b80b883a 	mov	r5,r23
 100c5d8:	1029883a 	mov	r20,r2
 100c5dc:	100435c0 	call	100435c <__mulsi3>
 100c5e0:	980b883a 	mov	r5,r19
 100c5e4:	a809883a 	mov	r4,r21
 100c5e8:	1023883a 	mov	r17,r2
 100c5ec:	100435c0 	call	100435c <__mulsi3>
 100c5f0:	a809883a 	mov	r4,r21
 100c5f4:	b80b883a 	mov	r5,r23
 100c5f8:	1027883a 	mov	r19,r2
 100c5fc:	100435c0 	call	100435c <__mulsi3>
 100c600:	1009883a 	mov	r4,r2
 100c604:	a004d43a 	srli	r2,r20,16
 100c608:	8ce3883a 	add	r17,r17,r19
 100c60c:	1447883a 	add	r3,r2,r17
 100c610:	1cc0022e 	bgeu	r3,r19,100c61c <__udivdi3+0x4a0>
 100c614:	00800074 	movhi	r2,1
 100c618:	2089883a 	add	r4,r4,r2
 100c61c:	1804d43a 	srli	r2,r3,16
 100c620:	2085883a 	add	r2,r4,r2
 100c624:	80804436 	bltu	r16,r2,100c738 <__udivdi3+0x5bc>
 100c628:	80803e26 	beq	r16,r2,100c724 <__udivdi3+0x5a8>
 100c62c:	9005883a 	mov	r2,r18
 100c630:	0009883a 	mov	r4,zero
 100c634:	003f3a06 	br	100c320 <__udivdi3+0x1a4>
 100c638:	9d26983a 	sll	r19,r19,r20
 100c63c:	3505c83a 	sub	r2,r6,r20
 100c640:	a8a2d83a 	srl	r17,r21,r2
 100c644:	982ed43a 	srli	r23,r19,16
 100c648:	e084d83a 	srl	r2,fp,r2
 100c64c:	ad06983a 	sll	r3,r21,r20
 100c650:	8809883a 	mov	r4,r17
 100c654:	b80b883a 	mov	r5,r23
 100c658:	1886b03a 	or	r3,r3,r2
 100c65c:	d8c00015 	stw	r3,0(sp)
 100c660:	9dbfffcc 	andi	r22,r19,65535
 100c664:	100434c0 	call	100434c <__udivsi3>
 100c668:	100b883a 	mov	r5,r2
 100c66c:	b009883a 	mov	r4,r22
 100c670:	d8800215 	stw	r2,8(sp)
 100c674:	100435c0 	call	100435c <__mulsi3>
 100c678:	8809883a 	mov	r4,r17
 100c67c:	b80b883a 	mov	r5,r23
 100c680:	102b883a 	mov	r21,r2
 100c684:	10043540 	call	1004354 <__umodsi3>
 100c688:	d9000017 	ldw	r4,0(sp)
 100c68c:	1004943a 	slli	r2,r2,16
 100c690:	2006d43a 	srli	r3,r4,16
 100c694:	10c4b03a 	or	r2,r2,r3
 100c698:	1540052e 	bgeu	r2,r21,100c6b0 <__udivdi3+0x534>
 100c69c:	d9400217 	ldw	r5,8(sp)
 100c6a0:	14c5883a 	add	r2,r2,r19
 100c6a4:	297fffc4 	addi	r5,r5,-1
 100c6a8:	d9400215 	stw	r5,8(sp)
 100c6ac:	14c0462e 	bgeu	r2,r19,100c7c8 <__udivdi3+0x64c>
 100c6b0:	1563c83a 	sub	r17,r2,r21
 100c6b4:	8809883a 	mov	r4,r17
 100c6b8:	b80b883a 	mov	r5,r23
 100c6bc:	100434c0 	call	100434c <__udivsi3>
 100c6c0:	100b883a 	mov	r5,r2
 100c6c4:	b009883a 	mov	r4,r22
 100c6c8:	1025883a 	mov	r18,r2
 100c6cc:	100435c0 	call	100435c <__mulsi3>
 100c6d0:	8809883a 	mov	r4,r17
 100c6d4:	b80b883a 	mov	r5,r23
 100c6d8:	1021883a 	mov	r16,r2
 100c6dc:	10043540 	call	1004354 <__umodsi3>
 100c6e0:	da800017 	ldw	r10,0(sp)
 100c6e4:	1004943a 	slli	r2,r2,16
 100c6e8:	50ffffcc 	andi	r3,r10,65535
 100c6ec:	10c6b03a 	or	r3,r2,r3
 100c6f0:	1c00062e 	bgeu	r3,r16,100c70c <__udivdi3+0x590>
 100c6f4:	1cc7883a 	add	r3,r3,r19
 100c6f8:	94bfffc4 	addi	r18,r18,-1
 100c6fc:	1cc00336 	bltu	r3,r19,100c70c <__udivdi3+0x590>
 100c700:	1c00022e 	bgeu	r3,r16,100c70c <__udivdi3+0x590>
 100c704:	94bfffc4 	addi	r18,r18,-1
 100c708:	1cc7883a 	add	r3,r3,r19
 100c70c:	d9000217 	ldw	r4,8(sp)
 100c710:	e538983a 	sll	fp,fp,r20
 100c714:	1c2bc83a 	sub	r21,r3,r16
 100c718:	2004943a 	slli	r2,r4,16
 100c71c:	90a8b03a 	or	r20,r18,r2
 100c720:	003ebf06 	br	100c220 <__udivdi3+0xa4>
 100c724:	1804943a 	slli	r2,r3,16
 100c728:	e588983a 	sll	r4,fp,r22
 100c72c:	a0ffffcc 	andi	r3,r20,65535
 100c730:	10c5883a 	add	r2,r2,r3
 100c734:	20bfbd2e 	bgeu	r4,r2,100c62c <__udivdi3+0x4b0>
 100c738:	90bfffc4 	addi	r2,r18,-1
 100c73c:	0009883a 	mov	r4,zero
 100c740:	003ef706 	br	100c320 <__udivdi3+0x1a4>
 100c744:	01400204 	movi	r5,8
 100c748:	2805883a 	mov	r2,r5
 100c74c:	003ee706 	br	100c2ec <__udivdi3+0x170>
 100c750:	01400604 	movi	r5,24
 100c754:	2805883a 	mov	r2,r5
 100c758:	003ee406 	br	100c2ec <__udivdi3+0x170>
 100c75c:	01400204 	movi	r5,8
 100c760:	2805883a 	mov	r2,r5
 100c764:	003ea106 	br	100c1ec <__udivdi3+0x70>
 100c768:	01400604 	movi	r5,24
 100c76c:	2805883a 	mov	r2,r5
 100c770:	003e9e06 	br	100c1ec <__udivdi3+0x70>
 100c774:	01400204 	movi	r5,8
 100c778:	2805883a 	mov	r2,r5
 100c77c:	003eff06 	br	100c37c <__udivdi3+0x200>
 100c780:	01400604 	movi	r5,24
 100c784:	2805883a 	mov	r2,r5
 100c788:	003efc06 	br	100c37c <__udivdi3+0x200>
 100c78c:	1c3f862e 	bgeu	r3,r16,100c5a8 <__udivdi3+0x42c>
 100c790:	1dc7883a 	add	r3,r3,r23
 100c794:	ad7fffc4 	addi	r21,r21,-1
 100c798:	003f8306 	br	100c5a8 <__udivdi3+0x42c>
 100c79c:	157f6e2e 	bgeu	r2,r21,100c558 <__udivdi3+0x3dc>
 100c7a0:	a53fffc4 	addi	r20,r20,-1
 100c7a4:	15c5883a 	add	r2,r2,r23
 100c7a8:	003f6b06 	br	100c558 <__udivdi3+0x3dc>
 100c7ac:	ad7fffc4 	addi	r21,r21,-1
 100c7b0:	003ec206 	br	100c2bc <__udivdi3+0x140>
 100c7b4:	843fffc4 	addi	r16,r16,-1
 100c7b8:	14c5883a 	add	r2,r2,r19
 100c7bc:	003f1306 	br	100c40c <__udivdi3+0x290>
 100c7c0:	ad7fffc4 	addi	r21,r21,-1
 100c7c4:	003f2506 	br	100c45c <__udivdi3+0x2e0>
 100c7c8:	157fb92e 	bgeu	r2,r21,100c6b0 <__udivdi3+0x534>
 100c7cc:	297fffc4 	addi	r5,r5,-1
 100c7d0:	14c5883a 	add	r2,r2,r19
 100c7d4:	d9400215 	stw	r5,8(sp)
 100c7d8:	003fb506 	br	100c6b0 <__udivdi3+0x534>
 100c7dc:	843fffc4 	addi	r16,r16,-1
 100c7e0:	14c5883a 	add	r2,r2,r19
 100c7e4:	003ea106 	br	100c26c <__udivdi3+0xf0>

0100c7e8 <__umoddi3>:
 100c7e8:	defff004 	addi	sp,sp,-64
 100c7ec:	3011883a 	mov	r8,r6
 100c7f0:	000d883a 	mov	r6,zero
 100c7f4:	dd400b15 	stw	r21,44(sp)
 100c7f8:	dcc00915 	stw	r19,36(sp)
 100c7fc:	dc000615 	stw	r16,24(sp)
 100c800:	dfc00f15 	stw	ra,60(sp)
 100c804:	df000e15 	stw	fp,56(sp)
 100c808:	ddc00d15 	stw	r23,52(sp)
 100c80c:	dd800c15 	stw	r22,48(sp)
 100c810:	dd000a15 	stw	r20,40(sp)
 100c814:	dc800815 	stw	r18,32(sp)
 100c818:	dc400715 	stw	r17,28(sp)
 100c81c:	2817883a 	mov	r11,r5
 100c820:	d9800415 	stw	r6,16(sp)
 100c824:	4027883a 	mov	r19,r8
 100c828:	d9800515 	stw	r6,20(sp)
 100c82c:	2021883a 	mov	r16,r4
 100c830:	282b883a 	mov	r21,r5
 100c834:	38002c1e 	bne	r7,zero,100c8e8 <__umoddi3+0x100>
 100c838:	2a005636 	bltu	r5,r8,100c994 <__umoddi3+0x1ac>
 100c83c:	40009a26 	beq	r8,zero,100caa8 <__umoddi3+0x2c0>
 100c840:	00bfffd4 	movui	r2,65535
 100c844:	14c09236 	bltu	r2,r19,100ca90 <__umoddi3+0x2a8>
 100c848:	00803fc4 	movi	r2,255
 100c84c:	14c15c36 	bltu	r2,r19,100cdc0 <__umoddi3+0x5d8>
 100c850:	000b883a 	mov	r5,zero
 100c854:	0005883a 	mov	r2,zero
 100c858:	9884d83a 	srl	r2,r19,r2
 100c85c:	01004074 	movhi	r4,257
 100c860:	2107a404 	addi	r4,r4,7824
 100c864:	01800804 	movi	r6,32
 100c868:	1105883a 	add	r2,r2,r4
 100c86c:	10c00003 	ldbu	r3,0(r2)
 100c870:	28c7883a 	add	r3,r5,r3
 100c874:	30e5c83a 	sub	r18,r6,r3
 100c878:	9000a41e 	bne	r18,zero,100cb0c <__umoddi3+0x324>
 100c87c:	982ed43a 	srli	r23,r19,16
 100c880:	acebc83a 	sub	r21,r21,r19
 100c884:	9d3fffcc 	andi	r20,r19,65535
 100c888:	002d883a 	mov	r22,zero
 100c88c:	a809883a 	mov	r4,r21
 100c890:	b80b883a 	mov	r5,r23
 100c894:	100434c0 	call	100434c <__udivsi3>
 100c898:	100b883a 	mov	r5,r2
 100c89c:	a009883a 	mov	r4,r20
 100c8a0:	100435c0 	call	100435c <__mulsi3>
 100c8a4:	a809883a 	mov	r4,r21
 100c8a8:	b80b883a 	mov	r5,r23
 100c8ac:	1023883a 	mov	r17,r2
 100c8b0:	10043540 	call	1004354 <__umodsi3>
 100c8b4:	1004943a 	slli	r2,r2,16
 100c8b8:	8006d43a 	srli	r3,r16,16
 100c8bc:	10c4b03a 	or	r2,r2,r3
 100c8c0:	1440032e 	bgeu	r2,r17,100c8d0 <__umoddi3+0xe8>
 100c8c4:	14c5883a 	add	r2,r2,r19
 100c8c8:	14c00136 	bltu	r2,r19,100c8d0 <__umoddi3+0xe8>
 100c8cc:	14415836 	bltu	r2,r17,100ce30 <__umoddi3+0x648>
 100c8d0:	1463c83a 	sub	r17,r2,r17
 100c8d4:	8809883a 	mov	r4,r17
 100c8d8:	b80b883a 	mov	r5,r23
 100c8dc:	100434c0 	call	100434c <__udivsi3>
 100c8e0:	a009883a 	mov	r4,r20
 100c8e4:	00005306 	br	100ca34 <__umoddi3+0x24c>
 100c8e8:	380d883a 	mov	r6,r7
 100c8ec:	29c0132e 	bgeu	r5,r7,100c93c <__umoddi3+0x154>
 100c8f0:	d9000415 	stw	r4,16(sp)
 100c8f4:	d9400515 	stw	r5,20(sp)
 100c8f8:	d9400417 	ldw	r5,16(sp)
 100c8fc:	5813883a 	mov	r9,r11
 100c900:	2811883a 	mov	r8,r5
 100c904:	4005883a 	mov	r2,r8
 100c908:	4807883a 	mov	r3,r9
 100c90c:	dfc00f17 	ldw	ra,60(sp)
 100c910:	df000e17 	ldw	fp,56(sp)
 100c914:	ddc00d17 	ldw	r23,52(sp)
 100c918:	dd800c17 	ldw	r22,48(sp)
 100c91c:	dd400b17 	ldw	r21,44(sp)
 100c920:	dd000a17 	ldw	r20,40(sp)
 100c924:	dcc00917 	ldw	r19,36(sp)
 100c928:	dc800817 	ldw	r18,32(sp)
 100c92c:	dc400717 	ldw	r17,28(sp)
 100c930:	dc000617 	ldw	r16,24(sp)
 100c934:	dec01004 	addi	sp,sp,64
 100c938:	f800283a 	ret
 100c93c:	00bfffd4 	movui	r2,65535
 100c940:	11c06636 	bltu	r2,r7,100cadc <__umoddi3+0x2f4>
 100c944:	00803fc4 	movi	r2,255
 100c948:	11c12036 	bltu	r2,r7,100cdcc <__umoddi3+0x5e4>
 100c94c:	000b883a 	mov	r5,zero
 100c950:	0005883a 	mov	r2,zero
 100c954:	3084d83a 	srl	r2,r6,r2
 100c958:	01004074 	movhi	r4,257
 100c95c:	2107a404 	addi	r4,r4,7824
 100c960:	01c00804 	movi	r7,32
 100c964:	1105883a 	add	r2,r2,r4
 100c968:	10c00003 	ldbu	r3,0(r2)
 100c96c:	28c7883a 	add	r3,r5,r3
 100c970:	38e5c83a 	sub	r18,r7,r3
 100c974:	9000941e 	bne	r18,zero,100cbc8 <__umoddi3+0x3e0>
 100c978:	35405e36 	bltu	r6,r21,100caf4 <__umoddi3+0x30c>
 100c97c:	84c05d2e 	bgeu	r16,r19,100caf4 <__umoddi3+0x30c>
 100c980:	8011883a 	mov	r8,r16
 100c984:	a813883a 	mov	r9,r21
 100c988:	dc000415 	stw	r16,16(sp)
 100c98c:	dd400515 	stw	r21,20(sp)
 100c990:	003fdc06 	br	100c904 <__umoddi3+0x11c>
 100c994:	00bfffd4 	movui	r2,65535
 100c998:	12004a36 	bltu	r2,r8,100cac4 <__umoddi3+0x2dc>
 100c99c:	00803fc4 	movi	r2,255
 100c9a0:	12010d36 	bltu	r2,r8,100cdd8 <__umoddi3+0x5f0>
 100c9a4:	000b883a 	mov	r5,zero
 100c9a8:	0005883a 	mov	r2,zero
 100c9ac:	9884d83a 	srl	r2,r19,r2
 100c9b0:	01004074 	movhi	r4,257
 100c9b4:	2107a404 	addi	r4,r4,7824
 100c9b8:	01800804 	movi	r6,32
 100c9bc:	1105883a 	add	r2,r2,r4
 100c9c0:	10c00003 	ldbu	r3,0(r2)
 100c9c4:	28c7883a 	add	r3,r5,r3
 100c9c8:	30c7c83a 	sub	r3,r6,r3
 100c9cc:	1800dc1e 	bne	r3,zero,100cd40 <__umoddi3+0x558>
 100c9d0:	002d883a 	mov	r22,zero
 100c9d4:	982ed43a 	srli	r23,r19,16
 100c9d8:	a809883a 	mov	r4,r21
 100c9dc:	9cbfffcc 	andi	r18,r19,65535
 100c9e0:	b80b883a 	mov	r5,r23
 100c9e4:	100434c0 	call	100434c <__udivsi3>
 100c9e8:	100b883a 	mov	r5,r2
 100c9ec:	9009883a 	mov	r4,r18
 100c9f0:	100435c0 	call	100435c <__mulsi3>
 100c9f4:	a809883a 	mov	r4,r21
 100c9f8:	b80b883a 	mov	r5,r23
 100c9fc:	1023883a 	mov	r17,r2
 100ca00:	10043540 	call	1004354 <__umodsi3>
 100ca04:	1004943a 	slli	r2,r2,16
 100ca08:	8006d43a 	srli	r3,r16,16
 100ca0c:	10c4b03a 	or	r2,r2,r3
 100ca10:	1440032e 	bgeu	r2,r17,100ca20 <__umoddi3+0x238>
 100ca14:	14c5883a 	add	r2,r2,r19
 100ca18:	14c00136 	bltu	r2,r19,100ca20 <__umoddi3+0x238>
 100ca1c:	14410236 	bltu	r2,r17,100ce28 <__umoddi3+0x640>
 100ca20:	1463c83a 	sub	r17,r2,r17
 100ca24:	8809883a 	mov	r4,r17
 100ca28:	b80b883a 	mov	r5,r23
 100ca2c:	100434c0 	call	100434c <__udivsi3>
 100ca30:	9009883a 	mov	r4,r18
 100ca34:	100b883a 	mov	r5,r2
 100ca38:	100435c0 	call	100435c <__mulsi3>
 100ca3c:	8809883a 	mov	r4,r17
 100ca40:	b80b883a 	mov	r5,r23
 100ca44:	102b883a 	mov	r21,r2
 100ca48:	10043540 	call	1004354 <__umodsi3>
 100ca4c:	1004943a 	slli	r2,r2,16
 100ca50:	80ffffcc 	andi	r3,r16,65535
 100ca54:	10c4b03a 	or	r2,r2,r3
 100ca58:	1540042e 	bgeu	r2,r21,100ca6c <__umoddi3+0x284>
 100ca5c:	14c5883a 	add	r2,r2,r19
 100ca60:	14c00236 	bltu	r2,r19,100ca6c <__umoddi3+0x284>
 100ca64:	1540012e 	bgeu	r2,r21,100ca6c <__umoddi3+0x284>
 100ca68:	14c5883a 	add	r2,r2,r19
 100ca6c:	1545c83a 	sub	r2,r2,r21
 100ca70:	1584d83a 	srl	r2,r2,r22
 100ca74:	0013883a 	mov	r9,zero
 100ca78:	d8800415 	stw	r2,16(sp)
 100ca7c:	d8c00417 	ldw	r3,16(sp)
 100ca80:	0005883a 	mov	r2,zero
 100ca84:	d8800515 	stw	r2,20(sp)
 100ca88:	1811883a 	mov	r8,r3
 100ca8c:	003f9d06 	br	100c904 <__umoddi3+0x11c>
 100ca90:	00804034 	movhi	r2,256
 100ca94:	10bfffc4 	addi	r2,r2,-1
 100ca98:	14c0c636 	bltu	r2,r19,100cdb4 <__umoddi3+0x5cc>
 100ca9c:	01400404 	movi	r5,16
 100caa0:	2805883a 	mov	r2,r5
 100caa4:	003f6c06 	br	100c858 <__umoddi3+0x70>
 100caa8:	01000044 	movi	r4,1
 100caac:	000b883a 	mov	r5,zero
 100cab0:	100434c0 	call	100434c <__udivsi3>
 100cab4:	1027883a 	mov	r19,r2
 100cab8:	00bfffd4 	movui	r2,65535
 100cabc:	14fff436 	bltu	r2,r19,100ca90 <__umoddi3+0x2a8>
 100cac0:	003f6106 	br	100c848 <__umoddi3+0x60>
 100cac4:	00804034 	movhi	r2,256
 100cac8:	10bfffc4 	addi	r2,r2,-1
 100cacc:	1200c536 	bltu	r2,r8,100cde4 <__umoddi3+0x5fc>
 100cad0:	01400404 	movi	r5,16
 100cad4:	2805883a 	mov	r2,r5
 100cad8:	003fb406 	br	100c9ac <__umoddi3+0x1c4>
 100cadc:	00804034 	movhi	r2,256
 100cae0:	10bfffc4 	addi	r2,r2,-1
 100cae4:	11c0c236 	bltu	r2,r7,100cdf0 <__umoddi3+0x608>
 100cae8:	01400404 	movi	r5,16
 100caec:	2805883a 	mov	r2,r5
 100caf0:	003f9806 	br	100c954 <__umoddi3+0x16c>
 100caf4:	84c9c83a 	sub	r4,r16,r19
 100caf8:	8105803a 	cmpltu	r2,r16,r4
 100cafc:	a987c83a 	sub	r3,r21,r6
 100cb00:	18abc83a 	sub	r21,r3,r2
 100cb04:	2021883a 	mov	r16,r4
 100cb08:	003f9d06 	br	100c980 <__umoddi3+0x198>
 100cb0c:	9ca6983a 	sll	r19,r19,r18
 100cb10:	3485c83a 	sub	r2,r6,r18
 100cb14:	a8a2d83a 	srl	r17,r21,r2
 100cb18:	982ed43a 	srli	r23,r19,16
 100cb1c:	ac86983a 	sll	r3,r21,r18
 100cb20:	8084d83a 	srl	r2,r16,r2
 100cb24:	8809883a 	mov	r4,r17
 100cb28:	b80b883a 	mov	r5,r23
 100cb2c:	18b8b03a 	or	fp,r3,r2
 100cb30:	9d3fffcc 	andi	r20,r19,65535
 100cb34:	100434c0 	call	100434c <__udivsi3>
 100cb38:	100b883a 	mov	r5,r2
 100cb3c:	a009883a 	mov	r4,r20
 100cb40:	100435c0 	call	100435c <__mulsi3>
 100cb44:	8809883a 	mov	r4,r17
 100cb48:	b80b883a 	mov	r5,r23
 100cb4c:	102b883a 	mov	r21,r2
 100cb50:	10043540 	call	1004354 <__umodsi3>
 100cb54:	1004943a 	slli	r2,r2,16
 100cb58:	e006d43a 	srli	r3,fp,16
 100cb5c:	902d883a 	mov	r22,r18
 100cb60:	10c4b03a 	or	r2,r2,r3
 100cb64:	1540022e 	bgeu	r2,r21,100cb70 <__umoddi3+0x388>
 100cb68:	14c5883a 	add	r2,r2,r19
 100cb6c:	14c0ab2e 	bgeu	r2,r19,100ce1c <__umoddi3+0x634>
 100cb70:	1563c83a 	sub	r17,r2,r21
 100cb74:	8809883a 	mov	r4,r17
 100cb78:	b80b883a 	mov	r5,r23
 100cb7c:	100434c0 	call	100434c <__udivsi3>
 100cb80:	100b883a 	mov	r5,r2
 100cb84:	a009883a 	mov	r4,r20
 100cb88:	100435c0 	call	100435c <__mulsi3>
 100cb8c:	8809883a 	mov	r4,r17
 100cb90:	b80b883a 	mov	r5,r23
 100cb94:	102b883a 	mov	r21,r2
 100cb98:	10043540 	call	1004354 <__umodsi3>
 100cb9c:	1004943a 	slli	r2,r2,16
 100cba0:	e0ffffcc 	andi	r3,fp,65535
 100cba4:	10c4b03a 	or	r2,r2,r3
 100cba8:	1540042e 	bgeu	r2,r21,100cbbc <__umoddi3+0x3d4>
 100cbac:	14c5883a 	add	r2,r2,r19
 100cbb0:	14c00236 	bltu	r2,r19,100cbbc <__umoddi3+0x3d4>
 100cbb4:	1540012e 	bgeu	r2,r21,100cbbc <__umoddi3+0x3d4>
 100cbb8:	14c5883a 	add	r2,r2,r19
 100cbbc:	84a0983a 	sll	r16,r16,r18
 100cbc0:	156bc83a 	sub	r21,r2,r21
 100cbc4:	003f3106 	br	100c88c <__umoddi3+0xa4>
 100cbc8:	3c8fc83a 	sub	r7,r7,r18
 100cbcc:	3486983a 	sll	r3,r6,r18
 100cbd0:	99c4d83a 	srl	r2,r19,r7
 100cbd4:	a9e2d83a 	srl	r17,r21,r7
 100cbd8:	ac8c983a 	sll	r6,r21,r18
 100cbdc:	18acb03a 	or	r22,r3,r2
 100cbe0:	b02ed43a 	srli	r23,r22,16
 100cbe4:	81c4d83a 	srl	r2,r16,r7
 100cbe8:	8809883a 	mov	r4,r17
 100cbec:	b80b883a 	mov	r5,r23
 100cbf0:	308cb03a 	or	r6,r6,r2
 100cbf4:	d9c00315 	stw	r7,12(sp)
 100cbf8:	d9800215 	stw	r6,8(sp)
 100cbfc:	b53fffcc 	andi	r20,r22,65535
 100cc00:	100434c0 	call	100434c <__udivsi3>
 100cc04:	100b883a 	mov	r5,r2
 100cc08:	a009883a 	mov	r4,r20
 100cc0c:	1039883a 	mov	fp,r2
 100cc10:	100435c0 	call	100435c <__mulsi3>
 100cc14:	8809883a 	mov	r4,r17
 100cc18:	b80b883a 	mov	r5,r23
 100cc1c:	102b883a 	mov	r21,r2
 100cc20:	10043540 	call	1004354 <__umodsi3>
 100cc24:	d9000217 	ldw	r4,8(sp)
 100cc28:	1004943a 	slli	r2,r2,16
 100cc2c:	9ca6983a 	sll	r19,r19,r18
 100cc30:	2006d43a 	srli	r3,r4,16
 100cc34:	84a0983a 	sll	r16,r16,r18
 100cc38:	dcc00015 	stw	r19,0(sp)
 100cc3c:	10c4b03a 	or	r2,r2,r3
 100cc40:	dc000115 	stw	r16,4(sp)
 100cc44:	1540032e 	bgeu	r2,r21,100cc54 <__umoddi3+0x46c>
 100cc48:	1585883a 	add	r2,r2,r22
 100cc4c:	e73fffc4 	addi	fp,fp,-1
 100cc50:	15806e2e 	bgeu	r2,r22,100ce0c <__umoddi3+0x624>
 100cc54:	1563c83a 	sub	r17,r2,r21
 100cc58:	8809883a 	mov	r4,r17
 100cc5c:	b80b883a 	mov	r5,r23
 100cc60:	100434c0 	call	100434c <__udivsi3>
 100cc64:	100b883a 	mov	r5,r2
 100cc68:	a009883a 	mov	r4,r20
 100cc6c:	1021883a 	mov	r16,r2
 100cc70:	100435c0 	call	100435c <__mulsi3>
 100cc74:	b80b883a 	mov	r5,r23
 100cc78:	8809883a 	mov	r4,r17
 100cc7c:	1029883a 	mov	r20,r2
 100cc80:	10043540 	call	1004354 <__umodsi3>
 100cc84:	d9400217 	ldw	r5,8(sp)
 100cc88:	1004943a 	slli	r2,r2,16
 100cc8c:	28ffffcc 	andi	r3,r5,65535
 100cc90:	10c4b03a 	or	r2,r2,r3
 100cc94:	1500032e 	bgeu	r2,r20,100cca4 <__umoddi3+0x4bc>
 100cc98:	1585883a 	add	r2,r2,r22
 100cc9c:	843fffc4 	addi	r16,r16,-1
 100cca0:	1580562e 	bgeu	r2,r22,100cdfc <__umoddi3+0x614>
 100cca4:	d9800017 	ldw	r6,0(sp)
 100cca8:	e022943a 	slli	r17,fp,16
 100ccac:	302ed43a 	srli	r23,r6,16
 100ccb0:	8462b03a 	or	r17,r16,r17
 100ccb4:	34ffffcc 	andi	r19,r6,65535
 100ccb8:	882ad43a 	srli	r21,r17,16
 100ccbc:	8c7fffcc 	andi	r17,r17,65535
 100ccc0:	8809883a 	mov	r4,r17
 100ccc4:	980b883a 	mov	r5,r19
 100ccc8:	1521c83a 	sub	r16,r2,r20
 100cccc:	100435c0 	call	100435c <__mulsi3>
 100ccd0:	8809883a 	mov	r4,r17
 100ccd4:	b80b883a 	mov	r5,r23
 100ccd8:	1029883a 	mov	r20,r2
 100ccdc:	100435c0 	call	100435c <__mulsi3>
 100cce0:	980b883a 	mov	r5,r19
 100cce4:	a809883a 	mov	r4,r21
 100cce8:	1023883a 	mov	r17,r2
 100ccec:	100435c0 	call	100435c <__mulsi3>
 100ccf0:	a809883a 	mov	r4,r21
 100ccf4:	b80b883a 	mov	r5,r23
 100ccf8:	1027883a 	mov	r19,r2
 100ccfc:	100435c0 	call	100435c <__mulsi3>
 100cd00:	100b883a 	mov	r5,r2
 100cd04:	a004d43a 	srli	r2,r20,16
 100cd08:	8ce3883a 	add	r17,r17,r19
 100cd0c:	1449883a 	add	r4,r2,r17
 100cd10:	24c0022e 	bgeu	r4,r19,100cd1c <__umoddi3+0x534>
 100cd14:	00800074 	movhi	r2,1
 100cd18:	288b883a 	add	r5,r5,r2
 100cd1c:	2004d43a 	srli	r2,r4,16
 100cd20:	2008943a 	slli	r4,r4,16
 100cd24:	a0ffffcc 	andi	r3,r20,65535
 100cd28:	288d883a 	add	r6,r5,r2
 100cd2c:	20c9883a 	add	r4,r4,r3
 100cd30:	81800b36 	bltu	r16,r6,100cd60 <__umoddi3+0x578>
 100cd34:	81804026 	beq	r16,r6,100ce38 <__umoddi3+0x650>
 100cd38:	818dc83a 	sub	r6,r16,r6
 100cd3c:	00000f06 	br	100cd7c <__umoddi3+0x594>
 100cd40:	30c5c83a 	sub	r2,r6,r3
 100cd44:	182d883a 	mov	r22,r3
 100cd48:	8084d83a 	srl	r2,r16,r2
 100cd4c:	a8c6983a 	sll	r3,r21,r3
 100cd50:	9da6983a 	sll	r19,r19,r22
 100cd54:	85a0983a 	sll	r16,r16,r22
 100cd58:	18aab03a 	or	r21,r3,r2
 100cd5c:	003f1d06 	br	100c9d4 <__umoddi3+0x1ec>
 100cd60:	d8c00017 	ldw	r3,0(sp)
 100cd64:	20c5c83a 	sub	r2,r4,r3
 100cd68:	2089803a 	cmpltu	r4,r4,r2
 100cd6c:	3587c83a 	sub	r3,r6,r22
 100cd70:	1907c83a 	sub	r3,r3,r4
 100cd74:	80cdc83a 	sub	r6,r16,r3
 100cd78:	1009883a 	mov	r4,r2
 100cd7c:	d9400117 	ldw	r5,4(sp)
 100cd80:	2905c83a 	sub	r2,r5,r4
 100cd84:	2887803a 	cmpltu	r3,r5,r2
 100cd88:	30c7c83a 	sub	r3,r6,r3
 100cd8c:	d9800317 	ldw	r6,12(sp)
 100cd90:	1484d83a 	srl	r2,r2,r18
 100cd94:	1988983a 	sll	r4,r3,r6
 100cd98:	1c86d83a 	srl	r3,r3,r18
 100cd9c:	2088b03a 	or	r4,r4,r2
 100cda0:	2011883a 	mov	r8,r4
 100cda4:	1813883a 	mov	r9,r3
 100cda8:	d9000415 	stw	r4,16(sp)
 100cdac:	d8c00515 	stw	r3,20(sp)
 100cdb0:	003ed406 	br	100c904 <__umoddi3+0x11c>
 100cdb4:	01400604 	movi	r5,24
 100cdb8:	2805883a 	mov	r2,r5
 100cdbc:	003ea606 	br	100c858 <__umoddi3+0x70>
 100cdc0:	01400204 	movi	r5,8
 100cdc4:	2805883a 	mov	r2,r5
 100cdc8:	003ea306 	br	100c858 <__umoddi3+0x70>
 100cdcc:	01400204 	movi	r5,8
 100cdd0:	2805883a 	mov	r2,r5
 100cdd4:	003edf06 	br	100c954 <__umoddi3+0x16c>
 100cdd8:	01400204 	movi	r5,8
 100cddc:	2805883a 	mov	r2,r5
 100cde0:	003ef206 	br	100c9ac <__umoddi3+0x1c4>
 100cde4:	01400604 	movi	r5,24
 100cde8:	2805883a 	mov	r2,r5
 100cdec:	003eef06 	br	100c9ac <__umoddi3+0x1c4>
 100cdf0:	01400604 	movi	r5,24
 100cdf4:	2805883a 	mov	r2,r5
 100cdf8:	003ed606 	br	100c954 <__umoddi3+0x16c>
 100cdfc:	153fa92e 	bgeu	r2,r20,100cca4 <__umoddi3+0x4bc>
 100ce00:	843fffc4 	addi	r16,r16,-1
 100ce04:	1585883a 	add	r2,r2,r22
 100ce08:	003fa606 	br	100cca4 <__umoddi3+0x4bc>
 100ce0c:	157f912e 	bgeu	r2,r21,100cc54 <__umoddi3+0x46c>
 100ce10:	e73fffc4 	addi	fp,fp,-1
 100ce14:	1585883a 	add	r2,r2,r22
 100ce18:	003f8e06 	br	100cc54 <__umoddi3+0x46c>
 100ce1c:	157f542e 	bgeu	r2,r21,100cb70 <__umoddi3+0x388>
 100ce20:	14c5883a 	add	r2,r2,r19
 100ce24:	003f5206 	br	100cb70 <__umoddi3+0x388>
 100ce28:	14c5883a 	add	r2,r2,r19
 100ce2c:	003efc06 	br	100ca20 <__umoddi3+0x238>
 100ce30:	14c5883a 	add	r2,r2,r19
 100ce34:	003ea606 	br	100c8d0 <__umoddi3+0xe8>
 100ce38:	d8800117 	ldw	r2,4(sp)
 100ce3c:	113fc836 	bltu	r2,r4,100cd60 <__umoddi3+0x578>
 100ce40:	000d883a 	mov	r6,zero
 100ce44:	003fcd06 	br	100cd7c <__umoddi3+0x594>

0100ce48 <__divdf3>:
 100ce48:	deffed04 	addi	sp,sp,-76
 100ce4c:	dcc01115 	stw	r19,68(sp)
 100ce50:	dcc00404 	addi	r19,sp,16
 100ce54:	2011883a 	mov	r8,r4
 100ce58:	2813883a 	mov	r9,r5
 100ce5c:	dc000e15 	stw	r16,56(sp)
 100ce60:	d809883a 	mov	r4,sp
 100ce64:	980b883a 	mov	r5,r19
 100ce68:	dc000904 	addi	r16,sp,36
 100ce6c:	dfc01215 	stw	ra,72(sp)
 100ce70:	da400115 	stw	r9,4(sp)
 100ce74:	d9c00315 	stw	r7,12(sp)
 100ce78:	da000015 	stw	r8,0(sp)
 100ce7c:	d9800215 	stw	r6,8(sp)
 100ce80:	dc801015 	stw	r18,64(sp)
 100ce84:	dc400f15 	stw	r17,60(sp)
 100ce88:	1004b1c0 	call	1004b1c <__unpack_d>
 100ce8c:	d9000204 	addi	r4,sp,8
 100ce90:	800b883a 	mov	r5,r16
 100ce94:	1004b1c0 	call	1004b1c <__unpack_d>
 100ce98:	d9000417 	ldw	r4,16(sp)
 100ce9c:	00800044 	movi	r2,1
 100cea0:	11000b2e 	bgeu	r2,r4,100ced0 <__divdf3+0x88>
 100cea4:	d9400917 	ldw	r5,36(sp)
 100cea8:	1140762e 	bgeu	r2,r5,100d084 <__divdf3+0x23c>
 100ceac:	d8800517 	ldw	r2,20(sp)
 100ceb0:	d8c00a17 	ldw	r3,40(sp)
 100ceb4:	01800104 	movi	r6,4
 100ceb8:	10c4f03a 	xor	r2,r2,r3
 100cebc:	d8800515 	stw	r2,20(sp)
 100cec0:	21800226 	beq	r4,r6,100cecc <__divdf3+0x84>
 100cec4:	00800084 	movi	r2,2
 100cec8:	2080141e 	bne	r4,r2,100cf1c <__divdf3+0xd4>
 100cecc:	29000926 	beq	r5,r4,100cef4 <__divdf3+0xac>
 100ced0:	9809883a 	mov	r4,r19
 100ced4:	10048080 	call	1004808 <__pack_d>
 100ced8:	dfc01217 	ldw	ra,72(sp)
 100cedc:	dcc01117 	ldw	r19,68(sp)
 100cee0:	dc801017 	ldw	r18,64(sp)
 100cee4:	dc400f17 	ldw	r17,60(sp)
 100cee8:	dc000e17 	ldw	r16,56(sp)
 100ceec:	dec01304 	addi	sp,sp,76
 100cef0:	f800283a 	ret
 100cef4:	01004074 	movhi	r4,257
 100cef8:	21079f04 	addi	r4,r4,7804
 100cefc:	10048080 	call	1004808 <__pack_d>
 100cf00:	dfc01217 	ldw	ra,72(sp)
 100cf04:	dcc01117 	ldw	r19,68(sp)
 100cf08:	dc801017 	ldw	r18,64(sp)
 100cf0c:	dc400f17 	ldw	r17,60(sp)
 100cf10:	dc000e17 	ldw	r16,56(sp)
 100cf14:	dec01304 	addi	sp,sp,76
 100cf18:	f800283a 	ret
 100cf1c:	29805b26 	beq	r5,r6,100d08c <__divdf3+0x244>
 100cf20:	28802d26 	beq	r5,r2,100cfd8 <__divdf3+0x190>
 100cf24:	d8c00617 	ldw	r3,24(sp)
 100cf28:	d8800b17 	ldw	r2,44(sp)
 100cf2c:	d9c00817 	ldw	r7,32(sp)
 100cf30:	dc400d17 	ldw	r17,52(sp)
 100cf34:	188bc83a 	sub	r5,r3,r2
 100cf38:	d9800717 	ldw	r6,28(sp)
 100cf3c:	dc000c17 	ldw	r16,48(sp)
 100cf40:	d9400615 	stw	r5,24(sp)
 100cf44:	3c403836 	bltu	r7,r17,100d028 <__divdf3+0x1e0>
 100cf48:	89c03626 	beq	r17,r7,100d024 <__divdf3+0x1dc>
 100cf4c:	0015883a 	mov	r10,zero
 100cf50:	001d883a 	mov	r14,zero
 100cf54:	02c40034 	movhi	r11,4096
 100cf58:	001f883a 	mov	r15,zero
 100cf5c:	003f883a 	mov	ra,zero
 100cf60:	04800f44 	movi	r18,61
 100cf64:	00000f06 	br	100cfa4 <__divdf3+0x15c>
 100cf68:	601d883a 	mov	r14,r12
 100cf6c:	681f883a 	mov	r15,r13
 100cf70:	400d883a 	mov	r6,r8
 100cf74:	100f883a 	mov	r7,r2
 100cf78:	3191883a 	add	r8,r6,r6
 100cf7c:	5808d07a 	srli	r4,r11,1
 100cf80:	4185803a 	cmpltu	r2,r8,r6
 100cf84:	39d3883a 	add	r9,r7,r7
 100cf88:	28c6b03a 	or	r3,r5,r3
 100cf8c:	1245883a 	add	r2,r2,r9
 100cf90:	1815883a 	mov	r10,r3
 100cf94:	2017883a 	mov	r11,r4
 100cf98:	400d883a 	mov	r6,r8
 100cf9c:	100f883a 	mov	r7,r2
 100cfa0:	fc801726 	beq	ra,r18,100d000 <__divdf3+0x1b8>
 100cfa4:	580a97fa 	slli	r5,r11,31
 100cfa8:	5006d07a 	srli	r3,r10,1
 100cfac:	ffc00044 	addi	ra,ra,1
 100cfb0:	3c7ff136 	bltu	r7,r17,100cf78 <__divdf3+0x130>
 100cfb4:	3411c83a 	sub	r8,r6,r16
 100cfb8:	3205803a 	cmpltu	r2,r6,r8
 100cfbc:	3c53c83a 	sub	r9,r7,r17
 100cfc0:	7298b03a 	or	r12,r14,r10
 100cfc4:	7adab03a 	or	r13,r15,r11
 100cfc8:	4885c83a 	sub	r2,r9,r2
 100cfcc:	89ffe61e 	bne	r17,r7,100cf68 <__divdf3+0x120>
 100cfd0:	343fe936 	bltu	r6,r16,100cf78 <__divdf3+0x130>
 100cfd4:	003fe406 	br	100cf68 <__divdf3+0x120>
 100cfd8:	9809883a 	mov	r4,r19
 100cfdc:	d9800415 	stw	r6,16(sp)
 100cfe0:	10048080 	call	1004808 <__pack_d>
 100cfe4:	dfc01217 	ldw	ra,72(sp)
 100cfe8:	dcc01117 	ldw	r19,68(sp)
 100cfec:	dc801017 	ldw	r18,64(sp)
 100cff0:	dc400f17 	ldw	r17,60(sp)
 100cff4:	dc000e17 	ldw	r16,56(sp)
 100cff8:	dec01304 	addi	sp,sp,76
 100cffc:	f800283a 	ret
 100d000:	00803fc4 	movi	r2,255
 100d004:	7090703a 	and	r8,r14,r2
 100d008:	00802004 	movi	r2,128
 100d00c:	0007883a 	mov	r3,zero
 100d010:	0013883a 	mov	r9,zero
 100d014:	40800d26 	beq	r8,r2,100d04c <__divdf3+0x204>
 100d018:	dbc00815 	stw	r15,32(sp)
 100d01c:	db800715 	stw	r14,28(sp)
 100d020:	003fab06 	br	100ced0 <__divdf3+0x88>
 100d024:	343fc92e 	bgeu	r6,r16,100cf4c <__divdf3+0x104>
 100d028:	3185883a 	add	r2,r6,r6
 100d02c:	1189803a 	cmpltu	r4,r2,r6
 100d030:	39c7883a 	add	r3,r7,r7
 100d034:	20c9883a 	add	r4,r4,r3
 100d038:	297fffc4 	addi	r5,r5,-1
 100d03c:	100d883a 	mov	r6,r2
 100d040:	200f883a 	mov	r7,r4
 100d044:	d9400615 	stw	r5,24(sp)
 100d048:	003fc006 	br	100cf4c <__divdf3+0x104>
 100d04c:	483ff21e 	bne	r9,zero,100d018 <__divdf3+0x1d0>
 100d050:	01004004 	movi	r4,256
 100d054:	7104703a 	and	r2,r14,r4
 100d058:	10c4b03a 	or	r2,r2,r3
 100d05c:	103fee1e 	bne	r2,zero,100d018 <__divdf3+0x1d0>
 100d060:	31c4b03a 	or	r2,r6,r7
 100d064:	103fec26 	beq	r2,zero,100d018 <__divdf3+0x1d0>
 100d068:	7205883a 	add	r2,r14,r8
 100d06c:	1391803a 	cmpltu	r8,r2,r14
 100d070:	43d1883a 	add	r8,r8,r15
 100d074:	013fc004 	movi	r4,-256
 100d078:	111c703a 	and	r14,r2,r4
 100d07c:	401f883a 	mov	r15,r8
 100d080:	003fe506 	br	100d018 <__divdf3+0x1d0>
 100d084:	8009883a 	mov	r4,r16
 100d088:	003f9206 	br	100ced4 <__divdf3+0x8c>
 100d08c:	9809883a 	mov	r4,r19
 100d090:	d8000715 	stw	zero,28(sp)
 100d094:	d8000815 	stw	zero,32(sp)
 100d098:	d8000615 	stw	zero,24(sp)
 100d09c:	003f8d06 	br	100ced4 <__divdf3+0x8c>

0100d0a0 <__nedf2>:
 100d0a0:	deffef04 	addi	sp,sp,-68
 100d0a4:	dc400f15 	stw	r17,60(sp)
 100d0a8:	dc400404 	addi	r17,sp,16
 100d0ac:	2005883a 	mov	r2,r4
 100d0b0:	2807883a 	mov	r3,r5
 100d0b4:	dc000e15 	stw	r16,56(sp)
 100d0b8:	d809883a 	mov	r4,sp
 100d0bc:	880b883a 	mov	r5,r17
 100d0c0:	dc000904 	addi	r16,sp,36
 100d0c4:	d8c00115 	stw	r3,4(sp)
 100d0c8:	d8800015 	stw	r2,0(sp)
 100d0cc:	d9800215 	stw	r6,8(sp)
 100d0d0:	dfc01015 	stw	ra,64(sp)
 100d0d4:	d9c00315 	stw	r7,12(sp)
 100d0d8:	1004b1c0 	call	1004b1c <__unpack_d>
 100d0dc:	d9000204 	addi	r4,sp,8
 100d0e0:	800b883a 	mov	r5,r16
 100d0e4:	1004b1c0 	call	1004b1c <__unpack_d>
 100d0e8:	d8800417 	ldw	r2,16(sp)
 100d0ec:	00c00044 	movi	r3,1
 100d0f0:	180d883a 	mov	r6,r3
 100d0f4:	1880062e 	bgeu	r3,r2,100d110 <__nedf2+0x70>
 100d0f8:	d8800917 	ldw	r2,36(sp)
 100d0fc:	8809883a 	mov	r4,r17
 100d100:	800b883a 	mov	r5,r16
 100d104:	1880022e 	bgeu	r3,r2,100d110 <__nedf2+0x70>
 100d108:	1004c540 	call	1004c54 <__fpcmp_parts_d>
 100d10c:	100d883a 	mov	r6,r2
 100d110:	3005883a 	mov	r2,r6
 100d114:	dfc01017 	ldw	ra,64(sp)
 100d118:	dc400f17 	ldw	r17,60(sp)
 100d11c:	dc000e17 	ldw	r16,56(sp)
 100d120:	dec01104 	addi	sp,sp,68
 100d124:	f800283a 	ret

0100d128 <__ltdf2>:
 100d128:	deffef04 	addi	sp,sp,-68
 100d12c:	dc400f15 	stw	r17,60(sp)
 100d130:	dc400404 	addi	r17,sp,16
 100d134:	2005883a 	mov	r2,r4
 100d138:	2807883a 	mov	r3,r5
 100d13c:	dc000e15 	stw	r16,56(sp)
 100d140:	d809883a 	mov	r4,sp
 100d144:	880b883a 	mov	r5,r17
 100d148:	dc000904 	addi	r16,sp,36
 100d14c:	d8c00115 	stw	r3,4(sp)
 100d150:	d8800015 	stw	r2,0(sp)
 100d154:	d9800215 	stw	r6,8(sp)
 100d158:	dfc01015 	stw	ra,64(sp)
 100d15c:	d9c00315 	stw	r7,12(sp)
 100d160:	1004b1c0 	call	1004b1c <__unpack_d>
 100d164:	d9000204 	addi	r4,sp,8
 100d168:	800b883a 	mov	r5,r16
 100d16c:	1004b1c0 	call	1004b1c <__unpack_d>
 100d170:	d8800417 	ldw	r2,16(sp)
 100d174:	00c00044 	movi	r3,1
 100d178:	180d883a 	mov	r6,r3
 100d17c:	1880062e 	bgeu	r3,r2,100d198 <__ltdf2+0x70>
 100d180:	d8800917 	ldw	r2,36(sp)
 100d184:	8809883a 	mov	r4,r17
 100d188:	800b883a 	mov	r5,r16
 100d18c:	1880022e 	bgeu	r3,r2,100d198 <__ltdf2+0x70>
 100d190:	1004c540 	call	1004c54 <__fpcmp_parts_d>
 100d194:	100d883a 	mov	r6,r2
 100d198:	3005883a 	mov	r2,r6
 100d19c:	dfc01017 	ldw	ra,64(sp)
 100d1a0:	dc400f17 	ldw	r17,60(sp)
 100d1a4:	dc000e17 	ldw	r16,56(sp)
 100d1a8:	dec01104 	addi	sp,sp,68
 100d1ac:	f800283a 	ret

0100d1b0 <__floatunsidf>:
 100d1b0:	defff204 	addi	sp,sp,-56
 100d1b4:	dfc00d15 	stw	ra,52(sp)
 100d1b8:	ddc00c15 	stw	r23,48(sp)
 100d1bc:	dd800b15 	stw	r22,44(sp)
 100d1c0:	dd400a15 	stw	r21,40(sp)
 100d1c4:	dd000915 	stw	r20,36(sp)
 100d1c8:	dcc00815 	stw	r19,32(sp)
 100d1cc:	dc800715 	stw	r18,28(sp)
 100d1d0:	dc400615 	stw	r17,24(sp)
 100d1d4:	dc000515 	stw	r16,20(sp)
 100d1d8:	d8000115 	stw	zero,4(sp)
 100d1dc:	20000f1e 	bne	r4,zero,100d21c <__floatunsidf+0x6c>
 100d1e0:	00800084 	movi	r2,2
 100d1e4:	d8800015 	stw	r2,0(sp)
 100d1e8:	d809883a 	mov	r4,sp
 100d1ec:	10048080 	call	1004808 <__pack_d>
 100d1f0:	dfc00d17 	ldw	ra,52(sp)
 100d1f4:	ddc00c17 	ldw	r23,48(sp)
 100d1f8:	dd800b17 	ldw	r22,44(sp)
 100d1fc:	dd400a17 	ldw	r21,40(sp)
 100d200:	dd000917 	ldw	r20,36(sp)
 100d204:	dcc00817 	ldw	r19,32(sp)
 100d208:	dc800717 	ldw	r18,28(sp)
 100d20c:	dc400617 	ldw	r17,24(sp)
 100d210:	dc000517 	ldw	r16,20(sp)
 100d214:	dec00e04 	addi	sp,sp,56
 100d218:	f800283a 	ret
 100d21c:	008000c4 	movi	r2,3
 100d220:	00c00f04 	movi	r3,60
 100d224:	002f883a 	mov	r23,zero
 100d228:	202d883a 	mov	r22,r4
 100d22c:	d8800015 	stw	r2,0(sp)
 100d230:	d8c00215 	stw	r3,8(sp)
 100d234:	d9000315 	stw	r4,12(sp)
 100d238:	ddc00415 	stw	r23,16(sp)
 100d23c:	10044b80 	call	10044b8 <__clzsi2>
 100d240:	12400744 	addi	r9,r2,29
 100d244:	48000b16 	blt	r9,zero,100d274 <__floatunsidf+0xc4>
 100d248:	483fe726 	beq	r9,zero,100d1e8 <__floatunsidf+0x38>
 100d24c:	10bfff44 	addi	r2,r2,-3
 100d250:	10002e16 	blt	r2,zero,100d30c <__floatunsidf+0x15c>
 100d254:	b0a2983a 	sll	r17,r22,r2
 100d258:	0021883a 	mov	r16,zero
 100d25c:	d8800217 	ldw	r2,8(sp)
 100d260:	dc400415 	stw	r17,16(sp)
 100d264:	dc000315 	stw	r16,12(sp)
 100d268:	1245c83a 	sub	r2,r2,r9
 100d26c:	d8800215 	stw	r2,8(sp)
 100d270:	003fdd06 	br	100d1e8 <__floatunsidf+0x38>
 100d274:	0255c83a 	sub	r10,zero,r9
 100d278:	51bff804 	addi	r6,r10,-32
 100d27c:	30001b16 	blt	r6,zero,100d2ec <__floatunsidf+0x13c>
 100d280:	b9a8d83a 	srl	r20,r23,r6
 100d284:	002b883a 	mov	r21,zero
 100d288:	000f883a 	mov	r7,zero
 100d28c:	01000044 	movi	r4,1
 100d290:	0011883a 	mov	r8,zero
 100d294:	30002516 	blt	r6,zero,100d32c <__floatunsidf+0x17c>
 100d298:	21a6983a 	sll	r19,r4,r6
 100d29c:	0025883a 	mov	r18,zero
 100d2a0:	00bfffc4 	movi	r2,-1
 100d2a4:	9089883a 	add	r4,r18,r2
 100d2a8:	988b883a 	add	r5,r19,r2
 100d2ac:	248d803a 	cmpltu	r6,r4,r18
 100d2b0:	314b883a 	add	r5,r6,r5
 100d2b4:	b104703a 	and	r2,r22,r4
 100d2b8:	b946703a 	and	r3,r23,r5
 100d2bc:	10c4b03a 	or	r2,r2,r3
 100d2c0:	10000226 	beq	r2,zero,100d2cc <__floatunsidf+0x11c>
 100d2c4:	01c00044 	movi	r7,1
 100d2c8:	0011883a 	mov	r8,zero
 100d2cc:	d9000217 	ldw	r4,8(sp)
 100d2d0:	a1c4b03a 	or	r2,r20,r7
 100d2d4:	aa06b03a 	or	r3,r21,r8
 100d2d8:	2249c83a 	sub	r4,r4,r9
 100d2dc:	d8c00415 	stw	r3,16(sp)
 100d2e0:	d9000215 	stw	r4,8(sp)
 100d2e4:	d8800315 	stw	r2,12(sp)
 100d2e8:	003fbf06 	br	100d1e8 <__floatunsidf+0x38>
 100d2ec:	bdc7883a 	add	r3,r23,r23
 100d2f0:	008007c4 	movi	r2,31
 100d2f4:	1285c83a 	sub	r2,r2,r10
 100d2f8:	1886983a 	sll	r3,r3,r2
 100d2fc:	b2a8d83a 	srl	r20,r22,r10
 100d300:	baaad83a 	srl	r21,r23,r10
 100d304:	1d28b03a 	or	r20,r3,r20
 100d308:	003fdf06 	br	100d288 <__floatunsidf+0xd8>
 100d30c:	b006d07a 	srli	r3,r22,1
 100d310:	008007c4 	movi	r2,31
 100d314:	1245c83a 	sub	r2,r2,r9
 100d318:	1886d83a 	srl	r3,r3,r2
 100d31c:	ba62983a 	sll	r17,r23,r9
 100d320:	b260983a 	sll	r16,r22,r9
 100d324:	1c62b03a 	or	r17,r3,r17
 100d328:	003fcc06 	br	100d25c <__floatunsidf+0xac>
 100d32c:	2006d07a 	srli	r3,r4,1
 100d330:	008007c4 	movi	r2,31
 100d334:	1285c83a 	sub	r2,r2,r10
 100d338:	18a6d83a 	srl	r19,r3,r2
 100d33c:	22a4983a 	sll	r18,r4,r10
 100d340:	003fd706 	br	100d2a0 <__floatunsidf+0xf0>

0100d344 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100d344:	defff804 	addi	sp,sp,-32
 100d348:	dfc00715 	stw	ra,28(sp)
 100d34c:	df000615 	stw	fp,24(sp)
 100d350:	df000604 	addi	fp,sp,24
 100d354:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100d358:	e0bffc17 	ldw	r2,-16(fp)
 100d35c:	1004803a 	cmplt	r2,r2,zero
 100d360:	1000091e 	bne	r2,zero,100d388 <close+0x44>
 100d364:	e13ffc17 	ldw	r4,-16(fp)
 100d368:	01400304 	movi	r5,12
 100d36c:	100435c0 	call	100435c <__mulsi3>
 100d370:	1007883a 	mov	r3,r2
 100d374:	00804074 	movhi	r2,257
 100d378:	108a8b04 	addi	r2,r2,10796
 100d37c:	1887883a 	add	r3,r3,r2
 100d380:	e0ffff15 	stw	r3,-4(fp)
 100d384:	00000106 	br	100d38c <close+0x48>
 100d388:	e03fff15 	stw	zero,-4(fp)
 100d38c:	e0bfff17 	ldw	r2,-4(fp)
 100d390:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100d394:	e0bffb17 	ldw	r2,-20(fp)
 100d398:	1005003a 	cmpeq	r2,r2,zero
 100d39c:	10001d1e 	bne	r2,zero,100d414 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100d3a0:	e0bffb17 	ldw	r2,-20(fp)
 100d3a4:	10800017 	ldw	r2,0(r2)
 100d3a8:	10800417 	ldw	r2,16(r2)
 100d3ac:	1005003a 	cmpeq	r2,r2,zero
 100d3b0:	1000071e 	bne	r2,zero,100d3d0 <close+0x8c>
 100d3b4:	e0bffb17 	ldw	r2,-20(fp)
 100d3b8:	10800017 	ldw	r2,0(r2)
 100d3bc:	10800417 	ldw	r2,16(r2)
 100d3c0:	e13ffb17 	ldw	r4,-20(fp)
 100d3c4:	103ee83a 	callr	r2
 100d3c8:	e0bffe15 	stw	r2,-8(fp)
 100d3cc:	00000106 	br	100d3d4 <close+0x90>
 100d3d0:	e03ffe15 	stw	zero,-8(fp)
 100d3d4:	e0bffe17 	ldw	r2,-8(fp)
 100d3d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100d3dc:	e13ffc17 	ldw	r4,-16(fp)
 100d3e0:	100db9c0 	call	100db9c <alt_release_fd>
    if (rval < 0)
 100d3e4:	e0bffa17 	ldw	r2,-24(fp)
 100d3e8:	1004403a 	cmpge	r2,r2,zero
 100d3ec:	1000071e 	bne	r2,zero,100d40c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100d3f0:	100d4440 	call	100d444 <alt_get_errno>
 100d3f4:	e0fffa17 	ldw	r3,-24(fp)
 100d3f8:	00c7c83a 	sub	r3,zero,r3
 100d3fc:	10c00015 	stw	r3,0(r2)
      return -1;
 100d400:	00bfffc4 	movi	r2,-1
 100d404:	e0bffd15 	stw	r2,-12(fp)
 100d408:	00000806 	br	100d42c <close+0xe8>
    }
    return 0;
 100d40c:	e03ffd15 	stw	zero,-12(fp)
 100d410:	00000606 	br	100d42c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d414:	100d4440 	call	100d444 <alt_get_errno>
 100d418:	1007883a 	mov	r3,r2
 100d41c:	00801444 	movi	r2,81
 100d420:	18800015 	stw	r2,0(r3)
    return -1;
 100d424:	00bfffc4 	movi	r2,-1
 100d428:	e0bffd15 	stw	r2,-12(fp)
 100d42c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100d430:	e037883a 	mov	sp,fp
 100d434:	dfc00117 	ldw	ra,4(sp)
 100d438:	df000017 	ldw	fp,0(sp)
 100d43c:	dec00204 	addi	sp,sp,8
 100d440:	f800283a 	ret

0100d444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d444:	defffd04 	addi	sp,sp,-12
 100d448:	dfc00215 	stw	ra,8(sp)
 100d44c:	df000115 	stw	fp,4(sp)
 100d450:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d454:	00804074 	movhi	r2,257
 100d458:	108f2e04 	addi	r2,r2,15544
 100d45c:	10800017 	ldw	r2,0(r2)
 100d460:	1005003a 	cmpeq	r2,r2,zero
 100d464:	1000061e 	bne	r2,zero,100d480 <alt_get_errno+0x3c>
 100d468:	00804074 	movhi	r2,257
 100d46c:	108f2e04 	addi	r2,r2,15544
 100d470:	10800017 	ldw	r2,0(r2)
 100d474:	103ee83a 	callr	r2
 100d478:	e0bfff15 	stw	r2,-4(fp)
 100d47c:	00000306 	br	100d48c <alt_get_errno+0x48>
 100d480:	00804074 	movhi	r2,257
 100d484:	1095ed04 	addi	r2,r2,22452
 100d488:	e0bfff15 	stw	r2,-4(fp)
 100d48c:	e0bfff17 	ldw	r2,-4(fp)
}
 100d490:	e037883a 	mov	sp,fp
 100d494:	dfc00117 	ldw	ra,4(sp)
 100d498:	df000017 	ldw	fp,0(sp)
 100d49c:	dec00204 	addi	sp,sp,8
 100d4a0:	f800283a 	ret

0100d4a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100d4a4:	defffc04 	addi	sp,sp,-16
 100d4a8:	df000315 	stw	fp,12(sp)
 100d4ac:	df000304 	addi	fp,sp,12
 100d4b0:	e13ffd15 	stw	r4,-12(fp)
 100d4b4:	e17ffe15 	stw	r5,-8(fp)
 100d4b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100d4bc:	e0bfff17 	ldw	r2,-4(fp)
}
 100d4c0:	e037883a 	mov	sp,fp
 100d4c4:	df000017 	ldw	fp,0(sp)
 100d4c8:	dec00104 	addi	sp,sp,4
 100d4cc:	f800283a 	ret

0100d4d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100d4d0:	defff904 	addi	sp,sp,-28
 100d4d4:	dfc00615 	stw	ra,24(sp)
 100d4d8:	df000515 	stw	fp,20(sp)
 100d4dc:	df000504 	addi	fp,sp,20
 100d4e0:	e13ffc15 	stw	r4,-16(fp)
 100d4e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d4e8:	e0bffc17 	ldw	r2,-16(fp)
 100d4ec:	1004803a 	cmplt	r2,r2,zero
 100d4f0:	1000091e 	bne	r2,zero,100d518 <fstat+0x48>
 100d4f4:	e13ffc17 	ldw	r4,-16(fp)
 100d4f8:	01400304 	movi	r5,12
 100d4fc:	100435c0 	call	100435c <__mulsi3>
 100d500:	1007883a 	mov	r3,r2
 100d504:	00804074 	movhi	r2,257
 100d508:	108a8b04 	addi	r2,r2,10796
 100d50c:	1887883a 	add	r3,r3,r2
 100d510:	e0ffff15 	stw	r3,-4(fp)
 100d514:	00000106 	br	100d51c <fstat+0x4c>
 100d518:	e03fff15 	stw	zero,-4(fp)
 100d51c:	e0bfff17 	ldw	r2,-4(fp)
 100d520:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d524:	e0bffb17 	ldw	r2,-20(fp)
 100d528:	1005003a 	cmpeq	r2,r2,zero
 100d52c:	1000121e 	bne	r2,zero,100d578 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100d530:	e0bffb17 	ldw	r2,-20(fp)
 100d534:	10800017 	ldw	r2,0(r2)
 100d538:	10800817 	ldw	r2,32(r2)
 100d53c:	1005003a 	cmpeq	r2,r2,zero
 100d540:	1000081e 	bne	r2,zero,100d564 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100d544:	e0bffb17 	ldw	r2,-20(fp)
 100d548:	10800017 	ldw	r2,0(r2)
 100d54c:	10800817 	ldw	r2,32(r2)
 100d550:	e13ffb17 	ldw	r4,-20(fp)
 100d554:	e17ffd17 	ldw	r5,-12(fp)
 100d558:	103ee83a 	callr	r2
 100d55c:	e0bffe15 	stw	r2,-8(fp)
 100d560:	00000b06 	br	100d590 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100d564:	e0fffd17 	ldw	r3,-12(fp)
 100d568:	00880004 	movi	r2,8192
 100d56c:	18800115 	stw	r2,4(r3)
      return 0;
 100d570:	e03ffe15 	stw	zero,-8(fp)
 100d574:	00000606 	br	100d590 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d578:	100d5a80 	call	100d5a8 <alt_get_errno>
 100d57c:	1007883a 	mov	r3,r2
 100d580:	00801444 	movi	r2,81
 100d584:	18800015 	stw	r2,0(r3)
    return -1;
 100d588:	00bfffc4 	movi	r2,-1
 100d58c:	e0bffe15 	stw	r2,-8(fp)
 100d590:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100d594:	e037883a 	mov	sp,fp
 100d598:	dfc00117 	ldw	ra,4(sp)
 100d59c:	df000017 	ldw	fp,0(sp)
 100d5a0:	dec00204 	addi	sp,sp,8
 100d5a4:	f800283a 	ret

0100d5a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d5a8:	defffd04 	addi	sp,sp,-12
 100d5ac:	dfc00215 	stw	ra,8(sp)
 100d5b0:	df000115 	stw	fp,4(sp)
 100d5b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d5b8:	00804074 	movhi	r2,257
 100d5bc:	108f2e04 	addi	r2,r2,15544
 100d5c0:	10800017 	ldw	r2,0(r2)
 100d5c4:	1005003a 	cmpeq	r2,r2,zero
 100d5c8:	1000061e 	bne	r2,zero,100d5e4 <alt_get_errno+0x3c>
 100d5cc:	00804074 	movhi	r2,257
 100d5d0:	108f2e04 	addi	r2,r2,15544
 100d5d4:	10800017 	ldw	r2,0(r2)
 100d5d8:	103ee83a 	callr	r2
 100d5dc:	e0bfff15 	stw	r2,-4(fp)
 100d5e0:	00000306 	br	100d5f0 <alt_get_errno+0x48>
 100d5e4:	00804074 	movhi	r2,257
 100d5e8:	1095ed04 	addi	r2,r2,22452
 100d5ec:	e0bfff15 	stw	r2,-4(fp)
 100d5f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d5f4:	e037883a 	mov	sp,fp
 100d5f8:	dfc00117 	ldw	ra,4(sp)
 100d5fc:	df000017 	ldw	fp,0(sp)
 100d600:	dec00204 	addi	sp,sp,8
 100d604:	f800283a 	ret

0100d608 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100d608:	deffeb04 	addi	sp,sp,-84
 100d60c:	dfc01415 	stw	ra,80(sp)
 100d610:	df001315 	stw	fp,76(sp)
 100d614:	df001304 	addi	fp,sp,76
 100d618:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d61c:	e0bffd17 	ldw	r2,-12(fp)
 100d620:	1004803a 	cmplt	r2,r2,zero
 100d624:	1000091e 	bne	r2,zero,100d64c <isatty+0x44>
 100d628:	e13ffd17 	ldw	r4,-12(fp)
 100d62c:	01400304 	movi	r5,12
 100d630:	100435c0 	call	100435c <__mulsi3>
 100d634:	1007883a 	mov	r3,r2
 100d638:	00804074 	movhi	r2,257
 100d63c:	108a8b04 	addi	r2,r2,10796
 100d640:	1887883a 	add	r3,r3,r2
 100d644:	e0ffff15 	stw	r3,-4(fp)
 100d648:	00000106 	br	100d650 <isatty+0x48>
 100d64c:	e03fff15 	stw	zero,-4(fp)
 100d650:	e0bfff17 	ldw	r2,-4(fp)
 100d654:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100d658:	e0bfed17 	ldw	r2,-76(fp)
 100d65c:	1005003a 	cmpeq	r2,r2,zero
 100d660:	10000f1e 	bne	r2,zero,100d6a0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100d664:	e0bfed17 	ldw	r2,-76(fp)
 100d668:	10800017 	ldw	r2,0(r2)
 100d66c:	10800817 	ldw	r2,32(r2)
 100d670:	1004c03a 	cmpne	r2,r2,zero
 100d674:	1000031e 	bne	r2,zero,100d684 <isatty+0x7c>
    {
      return 1;
 100d678:	00800044 	movi	r2,1
 100d67c:	e0bffe15 	stw	r2,-8(fp)
 100d680:	00000c06 	br	100d6b4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100d684:	e17fee04 	addi	r5,fp,-72
 100d688:	e13ffd17 	ldw	r4,-12(fp)
 100d68c:	100d4d00 	call	100d4d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100d690:	e0bfef17 	ldw	r2,-68(fp)
 100d694:	10880020 	cmpeqi	r2,r2,8192
 100d698:	e0bffe15 	stw	r2,-8(fp)
 100d69c:	00000506 	br	100d6b4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d6a0:	100d6cc0 	call	100d6cc <alt_get_errno>
 100d6a4:	1007883a 	mov	r3,r2
 100d6a8:	00801444 	movi	r2,81
 100d6ac:	18800015 	stw	r2,0(r3)
    return 0;
 100d6b0:	e03ffe15 	stw	zero,-8(fp)
 100d6b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100d6b8:	e037883a 	mov	sp,fp
 100d6bc:	dfc00117 	ldw	ra,4(sp)
 100d6c0:	df000017 	ldw	fp,0(sp)
 100d6c4:	dec00204 	addi	sp,sp,8
 100d6c8:	f800283a 	ret

0100d6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d6cc:	defffd04 	addi	sp,sp,-12
 100d6d0:	dfc00215 	stw	ra,8(sp)
 100d6d4:	df000115 	stw	fp,4(sp)
 100d6d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d6dc:	00804074 	movhi	r2,257
 100d6e0:	108f2e04 	addi	r2,r2,15544
 100d6e4:	10800017 	ldw	r2,0(r2)
 100d6e8:	1005003a 	cmpeq	r2,r2,zero
 100d6ec:	1000061e 	bne	r2,zero,100d708 <alt_get_errno+0x3c>
 100d6f0:	00804074 	movhi	r2,257
 100d6f4:	108f2e04 	addi	r2,r2,15544
 100d6f8:	10800017 	ldw	r2,0(r2)
 100d6fc:	103ee83a 	callr	r2
 100d700:	e0bfff15 	stw	r2,-4(fp)
 100d704:	00000306 	br	100d714 <alt_get_errno+0x48>
 100d708:	00804074 	movhi	r2,257
 100d70c:	1095ed04 	addi	r2,r2,22452
 100d710:	e0bfff15 	stw	r2,-4(fp)
 100d714:	e0bfff17 	ldw	r2,-4(fp)
}
 100d718:	e037883a 	mov	sp,fp
 100d71c:	dfc00117 	ldw	ra,4(sp)
 100d720:	df000017 	ldw	fp,0(sp)
 100d724:	dec00204 	addi	sp,sp,8
 100d728:	f800283a 	ret

0100d72c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100d72c:	defffe04 	addi	sp,sp,-8
 100d730:	dfc00115 	stw	ra,4(sp)
 100d734:	df000015 	stw	fp,0(sp)
 100d738:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100d73c:	01004074 	movhi	r4,257
 100d740:	210f3304 	addi	r4,r4,15564
 100d744:	01404074 	movhi	r5,257
 100d748:	29487c04 	addi	r5,r5,8688
 100d74c:	01804074 	movhi	r6,257
 100d750:	318f3304 	addi	r6,r6,15564
 100d754:	100d7ac0 	call	100d7ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100d758:	01004034 	movhi	r4,256
 100d75c:	21000804 	addi	r4,r4,32
 100d760:	01404034 	movhi	r5,256
 100d764:	29400804 	addi	r5,r5,32
 100d768:	01804034 	movhi	r6,256
 100d76c:	31806d04 	addi	r6,r6,436
 100d770:	100d7ac0 	call	100d7ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100d774:	01004074 	movhi	r4,257
 100d778:	2106fa04 	addi	r4,r4,7144
 100d77c:	01404074 	movhi	r5,257
 100d780:	2946fa04 	addi	r5,r5,7144
 100d784:	01804074 	movhi	r6,257
 100d788:	31887c04 	addi	r6,r6,8688
 100d78c:	100d7ac0 	call	100d7ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100d790:	10109700 	call	1010970 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100d794:	1010bfc0 	call	1010bfc <alt_icache_flush_all>
}
 100d798:	e037883a 	mov	sp,fp
 100d79c:	dfc00117 	ldw	ra,4(sp)
 100d7a0:	df000017 	ldw	fp,0(sp)
 100d7a4:	dec00204 	addi	sp,sp,8
 100d7a8:	f800283a 	ret

0100d7ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100d7ac:	defffc04 	addi	sp,sp,-16
 100d7b0:	df000315 	stw	fp,12(sp)
 100d7b4:	df000304 	addi	fp,sp,12
 100d7b8:	e13ffd15 	stw	r4,-12(fp)
 100d7bc:	e17ffe15 	stw	r5,-8(fp)
 100d7c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100d7c4:	e0fffe17 	ldw	r3,-8(fp)
 100d7c8:	e0bffd17 	ldw	r2,-12(fp)
 100d7cc:	18800e26 	beq	r3,r2,100d808 <alt_load_section+0x5c>
  {
    while( to != end )
 100d7d0:	00000a06 	br	100d7fc <alt_load_section+0x50>
    {
      *to++ = *from++;
 100d7d4:	e0bffd17 	ldw	r2,-12(fp)
 100d7d8:	10c00017 	ldw	r3,0(r2)
 100d7dc:	e0bffe17 	ldw	r2,-8(fp)
 100d7e0:	10c00015 	stw	r3,0(r2)
 100d7e4:	e0bffe17 	ldw	r2,-8(fp)
 100d7e8:	10800104 	addi	r2,r2,4
 100d7ec:	e0bffe15 	stw	r2,-8(fp)
 100d7f0:	e0bffd17 	ldw	r2,-12(fp)
 100d7f4:	10800104 	addi	r2,r2,4
 100d7f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100d7fc:	e0fffe17 	ldw	r3,-8(fp)
 100d800:	e0bfff17 	ldw	r2,-4(fp)
 100d804:	18bff31e 	bne	r3,r2,100d7d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100d808:	e037883a 	mov	sp,fp
 100d80c:	df000017 	ldw	fp,0(sp)
 100d810:	dec00104 	addi	sp,sp,4
 100d814:	f800283a 	ret

0100d818 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100d818:	defff804 	addi	sp,sp,-32
 100d81c:	dfc00715 	stw	ra,28(sp)
 100d820:	df000615 	stw	fp,24(sp)
 100d824:	df000604 	addi	fp,sp,24
 100d828:	e13ffc15 	stw	r4,-16(fp)
 100d82c:	e17ffd15 	stw	r5,-12(fp)
 100d830:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100d834:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d838:	e0bffc17 	ldw	r2,-16(fp)
 100d83c:	1004803a 	cmplt	r2,r2,zero
 100d840:	1000091e 	bne	r2,zero,100d868 <lseek+0x50>
 100d844:	e13ffc17 	ldw	r4,-16(fp)
 100d848:	01400304 	movi	r5,12
 100d84c:	100435c0 	call	100435c <__mulsi3>
 100d850:	1007883a 	mov	r3,r2
 100d854:	00804074 	movhi	r2,257
 100d858:	108a8b04 	addi	r2,r2,10796
 100d85c:	1887883a 	add	r3,r3,r2
 100d860:	e0ffff15 	stw	r3,-4(fp)
 100d864:	00000106 	br	100d86c <lseek+0x54>
 100d868:	e03fff15 	stw	zero,-4(fp)
 100d86c:	e0bfff17 	ldw	r2,-4(fp)
 100d870:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100d874:	e0bffb17 	ldw	r2,-20(fp)
 100d878:	1005003a 	cmpeq	r2,r2,zero
 100d87c:	1000111e 	bne	r2,zero,100d8c4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100d880:	e0bffb17 	ldw	r2,-20(fp)
 100d884:	10800017 	ldw	r2,0(r2)
 100d888:	10800717 	ldw	r2,28(r2)
 100d88c:	1005003a 	cmpeq	r2,r2,zero
 100d890:	1000091e 	bne	r2,zero,100d8b8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100d894:	e0bffb17 	ldw	r2,-20(fp)
 100d898:	10800017 	ldw	r2,0(r2)
 100d89c:	10800717 	ldw	r2,28(r2)
 100d8a0:	e13ffb17 	ldw	r4,-20(fp)
 100d8a4:	e17ffd17 	ldw	r5,-12(fp)
 100d8a8:	e1bffe17 	ldw	r6,-8(fp)
 100d8ac:	103ee83a 	callr	r2
 100d8b0:	e0bffa15 	stw	r2,-24(fp)
 100d8b4:	00000506 	br	100d8cc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100d8b8:	00bfde84 	movi	r2,-134
 100d8bc:	e0bffa15 	stw	r2,-24(fp)
 100d8c0:	00000206 	br	100d8cc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100d8c4:	00bfebc4 	movi	r2,-81
 100d8c8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100d8cc:	e0bffa17 	ldw	r2,-24(fp)
 100d8d0:	1004403a 	cmpge	r2,r2,zero
 100d8d4:	1000071e 	bne	r2,zero,100d8f4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100d8d8:	100d90c0 	call	100d90c <alt_get_errno>
 100d8dc:	1007883a 	mov	r3,r2
 100d8e0:	e0bffa17 	ldw	r2,-24(fp)
 100d8e4:	0085c83a 	sub	r2,zero,r2
 100d8e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 100d8ec:	00bfffc4 	movi	r2,-1
 100d8f0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100d8f4:	e0bffa17 	ldw	r2,-24(fp)
}
 100d8f8:	e037883a 	mov	sp,fp
 100d8fc:	dfc00117 	ldw	ra,4(sp)
 100d900:	df000017 	ldw	fp,0(sp)
 100d904:	dec00204 	addi	sp,sp,8
 100d908:	f800283a 	ret

0100d90c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d90c:	defffd04 	addi	sp,sp,-12
 100d910:	dfc00215 	stw	ra,8(sp)
 100d914:	df000115 	stw	fp,4(sp)
 100d918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d91c:	00804074 	movhi	r2,257
 100d920:	108f2e04 	addi	r2,r2,15544
 100d924:	10800017 	ldw	r2,0(r2)
 100d928:	1005003a 	cmpeq	r2,r2,zero
 100d92c:	1000061e 	bne	r2,zero,100d948 <alt_get_errno+0x3c>
 100d930:	00804074 	movhi	r2,257
 100d934:	108f2e04 	addi	r2,r2,15544
 100d938:	10800017 	ldw	r2,0(r2)
 100d93c:	103ee83a 	callr	r2
 100d940:	e0bfff15 	stw	r2,-4(fp)
 100d944:	00000306 	br	100d954 <alt_get_errno+0x48>
 100d948:	00804074 	movhi	r2,257
 100d94c:	1095ed04 	addi	r2,r2,22452
 100d950:	e0bfff15 	stw	r2,-4(fp)
 100d954:	e0bfff17 	ldw	r2,-4(fp)
}
 100d958:	e037883a 	mov	sp,fp
 100d95c:	dfc00117 	ldw	ra,4(sp)
 100d960:	df000017 	ldw	fp,0(sp)
 100d964:	dec00204 	addi	sp,sp,8
 100d968:	f800283a 	ret

0100d96c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100d96c:	defffd04 	addi	sp,sp,-12
 100d970:	dfc00215 	stw	ra,8(sp)
 100d974:	df000115 	stw	fp,4(sp)
 100d978:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100d97c:	0009883a 	mov	r4,zero
 100d980:	100de840 	call	100de84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100d984:	100deb80 	call	100deb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100d988:	01004074 	movhi	r4,257
 100d98c:	21086604 	addi	r4,r4,8600
 100d990:	01404074 	movhi	r5,257
 100d994:	29486604 	addi	r5,r5,8600
 100d998:	01804074 	movhi	r6,257
 100d99c:	31886604 	addi	r6,r6,8600
 100d9a0:	1010fd00 	call	1010fd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100d9a4:	1010aa00 	call	1010aa0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100d9a8:	01004074 	movhi	r4,257
 100d9ac:	2102c104 	addi	r4,r4,2820
 100d9b0:	10117700 	call	1011770 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100d9b4:	d126ce17 	ldw	r4,-25800(gp)
 100d9b8:	d166cf17 	ldw	r5,-25796(gp)
 100d9bc:	d1a6d017 	ldw	r6,-25792(gp)
 100d9c0:	1000bb80 	call	1000bb8 <main>
 100d9c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100d9c8:	01000044 	movi	r4,1
 100d9cc:	100d3440 	call	100d344 <close>
  exit (result);
 100d9d0:	e13fff17 	ldw	r4,-4(fp)
 100d9d4:	10117840 	call	1011784 <exit>

0100d9d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100d9d8:	defffe04 	addi	sp,sp,-8
 100d9dc:	df000115 	stw	fp,4(sp)
 100d9e0:	df000104 	addi	fp,sp,4
 100d9e4:	e13fff15 	stw	r4,-4(fp)
}
 100d9e8:	e037883a 	mov	sp,fp
 100d9ec:	df000017 	ldw	fp,0(sp)
 100d9f0:	dec00104 	addi	sp,sp,4
 100d9f4:	f800283a 	ret

0100d9f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100d9f8:	defffe04 	addi	sp,sp,-8
 100d9fc:	df000115 	stw	fp,4(sp)
 100da00:	df000104 	addi	fp,sp,4
 100da04:	e13fff15 	stw	r4,-4(fp)
}
 100da08:	e037883a 	mov	sp,fp
 100da0c:	df000017 	ldw	fp,0(sp)
 100da10:	dec00104 	addi	sp,sp,4
 100da14:	f800283a 	ret

0100da18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100da18:	defff704 	addi	sp,sp,-36
 100da1c:	dfc00815 	stw	ra,32(sp)
 100da20:	df000715 	stw	fp,28(sp)
 100da24:	df000704 	addi	fp,sp,28
 100da28:	e13ffb15 	stw	r4,-20(fp)
 100da2c:	e17ffc15 	stw	r5,-16(fp)
 100da30:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100da34:	e0bffb17 	ldw	r2,-20(fp)
 100da38:	1004803a 	cmplt	r2,r2,zero
 100da3c:	1000091e 	bne	r2,zero,100da64 <read+0x4c>
 100da40:	e13ffb17 	ldw	r4,-20(fp)
 100da44:	01400304 	movi	r5,12
 100da48:	100435c0 	call	100435c <__mulsi3>
 100da4c:	1007883a 	mov	r3,r2
 100da50:	00804074 	movhi	r2,257
 100da54:	108a8b04 	addi	r2,r2,10796
 100da58:	1887883a 	add	r3,r3,r2
 100da5c:	e0ffff15 	stw	r3,-4(fp)
 100da60:	00000106 	br	100da68 <read+0x50>
 100da64:	e03fff15 	stw	zero,-4(fp)
 100da68:	e0bfff17 	ldw	r2,-4(fp)
 100da6c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100da70:	e0bffa17 	ldw	r2,-24(fp)
 100da74:	1005003a 	cmpeq	r2,r2,zero
 100da78:	1000241e 	bne	r2,zero,100db0c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100da7c:	e0bffa17 	ldw	r2,-24(fp)
 100da80:	10800217 	ldw	r2,8(r2)
 100da84:	108000cc 	andi	r2,r2,3
 100da88:	10800060 	cmpeqi	r2,r2,1
 100da8c:	10001a1e 	bne	r2,zero,100daf8 <read+0xe0>
 100da90:	e0bffa17 	ldw	r2,-24(fp)
 100da94:	10800017 	ldw	r2,0(r2)
 100da98:	10800517 	ldw	r2,20(r2)
 100da9c:	1005003a 	cmpeq	r2,r2,zero
 100daa0:	1000151e 	bne	r2,zero,100daf8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100daa4:	e0bffa17 	ldw	r2,-24(fp)
 100daa8:	10800017 	ldw	r2,0(r2)
 100daac:	10800517 	ldw	r2,20(r2)
 100dab0:	e17ffc17 	ldw	r5,-16(fp)
 100dab4:	e1bffd17 	ldw	r6,-12(fp)
 100dab8:	e13ffa17 	ldw	r4,-24(fp)
 100dabc:	103ee83a 	callr	r2
 100dac0:	e0bff915 	stw	r2,-28(fp)
 100dac4:	e0bff917 	ldw	r2,-28(fp)
 100dac8:	1004403a 	cmpge	r2,r2,zero
 100dacc:	1000071e 	bne	r2,zero,100daec <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100dad0:	100db3c0 	call	100db3c <alt_get_errno>
 100dad4:	e0fff917 	ldw	r3,-28(fp)
 100dad8:	00c7c83a 	sub	r3,zero,r3
 100dadc:	10c00015 	stw	r3,0(r2)
          return -1;
 100dae0:	00bfffc4 	movi	r2,-1
 100dae4:	e0bffe15 	stw	r2,-8(fp)
 100dae8:	00000e06 	br	100db24 <read+0x10c>
        }
        return rval;
 100daec:	e0bff917 	ldw	r2,-28(fp)
 100daf0:	e0bffe15 	stw	r2,-8(fp)
 100daf4:	00000b06 	br	100db24 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100daf8:	100db3c0 	call	100db3c <alt_get_errno>
 100dafc:	1007883a 	mov	r3,r2
 100db00:	00800344 	movi	r2,13
 100db04:	18800015 	stw	r2,0(r3)
 100db08:	00000406 	br	100db1c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100db0c:	100db3c0 	call	100db3c <alt_get_errno>
 100db10:	1007883a 	mov	r3,r2
 100db14:	00801444 	movi	r2,81
 100db18:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100db1c:	00bfffc4 	movi	r2,-1
 100db20:	e0bffe15 	stw	r2,-8(fp)
 100db24:	e0bffe17 	ldw	r2,-8(fp)
}
 100db28:	e037883a 	mov	sp,fp
 100db2c:	dfc00117 	ldw	ra,4(sp)
 100db30:	df000017 	ldw	fp,0(sp)
 100db34:	dec00204 	addi	sp,sp,8
 100db38:	f800283a 	ret

0100db3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100db3c:	defffd04 	addi	sp,sp,-12
 100db40:	dfc00215 	stw	ra,8(sp)
 100db44:	df000115 	stw	fp,4(sp)
 100db48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100db4c:	00804074 	movhi	r2,257
 100db50:	108f2e04 	addi	r2,r2,15544
 100db54:	10800017 	ldw	r2,0(r2)
 100db58:	1005003a 	cmpeq	r2,r2,zero
 100db5c:	1000061e 	bne	r2,zero,100db78 <alt_get_errno+0x3c>
 100db60:	00804074 	movhi	r2,257
 100db64:	108f2e04 	addi	r2,r2,15544
 100db68:	10800017 	ldw	r2,0(r2)
 100db6c:	103ee83a 	callr	r2
 100db70:	e0bfff15 	stw	r2,-4(fp)
 100db74:	00000306 	br	100db84 <alt_get_errno+0x48>
 100db78:	00804074 	movhi	r2,257
 100db7c:	1095ed04 	addi	r2,r2,22452
 100db80:	e0bfff15 	stw	r2,-4(fp)
 100db84:	e0bfff17 	ldw	r2,-4(fp)
}
 100db88:	e037883a 	mov	sp,fp
 100db8c:	dfc00117 	ldw	ra,4(sp)
 100db90:	df000017 	ldw	fp,0(sp)
 100db94:	dec00204 	addi	sp,sp,8
 100db98:	f800283a 	ret

0100db9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100db9c:	defffc04 	addi	sp,sp,-16
 100dba0:	dfc00315 	stw	ra,12(sp)
 100dba4:	df000215 	stw	fp,8(sp)
 100dba8:	dc000115 	stw	r16,4(sp)
 100dbac:	df000104 	addi	fp,sp,4
 100dbb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100dbb4:	e0bfff17 	ldw	r2,-4(fp)
 100dbb8:	108000d0 	cmplti	r2,r2,3
 100dbbc:	10000f1e 	bne	r2,zero,100dbfc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100dbc0:	e13fff17 	ldw	r4,-4(fp)
 100dbc4:	04004074 	movhi	r16,257
 100dbc8:	840a8b04 	addi	r16,r16,10796
 100dbcc:	01400304 	movi	r5,12
 100dbd0:	100435c0 	call	100435c <__mulsi3>
 100dbd4:	1405883a 	add	r2,r2,r16
 100dbd8:	10800204 	addi	r2,r2,8
 100dbdc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100dbe0:	e13fff17 	ldw	r4,-4(fp)
 100dbe4:	04004074 	movhi	r16,257
 100dbe8:	840a8b04 	addi	r16,r16,10796
 100dbec:	01400304 	movi	r5,12
 100dbf0:	100435c0 	call	100435c <__mulsi3>
 100dbf4:	1405883a 	add	r2,r2,r16
 100dbf8:	10000015 	stw	zero,0(r2)
  }
}
 100dbfc:	e037883a 	mov	sp,fp
 100dc00:	dfc00217 	ldw	ra,8(sp)
 100dc04:	df000117 	ldw	fp,4(sp)
 100dc08:	dc000017 	ldw	r16,0(sp)
 100dc0c:	dec00304 	addi	sp,sp,12
 100dc10:	f800283a 	ret

0100dc14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100dc14:	defff804 	addi	sp,sp,-32
 100dc18:	df000715 	stw	fp,28(sp)
 100dc1c:	df000704 	addi	fp,sp,28
 100dc20:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dc24:	0005303a 	rdctl	r2,status
 100dc28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dc2c:	e0fffb17 	ldw	r3,-20(fp)
 100dc30:	00bfff84 	movi	r2,-2
 100dc34:	1884703a 	and	r2,r3,r2
 100dc38:	1001703a 	wrctl	status,r2
  
  return context;
 100dc3c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100dc40:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100dc44:	d0a00c17 	ldw	r2,-32720(gp)
 100dc48:	10c000c4 	addi	r3,r2,3
 100dc4c:	00bfff04 	movi	r2,-4
 100dc50:	1884703a 	and	r2,r3,r2
 100dc54:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100dc58:	d0e00c17 	ldw	r3,-32720(gp)
 100dc5c:	e0bffe17 	ldw	r2,-8(fp)
 100dc60:	1887883a 	add	r3,r3,r2
 100dc64:	00806034 	movhi	r2,384
 100dc68:	10800004 	addi	r2,r2,0
 100dc6c:	10c0072e 	bgeu	r2,r3,100dc8c <sbrk+0x78>
 100dc70:	e0bffd17 	ldw	r2,-12(fp)
 100dc74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dc78:	e0bffa17 	ldw	r2,-24(fp)
 100dc7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100dc80:	00bfffc4 	movi	r2,-1
 100dc84:	e0bfff15 	stw	r2,-4(fp)
 100dc88:	00000c06 	br	100dcbc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100dc8c:	d0a00c17 	ldw	r2,-32720(gp)
 100dc90:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100dc94:	d0e00c17 	ldw	r3,-32720(gp)
 100dc98:	e0bffe17 	ldw	r2,-8(fp)
 100dc9c:	1885883a 	add	r2,r3,r2
 100dca0:	d0a00c15 	stw	r2,-32720(gp)
 100dca4:	e0bffd17 	ldw	r2,-12(fp)
 100dca8:	e0bff915 	stw	r2,-28(fp)
 100dcac:	e0bff917 	ldw	r2,-28(fp)
 100dcb0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100dcb4:	e0bffc17 	ldw	r2,-16(fp)
 100dcb8:	e0bfff15 	stw	r2,-4(fp)
 100dcbc:	e0bfff17 	ldw	r2,-4(fp)
} 
 100dcc0:	e037883a 	mov	sp,fp
 100dcc4:	df000017 	ldw	fp,0(sp)
 100dcc8:	dec00104 	addi	sp,sp,4
 100dccc:	f800283a 	ret

0100dcd0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100dcd0:	defffd04 	addi	sp,sp,-12
 100dcd4:	dfc00215 	stw	ra,8(sp)
 100dcd8:	df000115 	stw	fp,4(sp)
 100dcdc:	df000104 	addi	fp,sp,4
 100dce0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100dce4:	e13fff17 	ldw	r4,-4(fp)
 100dce8:	10108140 	call	1010814 <alt_busy_sleep>
}
 100dcec:	e037883a 	mov	sp,fp
 100dcf0:	dfc00117 	ldw	ra,4(sp)
 100dcf4:	df000017 	ldw	fp,0(sp)
 100dcf8:	dec00204 	addi	sp,sp,8
 100dcfc:	f800283a 	ret

0100dd00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100dd00:	defff704 	addi	sp,sp,-36
 100dd04:	dfc00815 	stw	ra,32(sp)
 100dd08:	df000715 	stw	fp,28(sp)
 100dd0c:	df000704 	addi	fp,sp,28
 100dd10:	e13ffb15 	stw	r4,-20(fp)
 100dd14:	e17ffc15 	stw	r5,-16(fp)
 100dd18:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dd1c:	e0bffb17 	ldw	r2,-20(fp)
 100dd20:	1004803a 	cmplt	r2,r2,zero
 100dd24:	1000091e 	bne	r2,zero,100dd4c <write+0x4c>
 100dd28:	e13ffb17 	ldw	r4,-20(fp)
 100dd2c:	01400304 	movi	r5,12
 100dd30:	100435c0 	call	100435c <__mulsi3>
 100dd34:	1007883a 	mov	r3,r2
 100dd38:	00804074 	movhi	r2,257
 100dd3c:	108a8b04 	addi	r2,r2,10796
 100dd40:	1887883a 	add	r3,r3,r2
 100dd44:	e0ffff15 	stw	r3,-4(fp)
 100dd48:	00000106 	br	100dd50 <write+0x50>
 100dd4c:	e03fff15 	stw	zero,-4(fp)
 100dd50:	e0bfff17 	ldw	r2,-4(fp)
 100dd54:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100dd58:	e0bffa17 	ldw	r2,-24(fp)
 100dd5c:	1005003a 	cmpeq	r2,r2,zero
 100dd60:	1000241e 	bne	r2,zero,100ddf4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100dd64:	e0bffa17 	ldw	r2,-24(fp)
 100dd68:	10800217 	ldw	r2,8(r2)
 100dd6c:	108000cc 	andi	r2,r2,3
 100dd70:	1005003a 	cmpeq	r2,r2,zero
 100dd74:	10001a1e 	bne	r2,zero,100dde0 <write+0xe0>
 100dd78:	e0bffa17 	ldw	r2,-24(fp)
 100dd7c:	10800017 	ldw	r2,0(r2)
 100dd80:	10800617 	ldw	r2,24(r2)
 100dd84:	1005003a 	cmpeq	r2,r2,zero
 100dd88:	1000151e 	bne	r2,zero,100dde0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100dd8c:	e0bffa17 	ldw	r2,-24(fp)
 100dd90:	10800017 	ldw	r2,0(r2)
 100dd94:	10800617 	ldw	r2,24(r2)
 100dd98:	e17ffc17 	ldw	r5,-16(fp)
 100dd9c:	e1bffd17 	ldw	r6,-12(fp)
 100dda0:	e13ffa17 	ldw	r4,-24(fp)
 100dda4:	103ee83a 	callr	r2
 100dda8:	e0bff915 	stw	r2,-28(fp)
 100ddac:	e0bff917 	ldw	r2,-28(fp)
 100ddb0:	1004403a 	cmpge	r2,r2,zero
 100ddb4:	1000071e 	bne	r2,zero,100ddd4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100ddb8:	100de240 	call	100de24 <alt_get_errno>
 100ddbc:	e0fff917 	ldw	r3,-28(fp)
 100ddc0:	00c7c83a 	sub	r3,zero,r3
 100ddc4:	10c00015 	stw	r3,0(r2)
        return -1;
 100ddc8:	00bfffc4 	movi	r2,-1
 100ddcc:	e0bffe15 	stw	r2,-8(fp)
 100ddd0:	00000e06 	br	100de0c <write+0x10c>
      }
      return rval;
 100ddd4:	e0bff917 	ldw	r2,-28(fp)
 100ddd8:	e0bffe15 	stw	r2,-8(fp)
 100dddc:	00000b06 	br	100de0c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100dde0:	100de240 	call	100de24 <alt_get_errno>
 100dde4:	1007883a 	mov	r3,r2
 100dde8:	00800344 	movi	r2,13
 100ddec:	18800015 	stw	r2,0(r3)
 100ddf0:	00000406 	br	100de04 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100ddf4:	100de240 	call	100de24 <alt_get_errno>
 100ddf8:	1007883a 	mov	r3,r2
 100ddfc:	00801444 	movi	r2,81
 100de00:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100de04:	00bfffc4 	movi	r2,-1
 100de08:	e0bffe15 	stw	r2,-8(fp)
 100de0c:	e0bffe17 	ldw	r2,-8(fp)
}
 100de10:	e037883a 	mov	sp,fp
 100de14:	dfc00117 	ldw	ra,4(sp)
 100de18:	df000017 	ldw	fp,0(sp)
 100de1c:	dec00204 	addi	sp,sp,8
 100de20:	f800283a 	ret

0100de24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100de24:	defffd04 	addi	sp,sp,-12
 100de28:	dfc00215 	stw	ra,8(sp)
 100de2c:	df000115 	stw	fp,4(sp)
 100de30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100de34:	00804074 	movhi	r2,257
 100de38:	108f2e04 	addi	r2,r2,15544
 100de3c:	10800017 	ldw	r2,0(r2)
 100de40:	1005003a 	cmpeq	r2,r2,zero
 100de44:	1000061e 	bne	r2,zero,100de60 <alt_get_errno+0x3c>
 100de48:	00804074 	movhi	r2,257
 100de4c:	108f2e04 	addi	r2,r2,15544
 100de50:	10800017 	ldw	r2,0(r2)
 100de54:	103ee83a 	callr	r2
 100de58:	e0bfff15 	stw	r2,-4(fp)
 100de5c:	00000306 	br	100de6c <alt_get_errno+0x48>
 100de60:	00804074 	movhi	r2,257
 100de64:	1095ed04 	addi	r2,r2,22452
 100de68:	e0bfff15 	stw	r2,-4(fp)
 100de6c:	e0bfff17 	ldw	r2,-4(fp)
}
 100de70:	e037883a 	mov	sp,fp
 100de74:	dfc00117 	ldw	ra,4(sp)
 100de78:	df000017 	ldw	fp,0(sp)
 100de7c:	dec00204 	addi	sp,sp,8
 100de80:	f800283a 	ret

0100de84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100de84:	defffd04 	addi	sp,sp,-12
 100de88:	dfc00215 	stw	ra,8(sp)
 100de8c:	df000115 	stw	fp,4(sp)
 100de90:	df000104 	addi	fp,sp,4
 100de94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100de98:	10114d00 	call	10114d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100de9c:	00800044 	movi	r2,1
 100dea0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100dea4:	e037883a 	mov	sp,fp
 100dea8:	dfc00117 	ldw	ra,4(sp)
 100deac:	df000017 	ldw	fp,0(sp)
 100deb0:	dec00204 	addi	sp,sp,8
 100deb4:	f800283a 	ret

0100deb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100deb8:	defffd04 	addi	sp,sp,-12
 100debc:	dfc00215 	stw	ra,8(sp)
 100dec0:	df000115 	stw	fp,4(sp)
 100dec4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100dec8:	01004074 	movhi	r4,257
 100decc:	210af504 	addi	r4,r4,11220
 100ded0:	000b883a 	mov	r5,zero
 100ded4:	01800144 	movi	r6,5
 100ded8:	100e28c0 	call	100e28c <altera_avalon_jtag_uart_init>
 100dedc:	01004074 	movhi	r4,257
 100dee0:	210aeb04 	addi	r4,r4,11180
 100dee4:	100e10c0 	call	100e10c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100dee8:	01004074 	movhi	r4,257
 100deec:	210f0304 	addi	r4,r4,15372
 100def0:	100eca00 	call	100eca0 <alt_up_character_lcd_init>
 100def4:	01004074 	movhi	r4,257
 100def8:	210f0304 	addi	r4,r4,15372
 100defc:	100e10c0 	call	100e10c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 100df00:	00804074 	movhi	r2,257
 100df04:	108f0e04 	addi	r2,r2,15416
 100df08:	10800a17 	ldw	r2,40(r2)
 100df0c:	10800017 	ldw	r2,0(r2)
 100df10:	1007883a 	mov	r3,r2
 100df14:	00804074 	movhi	r2,257
 100df18:	108f0e04 	addi	r2,r2,15416
 100df1c:	10c00b15 	stw	r3,44(r2)
 100df20:	00804074 	movhi	r2,257
 100df24:	108f0e04 	addi	r2,r2,15416
 100df28:	10800a17 	ldw	r2,40(r2)
 100df2c:	10800104 	addi	r2,r2,4
 100df30:	10800017 	ldw	r2,0(r2)
 100df34:	1007883a 	mov	r3,r2
 100df38:	00804074 	movhi	r2,257
 100df3c:	108f0e04 	addi	r2,r2,15416
 100df40:	10c00c15 	stw	r3,48(r2)
 100df44:	00804074 	movhi	r2,257
 100df48:	108f0e04 	addi	r2,r2,15416
 100df4c:	10800a17 	ldw	r2,40(r2)
 100df50:	10800204 	addi	r2,r2,8
 100df54:	10800017 	ldw	r2,0(r2)
 100df58:	10ffffcc 	andi	r3,r2,65535
 100df5c:	00804074 	movhi	r2,257
 100df60:	108f0e04 	addi	r2,r2,15416
 100df64:	10c00f15 	stw	r3,60(r2)
 100df68:	00804074 	movhi	r2,257
 100df6c:	108f0e04 	addi	r2,r2,15416
 100df70:	10800a17 	ldw	r2,40(r2)
 100df74:	10800204 	addi	r2,r2,8
 100df78:	10800017 	ldw	r2,0(r2)
 100df7c:	1005d43a 	srai	r2,r2,16
 100df80:	10ffffcc 	andi	r3,r2,65535
 100df84:	00804074 	movhi	r2,257
 100df88:	108f0e04 	addi	r2,r2,15416
 100df8c:	10c01015 	stw	r3,64(r2)
 100df90:	00804074 	movhi	r2,257
 100df94:	108f0e04 	addi	r2,r2,15416
 100df98:	10800a17 	ldw	r2,40(r2)
 100df9c:	10800304 	addi	r2,r2,12
 100dfa0:	10800017 	ldw	r2,0(r2)
 100dfa4:	1005d07a 	srai	r2,r2,1
 100dfa8:	10c0004c 	andi	r3,r2,1
 100dfac:	00804074 	movhi	r2,257
 100dfb0:	108f0e04 	addi	r2,r2,15416
 100dfb4:	10c00d15 	stw	r3,52(r2)
 100dfb8:	00804074 	movhi	r2,257
 100dfbc:	108f0e04 	addi	r2,r2,15416
 100dfc0:	10800a17 	ldw	r2,40(r2)
 100dfc4:	10800304 	addi	r2,r2,12
 100dfc8:	10800017 	ldw	r2,0(r2)
 100dfcc:	1005d13a 	srai	r2,r2,4
 100dfd0:	10c003cc 	andi	r3,r2,15
 100dfd4:	00804074 	movhi	r2,257
 100dfd8:	108f0e04 	addi	r2,r2,15416
 100dfdc:	10c00e15 	stw	r3,56(r2)
 100dfe0:	00804074 	movhi	r2,257
 100dfe4:	108f0e04 	addi	r2,r2,15416
 100dfe8:	10800a17 	ldw	r2,40(r2)
 100dfec:	10800304 	addi	r2,r2,12
 100dff0:	10800017 	ldw	r2,0(r2)
 100dff4:	1005d43a 	srai	r2,r2,16
 100dff8:	1007883a 	mov	r3,r2
 100dffc:	00bfffc4 	movi	r2,-1
 100e000:	1884703a 	and	r2,r3,r2
 100e004:	e0bfff45 	stb	r2,-3(fp)
 100e008:	00804074 	movhi	r2,257
 100e00c:	108f0e04 	addi	r2,r2,15416
 100e010:	10800a17 	ldw	r2,40(r2)
 100e014:	10800304 	addi	r2,r2,12
 100e018:	10800017 	ldw	r2,0(r2)
 100e01c:	1005d63a 	srai	r2,r2,24
 100e020:	1007883a 	mov	r3,r2
 100e024:	00bfffc4 	movi	r2,-1
 100e028:	1884703a 	and	r2,r3,r2
 100e02c:	e0bfff05 	stb	r2,-4(fp)
 100e030:	00804074 	movhi	r2,257
 100e034:	108f0e04 	addi	r2,r2,15416
 100e038:	10800e17 	ldw	r2,56(r2)
 100e03c:	10800058 	cmpnei	r2,r2,1
 100e040:	1000041e 	bne	r2,zero,100e054 <alt_sys_init+0x19c>
 100e044:	00804074 	movhi	r2,257
 100e048:	108f0e04 	addi	r2,r2,15416
 100e04c:	10001115 	stw	zero,68(r2)
 100e050:	00000e06 	br	100e08c <alt_sys_init+0x1d4>
 100e054:	00804074 	movhi	r2,257
 100e058:	108f0e04 	addi	r2,r2,15416
 100e05c:	10800e17 	ldw	r2,56(r2)
 100e060:	10800098 	cmpnei	r2,r2,2
 100e064:	1000051e 	bne	r2,zero,100e07c <alt_sys_init+0x1c4>
 100e068:	00c04074 	movhi	r3,257
 100e06c:	18cf0e04 	addi	r3,r3,15416
 100e070:	00800044 	movi	r2,1
 100e074:	18801115 	stw	r2,68(r3)
 100e078:	00000406 	br	100e08c <alt_sys_init+0x1d4>
 100e07c:	00c04074 	movhi	r3,257
 100e080:	18cf0e04 	addi	r3,r3,15416
 100e084:	00800084 	movi	r2,2
 100e088:	18801115 	stw	r2,68(r3)
 100e08c:	e0ffff43 	ldbu	r3,-3(fp)
 100e090:	00800804 	movi	r2,32
 100e094:	10c7c83a 	sub	r3,r2,r3
 100e098:	00bfffc4 	movi	r2,-1
 100e09c:	10c6d83a 	srl	r3,r2,r3
 100e0a0:	00804074 	movhi	r2,257
 100e0a4:	108f0e04 	addi	r2,r2,15416
 100e0a8:	10c01215 	stw	r3,72(r2)
 100e0ac:	e0ffff43 	ldbu	r3,-3(fp)
 100e0b0:	00804074 	movhi	r2,257
 100e0b4:	108f0e04 	addi	r2,r2,15416
 100e0b8:	10801117 	ldw	r2,68(r2)
 100e0bc:	1887883a 	add	r3,r3,r2
 100e0c0:	00804074 	movhi	r2,257
 100e0c4:	108f0e04 	addi	r2,r2,15416
 100e0c8:	10c01315 	stw	r3,76(r2)
 100e0cc:	e0ffff03 	ldbu	r3,-4(fp)
 100e0d0:	00800804 	movi	r2,32
 100e0d4:	10c7c83a 	sub	r3,r2,r3
 100e0d8:	00bfffc4 	movi	r2,-1
 100e0dc:	10c6d83a 	srl	r3,r2,r3
 100e0e0:	00804074 	movhi	r2,257
 100e0e4:	108f0e04 	addi	r2,r2,15416
 100e0e8:	10c01415 	stw	r3,80(r2)
 100e0ec:	01004074 	movhi	r4,257
 100e0f0:	210f0e04 	addi	r4,r4,15416
 100e0f4:	100e10c0 	call	100e10c <alt_dev_reg>
}
 100e0f8:	e037883a 	mov	sp,fp
 100e0fc:	dfc00117 	ldw	ra,4(sp)
 100e100:	df000017 	ldw	fp,0(sp)
 100e104:	dec00204 	addi	sp,sp,8
 100e108:	f800283a 	ret

0100e10c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100e10c:	defffd04 	addi	sp,sp,-12
 100e110:	dfc00215 	stw	ra,8(sp)
 100e114:	df000115 	stw	fp,4(sp)
 100e118:	df000104 	addi	fp,sp,4
 100e11c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100e120:	e13fff17 	ldw	r4,-4(fp)
 100e124:	01404074 	movhi	r5,257
 100e128:	294f2b04 	addi	r5,r5,15532
 100e12c:	101098c0 	call	101098c <alt_dev_llist_insert>
}
 100e130:	e037883a 	mov	sp,fp
 100e134:	dfc00117 	ldw	ra,4(sp)
 100e138:	df000017 	ldw	fp,0(sp)
 100e13c:	dec00204 	addi	sp,sp,8
 100e140:	f800283a 	ret

0100e144 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100e144:	defffa04 	addi	sp,sp,-24
 100e148:	dfc00515 	stw	ra,20(sp)
 100e14c:	df000415 	stw	fp,16(sp)
 100e150:	df000404 	addi	fp,sp,16
 100e154:	e13ffd15 	stw	r4,-12(fp)
 100e158:	e17ffe15 	stw	r5,-8(fp)
 100e15c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e160:	e0bffd17 	ldw	r2,-12(fp)
 100e164:	10800017 	ldw	r2,0(r2)
 100e168:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100e16c:	e0bffc17 	ldw	r2,-16(fp)
 100e170:	11000a04 	addi	r4,r2,40
 100e174:	e0bffd17 	ldw	r2,-12(fp)
 100e178:	11c00217 	ldw	r7,8(r2)
 100e17c:	e17ffe17 	ldw	r5,-8(fp)
 100e180:	e1bfff17 	ldw	r6,-4(fp)
 100e184:	100e78c0 	call	100e78c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100e188:	e037883a 	mov	sp,fp
 100e18c:	dfc00117 	ldw	ra,4(sp)
 100e190:	df000017 	ldw	fp,0(sp)
 100e194:	dec00204 	addi	sp,sp,8
 100e198:	f800283a 	ret

0100e19c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100e19c:	defffa04 	addi	sp,sp,-24
 100e1a0:	dfc00515 	stw	ra,20(sp)
 100e1a4:	df000415 	stw	fp,16(sp)
 100e1a8:	df000404 	addi	fp,sp,16
 100e1ac:	e13ffd15 	stw	r4,-12(fp)
 100e1b0:	e17ffe15 	stw	r5,-8(fp)
 100e1b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e1b8:	e0bffd17 	ldw	r2,-12(fp)
 100e1bc:	10800017 	ldw	r2,0(r2)
 100e1c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100e1c4:	e0bffc17 	ldw	r2,-16(fp)
 100e1c8:	11000a04 	addi	r4,r2,40
 100e1cc:	e0bffd17 	ldw	r2,-12(fp)
 100e1d0:	11c00217 	ldw	r7,8(r2)
 100e1d4:	e17ffe17 	ldw	r5,-8(fp)
 100e1d8:	e1bfff17 	ldw	r6,-4(fp)
 100e1dc:	100e9b00 	call	100e9b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100e1e0:	e037883a 	mov	sp,fp
 100e1e4:	dfc00117 	ldw	ra,4(sp)
 100e1e8:	df000017 	ldw	fp,0(sp)
 100e1ec:	dec00204 	addi	sp,sp,8
 100e1f0:	f800283a 	ret

0100e1f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100e1f4:	defffc04 	addi	sp,sp,-16
 100e1f8:	dfc00315 	stw	ra,12(sp)
 100e1fc:	df000215 	stw	fp,8(sp)
 100e200:	df000204 	addi	fp,sp,8
 100e204:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e208:	e0bfff17 	ldw	r2,-4(fp)
 100e20c:	10800017 	ldw	r2,0(r2)
 100e210:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100e214:	e0bffe17 	ldw	r2,-8(fp)
 100e218:	11000a04 	addi	r4,r2,40
 100e21c:	e0bfff17 	ldw	r2,-4(fp)
 100e220:	11400217 	ldw	r5,8(r2)
 100e224:	100e6240 	call	100e624 <altera_avalon_jtag_uart_close>
}
 100e228:	e037883a 	mov	sp,fp
 100e22c:	dfc00117 	ldw	ra,4(sp)
 100e230:	df000017 	ldw	fp,0(sp)
 100e234:	dec00204 	addi	sp,sp,8
 100e238:	f800283a 	ret

0100e23c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100e23c:	defffa04 	addi	sp,sp,-24
 100e240:	dfc00515 	stw	ra,20(sp)
 100e244:	df000415 	stw	fp,16(sp)
 100e248:	df000404 	addi	fp,sp,16
 100e24c:	e13ffd15 	stw	r4,-12(fp)
 100e250:	e17ffe15 	stw	r5,-8(fp)
 100e254:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100e258:	e0bffd17 	ldw	r2,-12(fp)
 100e25c:	10800017 	ldw	r2,0(r2)
 100e260:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100e264:	e0bffc17 	ldw	r2,-16(fp)
 100e268:	11000a04 	addi	r4,r2,40
 100e26c:	e17ffe17 	ldw	r5,-8(fp)
 100e270:	e1bfff17 	ldw	r6,-4(fp)
 100e274:	100e6980 	call	100e698 <altera_avalon_jtag_uart_ioctl>
}
 100e278:	e037883a 	mov	sp,fp
 100e27c:	dfc00117 	ldw	ra,4(sp)
 100e280:	df000017 	ldw	fp,0(sp)
 100e284:	dec00204 	addi	sp,sp,8
 100e288:	f800283a 	ret

0100e28c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100e28c:	defffa04 	addi	sp,sp,-24
 100e290:	dfc00515 	stw	ra,20(sp)
 100e294:	df000415 	stw	fp,16(sp)
 100e298:	df000404 	addi	fp,sp,16
 100e29c:	e13ffd15 	stw	r4,-12(fp)
 100e2a0:	e17ffe15 	stw	r5,-8(fp)
 100e2a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e2a8:	e0fffd17 	ldw	r3,-12(fp)
 100e2ac:	00800044 	movi	r2,1
 100e2b0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100e2b4:	e0bffd17 	ldw	r2,-12(fp)
 100e2b8:	10800017 	ldw	r2,0(r2)
 100e2bc:	11000104 	addi	r4,r2,4
 100e2c0:	e0bffd17 	ldw	r2,-12(fp)
 100e2c4:	10800817 	ldw	r2,32(r2)
 100e2c8:	1007883a 	mov	r3,r2
 100e2cc:	2005883a 	mov	r2,r4
 100e2d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100e2d4:	e13ffe17 	ldw	r4,-8(fp)
 100e2d8:	e17fff17 	ldw	r5,-4(fp)
 100e2dc:	d8000015 	stw	zero,0(sp)
 100e2e0:	01804074 	movhi	r6,257
 100e2e4:	31b8d304 	addi	r6,r6,-7348
 100e2e8:	e1fffd17 	ldw	r7,-12(fp)
 100e2ec:	1010c2c0 	call	1010c2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100e2f0:	e0bffd17 	ldw	r2,-12(fp)
 100e2f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100e2f8:	e0bffd17 	ldw	r2,-12(fp)
 100e2fc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100e300:	00804074 	movhi	r2,257
 100e304:	1095f504 	addi	r2,r2,22484
 100e308:	10800017 	ldw	r2,0(r2)
 100e30c:	100b883a 	mov	r5,r2
 100e310:	01804074 	movhi	r6,257
 100e314:	31b95d04 	addi	r6,r6,-6796
 100e318:	e1fffd17 	ldw	r7,-12(fp)
 100e31c:	10106c00 	call	10106c0 <alt_alarm_start>
 100e320:	1004403a 	cmpge	r2,r2,zero
 100e324:	1000041e 	bne	r2,zero,100e338 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100e328:	e0fffd17 	ldw	r3,-12(fp)
 100e32c:	00a00034 	movhi	r2,32768
 100e330:	10bfffc4 	addi	r2,r2,-1
 100e334:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100e338:	e037883a 	mov	sp,fp
 100e33c:	dfc00117 	ldw	ra,4(sp)
 100e340:	df000017 	ldw	fp,0(sp)
 100e344:	dec00204 	addi	sp,sp,8
 100e348:	f800283a 	ret

0100e34c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100e34c:	defff804 	addi	sp,sp,-32
 100e350:	df000715 	stw	fp,28(sp)
 100e354:	df000704 	addi	fp,sp,28
 100e358:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100e35c:	e0bfff17 	ldw	r2,-4(fp)
 100e360:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100e364:	e0bffe17 	ldw	r2,-8(fp)
 100e368:	10800017 	ldw	r2,0(r2)
 100e36c:	e0bffd15 	stw	r2,-12(fp)
 100e370:	00000006 	br	100e374 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e374:	e0bffd17 	ldw	r2,-12(fp)
 100e378:	10800104 	addi	r2,r2,4
 100e37c:	10800037 	ldwio	r2,0(r2)
 100e380:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100e384:	e0bffc17 	ldw	r2,-16(fp)
 100e388:	1080c00c 	andi	r2,r2,768
 100e38c:	1005003a 	cmpeq	r2,r2,zero
 100e390:	1000741e 	bne	r2,zero,100e564 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100e394:	e0bffc17 	ldw	r2,-16(fp)
 100e398:	1080400c 	andi	r2,r2,256
 100e39c:	1005003a 	cmpeq	r2,r2,zero
 100e3a0:	1000351e 	bne	r2,zero,100e478 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100e3a4:	00800074 	movhi	r2,1
 100e3a8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e3ac:	e0bffe17 	ldw	r2,-8(fp)
 100e3b0:	10800a17 	ldw	r2,40(r2)
 100e3b4:	10800044 	addi	r2,r2,1
 100e3b8:	1081ffcc 	andi	r2,r2,2047
 100e3bc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100e3c0:	e0bffe17 	ldw	r2,-8(fp)
 100e3c4:	10c00b17 	ldw	r3,44(r2)
 100e3c8:	e0bffa17 	ldw	r2,-24(fp)
 100e3cc:	18801626 	beq	r3,r2,100e428 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100e3d0:	e0bffd17 	ldw	r2,-12(fp)
 100e3d4:	10800037 	ldwio	r2,0(r2)
 100e3d8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100e3dc:	e0bffb17 	ldw	r2,-20(fp)
 100e3e0:	10a0000c 	andi	r2,r2,32768
 100e3e4:	1005003a 	cmpeq	r2,r2,zero
 100e3e8:	10000f1e 	bne	r2,zero,100e428 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100e3ec:	e0bffe17 	ldw	r2,-8(fp)
 100e3f0:	10c00a17 	ldw	r3,40(r2)
 100e3f4:	e0bffb17 	ldw	r2,-20(fp)
 100e3f8:	1009883a 	mov	r4,r2
 100e3fc:	e0bffe17 	ldw	r2,-8(fp)
 100e400:	1885883a 	add	r2,r3,r2
 100e404:	10800e04 	addi	r2,r2,56
 100e408:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e40c:	e0bffe17 	ldw	r2,-8(fp)
 100e410:	10800a17 	ldw	r2,40(r2)
 100e414:	10800044 	addi	r2,r2,1
 100e418:	10c1ffcc 	andi	r3,r2,2047
 100e41c:	e0bffe17 	ldw	r2,-8(fp)
 100e420:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100e424:	003fe106 	br	100e3ac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100e428:	e0bffb17 	ldw	r2,-20(fp)
 100e42c:	10bfffec 	andhi	r2,r2,65535
 100e430:	1005003a 	cmpeq	r2,r2,zero
 100e434:	1000101e 	bne	r2,zero,100e478 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e438:	e0bffe17 	ldw	r2,-8(fp)
 100e43c:	10c00817 	ldw	r3,32(r2)
 100e440:	00bfff84 	movi	r2,-2
 100e444:	1886703a 	and	r3,r3,r2
 100e448:	e0bffe17 	ldw	r2,-8(fp)
 100e44c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100e450:	e0bffd17 	ldw	r2,-12(fp)
 100e454:	11000104 	addi	r4,r2,4
 100e458:	e0bffe17 	ldw	r2,-8(fp)
 100e45c:	10800817 	ldw	r2,32(r2)
 100e460:	1007883a 	mov	r3,r2
 100e464:	2005883a 	mov	r2,r4
 100e468:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e46c:	e0bffd17 	ldw	r2,-12(fp)
 100e470:	10800104 	addi	r2,r2,4
 100e474:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100e478:	e0bffc17 	ldw	r2,-16(fp)
 100e47c:	1080800c 	andi	r2,r2,512
 100e480:	1005003a 	cmpeq	r2,r2,zero
 100e484:	103fbb1e 	bne	r2,zero,100e374 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100e488:	e0bffc17 	ldw	r2,-16(fp)
 100e48c:	10bfffec 	andhi	r2,r2,65535
 100e490:	1004d43a 	srli	r2,r2,16
 100e494:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e498:	00001506 	br	100e4f0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100e49c:	e13ffd17 	ldw	r4,-12(fp)
 100e4a0:	e0bffe17 	ldw	r2,-8(fp)
 100e4a4:	10c00d17 	ldw	r3,52(r2)
 100e4a8:	e0bffe17 	ldw	r2,-8(fp)
 100e4ac:	1885883a 	add	r2,r3,r2
 100e4b0:	10820e04 	addi	r2,r2,2104
 100e4b4:	10800003 	ldbu	r2,0(r2)
 100e4b8:	10c03fcc 	andi	r3,r2,255
 100e4bc:	18c0201c 	xori	r3,r3,128
 100e4c0:	18ffe004 	addi	r3,r3,-128
 100e4c4:	2005883a 	mov	r2,r4
 100e4c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e4cc:	e0bffe17 	ldw	r2,-8(fp)
 100e4d0:	10800d17 	ldw	r2,52(r2)
 100e4d4:	10800044 	addi	r2,r2,1
 100e4d8:	10c1ffcc 	andi	r3,r2,2047
 100e4dc:	e0bffe17 	ldw	r2,-8(fp)
 100e4e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100e4e4:	e0bff917 	ldw	r2,-28(fp)
 100e4e8:	10bfffc4 	addi	r2,r2,-1
 100e4ec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e4f0:	e0bff917 	ldw	r2,-28(fp)
 100e4f4:	1005003a 	cmpeq	r2,r2,zero
 100e4f8:	1000051e 	bne	r2,zero,100e510 <altera_avalon_jtag_uart_irq+0x1c4>
 100e4fc:	e0bffe17 	ldw	r2,-8(fp)
 100e500:	10c00d17 	ldw	r3,52(r2)
 100e504:	e0bffe17 	ldw	r2,-8(fp)
 100e508:	10800c17 	ldw	r2,48(r2)
 100e50c:	18bfe31e 	bne	r3,r2,100e49c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100e510:	e0bff917 	ldw	r2,-28(fp)
 100e514:	1005003a 	cmpeq	r2,r2,zero
 100e518:	103f961e 	bne	r2,zero,100e374 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e51c:	e0bffe17 	ldw	r2,-8(fp)
 100e520:	10c00817 	ldw	r3,32(r2)
 100e524:	00bfff44 	movi	r2,-3
 100e528:	1886703a 	and	r3,r3,r2
 100e52c:	e0bffe17 	ldw	r2,-8(fp)
 100e530:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e534:	e0bffe17 	ldw	r2,-8(fp)
 100e538:	10800017 	ldw	r2,0(r2)
 100e53c:	11000104 	addi	r4,r2,4
 100e540:	e0bffe17 	ldw	r2,-8(fp)
 100e544:	10800817 	ldw	r2,32(r2)
 100e548:	1007883a 	mov	r3,r2
 100e54c:	2005883a 	mov	r2,r4
 100e550:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e554:	e0bffd17 	ldw	r2,-12(fp)
 100e558:	10800104 	addi	r2,r2,4
 100e55c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100e560:	003f8406 	br	100e374 <altera_avalon_jtag_uart_irq+0x28>
}
 100e564:	e037883a 	mov	sp,fp
 100e568:	df000017 	ldw	fp,0(sp)
 100e56c:	dec00104 	addi	sp,sp,4
 100e570:	f800283a 	ret

0100e574 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100e574:	defffc04 	addi	sp,sp,-16
 100e578:	df000315 	stw	fp,12(sp)
 100e57c:	df000304 	addi	fp,sp,12
 100e580:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100e584:	e0bfff17 	ldw	r2,-4(fp)
 100e588:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100e58c:	e0bffe17 	ldw	r2,-8(fp)
 100e590:	10800017 	ldw	r2,0(r2)
 100e594:	10800104 	addi	r2,r2,4
 100e598:	10800037 	ldwio	r2,0(r2)
 100e59c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100e5a0:	e0bffd17 	ldw	r2,-12(fp)
 100e5a4:	1081000c 	andi	r2,r2,1024
 100e5a8:	1005003a 	cmpeq	r2,r2,zero
 100e5ac:	10000c1e 	bne	r2,zero,100e5e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100e5b0:	e0bffe17 	ldw	r2,-8(fp)
 100e5b4:	10800017 	ldw	r2,0(r2)
 100e5b8:	11000104 	addi	r4,r2,4
 100e5bc:	e0bffe17 	ldw	r2,-8(fp)
 100e5c0:	10800817 	ldw	r2,32(r2)
 100e5c4:	10810014 	ori	r2,r2,1024
 100e5c8:	1007883a 	mov	r3,r2
 100e5cc:	2005883a 	mov	r2,r4
 100e5d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100e5d4:	e0bffe17 	ldw	r2,-8(fp)
 100e5d8:	10000915 	stw	zero,36(r2)
 100e5dc:	00000a06 	br	100e608 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100e5e0:	e0bffe17 	ldw	r2,-8(fp)
 100e5e4:	10c00917 	ldw	r3,36(r2)
 100e5e8:	00a00034 	movhi	r2,32768
 100e5ec:	10bfff04 	addi	r2,r2,-4
 100e5f0:	10c00536 	bltu	r2,r3,100e608 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100e5f4:	e0bffe17 	ldw	r2,-8(fp)
 100e5f8:	10800917 	ldw	r2,36(r2)
 100e5fc:	10c00044 	addi	r3,r2,1
 100e600:	e0bffe17 	ldw	r2,-8(fp)
 100e604:	10c00915 	stw	r3,36(r2)
 100e608:	00804074 	movhi	r2,257
 100e60c:	1095f504 	addi	r2,r2,22484
 100e610:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100e614:	e037883a 	mov	sp,fp
 100e618:	df000017 	ldw	fp,0(sp)
 100e61c:	dec00104 	addi	sp,sp,4
 100e620:	f800283a 	ret

0100e624 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100e624:	defffc04 	addi	sp,sp,-16
 100e628:	df000315 	stw	fp,12(sp)
 100e62c:	df000304 	addi	fp,sp,12
 100e630:	e13ffd15 	stw	r4,-12(fp)
 100e634:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100e638:	00000706 	br	100e658 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100e63c:	e0bffe17 	ldw	r2,-8(fp)
 100e640:	1090000c 	andi	r2,r2,16384
 100e644:	1005003a 	cmpeq	r2,r2,zero
 100e648:	1000031e 	bne	r2,zero,100e658 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100e64c:	00bffd44 	movi	r2,-11
 100e650:	e0bfff15 	stw	r2,-4(fp)
 100e654:	00000b06 	br	100e684 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100e658:	e0bffd17 	ldw	r2,-12(fp)
 100e65c:	10c00d17 	ldw	r3,52(r2)
 100e660:	e0bffd17 	ldw	r2,-12(fp)
 100e664:	10800c17 	ldw	r2,48(r2)
 100e668:	18800526 	beq	r3,r2,100e680 <altera_avalon_jtag_uart_close+0x5c>
 100e66c:	e0bffd17 	ldw	r2,-12(fp)
 100e670:	10c00917 	ldw	r3,36(r2)
 100e674:	e0bffd17 	ldw	r2,-12(fp)
 100e678:	10800117 	ldw	r2,4(r2)
 100e67c:	18bfef36 	bltu	r3,r2,100e63c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100e680:	e03fff15 	stw	zero,-4(fp)
 100e684:	e0bfff17 	ldw	r2,-4(fp)
}
 100e688:	e037883a 	mov	sp,fp
 100e68c:	df000017 	ldw	fp,0(sp)
 100e690:	dec00104 	addi	sp,sp,4
 100e694:	f800283a 	ret

0100e698 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100e698:	defff804 	addi	sp,sp,-32
 100e69c:	df000715 	stw	fp,28(sp)
 100e6a0:	df000704 	addi	fp,sp,28
 100e6a4:	e13ffb15 	stw	r4,-20(fp)
 100e6a8:	e17ffc15 	stw	r5,-16(fp)
 100e6ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100e6b0:	00bff9c4 	movi	r2,-25
 100e6b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100e6b8:	e0bffc17 	ldw	r2,-16(fp)
 100e6bc:	e0bfff15 	stw	r2,-4(fp)
 100e6c0:	e0ffff17 	ldw	r3,-4(fp)
 100e6c4:	189a8060 	cmpeqi	r2,r3,27137
 100e6c8:	1000041e 	bne	r2,zero,100e6dc <altera_avalon_jtag_uart_ioctl+0x44>
 100e6cc:	e0ffff17 	ldw	r3,-4(fp)
 100e6d0:	189a80a0 	cmpeqi	r2,r3,27138
 100e6d4:	10001b1e 	bne	r2,zero,100e744 <altera_avalon_jtag_uart_ioctl+0xac>
 100e6d8:	00002706 	br	100e778 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100e6dc:	e0bffb17 	ldw	r2,-20(fp)
 100e6e0:	10c00117 	ldw	r3,4(r2)
 100e6e4:	00a00034 	movhi	r2,32768
 100e6e8:	10bfffc4 	addi	r2,r2,-1
 100e6ec:	18802226 	beq	r3,r2,100e778 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100e6f0:	e0bffd17 	ldw	r2,-12(fp)
 100e6f4:	10800017 	ldw	r2,0(r2)
 100e6f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100e6fc:	e0bff917 	ldw	r2,-28(fp)
 100e700:	10800090 	cmplti	r2,r2,2
 100e704:	1000071e 	bne	r2,zero,100e724 <altera_avalon_jtag_uart_ioctl+0x8c>
 100e708:	e0fff917 	ldw	r3,-28(fp)
 100e70c:	00a00034 	movhi	r2,32768
 100e710:	10bfffc4 	addi	r2,r2,-1
 100e714:	18800326 	beq	r3,r2,100e724 <altera_avalon_jtag_uart_ioctl+0x8c>
 100e718:	e0bff917 	ldw	r2,-28(fp)
 100e71c:	e0bffe15 	stw	r2,-8(fp)
 100e720:	00000306 	br	100e730 <altera_avalon_jtag_uart_ioctl+0x98>
 100e724:	00e00034 	movhi	r3,32768
 100e728:	18ffff84 	addi	r3,r3,-2
 100e72c:	e0fffe15 	stw	r3,-8(fp)
 100e730:	e0bffb17 	ldw	r2,-20(fp)
 100e734:	e0fffe17 	ldw	r3,-8(fp)
 100e738:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100e73c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100e740:	00000d06 	br	100e778 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100e744:	e0bffb17 	ldw	r2,-20(fp)
 100e748:	10c00117 	ldw	r3,4(r2)
 100e74c:	00a00034 	movhi	r2,32768
 100e750:	10bfffc4 	addi	r2,r2,-1
 100e754:	18800826 	beq	r3,r2,100e778 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100e758:	e13ffd17 	ldw	r4,-12(fp)
 100e75c:	e0bffb17 	ldw	r2,-20(fp)
 100e760:	10c00917 	ldw	r3,36(r2)
 100e764:	e0bffb17 	ldw	r2,-20(fp)
 100e768:	10800117 	ldw	r2,4(r2)
 100e76c:	1885803a 	cmpltu	r2,r3,r2
 100e770:	20800015 	stw	r2,0(r4)
      rc = 0;
 100e774:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100e778:	e0bffa17 	ldw	r2,-24(fp)
}
 100e77c:	e037883a 	mov	sp,fp
 100e780:	df000017 	ldw	fp,0(sp)
 100e784:	dec00104 	addi	sp,sp,4
 100e788:	f800283a 	ret

0100e78c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100e78c:	defff204 	addi	sp,sp,-56
 100e790:	dfc00d15 	stw	ra,52(sp)
 100e794:	df000c15 	stw	fp,48(sp)
 100e798:	df000c04 	addi	fp,sp,48
 100e79c:	e13ffb15 	stw	r4,-20(fp)
 100e7a0:	e17ffc15 	stw	r5,-16(fp)
 100e7a4:	e1bffd15 	stw	r6,-12(fp)
 100e7a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100e7ac:	e0bffc17 	ldw	r2,-16(fp)
 100e7b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e7b4:	00004806 	br	100e8d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100e7b8:	e0bffb17 	ldw	r2,-20(fp)
 100e7bc:	10800a17 	ldw	r2,40(r2)
 100e7c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100e7c4:	e0bffb17 	ldw	r2,-20(fp)
 100e7c8:	10800b17 	ldw	r2,44(r2)
 100e7cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100e7d0:	e0fff717 	ldw	r3,-36(fp)
 100e7d4:	e0bff617 	ldw	r2,-40(fp)
 100e7d8:	18800536 	bltu	r3,r2,100e7f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100e7dc:	e0bff717 	ldw	r2,-36(fp)
 100e7e0:	e0fff617 	ldw	r3,-40(fp)
 100e7e4:	10c5c83a 	sub	r2,r2,r3
 100e7e8:	e0bff815 	stw	r2,-32(fp)
 100e7ec:	00000406 	br	100e800 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100e7f0:	00820004 	movi	r2,2048
 100e7f4:	e0fff617 	ldw	r3,-40(fp)
 100e7f8:	10c5c83a 	sub	r2,r2,r3
 100e7fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100e800:	e0bff817 	ldw	r2,-32(fp)
 100e804:	1005003a 	cmpeq	r2,r2,zero
 100e808:	10001f1e 	bne	r2,zero,100e888 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100e80c:	e0fffd17 	ldw	r3,-12(fp)
 100e810:	e0bff817 	ldw	r2,-32(fp)
 100e814:	1880022e 	bgeu	r3,r2,100e820 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100e818:	e0bffd17 	ldw	r2,-12(fp)
 100e81c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100e820:	e0bffb17 	ldw	r2,-20(fp)
 100e824:	10c00e04 	addi	r3,r2,56
 100e828:	e0bff617 	ldw	r2,-40(fp)
 100e82c:	1887883a 	add	r3,r3,r2
 100e830:	e0bffa17 	ldw	r2,-24(fp)
 100e834:	1009883a 	mov	r4,r2
 100e838:	180b883a 	mov	r5,r3
 100e83c:	e1bff817 	ldw	r6,-32(fp)
 100e840:	100a1c40 	call	100a1c4 <memcpy>
      ptr   += n;
 100e844:	e0fff817 	ldw	r3,-32(fp)
 100e848:	e0bffa17 	ldw	r2,-24(fp)
 100e84c:	10c5883a 	add	r2,r2,r3
 100e850:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100e854:	e0fffd17 	ldw	r3,-12(fp)
 100e858:	e0bff817 	ldw	r2,-32(fp)
 100e85c:	1885c83a 	sub	r2,r3,r2
 100e860:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e864:	e0fff617 	ldw	r3,-40(fp)
 100e868:	e0bff817 	ldw	r2,-32(fp)
 100e86c:	1885883a 	add	r2,r3,r2
 100e870:	10c1ffcc 	andi	r3,r2,2047
 100e874:	e0bffb17 	ldw	r2,-20(fp)
 100e878:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100e87c:	e0bffd17 	ldw	r2,-12(fp)
 100e880:	10800048 	cmpgei	r2,r2,1
 100e884:	103fcc1e 	bne	r2,zero,100e7b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100e888:	e0fffa17 	ldw	r3,-24(fp)
 100e88c:	e0bffc17 	ldw	r2,-16(fp)
 100e890:	1880141e 	bne	r3,r2,100e8e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100e894:	e0bffe17 	ldw	r2,-8(fp)
 100e898:	1090000c 	andi	r2,r2,16384
 100e89c:	1004c03a 	cmpne	r2,r2,zero
 100e8a0:	1000101e 	bne	r2,zero,100e8e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100e8a4:	e0bffb17 	ldw	r2,-20(fp)
 100e8a8:	10c00a17 	ldw	r3,40(r2)
 100e8ac:	e0bff717 	ldw	r2,-36(fp)
 100e8b0:	1880051e 	bne	r3,r2,100e8c8 <altera_avalon_jtag_uart_read+0x13c>
 100e8b4:	e0bffb17 	ldw	r2,-20(fp)
 100e8b8:	10c00917 	ldw	r3,36(r2)
 100e8bc:	e0bffb17 	ldw	r2,-20(fp)
 100e8c0:	10800117 	ldw	r2,4(r2)
 100e8c4:	18bff736 	bltu	r3,r2,100e8a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100e8c8:	e0bffb17 	ldw	r2,-20(fp)
 100e8cc:	10c00a17 	ldw	r3,40(r2)
 100e8d0:	e0bff717 	ldw	r2,-36(fp)
 100e8d4:	18800326 	beq	r3,r2,100e8e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e8d8:	e0bffd17 	ldw	r2,-12(fp)
 100e8dc:	10800048 	cmpgei	r2,r2,1
 100e8e0:	103fb51e 	bne	r2,zero,100e7b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100e8e4:	e0fffa17 	ldw	r3,-24(fp)
 100e8e8:	e0bffc17 	ldw	r2,-16(fp)
 100e8ec:	18801926 	beq	r3,r2,100e954 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e8f0:	0005303a 	rdctl	r2,status
 100e8f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e8f8:	e0fff517 	ldw	r3,-44(fp)
 100e8fc:	00bfff84 	movi	r2,-2
 100e900:	1884703a 	and	r2,r3,r2
 100e904:	1001703a 	wrctl	status,r2
  
  return context;
 100e908:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100e90c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e910:	e0bffb17 	ldw	r2,-20(fp)
 100e914:	10800817 	ldw	r2,32(r2)
 100e918:	10c00054 	ori	r3,r2,1
 100e91c:	e0bffb17 	ldw	r2,-20(fp)
 100e920:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e924:	e0bffb17 	ldw	r2,-20(fp)
 100e928:	10800017 	ldw	r2,0(r2)
 100e92c:	11000104 	addi	r4,r2,4
 100e930:	e0bffb17 	ldw	r2,-20(fp)
 100e934:	10800817 	ldw	r2,32(r2)
 100e938:	1007883a 	mov	r3,r2
 100e93c:	2005883a 	mov	r2,r4
 100e940:	10c00035 	stwio	r3,0(r2)
 100e944:	e0bff917 	ldw	r2,-28(fp)
 100e948:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e94c:	e0bff417 	ldw	r2,-48(fp)
 100e950:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100e954:	e0fffa17 	ldw	r3,-24(fp)
 100e958:	e0bffc17 	ldw	r2,-16(fp)
 100e95c:	18800526 	beq	r3,r2,100e974 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100e960:	e0fffa17 	ldw	r3,-24(fp)
 100e964:	e0bffc17 	ldw	r2,-16(fp)
 100e968:	1887c83a 	sub	r3,r3,r2
 100e96c:	e0ffff15 	stw	r3,-4(fp)
 100e970:	00000906 	br	100e998 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100e974:	e0bffe17 	ldw	r2,-8(fp)
 100e978:	1090000c 	andi	r2,r2,16384
 100e97c:	1005003a 	cmpeq	r2,r2,zero
 100e980:	1000031e 	bne	r2,zero,100e990 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100e984:	00bffd44 	movi	r2,-11
 100e988:	e0bfff15 	stw	r2,-4(fp)
 100e98c:	00000206 	br	100e998 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100e990:	00bffec4 	movi	r2,-5
 100e994:	e0bfff15 	stw	r2,-4(fp)
 100e998:	e0bfff17 	ldw	r2,-4(fp)
}
 100e99c:	e037883a 	mov	sp,fp
 100e9a0:	dfc00117 	ldw	ra,4(sp)
 100e9a4:	df000017 	ldw	fp,0(sp)
 100e9a8:	dec00204 	addi	sp,sp,8
 100e9ac:	f800283a 	ret

0100e9b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100e9b0:	defff204 	addi	sp,sp,-56
 100e9b4:	dfc00d15 	stw	ra,52(sp)
 100e9b8:	df000c15 	stw	fp,48(sp)
 100e9bc:	df000c04 	addi	fp,sp,48
 100e9c0:	e13ffb15 	stw	r4,-20(fp)
 100e9c4:	e17ffc15 	stw	r5,-16(fp)
 100e9c8:	e1bffd15 	stw	r6,-12(fp)
 100e9cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100e9d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100e9d4:	e0bffc17 	ldw	r2,-16(fp)
 100e9d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e9dc:	00003a06 	br	100eac8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100e9e0:	e0bffb17 	ldw	r2,-20(fp)
 100e9e4:	10800c17 	ldw	r2,48(r2)
 100e9e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100e9ec:	e0bffb17 	ldw	r2,-20(fp)
 100e9f0:	10800d17 	ldw	r2,52(r2)
 100e9f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100e9f8:	e0fffa17 	ldw	r3,-24(fp)
 100e9fc:	e0bff917 	ldw	r2,-28(fp)
 100ea00:	1880062e 	bgeu	r3,r2,100ea1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100ea04:	e0fff917 	ldw	r3,-28(fp)
 100ea08:	e0bffa17 	ldw	r2,-24(fp)
 100ea0c:	1885c83a 	sub	r2,r3,r2
 100ea10:	10bfffc4 	addi	r2,r2,-1
 100ea14:	e0bff815 	stw	r2,-32(fp)
 100ea18:	00000c06 	br	100ea4c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100ea1c:	e0bff917 	ldw	r2,-28(fp)
 100ea20:	1005003a 	cmpeq	r2,r2,zero
 100ea24:	1000051e 	bne	r2,zero,100ea3c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100ea28:	00820004 	movi	r2,2048
 100ea2c:	e0fffa17 	ldw	r3,-24(fp)
 100ea30:	10c5c83a 	sub	r2,r2,r3
 100ea34:	e0bff815 	stw	r2,-32(fp)
 100ea38:	00000406 	br	100ea4c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100ea3c:	0081ffc4 	movi	r2,2047
 100ea40:	e0fffa17 	ldw	r3,-24(fp)
 100ea44:	10c5c83a 	sub	r2,r2,r3
 100ea48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100ea4c:	e0bff817 	ldw	r2,-32(fp)
 100ea50:	1005003a 	cmpeq	r2,r2,zero
 100ea54:	10001f1e 	bne	r2,zero,100ead4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100ea58:	e0fffd17 	ldw	r3,-12(fp)
 100ea5c:	e0bff817 	ldw	r2,-32(fp)
 100ea60:	1880022e 	bgeu	r3,r2,100ea6c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100ea64:	e0bffd17 	ldw	r2,-12(fp)
 100ea68:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100ea6c:	e0bffb17 	ldw	r2,-20(fp)
 100ea70:	10c20e04 	addi	r3,r2,2104
 100ea74:	e0bffa17 	ldw	r2,-24(fp)
 100ea78:	1885883a 	add	r2,r3,r2
 100ea7c:	e0fffc17 	ldw	r3,-16(fp)
 100ea80:	1009883a 	mov	r4,r2
 100ea84:	180b883a 	mov	r5,r3
 100ea88:	e1bff817 	ldw	r6,-32(fp)
 100ea8c:	100a1c40 	call	100a1c4 <memcpy>
      ptr   += n;
 100ea90:	e0fff817 	ldw	r3,-32(fp)
 100ea94:	e0bffc17 	ldw	r2,-16(fp)
 100ea98:	10c5883a 	add	r2,r2,r3
 100ea9c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100eaa0:	e0fffd17 	ldw	r3,-12(fp)
 100eaa4:	e0bff817 	ldw	r2,-32(fp)
 100eaa8:	1885c83a 	sub	r2,r3,r2
 100eaac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100eab0:	e0fffa17 	ldw	r3,-24(fp)
 100eab4:	e0bff817 	ldw	r2,-32(fp)
 100eab8:	1885883a 	add	r2,r3,r2
 100eabc:	10c1ffcc 	andi	r3,r2,2047
 100eac0:	e0bffb17 	ldw	r2,-20(fp)
 100eac4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100eac8:	e0bffd17 	ldw	r2,-12(fp)
 100eacc:	10800048 	cmpgei	r2,r2,1
 100ead0:	103fc31e 	bne	r2,zero,100e9e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ead4:	0005303a 	rdctl	r2,status
 100ead8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100eadc:	e0fff517 	ldw	r3,-44(fp)
 100eae0:	00bfff84 	movi	r2,-2
 100eae4:	1884703a 	and	r2,r3,r2
 100eae8:	1001703a 	wrctl	status,r2
  
  return context;
 100eaec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100eaf0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100eaf4:	e0bffb17 	ldw	r2,-20(fp)
 100eaf8:	10800817 	ldw	r2,32(r2)
 100eafc:	10c00094 	ori	r3,r2,2
 100eb00:	e0bffb17 	ldw	r2,-20(fp)
 100eb04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100eb08:	e0bffb17 	ldw	r2,-20(fp)
 100eb0c:	10800017 	ldw	r2,0(r2)
 100eb10:	11000104 	addi	r4,r2,4
 100eb14:	e0bffb17 	ldw	r2,-20(fp)
 100eb18:	10800817 	ldw	r2,32(r2)
 100eb1c:	1007883a 	mov	r3,r2
 100eb20:	2005883a 	mov	r2,r4
 100eb24:	10c00035 	stwio	r3,0(r2)
 100eb28:	e0bff717 	ldw	r2,-36(fp)
 100eb2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100eb30:	e0bff417 	ldw	r2,-48(fp)
 100eb34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100eb38:	e0bffd17 	ldw	r2,-12(fp)
 100eb3c:	10800050 	cmplti	r2,r2,1
 100eb40:	1000111e 	bne	r2,zero,100eb88 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100eb44:	e0bffe17 	ldw	r2,-8(fp)
 100eb48:	1090000c 	andi	r2,r2,16384
 100eb4c:	1004c03a 	cmpne	r2,r2,zero
 100eb50:	1000101e 	bne	r2,zero,100eb94 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100eb54:	e0bffb17 	ldw	r2,-20(fp)
 100eb58:	10c00d17 	ldw	r3,52(r2)
 100eb5c:	e0bff917 	ldw	r2,-28(fp)
 100eb60:	1880051e 	bne	r3,r2,100eb78 <altera_avalon_jtag_uart_write+0x1c8>
 100eb64:	e0bffb17 	ldw	r2,-20(fp)
 100eb68:	10c00917 	ldw	r3,36(r2)
 100eb6c:	e0bffb17 	ldw	r2,-20(fp)
 100eb70:	10800117 	ldw	r2,4(r2)
 100eb74:	18bff736 	bltu	r3,r2,100eb54 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100eb78:	e0bffb17 	ldw	r2,-20(fp)
 100eb7c:	10c00d17 	ldw	r3,52(r2)
 100eb80:	e0bff917 	ldw	r2,-28(fp)
 100eb84:	18800326 	beq	r3,r2,100eb94 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100eb88:	e0bffd17 	ldw	r2,-12(fp)
 100eb8c:	10800048 	cmpgei	r2,r2,1
 100eb90:	103fcd1e 	bne	r2,zero,100eac8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100eb94:	e0fffc17 	ldw	r3,-16(fp)
 100eb98:	e0bff617 	ldw	r2,-40(fp)
 100eb9c:	18800526 	beq	r3,r2,100ebb4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100eba0:	e0fffc17 	ldw	r3,-16(fp)
 100eba4:	e0bff617 	ldw	r2,-40(fp)
 100eba8:	1887c83a 	sub	r3,r3,r2
 100ebac:	e0ffff15 	stw	r3,-4(fp)
 100ebb0:	00000906 	br	100ebd8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100ebb4:	e0bffe17 	ldw	r2,-8(fp)
 100ebb8:	1090000c 	andi	r2,r2,16384
 100ebbc:	1005003a 	cmpeq	r2,r2,zero
 100ebc0:	1000031e 	bne	r2,zero,100ebd0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100ebc4:	00bffd44 	movi	r2,-11
 100ebc8:	e0bfff15 	stw	r2,-4(fp)
 100ebcc:	00000206 	br	100ebd8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100ebd0:	00bffec4 	movi	r2,-5
 100ebd4:	e0bfff15 	stw	r2,-4(fp)
 100ebd8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ebdc:	e037883a 	mov	sp,fp
 100ebe0:	dfc00117 	ldw	ra,4(sp)
 100ebe4:	df000017 	ldw	fp,0(sp)
 100ebe8:	dec00204 	addi	sp,sp,8
 100ebec:	f800283a 	ret

0100ebf0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100ebf0:	defffc04 	addi	sp,sp,-16
 100ebf4:	df000315 	stw	fp,12(sp)
 100ebf8:	df000304 	addi	fp,sp,12
 100ebfc:	e13ffe15 	stw	r4,-8(fp)
 100ec00:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100ec04:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100ec08:	e0bfff17 	ldw	r2,-4(fp)
 100ec0c:	1004c03a 	cmpne	r2,r2,zero
 100ec10:	1000061e 	bne	r2,zero,100ec2c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100ec14:	e0bffe17 	ldw	r2,-8(fp)
 100ec18:	1007883a 	mov	r3,r2
 100ec1c:	e0bffd03 	ldbu	r2,-12(fp)
 100ec20:	10c4b03a 	or	r2,r2,r3
 100ec24:	e0bffd05 	stb	r2,-12(fp)
 100ec28:	00000806 	br	100ec4c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100ec2c:	e0bffe17 	ldw	r2,-8(fp)
 100ec30:	1007883a 	mov	r3,r2
 100ec34:	e0bffd03 	ldbu	r2,-12(fp)
 100ec38:	10c4b03a 	or	r2,r2,r3
 100ec3c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100ec40:	e0bffd03 	ldbu	r2,-12(fp)
 100ec44:	10801014 	ori	r2,r2,64
 100ec48:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100ec4c:	e0fffd03 	ldbu	r3,-12(fp)
 100ec50:	00bfe004 	movi	r2,-128
 100ec54:	1884b03a 	or	r2,r3,r2
 100ec58:	10803fcc 	andi	r2,r2,255
}
 100ec5c:	e037883a 	mov	sp,fp
 100ec60:	df000017 	ldw	fp,0(sp)
 100ec64:	dec00104 	addi	sp,sp,4
 100ec68:	f800283a 	ret

0100ec6c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100ec6c:	defffd04 	addi	sp,sp,-12
 100ec70:	df000215 	stw	fp,8(sp)
 100ec74:	df000204 	addi	fp,sp,8
 100ec78:	e13ffe15 	stw	r4,-8(fp)
 100ec7c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100ec80:	e0bffe17 	ldw	r2,-8(fp)
 100ec84:	10800a17 	ldw	r2,40(r2)
 100ec88:	e0ffff03 	ldbu	r3,-4(fp)
 100ec8c:	10c00025 	stbio	r3,0(r2)
}
 100ec90:	e037883a 	mov	sp,fp
 100ec94:	df000017 	ldw	fp,0(sp)
 100ec98:	dec00104 	addi	sp,sp,4
 100ec9c:	f800283a 	ret

0100eca0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100eca0:	defffe04 	addi	sp,sp,-8
 100eca4:	df000115 	stw	fp,4(sp)
 100eca8:	df000104 	addi	fp,sp,4
 100ecac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100ecb0:	e0bfff17 	ldw	r2,-4(fp)
 100ecb4:	10800a17 	ldw	r2,40(r2)
 100ecb8:	1007883a 	mov	r3,r2
 100ecbc:	00800044 	movi	r2,1
 100ecc0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100ecc4:	e037883a 	mov	sp,fp
 100ecc8:	df000017 	ldw	fp,0(sp)
 100eccc:	dec00104 	addi	sp,sp,4
 100ecd0:	f800283a 	ret

0100ecd4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100ecd4:	defffc04 	addi	sp,sp,-16
 100ecd8:	dfc00315 	stw	ra,12(sp)
 100ecdc:	df000215 	stw	fp,8(sp)
 100ece0:	df000204 	addi	fp,sp,8
 100ece4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100ece8:	e13fff17 	ldw	r4,-4(fp)
 100ecec:	01404074 	movhi	r5,257
 100ecf0:	294f2b04 	addi	r5,r5,15532
 100ecf4:	1010b680 	call	1010b68 <alt_find_dev>
 100ecf8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100ecfc:	e0bffe17 	ldw	r2,-8(fp)
}
 100ed00:	e037883a 	mov	sp,fp
 100ed04:	dfc00117 	ldw	ra,4(sp)
 100ed08:	df000017 	ldw	fp,0(sp)
 100ed0c:	dec00204 	addi	sp,sp,8
 100ed10:	f800283a 	ret

0100ed14 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100ed14:	defffb04 	addi	sp,sp,-20
 100ed18:	df000415 	stw	fp,16(sp)
 100ed1c:	df000404 	addi	fp,sp,16
 100ed20:	e13ffd15 	stw	r4,-12(fp)
 100ed24:	e17ffe15 	stw	r5,-8(fp)
 100ed28:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100ed2c:	e03ffc15 	stw	zero,-16(fp)
 100ed30:	00000f06 	br	100ed70 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100ed34:	e0bffd17 	ldw	r2,-12(fp)
 100ed38:	10800a17 	ldw	r2,40(r2)
 100ed3c:	11000044 	addi	r4,r2,1
 100ed40:	e0fffc17 	ldw	r3,-16(fp)
 100ed44:	e0bffe17 	ldw	r2,-8(fp)
 100ed48:	1885883a 	add	r2,r3,r2
 100ed4c:	10800003 	ldbu	r2,0(r2)
 100ed50:	10c03fcc 	andi	r3,r2,255
 100ed54:	18c0201c 	xori	r3,r3,128
 100ed58:	18ffe004 	addi	r3,r3,-128
 100ed5c:	2005883a 	mov	r2,r4
 100ed60:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100ed64:	e0bffc17 	ldw	r2,-16(fp)
 100ed68:	10800044 	addi	r2,r2,1
 100ed6c:	e0bffc15 	stw	r2,-16(fp)
 100ed70:	e0fffc17 	ldw	r3,-16(fp)
 100ed74:	e0bfff17 	ldw	r2,-4(fp)
 100ed78:	18bfee36 	bltu	r3,r2,100ed34 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100ed7c:	e037883a 	mov	sp,fp
 100ed80:	df000017 	ldw	fp,0(sp)
 100ed84:	dec00104 	addi	sp,sp,4
 100ed88:	f800283a 	ret

0100ed8c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100ed8c:	defffd04 	addi	sp,sp,-12
 100ed90:	df000215 	stw	fp,8(sp)
 100ed94:	df000204 	addi	fp,sp,8
 100ed98:	e13ffe15 	stw	r4,-8(fp)
 100ed9c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100eda0:	00000d06 	br	100edd8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100eda4:	e0bffe17 	ldw	r2,-8(fp)
 100eda8:	10800a17 	ldw	r2,40(r2)
 100edac:	11000044 	addi	r4,r2,1
 100edb0:	e0bfff17 	ldw	r2,-4(fp)
 100edb4:	10800003 	ldbu	r2,0(r2)
 100edb8:	10c03fcc 	andi	r3,r2,255
 100edbc:	18c0201c 	xori	r3,r3,128
 100edc0:	18ffe004 	addi	r3,r3,-128
 100edc4:	2005883a 	mov	r2,r4
 100edc8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100edcc:	e0bfff17 	ldw	r2,-4(fp)
 100edd0:	10800044 	addi	r2,r2,1
 100edd4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100edd8:	e0bfff17 	ldw	r2,-4(fp)
 100eddc:	10800003 	ldbu	r2,0(r2)
 100ede0:	10803fcc 	andi	r2,r2,255
 100ede4:	1080201c 	xori	r2,r2,128
 100ede8:	10bfe004 	addi	r2,r2,-128
 100edec:	1004c03a 	cmpne	r2,r2,zero
 100edf0:	103fec1e 	bne	r2,zero,100eda4 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100edf4:	e037883a 	mov	sp,fp
 100edf8:	df000017 	ldw	fp,0(sp)
 100edfc:	dec00104 	addi	sp,sp,4
 100ee00:	f800283a 	ret

0100ee04 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100ee04:	defffb04 	addi	sp,sp,-20
 100ee08:	dfc00415 	stw	ra,16(sp)
 100ee0c:	df000315 	stw	fp,12(sp)
 100ee10:	df000304 	addi	fp,sp,12
 100ee14:	e13ffd15 	stw	r4,-12(fp)
 100ee18:	e17ffe15 	stw	r5,-8(fp)
 100ee1c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100ee20:	e0bffd17 	ldw	r2,-12(fp)
 100ee24:	10800017 	ldw	r2,0(r2)
 100ee28:	1009883a 	mov	r4,r2
 100ee2c:	e1bfff17 	ldw	r6,-4(fp)
 100ee30:	e17ffe17 	ldw	r5,-8(fp)
 100ee34:	100ed140 	call	100ed14 <alt_up_character_lcd_write>
	return 0;
 100ee38:	0005883a 	mov	r2,zero
}
 100ee3c:	e037883a 	mov	sp,fp
 100ee40:	dfc00117 	ldw	ra,4(sp)
 100ee44:	df000017 	ldw	fp,0(sp)
 100ee48:	dec00204 	addi	sp,sp,8
 100ee4c:	f800283a 	ret

0100ee50 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100ee50:	defff904 	addi	sp,sp,-28
 100ee54:	dfc00615 	stw	ra,24(sp)
 100ee58:	df000515 	stw	fp,20(sp)
 100ee5c:	df000504 	addi	fp,sp,20
 100ee60:	e13ffc15 	stw	r4,-16(fp)
 100ee64:	e17ffd15 	stw	r5,-12(fp)
 100ee68:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100ee6c:	e0bffd17 	ldw	r2,-12(fp)
 100ee70:	10800a28 	cmpgeui	r2,r2,40
 100ee74:	1000031e 	bne	r2,zero,100ee84 <alt_up_character_lcd_set_cursor_pos+0x34>
 100ee78:	e0bffe17 	ldw	r2,-8(fp)
 100ee7c:	108000b0 	cmpltui	r2,r2,2
 100ee80:	1000031e 	bne	r2,zero,100ee90 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100ee84:	00bfffc4 	movi	r2,-1
 100ee88:	e0bfff15 	stw	r2,-4(fp)
 100ee8c:	00000806 	br	100eeb0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100ee90:	e13ffd17 	ldw	r4,-12(fp)
 100ee94:	e17ffe17 	ldw	r5,-8(fp)
 100ee98:	100ebf00 	call	100ebf0 <get_DDRAM_addr>
 100ee9c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100eea0:	e17ffb03 	ldbu	r5,-20(fp)
 100eea4:	e13ffc17 	ldw	r4,-16(fp)
 100eea8:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
	return 0;
 100eeac:	e03fff15 	stw	zero,-4(fp)
 100eeb0:	e0bfff17 	ldw	r2,-4(fp)
}
 100eeb4:	e037883a 	mov	sp,fp
 100eeb8:	dfc00117 	ldw	ra,4(sp)
 100eebc:	df000017 	ldw	fp,0(sp)
 100eec0:	dec00204 	addi	sp,sp,8
 100eec4:	f800283a 	ret

0100eec8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100eec8:	defff904 	addi	sp,sp,-28
 100eecc:	dfc00615 	stw	ra,24(sp)
 100eed0:	df000515 	stw	fp,20(sp)
 100eed4:	df000504 	addi	fp,sp,20
 100eed8:	e13ffc15 	stw	r4,-16(fp)
 100eedc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100eee0:	e0bffd17 	ldw	r2,-12(fp)
 100eee4:	1005003a 	cmpeq	r2,r2,zero
 100eee8:	10001e1e 	bne	r2,zero,100ef64 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100eeec:	e0bffd17 	ldw	r2,-12(fp)
 100eef0:	10800050 	cmplti	r2,r2,1
 100eef4:	1000031e 	bne	r2,zero,100ef04 <alt_up_character_lcd_shift_cursor+0x3c>
 100eef8:	00800504 	movi	r2,20
 100eefc:	e0bfff05 	stb	r2,-4(fp)
 100ef00:	00000206 	br	100ef0c <alt_up_character_lcd_shift_cursor+0x44>
 100ef04:	00c00404 	movi	r3,16
 100ef08:	e0ffff05 	stb	r3,-4(fp)
 100ef0c:	e0bfff03 	ldbu	r2,-4(fp)
 100ef10:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100ef14:	e0fffd17 	ldw	r3,-12(fp)
 100ef18:	e0fffe15 	stw	r3,-8(fp)
 100ef1c:	e0fffe17 	ldw	r3,-8(fp)
 100ef20:	1804403a 	cmpge	r2,r3,zero
 100ef24:	1000031e 	bne	r2,zero,100ef34 <alt_up_character_lcd_shift_cursor+0x6c>
 100ef28:	e0bffe17 	ldw	r2,-8(fp)
 100ef2c:	0085c83a 	sub	r2,zero,r2
 100ef30:	e0bffe15 	stw	r2,-8(fp)
 100ef34:	e0fffe17 	ldw	r3,-8(fp)
 100ef38:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100ef3c:	00000306 	br	100ef4c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100ef40:	e17ffb43 	ldbu	r5,-19(fp)
 100ef44:	e13ffc17 	ldw	r4,-16(fp)
 100ef48:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100ef4c:	e0bffb03 	ldbu	r2,-20(fp)
 100ef50:	10bfffc4 	addi	r2,r2,-1
 100ef54:	e0bffb05 	stb	r2,-20(fp)
 100ef58:	e0bffb03 	ldbu	r2,-20(fp)
 100ef5c:	10803fd8 	cmpnei	r2,r2,255
 100ef60:	103ff71e 	bne	r2,zero,100ef40 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100ef64:	e037883a 	mov	sp,fp
 100ef68:	dfc00117 	ldw	ra,4(sp)
 100ef6c:	df000017 	ldw	fp,0(sp)
 100ef70:	dec00204 	addi	sp,sp,8
 100ef74:	f800283a 	ret

0100ef78 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100ef78:	defff904 	addi	sp,sp,-28
 100ef7c:	dfc00615 	stw	ra,24(sp)
 100ef80:	df000515 	stw	fp,20(sp)
 100ef84:	df000504 	addi	fp,sp,20
 100ef88:	e13ffc15 	stw	r4,-16(fp)
 100ef8c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100ef90:	e0bffd17 	ldw	r2,-12(fp)
 100ef94:	1005003a 	cmpeq	r2,r2,zero
 100ef98:	10001e1e 	bne	r2,zero,100f014 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100ef9c:	e0bffd17 	ldw	r2,-12(fp)
 100efa0:	10800050 	cmplti	r2,r2,1
 100efa4:	1000031e 	bne	r2,zero,100efb4 <alt_up_character_lcd_shift_display+0x3c>
 100efa8:	00800704 	movi	r2,28
 100efac:	e0bfff05 	stb	r2,-4(fp)
 100efb0:	00000206 	br	100efbc <alt_up_character_lcd_shift_display+0x44>
 100efb4:	00c00604 	movi	r3,24
 100efb8:	e0ffff05 	stb	r3,-4(fp)
 100efbc:	e0bfff03 	ldbu	r2,-4(fp)
 100efc0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100efc4:	e0fffd17 	ldw	r3,-12(fp)
 100efc8:	e0fffe15 	stw	r3,-8(fp)
 100efcc:	e0fffe17 	ldw	r3,-8(fp)
 100efd0:	1804403a 	cmpge	r2,r3,zero
 100efd4:	1000031e 	bne	r2,zero,100efe4 <alt_up_character_lcd_shift_display+0x6c>
 100efd8:	e0bffe17 	ldw	r2,-8(fp)
 100efdc:	0085c83a 	sub	r2,zero,r2
 100efe0:	e0bffe15 	stw	r2,-8(fp)
 100efe4:	e0fffe17 	ldw	r3,-8(fp)
 100efe8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100efec:	00000306 	br	100effc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100eff0:	e17ffb43 	ldbu	r5,-19(fp)
 100eff4:	e13ffc17 	ldw	r4,-16(fp)
 100eff8:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100effc:	e0bffb03 	ldbu	r2,-20(fp)
 100f000:	10bfffc4 	addi	r2,r2,-1
 100f004:	e0bffb05 	stb	r2,-20(fp)
 100f008:	e0bffb03 	ldbu	r2,-20(fp)
 100f00c:	10803fd8 	cmpnei	r2,r2,255
 100f010:	103ff71e 	bne	r2,zero,100eff0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100f014:	e037883a 	mov	sp,fp
 100f018:	dfc00117 	ldw	ra,4(sp)
 100f01c:	df000017 	ldw	fp,0(sp)
 100f020:	dec00204 	addi	sp,sp,8
 100f024:	f800283a 	ret

0100f028 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100f028:	defff904 	addi	sp,sp,-28
 100f02c:	dfc00615 	stw	ra,24(sp)
 100f030:	df000515 	stw	fp,20(sp)
 100f034:	df000504 	addi	fp,sp,20
 100f038:	e13ffc15 	stw	r4,-16(fp)
 100f03c:	e17ffd15 	stw	r5,-12(fp)
 100f040:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100f044:	e0bffd17 	ldw	r2,-12(fp)
 100f048:	10800a28 	cmpgeui	r2,r2,40
 100f04c:	1000031e 	bne	r2,zero,100f05c <alt_up_character_lcd_erase_pos+0x34>
 100f050:	e0bffe17 	ldw	r2,-8(fp)
 100f054:	108000b0 	cmpltui	r2,r2,2
 100f058:	1000031e 	bne	r2,zero,100f068 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100f05c:	00bfffc4 	movi	r2,-1
 100f060:	e0bfff15 	stw	r2,-4(fp)
 100f064:	00000e06 	br	100f0a0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100f068:	e13ffd17 	ldw	r4,-12(fp)
 100f06c:	e17ffe17 	ldw	r5,-8(fp)
 100f070:	100ebf00 	call	100ebf0 <get_DDRAM_addr>
 100f074:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100f078:	e17ffb03 	ldbu	r5,-20(fp)
 100f07c:	e13ffc17 	ldw	r4,-16(fp)
 100f080:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100f084:	e0bffc17 	ldw	r2,-16(fp)
 100f088:	10800a17 	ldw	r2,40(r2)
 100f08c:	10800044 	addi	r2,r2,1
 100f090:	1007883a 	mov	r3,r2
 100f094:	00800084 	movi	r2,2
 100f098:	18800025 	stbio	r2,0(r3)
	return 0;
 100f09c:	e03fff15 	stw	zero,-4(fp)
 100f0a0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f0a4:	e037883a 	mov	sp,fp
 100f0a8:	dfc00117 	ldw	ra,4(sp)
 100f0ac:	df000017 	ldw	fp,0(sp)
 100f0b0:	dec00204 	addi	sp,sp,8
 100f0b4:	f800283a 	ret

0100f0b8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100f0b8:	defffd04 	addi	sp,sp,-12
 100f0bc:	dfc00215 	stw	ra,8(sp)
 100f0c0:	df000115 	stw	fp,4(sp)
 100f0c4:	df000104 	addi	fp,sp,4
 100f0c8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100f0cc:	e13fff17 	ldw	r4,-4(fp)
 100f0d0:	01400304 	movi	r5,12
 100f0d4:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
}
 100f0d8:	e037883a 	mov	sp,fp
 100f0dc:	dfc00117 	ldw	ra,4(sp)
 100f0e0:	df000017 	ldw	fp,0(sp)
 100f0e4:	dec00204 	addi	sp,sp,8
 100f0e8:	f800283a 	ret

0100f0ec <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100f0ec:	defffd04 	addi	sp,sp,-12
 100f0f0:	dfc00215 	stw	ra,8(sp)
 100f0f4:	df000115 	stw	fp,4(sp)
 100f0f8:	df000104 	addi	fp,sp,4
 100f0fc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100f100:	e13fff17 	ldw	r4,-4(fp)
 100f104:	014003c4 	movi	r5,15
 100f108:	100ec6c0 	call	100ec6c <alt_up_character_lcd_send_cmd>
}
 100f10c:	e037883a 	mov	sp,fp
 100f110:	dfc00117 	ldw	ra,4(sp)
 100f114:	df000017 	ldw	fp,0(sp)
 100f118:	dec00204 	addi	sp,sp,8
 100f11c:	f800283a 	ret

0100f120 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 100f120:	defffc04 	addi	sp,sp,-16
 100f124:	dfc00315 	stw	ra,12(sp)
 100f128:	df000215 	stw	fp,8(sp)
 100f12c:	df000204 	addi	fp,sp,8
 100f130:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 100f134:	e13fff17 	ldw	r4,-4(fp)
 100f138:	01404074 	movhi	r5,257
 100f13c:	294f2b04 	addi	r5,r5,15532
 100f140:	1010b680 	call	1010b68 <alt_find_dev>
 100f144:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100f148:	e0bffe17 	ldw	r2,-8(fp)
}
 100f14c:	e037883a 	mov	sp,fp
 100f150:	dfc00117 	ldw	ra,4(sp)
 100f154:	df000017 	ldw	fp,0(sp)
 100f158:	dec00204 	addi	sp,sp,8
 100f15c:	f800283a 	ret

0100f160 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 100f160:	defff804 	addi	sp,sp,-32
 100f164:	dfc00715 	stw	ra,28(sp)
 100f168:	df000615 	stw	fp,24(sp)
 100f16c:	df000604 	addi	fp,sp,24
 100f170:	e13ffb15 	stw	r4,-20(fp)
 100f174:	e17ffc15 	stw	r5,-16(fp)
 100f178:	e1bffd15 	stw	r6,-12(fp)
 100f17c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 100f180:	e0bffb17 	ldw	r2,-20(fp)
 100f184:	10c00f17 	ldw	r3,60(r2)
 100f188:	e0bffd17 	ldw	r2,-12(fp)
 100f18c:	10c0042e 	bgeu	r2,r3,100f1a0 <alt_up_pixel_buffer_dma_draw+0x40>
 100f190:	e0bffb17 	ldw	r2,-20(fp)
 100f194:	10c01017 	ldw	r3,64(r2)
 100f198:	e0bffe17 	ldw	r2,-8(fp)
 100f19c:	10c00336 	bltu	r2,r3,100f1ac <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
 100f1a0:	00bfffc4 	movi	r2,-1
 100f1a4:	e0bfff15 	stw	r2,-4(fp)
 100f1a8:	00005206 	br	100f2f4 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 100f1ac:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100f1b0:	e0bffb17 	ldw	r2,-20(fp)
 100f1b4:	10800d17 	ldw	r2,52(r2)
 100f1b8:	1004c03a 	cmpne	r2,r2,zero
 100f1bc:	1000151e 	bne	r2,zero,100f214 <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100f1c0:	e0bffb17 	ldw	r2,-20(fp)
 100f1c4:	10c01217 	ldw	r3,72(r2)
 100f1c8:	e0bffd17 	ldw	r2,-12(fp)
 100f1cc:	1886703a 	and	r3,r3,r2
 100f1d0:	e0bffb17 	ldw	r2,-20(fp)
 100f1d4:	10801117 	ldw	r2,68(r2)
 100f1d8:	1886983a 	sll	r3,r3,r2
 100f1dc:	e0bffa17 	ldw	r2,-24(fp)
 100f1e0:	10c4b03a 	or	r2,r2,r3
 100f1e4:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 100f1e8:	e0bffb17 	ldw	r2,-20(fp)
 100f1ec:	10c01417 	ldw	r3,80(r2)
 100f1f0:	e0bffe17 	ldw	r2,-8(fp)
 100f1f4:	1886703a 	and	r3,r3,r2
 100f1f8:	e0bffb17 	ldw	r2,-20(fp)
 100f1fc:	10801317 	ldw	r2,76(r2)
 100f200:	1886983a 	sll	r3,r3,r2
 100f204:	e0bffa17 	ldw	r2,-24(fp)
 100f208:	10c4b03a 	or	r2,r2,r3
 100f20c:	e0bffa15 	stw	r2,-24(fp)
 100f210:	00001806 	br	100f274 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100f214:	e0bffb17 	ldw	r2,-20(fp)
 100f218:	10c01217 	ldw	r3,72(r2)
 100f21c:	e0bffd17 	ldw	r2,-12(fp)
 100f220:	1886703a 	and	r3,r3,r2
 100f224:	e0bffb17 	ldw	r2,-20(fp)
 100f228:	10801117 	ldw	r2,68(r2)
 100f22c:	1886983a 	sll	r3,r3,r2
 100f230:	e0bffa17 	ldw	r2,-24(fp)
 100f234:	10c5883a 	add	r2,r2,r3
 100f238:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 100f23c:	e0bffb17 	ldw	r2,-20(fp)
 100f240:	10c01417 	ldw	r3,80(r2)
 100f244:	e0bffe17 	ldw	r2,-8(fp)
 100f248:	1888703a 	and	r4,r3,r2
 100f24c:	e0bffb17 	ldw	r2,-20(fp)
 100f250:	11400f17 	ldw	r5,60(r2)
 100f254:	100435c0 	call	100435c <__mulsi3>
 100f258:	1007883a 	mov	r3,r2
 100f25c:	e0bffb17 	ldw	r2,-20(fp)
 100f260:	10801117 	ldw	r2,68(r2)
 100f264:	1886983a 	sll	r3,r3,r2
 100f268:	e0bffa17 	ldw	r2,-24(fp)
 100f26c:	10c5883a 	add	r2,r2,r3
 100f270:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100f274:	e0bffb17 	ldw	r2,-20(fp)
 100f278:	10800e17 	ldw	r2,56(r2)
 100f27c:	10800058 	cmpnei	r2,r2,1
 100f280:	1000081e 	bne	r2,zero,100f2a4 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100f284:	e0bffb17 	ldw	r2,-20(fp)
 100f288:	10800c17 	ldw	r2,48(r2)
 100f28c:	1007883a 	mov	r3,r2
 100f290:	e0bffa17 	ldw	r2,-24(fp)
 100f294:	1885883a 	add	r2,r3,r2
 100f298:	e0fffc17 	ldw	r3,-16(fp)
 100f29c:	10c00025 	stbio	r3,0(r2)
 100f2a0:	00001306 	br	100f2f0 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100f2a4:	e0bffb17 	ldw	r2,-20(fp)
 100f2a8:	10800e17 	ldw	r2,56(r2)
 100f2ac:	10800098 	cmpnei	r2,r2,2
 100f2b0:	1000081e 	bne	r2,zero,100f2d4 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100f2b4:	e0bffb17 	ldw	r2,-20(fp)
 100f2b8:	10800c17 	ldw	r2,48(r2)
 100f2bc:	1007883a 	mov	r3,r2
 100f2c0:	e0bffa17 	ldw	r2,-24(fp)
 100f2c4:	1885883a 	add	r2,r3,r2
 100f2c8:	e0fffc17 	ldw	r3,-16(fp)
 100f2cc:	10c0002d 	sthio	r3,0(r2)
 100f2d0:	00000706 	br	100f2f0 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100f2d4:	e0bffb17 	ldw	r2,-20(fp)
 100f2d8:	10800c17 	ldw	r2,48(r2)
 100f2dc:	1007883a 	mov	r3,r2
 100f2e0:	e0bffa17 	ldw	r2,-24(fp)
 100f2e4:	1885883a 	add	r2,r3,r2
 100f2e8:	e0fffc17 	ldw	r3,-16(fp)
 100f2ec:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 100f2f0:	e03fff15 	stw	zero,-4(fp)
 100f2f4:	e0bfff17 	ldw	r2,-4(fp)
}
 100f2f8:	e037883a 	mov	sp,fp
 100f2fc:	dfc00117 	ldw	ra,4(sp)
 100f300:	df000017 	ldw	fp,0(sp)
 100f304:	dec00204 	addi	sp,sp,8
 100f308:	f800283a 	ret

0100f30c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 100f30c:	defffd04 	addi	sp,sp,-12
 100f310:	df000215 	stw	fp,8(sp)
 100f314:	df000204 	addi	fp,sp,8
 100f318:	e13ffe15 	stw	r4,-8(fp)
 100f31c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 100f320:	e0bffe17 	ldw	r2,-8(fp)
 100f324:	10800a17 	ldw	r2,40(r2)
 100f328:	10800104 	addi	r2,r2,4
 100f32c:	e0ffff17 	ldw	r3,-4(fp)
 100f330:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 100f334:	e0bffe17 	ldw	r2,-8(fp)
 100f338:	10800a17 	ldw	r2,40(r2)
 100f33c:	10800104 	addi	r2,r2,4
 100f340:	10800037 	ldwio	r2,0(r2)
 100f344:	1007883a 	mov	r3,r2
 100f348:	e0bffe17 	ldw	r2,-8(fp)
 100f34c:	10c00c15 	stw	r3,48(r2)
	return 0;
 100f350:	0005883a 	mov	r2,zero
}
 100f354:	e037883a 	mov	sp,fp
 100f358:	df000017 	ldw	fp,0(sp)
 100f35c:	dec00104 	addi	sp,sp,4
 100f360:	f800283a 	ret

0100f364 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 100f364:	defffe04 	addi	sp,sp,-8
 100f368:	df000115 	stw	fp,4(sp)
 100f36c:	df000104 	addi	fp,sp,4
 100f370:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 100f374:	e0bfff17 	ldw	r2,-4(fp)
 100f378:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 100f37c:	e0bfff17 	ldw	r2,-4(fp)
 100f380:	10800a17 	ldw	r2,40(r2)
 100f384:	1007883a 	mov	r3,r2
 100f388:	00800044 	movi	r2,1
 100f38c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 100f390:	e0bfff17 	ldw	r2,-4(fp)
 100f394:	10c00b17 	ldw	r3,44(r2)
 100f398:	e0bfff17 	ldw	r2,-4(fp)
 100f39c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 100f3a0:	e0bfff17 	ldw	r2,-4(fp)
 100f3a4:	11000b15 	stw	r4,44(r2)
	return 0;
 100f3a8:	0005883a 	mov	r2,zero
}
 100f3ac:	e037883a 	mov	sp,fp
 100f3b0:	df000017 	ldw	fp,0(sp)
 100f3b4:	dec00104 	addi	sp,sp,4
 100f3b8:	f800283a 	ret

0100f3bc <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 100f3bc:	defffe04 	addi	sp,sp,-8
 100f3c0:	df000115 	stw	fp,4(sp)
 100f3c4:	df000104 	addi	fp,sp,4
 100f3c8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 100f3cc:	e0bfff17 	ldw	r2,-4(fp)
 100f3d0:	10800a17 	ldw	r2,40(r2)
 100f3d4:	10800304 	addi	r2,r2,12
 100f3d8:	10800037 	ldwio	r2,0(r2)
 100f3dc:	1080004c 	andi	r2,r2,1
}
 100f3e0:	e037883a 	mov	sp,fp
 100f3e4:	df000017 	ldw	fp,0(sp)
 100f3e8:	dec00104 	addi	sp,sp,4
 100f3ec:	f800283a 	ret

0100f3f0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 100f3f0:	defff504 	addi	sp,sp,-44
 100f3f4:	dfc00a15 	stw	ra,40(sp)
 100f3f8:	df000915 	stw	fp,36(sp)
 100f3fc:	df000904 	addi	fp,sp,36
 100f400:	e13ff715 	stw	r4,-36(fp)
 100f404:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100f408:	e0bff817 	ldw	r2,-32(fp)
 100f40c:	10800058 	cmpnei	r2,r2,1
 100f410:	1000041e 	bne	r2,zero,100f424 <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
 100f414:	e0bff717 	ldw	r2,-36(fp)
 100f418:	10800c17 	ldw	r2,48(r2)
 100f41c:	e0bfff15 	stw	r2,-4(fp)
 100f420:	00000306 	br	100f430 <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
 100f424:	e0bff717 	ldw	r2,-36(fp)
 100f428:	10800b17 	ldw	r2,44(r2)
 100f42c:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 100f430:	e0bff717 	ldw	r2,-36(fp)
 100f434:	10800f17 	ldw	r2,60(r2)
 100f438:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100f43c:	e0bff717 	ldw	r2,-36(fp)
 100f440:	10800e17 	ldw	r2,56(r2)
 100f444:	10800098 	cmpnei	r2,r2,2
 100f448:	1000051e 	bne	r2,zero,100f460 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 100f44c:	e0fffe17 	ldw	r3,-8(fp)
 100f450:	e0fffe17 	ldw	r3,-8(fp)
 100f454:	18c5883a 	add	r2,r3,r3
 100f458:	e0bffe15 	stw	r2,-8(fp)
 100f45c:	00000506 	br	100f474 <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
 100f460:	e13ffe17 	ldw	r4,-8(fp)
 100f464:	e13ffe17 	ldw	r4,-8(fp)
 100f468:	2105883a 	add	r2,r4,r4
 100f46c:	1085883a 	add	r2,r2,r2
 100f470:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 100f474:	e0bff717 	ldw	r2,-36(fp)
 100f478:	10801017 	ldw	r2,64(r2)
 100f47c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100f480:	e0bff717 	ldw	r2,-36(fp)
 100f484:	10800d17 	ldw	r2,52(r2)
 100f488:	1004c03a 	cmpne	r2,r2,zero
 100f48c:	10001e1e 	bne	r2,zero,100f508 <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100f490:	e0bff717 	ldw	r2,-36(fp)
 100f494:	10801317 	ldw	r2,76(r2)
 100f498:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 100f49c:	e03ffb15 	stw	zero,-20(fp)
 100f4a0:	00001506 	br	100f4f8 <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
 100f4a4:	e03ffc15 	stw	zero,-16(fp)
 100f4a8:	00000706 	br	100f4c8 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
 100f4ac:	e0ffff17 	ldw	r3,-4(fp)
 100f4b0:	e0bffc17 	ldw	r2,-16(fp)
 100f4b4:	1885883a 	add	r2,r3,r2
 100f4b8:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 100f4bc:	e0bffc17 	ldw	r2,-16(fp)
 100f4c0:	10800104 	addi	r2,r2,4
 100f4c4:	e0bffc15 	stw	r2,-16(fp)
 100f4c8:	e0fffc17 	ldw	r3,-16(fp)
 100f4cc:	e13ffe17 	ldw	r4,-8(fp)
 100f4d0:	193ff636 	bltu	r3,r4,100f4ac <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 100f4d4:	e0fffa17 	ldw	r3,-24(fp)
 100f4d8:	00800044 	movi	r2,1
 100f4dc:	10c4983a 	sll	r2,r2,r3
 100f4e0:	e0ffff17 	ldw	r3,-4(fp)
 100f4e4:	1887883a 	add	r3,r3,r2
 100f4e8:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 100f4ec:	e13ffb17 	ldw	r4,-20(fp)
 100f4f0:	21000044 	addi	r4,r4,1
 100f4f4:	e13ffb15 	stw	r4,-20(fp)
 100f4f8:	e0bffb17 	ldw	r2,-20(fp)
 100f4fc:	e0fffd17 	ldw	r3,-12(fp)
 100f500:	10ffe836 	bltu	r2,r3,100f4a4 <alt_up_pixel_buffer_dma_clear_screen+0xb4>
 100f504:	00001006 	br	100f548 <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 100f508:	e13ffd17 	ldw	r4,-12(fp)
 100f50c:	e17ffe17 	ldw	r5,-8(fp)
 100f510:	100435c0 	call	100435c <__mulsi3>
 100f514:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 100f518:	e03ff915 	stw	zero,-28(fp)
 100f51c:	00000706 	br	100f53c <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
 100f520:	e0ffff17 	ldw	r3,-4(fp)
 100f524:	e0bff917 	ldw	r2,-28(fp)
 100f528:	1885883a 	add	r2,r3,r2
 100f52c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 100f530:	e13ff917 	ldw	r4,-28(fp)
 100f534:	21000104 	addi	r4,r4,4
 100f538:	e13ff915 	stw	r4,-28(fp)
 100f53c:	e0bff917 	ldw	r2,-28(fp)
 100f540:	e0fffd17 	ldw	r3,-12(fp)
 100f544:	10fff636 	bltu	r2,r3,100f520 <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 100f548:	e037883a 	mov	sp,fp
 100f54c:	dfc00117 	ldw	ra,4(sp)
 100f550:	df000017 	ldw	fp,0(sp)
 100f554:	dec00204 	addi	sp,sp,8
 100f558:	f800283a 	ret

0100f55c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 100f55c:	deffec04 	addi	sp,sp,-80
 100f560:	dfc01315 	stw	ra,76(sp)
 100f564:	df001215 	stw	fp,72(sp)
 100f568:	df001204 	addi	fp,sp,72
 100f56c:	e13fee15 	stw	r4,-72(fp)
 100f570:	e17fef15 	stw	r5,-68(fp)
 100f574:	e1bff015 	stw	r6,-64(fp)
 100f578:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 100f57c:	e0bfee17 	ldw	r2,-72(fp)
 100f580:	10800f17 	ldw	r2,60(r2)
 100f584:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 100f588:	e0bfee17 	ldw	r2,-72(fp)
 100f58c:	10801017 	ldw	r2,64(r2)
 100f590:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 100f594:	e0bfef17 	ldw	r2,-68(fp)
 100f598:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 100f59c:	e0fff117 	ldw	r3,-60(fp)
 100f5a0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 100f5a4:	e13ff017 	ldw	r4,-64(fp)
 100f5a8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 100f5ac:	e0800217 	ldw	r2,8(fp)
 100f5b0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 100f5b4:	e0c00317 	ldw	r3,12(fp)
 100f5b8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 100f5bc:	e13ffa17 	ldw	r4,-24(fp)
 100f5c0:	e0bffb17 	ldw	r2,-20(fp)
 100f5c4:	2080062e 	bgeu	r4,r2,100f5e0 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
 100f5c8:	e0fffb17 	ldw	r3,-20(fp)
 100f5cc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 100f5d0:	e13ffa17 	ldw	r4,-24(fp)
 100f5d4:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 100f5d8:	e0bffc17 	ldw	r2,-16(fp)
 100f5dc:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 100f5e0:	e0fff817 	ldw	r3,-32(fp)
 100f5e4:	e13ff917 	ldw	r4,-28(fp)
 100f5e8:	1900062e 	bgeu	r3,r4,100f604 <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
 100f5ec:	e0bff917 	ldw	r2,-28(fp)
 100f5f0:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 100f5f4:	e0fff817 	ldw	r3,-32(fp)
 100f5f8:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 100f5fc:	e13ffc17 	ldw	r4,-16(fp)
 100f600:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 100f604:	e0bffb17 	ldw	r2,-20(fp)
 100f608:	e0fffe17 	ldw	r3,-8(fp)
 100f60c:	10c10d2e 	bgeu	r2,r3,100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
 100f610:	e13ff917 	ldw	r4,-28(fp)
 100f614:	e0bffd17 	ldw	r2,-12(fp)
 100f618:	20800136 	bltu	r4,r2,100f620 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 100f61c:	00010906 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 100f620:	e0fffa17 	ldw	r3,-24(fp)
 100f624:	e13ffe17 	ldw	r4,-8(fp)
 100f628:	19000336 	bltu	r3,r4,100f638 <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
 100f62c:	e0bffe17 	ldw	r2,-8(fp)
 100f630:	10bfffc4 	addi	r2,r2,-1
 100f634:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 100f638:	e0fff817 	ldw	r3,-32(fp)
 100f63c:	e13ffd17 	ldw	r4,-12(fp)
 100f640:	19000336 	bltu	r3,r4,100f650 <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
 100f644:	e0bffd17 	ldw	r2,-12(fp)
 100f648:	10bfffc4 	addi	r2,r2,-1
 100f64c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100f650:	e0800417 	ldw	r2,16(fp)
 100f654:	10800058 	cmpnei	r2,r2,1
 100f658:	1000041e 	bne	r2,zero,100f66c <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
 100f65c:	e0bfee17 	ldw	r2,-72(fp)
 100f660:	10800c17 	ldw	r2,48(r2)
 100f664:	e0bfff15 	stw	r2,-4(fp)
 100f668:	00000306 	br	100f678 <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
 100f66c:	e0bfee17 	ldw	r2,-72(fp)
 100f670:	10800b17 	ldw	r2,44(r2)
 100f674:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100f678:	e0bfee17 	ldw	r2,-72(fp)
 100f67c:	10800d17 	ldw	r2,52(r2)
 100f680:	1004c03a 	cmpne	r2,r2,zero
 100f684:	1000721e 	bne	r2,zero,100f850 <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100f688:	e0bfee17 	ldw	r2,-72(fp)
 100f68c:	10801317 	ldw	r2,76(r2)
 100f690:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 100f694:	e0bff417 	ldw	r2,-48(fp)
 100f698:	e0fff917 	ldw	r3,-28(fp)
 100f69c:	1884983a 	sll	r2,r3,r2
 100f6a0:	e13fff17 	ldw	r4,-4(fp)
 100f6a4:	2089883a 	add	r4,r4,r2
 100f6a8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100f6ac:	e0bfee17 	ldw	r2,-72(fp)
 100f6b0:	10800e17 	ldw	r2,56(r2)
 100f6b4:	10800058 	cmpnei	r2,r2,1
 100f6b8:	10001e1e 	bne	r2,zero,100f734 <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
 100f6bc:	e0bff917 	ldw	r2,-28(fp)
 100f6c0:	e0bff515 	stw	r2,-44(fp)
 100f6c4:	00001706 	br	100f724 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
 100f6c8:	e0fffb17 	ldw	r3,-20(fp)
 100f6cc:	e0fff615 	stw	r3,-40(fp)
 100f6d0:	00000806 	br	100f6f4 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
 100f6d4:	e0ffff17 	ldw	r3,-4(fp)
 100f6d8:	e0bff617 	ldw	r2,-40(fp)
 100f6dc:	1885883a 	add	r2,r3,r2
 100f6e0:	e0fff717 	ldw	r3,-36(fp)
 100f6e4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100f6e8:	e13ff617 	ldw	r4,-40(fp)
 100f6ec:	21000044 	addi	r4,r4,1
 100f6f0:	e13ff615 	stw	r4,-40(fp)
 100f6f4:	e0bffa17 	ldw	r2,-24(fp)
 100f6f8:	e0fff617 	ldw	r3,-40(fp)
 100f6fc:	10fff52e 	bgeu	r2,r3,100f6d4 <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 100f700:	e0fff417 	ldw	r3,-48(fp)
 100f704:	00800044 	movi	r2,1
 100f708:	10c4983a 	sll	r2,r2,r3
 100f70c:	e13fff17 	ldw	r4,-4(fp)
 100f710:	2089883a 	add	r4,r4,r2
 100f714:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100f718:	e0bff517 	ldw	r2,-44(fp)
 100f71c:	10800044 	addi	r2,r2,1
 100f720:	e0bff515 	stw	r2,-44(fp)
 100f724:	e0fff817 	ldw	r3,-32(fp)
 100f728:	e13ff517 	ldw	r4,-44(fp)
 100f72c:	193fe62e 	bgeu	r3,r4,100f6c8 <alt_up_pixel_buffer_dma_draw_box+0x16c>
 100f730:	0000c406 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100f734:	e0bfee17 	ldw	r2,-72(fp)
 100f738:	10800e17 	ldw	r2,56(r2)
 100f73c:	10800098 	cmpnei	r2,r2,2
 100f740:	1000211e 	bne	r2,zero,100f7c8 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
 100f744:	e0bff917 	ldw	r2,-28(fp)
 100f748:	e0bff515 	stw	r2,-44(fp)
 100f74c:	00001a06 	br	100f7b8 <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
 100f750:	e0fffb17 	ldw	r3,-20(fp)
 100f754:	e0fff615 	stw	r3,-40(fp)
 100f758:	00000b06 	br	100f788 <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 100f75c:	e13ff617 	ldw	r4,-40(fp)
 100f760:	e13ff617 	ldw	r4,-40(fp)
 100f764:	2105883a 	add	r2,r4,r4
 100f768:	1007883a 	mov	r3,r2
 100f76c:	e0bfff17 	ldw	r2,-4(fp)
 100f770:	1885883a 	add	r2,r3,r2
 100f774:	e0fff717 	ldw	r3,-36(fp)
 100f778:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100f77c:	e0bff617 	ldw	r2,-40(fp)
 100f780:	10800044 	addi	r2,r2,1
 100f784:	e0bff615 	stw	r2,-40(fp)
 100f788:	e0fffa17 	ldw	r3,-24(fp)
 100f78c:	e13ff617 	ldw	r4,-40(fp)
 100f790:	193ff22e 	bgeu	r3,r4,100f75c <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 100f794:	e0fff417 	ldw	r3,-48(fp)
 100f798:	00800044 	movi	r2,1
 100f79c:	10c4983a 	sll	r2,r2,r3
 100f7a0:	e0ffff17 	ldw	r3,-4(fp)
 100f7a4:	1887883a 	add	r3,r3,r2
 100f7a8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100f7ac:	e13ff517 	ldw	r4,-44(fp)
 100f7b0:	21000044 	addi	r4,r4,1
 100f7b4:	e13ff515 	stw	r4,-44(fp)
 100f7b8:	e0bff817 	ldw	r2,-32(fp)
 100f7bc:	e0fff517 	ldw	r3,-44(fp)
 100f7c0:	10ffe32e 	bgeu	r2,r3,100f750 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
 100f7c4:	00009f06 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100f7c8:	e13ff917 	ldw	r4,-28(fp)
 100f7cc:	e13ff515 	stw	r4,-44(fp)
 100f7d0:	00001b06 	br	100f840 <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
 100f7d4:	e0bffb17 	ldw	r2,-20(fp)
 100f7d8:	e0bff615 	stw	r2,-40(fp)
 100f7dc:	00000c06 	br	100f810 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 100f7e0:	e0fff617 	ldw	r3,-40(fp)
 100f7e4:	e0fff617 	ldw	r3,-40(fp)
 100f7e8:	18c5883a 	add	r2,r3,r3
 100f7ec:	1085883a 	add	r2,r2,r2
 100f7f0:	1007883a 	mov	r3,r2
 100f7f4:	e0bfff17 	ldw	r2,-4(fp)
 100f7f8:	1885883a 	add	r2,r3,r2
 100f7fc:	e0fff717 	ldw	r3,-36(fp)
 100f800:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100f804:	e13ff617 	ldw	r4,-40(fp)
 100f808:	21000044 	addi	r4,r4,1
 100f80c:	e13ff615 	stw	r4,-40(fp)
 100f810:	e0bffa17 	ldw	r2,-24(fp)
 100f814:	e0fff617 	ldw	r3,-40(fp)
 100f818:	10fff12e 	bgeu	r2,r3,100f7e0 <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 100f81c:	e0fff417 	ldw	r3,-48(fp)
 100f820:	00800044 	movi	r2,1
 100f824:	10c4983a 	sll	r2,r2,r3
 100f828:	e13fff17 	ldw	r4,-4(fp)
 100f82c:	2089883a 	add	r4,r4,r2
 100f830:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100f834:	e0bff517 	ldw	r2,-44(fp)
 100f838:	10800044 	addi	r2,r2,1
 100f83c:	e0bff515 	stw	r2,-44(fp)
 100f840:	e0fff817 	ldw	r3,-32(fp)
 100f844:	e13ff517 	ldw	r4,-44(fp)
 100f848:	193fe22e 	bgeu	r3,r4,100f7d4 <alt_up_pixel_buffer_dma_draw_box+0x278>
 100f84c:	00007d06 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100f850:	e0bfee17 	ldw	r2,-72(fp)
 100f854:	10800e17 	ldw	r2,56(r2)
 100f858:	10800058 	cmpnei	r2,r2,1
 100f85c:	1000221e 	bne	r2,zero,100f8e8 <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
 100f860:	e13ff917 	ldw	r4,-28(fp)
 100f864:	e17ffe17 	ldw	r5,-8(fp)
 100f868:	100435c0 	call	100435c <__mulsi3>
 100f86c:	e0ffff17 	ldw	r3,-4(fp)
 100f870:	1887883a 	add	r3,r3,r2
 100f874:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100f878:	e13ff917 	ldw	r4,-28(fp)
 100f87c:	e13ff215 	stw	r4,-56(fp)
 100f880:	00001506 	br	100f8d8 <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
 100f884:	e0bffb17 	ldw	r2,-20(fp)
 100f888:	e0bff315 	stw	r2,-52(fp)
 100f88c:	00000806 	br	100f8b0 <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
 100f890:	e0ffff17 	ldw	r3,-4(fp)
 100f894:	e0bff317 	ldw	r2,-52(fp)
 100f898:	1885883a 	add	r2,r3,r2
 100f89c:	e0fff717 	ldw	r3,-36(fp)
 100f8a0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100f8a4:	e0fff317 	ldw	r3,-52(fp)
 100f8a8:	18c00044 	addi	r3,r3,1
 100f8ac:	e0fff315 	stw	r3,-52(fp)
 100f8b0:	e13ffa17 	ldw	r4,-24(fp)
 100f8b4:	e0bff317 	ldw	r2,-52(fp)
 100f8b8:	20bff52e 	bgeu	r4,r2,100f890 <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 100f8bc:	e0ffff17 	ldw	r3,-4(fp)
 100f8c0:	e13ffe17 	ldw	r4,-8(fp)
 100f8c4:	1907883a 	add	r3,r3,r4
 100f8c8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100f8cc:	e0bff217 	ldw	r2,-56(fp)
 100f8d0:	10800044 	addi	r2,r2,1
 100f8d4:	e0bff215 	stw	r2,-56(fp)
 100f8d8:	e0fff817 	ldw	r3,-32(fp)
 100f8dc:	e13ff217 	ldw	r4,-56(fp)
 100f8e0:	193fe82e 	bgeu	r3,r4,100f884 <alt_up_pixel_buffer_dma_draw_box+0x328>
 100f8e4:	00005706 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100f8e8:	e0bfee17 	ldw	r2,-72(fp)
 100f8ec:	10800e17 	ldw	r2,56(r2)
 100f8f0:	10800098 	cmpnei	r2,r2,2
 100f8f4:	1000291e 	bne	r2,zero,100f99c <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
 100f8f8:	e0fffe17 	ldw	r3,-8(fp)
 100f8fc:	e0fffe17 	ldw	r3,-8(fp)
 100f900:	18c5883a 	add	r2,r3,r3
 100f904:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 100f908:	e13ff917 	ldw	r4,-28(fp)
 100f90c:	e17ffe17 	ldw	r5,-8(fp)
 100f910:	100435c0 	call	100435c <__mulsi3>
 100f914:	e13fff17 	ldw	r4,-4(fp)
 100f918:	2089883a 	add	r4,r4,r2
 100f91c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100f920:	e0bff917 	ldw	r2,-28(fp)
 100f924:	e0bff215 	stw	r2,-56(fp)
 100f928:	00001806 	br	100f98c <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
 100f92c:	e0fffb17 	ldw	r3,-20(fp)
 100f930:	e0fff315 	stw	r3,-52(fp)
 100f934:	00000b06 	br	100f964 <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 100f938:	e13ff317 	ldw	r4,-52(fp)
 100f93c:	e13ff317 	ldw	r4,-52(fp)
 100f940:	2105883a 	add	r2,r4,r4
 100f944:	1007883a 	mov	r3,r2
 100f948:	e0bfff17 	ldw	r2,-4(fp)
 100f94c:	1885883a 	add	r2,r3,r2
 100f950:	e0fff717 	ldw	r3,-36(fp)
 100f954:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100f958:	e0bff317 	ldw	r2,-52(fp)
 100f95c:	10800044 	addi	r2,r2,1
 100f960:	e0bff315 	stw	r2,-52(fp)
 100f964:	e0fffa17 	ldw	r3,-24(fp)
 100f968:	e13ff317 	ldw	r4,-52(fp)
 100f96c:	193ff22e 	bgeu	r3,r4,100f938 <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 100f970:	e0bfff17 	ldw	r2,-4(fp)
 100f974:	e0fffe17 	ldw	r3,-8(fp)
 100f978:	10c5883a 	add	r2,r2,r3
 100f97c:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100f980:	e13ff217 	ldw	r4,-56(fp)
 100f984:	21000044 	addi	r4,r4,1
 100f988:	e13ff215 	stw	r4,-56(fp)
 100f98c:	e0bff817 	ldw	r2,-32(fp)
 100f990:	e0fff217 	ldw	r3,-56(fp)
 100f994:	10ffe52e 	bgeu	r2,r3,100f92c <alt_up_pixel_buffer_dma_draw_box+0x3d0>
 100f998:	00002a06 	br	100fa44 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 100f99c:	e13ffe17 	ldw	r4,-8(fp)
 100f9a0:	e13ffe17 	ldw	r4,-8(fp)
 100f9a4:	2105883a 	add	r2,r4,r4
 100f9a8:	1085883a 	add	r2,r2,r2
 100f9ac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 100f9b0:	e13ff917 	ldw	r4,-28(fp)
 100f9b4:	e17ffe17 	ldw	r5,-8(fp)
 100f9b8:	100435c0 	call	100435c <__mulsi3>
 100f9bc:	e0ffff17 	ldw	r3,-4(fp)
 100f9c0:	1887883a 	add	r3,r3,r2
 100f9c4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100f9c8:	e13ff917 	ldw	r4,-28(fp)
 100f9cc:	e13ff215 	stw	r4,-56(fp)
 100f9d0:	00001906 	br	100fa38 <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
 100f9d4:	e0bffb17 	ldw	r2,-20(fp)
 100f9d8:	e0bff315 	stw	r2,-52(fp)
 100f9dc:	00000c06 	br	100fa10 <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 100f9e0:	e0fff317 	ldw	r3,-52(fp)
 100f9e4:	e0fff317 	ldw	r3,-52(fp)
 100f9e8:	18c5883a 	add	r2,r3,r3
 100f9ec:	1085883a 	add	r2,r2,r2
 100f9f0:	1007883a 	mov	r3,r2
 100f9f4:	e0bfff17 	ldw	r2,-4(fp)
 100f9f8:	1885883a 	add	r2,r3,r2
 100f9fc:	e0fff717 	ldw	r3,-36(fp)
 100fa00:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 100fa04:	e13ff317 	ldw	r4,-52(fp)
 100fa08:	21000044 	addi	r4,r4,1
 100fa0c:	e13ff315 	stw	r4,-52(fp)
 100fa10:	e0bffa17 	ldw	r2,-24(fp)
 100fa14:	e0fff317 	ldw	r3,-52(fp)
 100fa18:	10fff12e 	bgeu	r2,r3,100f9e0 <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 100fa1c:	e13fff17 	ldw	r4,-4(fp)
 100fa20:	e0bffe17 	ldw	r2,-8(fp)
 100fa24:	2089883a 	add	r4,r4,r2
 100fa28:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100fa2c:	e0fff217 	ldw	r3,-56(fp)
 100fa30:	18c00044 	addi	r3,r3,1
 100fa34:	e0fff215 	stw	r3,-56(fp)
 100fa38:	e13ff817 	ldw	r4,-32(fp)
 100fa3c:	e0bff217 	ldw	r2,-56(fp)
 100fa40:	20bfe42e 	bgeu	r4,r2,100f9d4 <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 100fa44:	e037883a 	mov	sp,fp
 100fa48:	dfc00117 	ldw	ra,4(sp)
 100fa4c:	df000017 	ldw	fp,0(sp)
 100fa50:	dec00204 	addi	sp,sp,8
 100fa54:	f800283a 	ret

0100fa58 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 100fa58:	defff104 	addi	sp,sp,-60
 100fa5c:	dfc00e15 	stw	ra,56(sp)
 100fa60:	df000d15 	stw	fp,52(sp)
 100fa64:	df000d04 	addi	fp,sp,52
 100fa68:	e13ff315 	stw	r4,-52(fp)
 100fa6c:	e17ff415 	stw	r5,-48(fp)
 100fa70:	e1bff515 	stw	r6,-44(fp)
 100fa74:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 100fa78:	e0bff317 	ldw	r2,-52(fp)
 100fa7c:	10800f17 	ldw	r2,60(r2)
 100fa80:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 100fa84:	e0bff317 	ldw	r2,-52(fp)
 100fa88:	10801017 	ldw	r2,64(r2)
 100fa8c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 100fa90:	e0bff417 	ldw	r2,-48(fp)
 100fa94:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 100fa98:	e0fff517 	ldw	r3,-44(fp)
 100fa9c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 100faa0:	e13ff617 	ldw	r4,-40(fp)
 100faa4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 100faa8:	e0800217 	ldw	r2,8(fp)
 100faac:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 100fab0:	e0fffb17 	ldw	r3,-20(fp)
 100fab4:	e13ffc17 	ldw	r4,-16(fp)
 100fab8:	1900042e 	bgeu	r3,r4,100facc <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
 100fabc:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 100fac0:	e0fffb17 	ldw	r3,-20(fp)
 100fac4:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 100fac8:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 100facc:	e13ffc17 	ldw	r4,-16(fp)
 100fad0:	e0bffe17 	ldw	r2,-8(fp)
 100fad4:	2080b12e 	bgeu	r4,r2,100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
 100fad8:	e13ffa17 	ldw	r4,-24(fp)
 100fadc:	e0fffd17 	ldw	r3,-12(fp)
 100fae0:	20c00136 	bltu	r4,r3,100fae8 <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 100fae4:	0000ad06 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 100fae8:	e0bffb17 	ldw	r2,-20(fp)
 100faec:	e0fffe17 	ldw	r3,-8(fp)
 100faf0:	10c00336 	bltu	r2,r3,100fb00 <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
 100faf4:	e13ffe17 	ldw	r4,-8(fp)
 100faf8:	213fffc4 	addi	r4,r4,-1
 100fafc:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100fb00:	e0800317 	ldw	r2,12(fp)
 100fb04:	10800058 	cmpnei	r2,r2,1
 100fb08:	1000041e 	bne	r2,zero,100fb1c <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 100fb0c:	e0bff317 	ldw	r2,-52(fp)
 100fb10:	10800c17 	ldw	r2,48(r2)
 100fb14:	e0bfff15 	stw	r2,-4(fp)
 100fb18:	00000306 	br	100fb28 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 100fb1c:	e0bff317 	ldw	r2,-52(fp)
 100fb20:	10800b17 	ldw	r2,44(r2)
 100fb24:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100fb28:	e0bff317 	ldw	r2,-52(fp)
 100fb2c:	10800d17 	ldw	r2,52(r2)
 100fb30:	1004c03a 	cmpne	r2,r2,zero
 100fb34:	1000431e 	bne	r2,zero,100fc44 <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100fb38:	e0bff317 	ldw	r2,-52(fp)
 100fb3c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 100fb40:	e0fffa17 	ldw	r3,-24(fp)
 100fb44:	1884983a 	sll	r2,r3,r2
 100fb48:	e13fff17 	ldw	r4,-4(fp)
 100fb4c:	2089883a 	add	r4,r4,r2
 100fb50:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100fb54:	e0bff317 	ldw	r2,-52(fp)
 100fb58:	10800e17 	ldw	r2,56(r2)
 100fb5c:	10800058 	cmpnei	r2,r2,1
 100fb60:	10000f1e 	bne	r2,zero,100fba0 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
 100fb64:	e0bffc17 	ldw	r2,-16(fp)
 100fb68:	e0bff815 	stw	r2,-32(fp)
 100fb6c:	00000806 	br	100fb90 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
 100fb70:	e0ffff17 	ldw	r3,-4(fp)
 100fb74:	e0bff817 	ldw	r2,-32(fp)
 100fb78:	1885883a 	add	r2,r3,r2
 100fb7c:	e0fff917 	ldw	r3,-28(fp)
 100fb80:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 100fb84:	e0fff817 	ldw	r3,-32(fp)
 100fb88:	18c00044 	addi	r3,r3,1
 100fb8c:	e0fff815 	stw	r3,-32(fp)
 100fb90:	e13ffb17 	ldw	r4,-20(fp)
 100fb94:	e0bff817 	ldw	r2,-32(fp)
 100fb98:	20bff52e 	bgeu	r4,r2,100fb70 <alt_up_pixel_buffer_dma_draw_hline+0x118>
 100fb9c:	00007f06 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100fba0:	e0bff317 	ldw	r2,-52(fp)
 100fba4:	10800e17 	ldw	r2,56(r2)
 100fba8:	10800098 	cmpnei	r2,r2,2
 100fbac:	1000121e 	bne	r2,zero,100fbf8 <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
 100fbb0:	e0fffc17 	ldw	r3,-16(fp)
 100fbb4:	e0fff815 	stw	r3,-32(fp)
 100fbb8:	00000b06 	br	100fbe8 <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 100fbbc:	e13ff817 	ldw	r4,-32(fp)
 100fbc0:	e13ff817 	ldw	r4,-32(fp)
 100fbc4:	2105883a 	add	r2,r4,r4
 100fbc8:	1007883a 	mov	r3,r2
 100fbcc:	e0bfff17 	ldw	r2,-4(fp)
 100fbd0:	1885883a 	add	r2,r3,r2
 100fbd4:	e0fff917 	ldw	r3,-28(fp)
 100fbd8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 100fbdc:	e0bff817 	ldw	r2,-32(fp)
 100fbe0:	10800044 	addi	r2,r2,1
 100fbe4:	e0bff815 	stw	r2,-32(fp)
 100fbe8:	e0fffb17 	ldw	r3,-20(fp)
 100fbec:	e13ff817 	ldw	r4,-32(fp)
 100fbf0:	193ff22e 	bgeu	r3,r4,100fbbc <alt_up_pixel_buffer_dma_draw_hline+0x164>
 100fbf4:	00006906 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 100fbf8:	e0bffc17 	ldw	r2,-16(fp)
 100fbfc:	e0bff815 	stw	r2,-32(fp)
 100fc00:	00000c06 	br	100fc34 <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 100fc04:	e0fff817 	ldw	r3,-32(fp)
 100fc08:	e0fff817 	ldw	r3,-32(fp)
 100fc0c:	18c5883a 	add	r2,r3,r3
 100fc10:	1085883a 	add	r2,r2,r2
 100fc14:	1007883a 	mov	r3,r2
 100fc18:	e0bfff17 	ldw	r2,-4(fp)
 100fc1c:	1885883a 	add	r2,r3,r2
 100fc20:	e0fff917 	ldw	r3,-28(fp)
 100fc24:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 100fc28:	e13ff817 	ldw	r4,-32(fp)
 100fc2c:	21000044 	addi	r4,r4,1
 100fc30:	e13ff815 	stw	r4,-32(fp)
 100fc34:	e0bffb17 	ldw	r2,-20(fp)
 100fc38:	e0fff817 	ldw	r3,-32(fp)
 100fc3c:	10fff12e 	bgeu	r2,r3,100fc04 <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
 100fc40:	00005606 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100fc44:	e0bff317 	ldw	r2,-52(fp)
 100fc48:	10800e17 	ldw	r2,56(r2)
 100fc4c:	10800058 	cmpnei	r2,r2,1
 100fc50:	1000151e 	bne	r2,zero,100fca8 <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
 100fc54:	e13ffa17 	ldw	r4,-24(fp)
 100fc58:	e17ffe17 	ldw	r5,-8(fp)
 100fc5c:	100435c0 	call	100435c <__mulsi3>
 100fc60:	e13fff17 	ldw	r4,-4(fp)
 100fc64:	2089883a 	add	r4,r4,r2
 100fc68:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 100fc6c:	e0bffc17 	ldw	r2,-16(fp)
 100fc70:	e0bff715 	stw	r2,-36(fp)
 100fc74:	00000806 	br	100fc98 <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
 100fc78:	e0ffff17 	ldw	r3,-4(fp)
 100fc7c:	e0bff717 	ldw	r2,-36(fp)
 100fc80:	1885883a 	add	r2,r3,r2
 100fc84:	e0fff917 	ldw	r3,-28(fp)
 100fc88:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 100fc8c:	e0fff717 	ldw	r3,-36(fp)
 100fc90:	18c00044 	addi	r3,r3,1
 100fc94:	e0fff715 	stw	r3,-36(fp)
 100fc98:	e13ffb17 	ldw	r4,-20(fp)
 100fc9c:	e0bff717 	ldw	r2,-36(fp)
 100fca0:	20bff52e 	bgeu	r4,r2,100fc78 <alt_up_pixel_buffer_dma_draw_hline+0x220>
 100fca4:	00003d06 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100fca8:	e0bff317 	ldw	r2,-52(fp)
 100fcac:	10800e17 	ldw	r2,56(r2)
 100fcb0:	10800098 	cmpnei	r2,r2,2
 100fcb4:	10001c1e 	bne	r2,zero,100fd28 <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
 100fcb8:	e0fffe17 	ldw	r3,-8(fp)
 100fcbc:	e0fffe17 	ldw	r3,-8(fp)
 100fcc0:	18c5883a 	add	r2,r3,r3
 100fcc4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 100fcc8:	e13ffa17 	ldw	r4,-24(fp)
 100fccc:	e17ffe17 	ldw	r5,-8(fp)
 100fcd0:	100435c0 	call	100435c <__mulsi3>
 100fcd4:	e13fff17 	ldw	r4,-4(fp)
 100fcd8:	2089883a 	add	r4,r4,r2
 100fcdc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 100fce0:	e0bffc17 	ldw	r2,-16(fp)
 100fce4:	e0bff715 	stw	r2,-36(fp)
 100fce8:	00000b06 	br	100fd18 <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 100fcec:	e0fff717 	ldw	r3,-36(fp)
 100fcf0:	e0fff717 	ldw	r3,-36(fp)
 100fcf4:	18c5883a 	add	r2,r3,r3
 100fcf8:	1007883a 	mov	r3,r2
 100fcfc:	e0bfff17 	ldw	r2,-4(fp)
 100fd00:	1885883a 	add	r2,r3,r2
 100fd04:	e0fff917 	ldw	r3,-28(fp)
 100fd08:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 100fd0c:	e13ff717 	ldw	r4,-36(fp)
 100fd10:	21000044 	addi	r4,r4,1
 100fd14:	e13ff715 	stw	r4,-36(fp)
 100fd18:	e0bffb17 	ldw	r2,-20(fp)
 100fd1c:	e0fff717 	ldw	r3,-36(fp)
 100fd20:	10fff22e 	bgeu	r2,r3,100fcec <alt_up_pixel_buffer_dma_draw_hline+0x294>
 100fd24:	00001d06 	br	100fd9c <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 100fd28:	e13ffe17 	ldw	r4,-8(fp)
 100fd2c:	e13ffe17 	ldw	r4,-8(fp)
 100fd30:	2105883a 	add	r2,r4,r4
 100fd34:	1085883a 	add	r2,r2,r2
 100fd38:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 100fd3c:	e13ffa17 	ldw	r4,-24(fp)
 100fd40:	e17ffe17 	ldw	r5,-8(fp)
 100fd44:	100435c0 	call	100435c <__mulsi3>
 100fd48:	e0ffff17 	ldw	r3,-4(fp)
 100fd4c:	1887883a 	add	r3,r3,r2
 100fd50:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 100fd54:	e13ffc17 	ldw	r4,-16(fp)
 100fd58:	e13ff715 	stw	r4,-36(fp)
 100fd5c:	00000c06 	br	100fd90 <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 100fd60:	e0fff717 	ldw	r3,-36(fp)
 100fd64:	e0fff717 	ldw	r3,-36(fp)
 100fd68:	18c5883a 	add	r2,r3,r3
 100fd6c:	1085883a 	add	r2,r2,r2
 100fd70:	1007883a 	mov	r3,r2
 100fd74:	e0bfff17 	ldw	r2,-4(fp)
 100fd78:	1885883a 	add	r2,r3,r2
 100fd7c:	e0fff917 	ldw	r3,-28(fp)
 100fd80:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 100fd84:	e13ff717 	ldw	r4,-36(fp)
 100fd88:	21000044 	addi	r4,r4,1
 100fd8c:	e13ff715 	stw	r4,-36(fp)
 100fd90:	e0bffb17 	ldw	r2,-20(fp)
 100fd94:	e0fff717 	ldw	r3,-36(fp)
 100fd98:	10fff12e 	bgeu	r2,r3,100fd60 <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 100fd9c:	e037883a 	mov	sp,fp
 100fda0:	dfc00117 	ldw	ra,4(sp)
 100fda4:	df000017 	ldw	fp,0(sp)
 100fda8:	dec00204 	addi	sp,sp,8
 100fdac:	f800283a 	ret

0100fdb0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 100fdb0:	defff004 	addi	sp,sp,-64
 100fdb4:	dfc00f15 	stw	ra,60(sp)
 100fdb8:	df000e15 	stw	fp,56(sp)
 100fdbc:	df000e04 	addi	fp,sp,56
 100fdc0:	e13ff215 	stw	r4,-56(fp)
 100fdc4:	e17ff315 	stw	r5,-52(fp)
 100fdc8:	e1bff415 	stw	r6,-48(fp)
 100fdcc:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 100fdd0:	e0bff217 	ldw	r2,-56(fp)
 100fdd4:	10800f17 	ldw	r2,60(r2)
 100fdd8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 100fddc:	e0bff217 	ldw	r2,-56(fp)
 100fde0:	10801017 	ldw	r2,64(r2)
 100fde4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 100fde8:	e0bff317 	ldw	r2,-52(fp)
 100fdec:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 100fdf0:	e0fff417 	ldw	r3,-48(fp)
 100fdf4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 100fdf8:	e13ff517 	ldw	r4,-44(fp)
 100fdfc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 100fe00:	e0800217 	ldw	r2,8(fp)
 100fe04:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 100fe08:	e0fffa17 	ldw	r3,-24(fp)
 100fe0c:	e13ffb17 	ldw	r4,-20(fp)
 100fe10:	1900042e 	bgeu	r3,r4,100fe24 <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
 100fe14:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 100fe18:	e0fffa17 	ldw	r3,-24(fp)
 100fe1c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 100fe20:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 100fe24:	e13ffc17 	ldw	r4,-16(fp)
 100fe28:	e0bffe17 	ldw	r2,-8(fp)
 100fe2c:	2080d12e 	bgeu	r4,r2,1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
 100fe30:	e0fffb17 	ldw	r3,-20(fp)
 100fe34:	e13ffd17 	ldw	r4,-12(fp)
 100fe38:	19000136 	bltu	r3,r4,100fe40 <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 100fe3c:	0000cd06 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 100fe40:	e0bffa17 	ldw	r2,-24(fp)
 100fe44:	e0fffd17 	ldw	r3,-12(fp)
 100fe48:	10c00336 	bltu	r2,r3,100fe58 <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
 100fe4c:	e13ffd17 	ldw	r4,-12(fp)
 100fe50:	213fffc4 	addi	r4,r4,-1
 100fe54:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 100fe58:	e0800317 	ldw	r2,12(fp)
 100fe5c:	10800058 	cmpnei	r2,r2,1
 100fe60:	1000041e 	bne	r2,zero,100fe74 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 100fe64:	e0bff217 	ldw	r2,-56(fp)
 100fe68:	10800c17 	ldw	r2,48(r2)
 100fe6c:	e0bfff15 	stw	r2,-4(fp)
 100fe70:	00000306 	br	100fe80 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 100fe74:	e0bff217 	ldw	r2,-56(fp)
 100fe78:	10800b17 	ldw	r2,44(r2)
 100fe7c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100fe80:	e0bff217 	ldw	r2,-56(fp)
 100fe84:	10800d17 	ldw	r2,52(r2)
 100fe88:	1004c03a 	cmpne	r2,r2,zero
 100fe8c:	1000571e 	bne	r2,zero,100ffec <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 100fe90:	e0bff217 	ldw	r2,-56(fp)
 100fe94:	10801317 	ldw	r2,76(r2)
 100fe98:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 100fe9c:	e0bff717 	ldw	r2,-36(fp)
 100fea0:	e0fffb17 	ldw	r3,-20(fp)
 100fea4:	1884983a 	sll	r2,r3,r2
 100fea8:	e13fff17 	ldw	r4,-4(fp)
 100feac:	2089883a 	add	r4,r4,r2
 100feb0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100feb4:	e0bff217 	ldw	r2,-56(fp)
 100feb8:	10800e17 	ldw	r2,56(r2)
 100febc:	10800058 	cmpnei	r2,r2,1
 100fec0:	1000151e 	bne	r2,zero,100ff18 <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
 100fec4:	e0bffb17 	ldw	r2,-20(fp)
 100fec8:	e0bff815 	stw	r2,-32(fp)
 100fecc:	00000e06 	br	100ff08 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 100fed0:	e0ffff17 	ldw	r3,-4(fp)
 100fed4:	e0bffc17 	ldw	r2,-16(fp)
 100fed8:	1885883a 	add	r2,r3,r2
 100fedc:	e0fff917 	ldw	r3,-28(fp)
 100fee0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100fee4:	e0fff717 	ldw	r3,-36(fp)
 100fee8:	00800044 	movi	r2,1
 100feec:	10c4983a 	sll	r2,r2,r3
 100fef0:	e0ffff17 	ldw	r3,-4(fp)
 100fef4:	1887883a 	add	r3,r3,r2
 100fef8:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100fefc:	e13ff817 	ldw	r4,-32(fp)
 100ff00:	21000044 	addi	r4,r4,1
 100ff04:	e13ff815 	stw	r4,-32(fp)
 100ff08:	e0bffa17 	ldw	r2,-24(fp)
 100ff0c:	e0fff817 	ldw	r3,-32(fp)
 100ff10:	10ffef2e 	bgeu	r2,r3,100fed0 <alt_up_pixel_buffer_dma_draw_vline+0x120>
 100ff14:	00009706 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100ff18:	e0bff217 	ldw	r2,-56(fp)
 100ff1c:	10800e17 	ldw	r2,56(r2)
 100ff20:	10800098 	cmpnei	r2,r2,2
 100ff24:	1000181e 	bne	r2,zero,100ff88 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
 100ff28:	e13ffb17 	ldw	r4,-20(fp)
 100ff2c:	e13ff815 	stw	r4,-32(fp)
 100ff30:	00001106 	br	100ff78 <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 100ff34:	e0fffc17 	ldw	r3,-16(fp)
 100ff38:	e0fffc17 	ldw	r3,-16(fp)
 100ff3c:	18c5883a 	add	r2,r3,r3
 100ff40:	1007883a 	mov	r3,r2
 100ff44:	e0bfff17 	ldw	r2,-4(fp)
 100ff48:	1885883a 	add	r2,r3,r2
 100ff4c:	e0fff917 	ldw	r3,-28(fp)
 100ff50:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100ff54:	e0fff717 	ldw	r3,-36(fp)
 100ff58:	00800044 	movi	r2,1
 100ff5c:	10c4983a 	sll	r2,r2,r3
 100ff60:	e13fff17 	ldw	r4,-4(fp)
 100ff64:	2089883a 	add	r4,r4,r2
 100ff68:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 100ff6c:	e0bff817 	ldw	r2,-32(fp)
 100ff70:	10800044 	addi	r2,r2,1
 100ff74:	e0bff815 	stw	r2,-32(fp)
 100ff78:	e0fffa17 	ldw	r3,-24(fp)
 100ff7c:	e13ff817 	ldw	r4,-32(fp)
 100ff80:	193fec2e 	bgeu	r3,r4,100ff34 <alt_up_pixel_buffer_dma_draw_vline+0x184>
 100ff84:	00007b06 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100ff88:	e0bffb17 	ldw	r2,-20(fp)
 100ff8c:	e0bff815 	stw	r2,-32(fp)
 100ff90:	00001206 	br	100ffdc <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 100ff94:	e0fffc17 	ldw	r3,-16(fp)
 100ff98:	e0fffc17 	ldw	r3,-16(fp)
 100ff9c:	18c5883a 	add	r2,r3,r3
 100ffa0:	1085883a 	add	r2,r2,r2
 100ffa4:	1007883a 	mov	r3,r2
 100ffa8:	e0bfff17 	ldw	r2,-4(fp)
 100ffac:	1885883a 	add	r2,r3,r2
 100ffb0:	e0fff917 	ldw	r3,-28(fp)
 100ffb4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100ffb8:	e0fff717 	ldw	r3,-36(fp)
 100ffbc:	00800044 	movi	r2,1
 100ffc0:	10c4983a 	sll	r2,r2,r3
 100ffc4:	e13fff17 	ldw	r4,-4(fp)
 100ffc8:	2089883a 	add	r4,r4,r2
 100ffcc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 100ffd0:	e0bff817 	ldw	r2,-32(fp)
 100ffd4:	10800044 	addi	r2,r2,1
 100ffd8:	e0bff815 	stw	r2,-32(fp)
 100ffdc:	e0fffa17 	ldw	r3,-24(fp)
 100ffe0:	e13ff817 	ldw	r4,-32(fp)
 100ffe4:	193feb2e 	bgeu	r3,r4,100ff94 <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
 100ffe8:	00006206 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100ffec:	e0bff217 	ldw	r2,-56(fp)
 100fff0:	10800e17 	ldw	r2,56(r2)
 100fff4:	10800058 	cmpnei	r2,r2,1
 100fff8:	1000191e 	bne	r2,zero,1010060 <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
 100fffc:	e13ffb17 	ldw	r4,-20(fp)
 1010000:	e17ffe17 	ldw	r5,-8(fp)
 1010004:	100435c0 	call	100435c <__mulsi3>
 1010008:	e0ffff17 	ldw	r3,-4(fp)
 101000c:	1887883a 	add	r3,r3,r2
 1010010:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1010014:	e13ffb17 	ldw	r4,-20(fp)
 1010018:	e13ff615 	stw	r4,-40(fp)
 101001c:	00000c06 	br	1010050 <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1010020:	e0ffff17 	ldw	r3,-4(fp)
 1010024:	e0bffc17 	ldw	r2,-16(fp)
 1010028:	1885883a 	add	r2,r3,r2
 101002c:	e0fff917 	ldw	r3,-28(fp)
 1010030:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 1010034:	e0bfff17 	ldw	r2,-4(fp)
 1010038:	e0fffe17 	ldw	r3,-8(fp)
 101003c:	10c5883a 	add	r2,r2,r3
 1010040:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1010044:	e13ff617 	ldw	r4,-40(fp)
 1010048:	21000044 	addi	r4,r4,1
 101004c:	e13ff615 	stw	r4,-40(fp)
 1010050:	e0bffa17 	ldw	r2,-24(fp)
 1010054:	e0fff617 	ldw	r3,-40(fp)
 1010058:	10fff12e 	bgeu	r2,r3,1010020 <alt_up_pixel_buffer_dma_draw_vline+0x270>
 101005c:	00004506 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1010060:	e0bff217 	ldw	r2,-56(fp)
 1010064:	10800e17 	ldw	r2,56(r2)
 1010068:	10800098 	cmpnei	r2,r2,2
 101006c:	1000201e 	bne	r2,zero,10100f0 <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
 1010070:	e13ffe17 	ldw	r4,-8(fp)
 1010074:	e13ffe17 	ldw	r4,-8(fp)
 1010078:	2105883a 	add	r2,r4,r4
 101007c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1010080:	e13ffb17 	ldw	r4,-20(fp)
 1010084:	e17ffe17 	ldw	r5,-8(fp)
 1010088:	100435c0 	call	100435c <__mulsi3>
 101008c:	e0ffff17 	ldw	r3,-4(fp)
 1010090:	1887883a 	add	r3,r3,r2
 1010094:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1010098:	e13ffb17 	ldw	r4,-20(fp)
 101009c:	e13ff615 	stw	r4,-40(fp)
 10100a0:	00000f06 	br	10100e0 <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 10100a4:	e0fffc17 	ldw	r3,-16(fp)
 10100a8:	e0fffc17 	ldw	r3,-16(fp)
 10100ac:	18c5883a 	add	r2,r3,r3
 10100b0:	1007883a 	mov	r3,r2
 10100b4:	e0bfff17 	ldw	r2,-4(fp)
 10100b8:	1885883a 	add	r2,r3,r2
 10100bc:	e0fff917 	ldw	r3,-28(fp)
 10100c0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 10100c4:	e13fff17 	ldw	r4,-4(fp)
 10100c8:	e0bffe17 	ldw	r2,-8(fp)
 10100cc:	2089883a 	add	r4,r4,r2
 10100d0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10100d4:	e0fff617 	ldw	r3,-40(fp)
 10100d8:	18c00044 	addi	r3,r3,1
 10100dc:	e0fff615 	stw	r3,-40(fp)
 10100e0:	e13ffa17 	ldw	r4,-24(fp)
 10100e4:	e0bff617 	ldw	r2,-40(fp)
 10100e8:	20bfee2e 	bgeu	r4,r2,10100a4 <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
 10100ec:	00002106 	br	1010174 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10100f0:	e0fffe17 	ldw	r3,-8(fp)
 10100f4:	e0fffe17 	ldw	r3,-8(fp)
 10100f8:	18c5883a 	add	r2,r3,r3
 10100fc:	1085883a 	add	r2,r2,r2
 1010100:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1010104:	e13ffb17 	ldw	r4,-20(fp)
 1010108:	e17ffe17 	ldw	r5,-8(fp)
 101010c:	100435c0 	call	100435c <__mulsi3>
 1010110:	e13fff17 	ldw	r4,-4(fp)
 1010114:	2089883a 	add	r4,r4,r2
 1010118:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101011c:	e0bffb17 	ldw	r2,-20(fp)
 1010120:	e0bff615 	stw	r2,-40(fp)
 1010124:	00001006 	br	1010168 <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1010128:	e0fffc17 	ldw	r3,-16(fp)
 101012c:	e0fffc17 	ldw	r3,-16(fp)
 1010130:	18c5883a 	add	r2,r3,r3
 1010134:	1085883a 	add	r2,r2,r2
 1010138:	1007883a 	mov	r3,r2
 101013c:	e0bfff17 	ldw	r2,-4(fp)
 1010140:	1885883a 	add	r2,r3,r2
 1010144:	e0fff917 	ldw	r3,-28(fp)
 1010148:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 101014c:	e13fff17 	ldw	r4,-4(fp)
 1010150:	e0bffe17 	ldw	r2,-8(fp)
 1010154:	2089883a 	add	r4,r4,r2
 1010158:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101015c:	e0fff617 	ldw	r3,-40(fp)
 1010160:	18c00044 	addi	r3,r3,1
 1010164:	e0fff615 	stw	r3,-40(fp)
 1010168:	e13ffa17 	ldw	r4,-24(fp)
 101016c:	e0bff617 	ldw	r2,-40(fp)
 1010170:	20bfed2e 	bgeu	r4,r2,1010128 <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 1010174:	e037883a 	mov	sp,fp
 1010178:	dfc00117 	ldw	ra,4(sp)
 101017c:	df000017 	ldw	fp,0(sp)
 1010180:	dec00204 	addi	sp,sp,8
 1010184:	f800283a 	ret

01010188 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 1010188:	defff804 	addi	sp,sp,-32
 101018c:	dfc00715 	stw	ra,28(sp)
 1010190:	df000615 	stw	fp,24(sp)
 1010194:	df000604 	addi	fp,sp,24
 1010198:	e13ffc15 	stw	r4,-16(fp)
 101019c:	e17ffd15 	stw	r5,-12(fp)
 10101a0:	e1bffe15 	stw	r6,-8(fp)
 10101a4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 10101a8:	e0800317 	ldw	r2,12(fp)
 10101ac:	d8800015 	stw	r2,0(sp)
 10101b0:	e0800417 	ldw	r2,16(fp)
 10101b4:	d8800115 	stw	r2,4(sp)
 10101b8:	e13ffc17 	ldw	r4,-16(fp)
 10101bc:	e17ffd17 	ldw	r5,-12(fp)
 10101c0:	e1bfff17 	ldw	r6,-4(fp)
 10101c4:	e1fffe17 	ldw	r7,-8(fp)
 10101c8:	100fa580 	call	100fa58 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 10101cc:	e0800317 	ldw	r2,12(fp)
 10101d0:	d8800015 	stw	r2,0(sp)
 10101d4:	e0800417 	ldw	r2,16(fp)
 10101d8:	d8800115 	stw	r2,4(sp)
 10101dc:	e13ffc17 	ldw	r4,-16(fp)
 10101e0:	e17ffd17 	ldw	r5,-12(fp)
 10101e4:	e1bfff17 	ldw	r6,-4(fp)
 10101e8:	e1c00217 	ldw	r7,8(fp)
 10101ec:	100fa580 	call	100fa58 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 10101f0:	e0800317 	ldw	r2,12(fp)
 10101f4:	d8800015 	stw	r2,0(sp)
 10101f8:	e0800417 	ldw	r2,16(fp)
 10101fc:	d8800115 	stw	r2,4(sp)
 1010200:	e13ffc17 	ldw	r4,-16(fp)
 1010204:	e17ffd17 	ldw	r5,-12(fp)
 1010208:	e1bffe17 	ldw	r6,-8(fp)
 101020c:	e1c00217 	ldw	r7,8(fp)
 1010210:	100fdb00 	call	100fdb0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 1010214:	e0800317 	ldw	r2,12(fp)
 1010218:	d8800015 	stw	r2,0(sp)
 101021c:	e0800417 	ldw	r2,16(fp)
 1010220:	d8800115 	stw	r2,4(sp)
 1010224:	e13ffc17 	ldw	r4,-16(fp)
 1010228:	e17fff17 	ldw	r5,-4(fp)
 101022c:	e1bffe17 	ldw	r6,-8(fp)
 1010230:	e1c00217 	ldw	r7,8(fp)
 1010234:	100fdb00 	call	100fdb0 <alt_up_pixel_buffer_dma_draw_vline>
}
 1010238:	e037883a 	mov	sp,fp
 101023c:	dfc00117 	ldw	ra,4(sp)
 1010240:	df000017 	ldw	fp,0(sp)
 1010244:	dec00204 	addi	sp,sp,8
 1010248:	f800283a 	ret

0101024c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 101024c:	defffa04 	addi	sp,sp,-24
 1010250:	dfc00515 	stw	ra,20(sp)
 1010254:	df000415 	stw	fp,16(sp)
 1010258:	df000404 	addi	fp,sp,16
 101025c:	e13ffc15 	stw	r4,-16(fp)
 1010260:	e17ffd15 	stw	r5,-12(fp)
 1010264:	e1bffe15 	stw	r6,-8(fp)
 1010268:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 101026c:	e0c00317 	ldw	r3,12(fp)
 1010270:	1804c03a 	cmpne	r2,r3,zero
 1010274:	10000b1e 	bne	r2,zero,10102a4 <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 1010278:	e13ffd17 	ldw	r4,-12(fp)
 101027c:	e17fff17 	ldw	r5,-4(fp)
 1010280:	100435c0 	call	100435c <__mulsi3>
 1010284:	e0fffe17 	ldw	r3,-8(fp)
 1010288:	10c5883a 	add	r2,r2,r3
 101028c:	1007883a 	mov	r3,r2
 1010290:	e0bffc17 	ldw	r2,-16(fp)
 1010294:	1885883a 	add	r2,r3,r2
 1010298:	e0c00217 	ldw	r3,8(fp)
 101029c:	10c00025 	stbio	r3,0(r2)
 10102a0:	00001b06 	br	1010310 <helper_plot_pixel+0xc4>
	else if (mode == 1)
 10102a4:	e0c00317 	ldw	r3,12(fp)
 10102a8:	18800058 	cmpnei	r2,r3,1
 10102ac:	10000c1e 	bne	r2,zero,10102e0 <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 10102b0:	e13ffd17 	ldw	r4,-12(fp)
 10102b4:	e17fff17 	ldw	r5,-4(fp)
 10102b8:	100435c0 	call	100435c <__mulsi3>
 10102bc:	e0fffe17 	ldw	r3,-8(fp)
 10102c0:	10c5883a 	add	r2,r2,r3
 10102c4:	1085883a 	add	r2,r2,r2
 10102c8:	1007883a 	mov	r3,r2
 10102cc:	e0bffc17 	ldw	r2,-16(fp)
 10102d0:	1885883a 	add	r2,r3,r2
 10102d4:	e0c00217 	ldw	r3,8(fp)
 10102d8:	10c0002d 	sthio	r3,0(r2)
 10102dc:	00000c06 	br	1010310 <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 10102e0:	e13ffd17 	ldw	r4,-12(fp)
 10102e4:	e17fff17 	ldw	r5,-4(fp)
 10102e8:	100435c0 	call	100435c <__mulsi3>
 10102ec:	e0fffe17 	ldw	r3,-8(fp)
 10102f0:	10c5883a 	add	r2,r2,r3
 10102f4:	1085883a 	add	r2,r2,r2
 10102f8:	1085883a 	add	r2,r2,r2
 10102fc:	1007883a 	mov	r3,r2
 1010300:	e0bffc17 	ldw	r2,-16(fp)
 1010304:	1885883a 	add	r2,r3,r2
 1010308:	e0c00217 	ldw	r3,8(fp)
 101030c:	10c00035 	stwio	r3,0(r2)
}
 1010310:	e037883a 	mov	sp,fp
 1010314:	dfc00117 	ldw	ra,4(sp)
 1010318:	df000017 	ldw	fp,0(sp)
 101031c:	dec00204 	addi	sp,sp,8
 1010320:	f800283a 	ret

01010324 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 1010324:	deffe404 	addi	sp,sp,-112
 1010328:	dfc01b15 	stw	ra,108(sp)
 101032c:	df001a15 	stw	fp,104(sp)
 1010330:	df001a04 	addi	fp,sp,104
 1010334:	e13fe815 	stw	r4,-96(fp)
 1010338:	e17fe915 	stw	r5,-92(fp)
 101033c:	e1bfea15 	stw	r6,-88(fp)
 1010340:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 1010344:	e0bfe917 	ldw	r2,-92(fp)
 1010348:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 101034c:	e0ffea17 	ldw	r3,-88(fp)
 1010350:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 1010354:	e13feb17 	ldw	r4,-84(fp)
 1010358:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 101035c:	e0800217 	ldw	r2,8(fp)
 1010360:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 1010364:	e0fff717 	ldw	r3,-36(fp)
 1010368:	e13ff917 	ldw	r4,-28(fp)
 101036c:	1905c83a 	sub	r2,r3,r4
 1010370:	e0bfff15 	stw	r2,-4(fp)
 1010374:	e0ffff17 	ldw	r3,-4(fp)
 1010378:	1804403a 	cmpge	r2,r3,zero
 101037c:	1000031e 	bne	r2,zero,101038c <alt_up_pixel_buffer_dma_draw_line+0x68>
 1010380:	e13fff17 	ldw	r4,-4(fp)
 1010384:	0109c83a 	sub	r4,zero,r4
 1010388:	e13fff15 	stw	r4,-4(fp)
 101038c:	e0fff817 	ldw	r3,-32(fp)
 1010390:	e13ffa17 	ldw	r4,-24(fp)
 1010394:	1905c83a 	sub	r2,r3,r4
 1010398:	e0bffe15 	stw	r2,-8(fp)
 101039c:	e0fffe17 	ldw	r3,-8(fp)
 10103a0:	1804403a 	cmpge	r2,r3,zero
 10103a4:	1000031e 	bne	r2,zero,10103b4 <alt_up_pixel_buffer_dma_draw_line+0x90>
 10103a8:	e13ffe17 	ldw	r4,-8(fp)
 10103ac:	0109c83a 	sub	r4,zero,r4
 10103b0:	e13ffe15 	stw	r4,-8(fp)
 10103b4:	e0fffe17 	ldw	r3,-8(fp)
 10103b8:	e13fff17 	ldw	r4,-4(fp)
 10103bc:	1904803a 	cmplt	r2,r3,r4
 10103c0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 10103c4:	e0bfe817 	ldw	r2,-96(fp)
 10103c8:	10800e17 	ldw	r2,56(r2)
 10103cc:	10800060 	cmpeqi	r2,r2,1
 10103d0:	10000c1e 	bne	r2,zero,1010404 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 10103d4:	e0bfe817 	ldw	r2,-96(fp)
 10103d8:	10800e17 	ldw	r2,56(r2)
 10103dc:	10800098 	cmpnei	r2,r2,2
 10103e0:	1000031e 	bne	r2,zero,10103f0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 10103e4:	00800044 	movi	r2,1
 10103e8:	e0bffc15 	stw	r2,-16(fp)
 10103ec:	00000206 	br	10103f8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 10103f0:	00c00084 	movi	r3,2
 10103f4:	e0fffc15 	stw	r3,-16(fp)
 10103f8:	e13ffc17 	ldw	r4,-16(fp)
 10103fc:	e13ffd15 	stw	r4,-12(fp)
 1010400:	00000106 	br	1010408 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 1010404:	e03ffd15 	stw	zero,-12(fp)
 1010408:	e0bffd17 	ldw	r2,-12(fp)
 101040c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 1010410:	e0c00317 	ldw	r3,12(fp)
 1010414:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 1010418:	e0bfe817 	ldw	r2,-96(fp)
 101041c:	10800d17 	ldw	r2,52(r2)
 1010420:	1004c03a 	cmpne	r2,r2,zero
 1010424:	1000091e 	bne	r2,zero,101044c <alt_up_pixel_buffer_dma_draw_line+0x128>
 1010428:	e0bfe817 	ldw	r2,-96(fp)
 101042c:	10c01317 	ldw	r3,76(r2)
 1010430:	e0bfef17 	ldw	r2,-68(fp)
 1010434:	1885c83a 	sub	r2,r3,r2
 1010438:	1007883a 	mov	r3,r2
 101043c:	00800044 	movi	r2,1
 1010440:	10c4983a 	sll	r2,r2,r3
 1010444:	e0bffb15 	stw	r2,-20(fp)
 1010448:	00000306 	br	1010458 <alt_up_pixel_buffer_dma_draw_line+0x134>
 101044c:	e0bfe817 	ldw	r2,-96(fp)
 1010450:	10800f17 	ldw	r2,60(r2)
 1010454:	e0bffb15 	stw	r2,-20(fp)
 1010458:	e13ffb17 	ldw	r4,-20(fp)
 101045c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 1010460:	e0800417 	ldw	r2,16(fp)
 1010464:	10800058 	cmpnei	r2,r2,1
 1010468:	1000041e 	bne	r2,zero,101047c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 101046c:	e0bfe817 	ldw	r2,-96(fp)
 1010470:	10800c17 	ldw	r2,48(r2)
 1010474:	e0bfed15 	stw	r2,-76(fp)
 1010478:	00000306 	br	1010488 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 101047c:	e0bfe817 	ldw	r2,-96(fp)
 1010480:	10800b17 	ldw	r2,44(r2)
 1010484:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 1010488:	e0fff603 	ldbu	r3,-40(fp)
 101048c:	18803fcc 	andi	r2,r3,255
 1010490:	1080201c 	xori	r2,r2,128
 1010494:	10bfe004 	addi	r2,r2,-128
 1010498:	10800050 	cmplti	r2,r2,1
 101049c:	10000c1e 	bne	r2,zero,10104d0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 10104a0:	e13ffa17 	ldw	r4,-24(fp)
 10104a4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 10104a8:	e0bff917 	ldw	r2,-28(fp)
 10104ac:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 10104b0:	e0fff317 	ldw	r3,-52(fp)
 10104b4:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 10104b8:	e13ff817 	ldw	r4,-32(fp)
 10104bc:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 10104c0:	e0bff717 	ldw	r2,-36(fp)
 10104c4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 10104c8:	e0fff317 	ldw	r3,-52(fp)
 10104cc:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 10104d0:	e13ff817 	ldw	r4,-32(fp)
 10104d4:	e0bffa17 	ldw	r2,-24(fp)
 10104d8:	20800c0e 	bge	r4,r2,101050c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 10104dc:	e0fffa17 	ldw	r3,-24(fp)
 10104e0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 10104e4:	e13ff817 	ldw	r4,-32(fp)
 10104e8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 10104ec:	e0bff317 	ldw	r2,-52(fp)
 10104f0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 10104f4:	e0fff917 	ldw	r3,-28(fp)
 10104f8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 10104fc:	e13ff717 	ldw	r4,-36(fp)
 1010500:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 1010504:	e0bff317 	ldw	r2,-52(fp)
 1010508:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 101050c:	e0fff817 	ldw	r3,-32(fp)
 1010510:	e13ffa17 	ldw	r4,-24(fp)
 1010514:	1907c83a 	sub	r3,r3,r4
 1010518:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 101051c:	e0fff717 	ldw	r3,-36(fp)
 1010520:	e13ff917 	ldw	r4,-28(fp)
 1010524:	1905c83a 	sub	r2,r3,r4
 1010528:	e0bff415 	stw	r2,-48(fp)
 101052c:	e0fff417 	ldw	r3,-48(fp)
 1010530:	1804403a 	cmpge	r2,r3,zero
 1010534:	1000031e 	bne	r2,zero,1010544 <alt_up_pixel_buffer_dma_draw_line+0x220>
 1010538:	e13ff417 	ldw	r4,-48(fp)
 101053c:	0109c83a 	sub	r4,zero,r4
 1010540:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 1010544:	e0fff517 	ldw	r3,-44(fp)
 1010548:	1804d7fa 	srli	r2,r3,31
 101054c:	e13ff517 	ldw	r4,-44(fp)
 1010550:	1105883a 	add	r2,r2,r4
 1010554:	1005d07a 	srai	r2,r2,1
 1010558:	0085c83a 	sub	r2,zero,r2
 101055c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 1010560:	e0bff917 	ldw	r2,-28(fp)
 1010564:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 1010568:	e0fff917 	ldw	r3,-28(fp)
 101056c:	e13ff717 	ldw	r4,-36(fp)
 1010570:	1900030e 	bge	r3,r4,1010580 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 1010574:	00800044 	movi	r2,1
 1010578:	e0bff215 	stw	r2,-56(fp)
 101057c:	00000206 	br	1010588 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 1010580:	00ffffc4 	movi	r3,-1
 1010584:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 1010588:	e13ff603 	ldbu	r4,-40(fp)
 101058c:	20803fcc 	andi	r2,r4,255
 1010590:	1080201c 	xori	r2,r2,128
 1010594:	10bfe004 	addi	r2,r2,-128
 1010598:	10800058 	cmpnei	r2,r2,1
 101059c:	1000221e 	bne	r2,zero,1010628 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 10105a0:	e0bffa17 	ldw	r2,-24(fp)
 10105a4:	e0bff115 	stw	r2,-60(fp)
 10105a8:	00001b06 	br	1010618 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 10105ac:	e0ffee17 	ldw	r3,-72(fp)
 10105b0:	d8c00015 	stw	r3,0(sp)
 10105b4:	e13fef17 	ldw	r4,-68(fp)
 10105b8:	d9000115 	stw	r4,4(sp)
 10105bc:	e13fed17 	ldw	r4,-76(fp)
 10105c0:	e17fec17 	ldw	r5,-80(fp)
 10105c4:	e1bff017 	ldw	r6,-64(fp)
 10105c8:	e1fff117 	ldw	r7,-60(fp)
 10105cc:	101024c0 	call	101024c <helper_plot_pixel>
			error = error + deltay;
 10105d0:	e0bff317 	ldw	r2,-52(fp)
 10105d4:	e0fff417 	ldw	r3,-48(fp)
 10105d8:	10c5883a 	add	r2,r2,r3
 10105dc:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 10105e0:	e13ff317 	ldw	r4,-52(fp)
 10105e4:	20800050 	cmplti	r2,r4,1
 10105e8:	1000081e 	bne	r2,zero,101060c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 10105ec:	e0bff017 	ldw	r2,-64(fp)
 10105f0:	e0fff217 	ldw	r3,-56(fp)
 10105f4:	10c5883a 	add	r2,r2,r3
 10105f8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 10105fc:	e13ff317 	ldw	r4,-52(fp)
 1010600:	e0bff517 	ldw	r2,-44(fp)
 1010604:	2089c83a 	sub	r4,r4,r2
 1010608:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 101060c:	e0fff117 	ldw	r3,-60(fp)
 1010610:	18c00044 	addi	r3,r3,1
 1010614:	e0fff115 	stw	r3,-60(fp)
 1010618:	e13ff817 	ldw	r4,-32(fp)
 101061c:	e0bff117 	ldw	r2,-60(fp)
 1010620:	20bfe20e 	bge	r4,r2,10105ac <alt_up_pixel_buffer_dma_draw_line+0x288>
 1010624:	00002106 	br	10106ac <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1010628:	e0fffa17 	ldw	r3,-24(fp)
 101062c:	e0fff115 	stw	r3,-60(fp)
 1010630:	00001b06 	br	10106a0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1010634:	e13fee17 	ldw	r4,-72(fp)
 1010638:	d9000015 	stw	r4,0(sp)
 101063c:	e0bfef17 	ldw	r2,-68(fp)
 1010640:	d8800115 	stw	r2,4(sp)
 1010644:	e13fed17 	ldw	r4,-76(fp)
 1010648:	e17fec17 	ldw	r5,-80(fp)
 101064c:	e1bff117 	ldw	r6,-60(fp)
 1010650:	e1fff017 	ldw	r7,-64(fp)
 1010654:	101024c0 	call	101024c <helper_plot_pixel>
			error = error + deltay;
 1010658:	e0fff317 	ldw	r3,-52(fp)
 101065c:	e13ff417 	ldw	r4,-48(fp)
 1010660:	1907883a 	add	r3,r3,r4
 1010664:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1010668:	e0fff317 	ldw	r3,-52(fp)
 101066c:	18800050 	cmplti	r2,r3,1
 1010670:	1000081e 	bne	r2,zero,1010694 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1010674:	e13ff017 	ldw	r4,-64(fp)
 1010678:	e0bff217 	ldw	r2,-56(fp)
 101067c:	2089883a 	add	r4,r4,r2
 1010680:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1010684:	e0fff317 	ldw	r3,-52(fp)
 1010688:	e13ff517 	ldw	r4,-44(fp)
 101068c:	1907c83a 	sub	r3,r3,r4
 1010690:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1010694:	e0bff117 	ldw	r2,-60(fp)
 1010698:	10800044 	addi	r2,r2,1
 101069c:	e0bff115 	stw	r2,-60(fp)
 10106a0:	e0fff817 	ldw	r3,-32(fp)
 10106a4:	e13ff117 	ldw	r4,-60(fp)
 10106a8:	193fe20e 	bge	r3,r4,1010634 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 10106ac:	e037883a 	mov	sp,fp
 10106b0:	dfc00117 	ldw	ra,4(sp)
 10106b4:	df000017 	ldw	fp,0(sp)
 10106b8:	dec00204 	addi	sp,sp,8
 10106bc:	f800283a 	ret

010106c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10106c0:	defff404 	addi	sp,sp,-48
 10106c4:	df000b15 	stw	fp,44(sp)
 10106c8:	df000b04 	addi	fp,sp,44
 10106cc:	e13ffb15 	stw	r4,-20(fp)
 10106d0:	e17ffc15 	stw	r5,-16(fp)
 10106d4:	e1bffd15 	stw	r6,-12(fp)
 10106d8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10106dc:	e03ff915 	stw	zero,-28(fp)
 10106e0:	00804074 	movhi	r2,257
 10106e4:	1095f504 	addi	r2,r2,22484
 10106e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10106ec:	1005003a 	cmpeq	r2,r2,zero
 10106f0:	1000411e 	bne	r2,zero,10107f8 <alt_alarm_start+0x138>
  {
    if (alarm)
 10106f4:	e0bffb17 	ldw	r2,-20(fp)
 10106f8:	1005003a 	cmpeq	r2,r2,zero
 10106fc:	10003b1e 	bne	r2,zero,10107ec <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1010700:	e0fffb17 	ldw	r3,-20(fp)
 1010704:	e0bffd17 	ldw	r2,-12(fp)
 1010708:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 101070c:	e0fffb17 	ldw	r3,-20(fp)
 1010710:	e0bffe17 	ldw	r2,-8(fp)
 1010714:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010718:	0005303a 	rdctl	r2,status
 101071c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010720:	e0fff817 	ldw	r3,-32(fp)
 1010724:	00bfff84 	movi	r2,-2
 1010728:	1884703a 	and	r2,r3,r2
 101072c:	1001703a 	wrctl	status,r2
  
  return context;
 1010730:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1010734:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1010738:	00804074 	movhi	r2,257
 101073c:	1095f604 	addi	r2,r2,22488
 1010740:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1010744:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1010748:	e0fffc17 	ldw	r3,-16(fp)
 101074c:	e0bff917 	ldw	r2,-28(fp)
 1010750:	1885883a 	add	r2,r3,r2
 1010754:	10c00044 	addi	r3,r2,1
 1010758:	e0bffb17 	ldw	r2,-20(fp)
 101075c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010760:	e0bffb17 	ldw	r2,-20(fp)
 1010764:	10c00217 	ldw	r3,8(r2)
 1010768:	e0bff917 	ldw	r2,-28(fp)
 101076c:	1880042e 	bgeu	r3,r2,1010780 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1010770:	e0fffb17 	ldw	r3,-20(fp)
 1010774:	00800044 	movi	r2,1
 1010778:	18800405 	stb	r2,16(r3)
 101077c:	00000206 	br	1010788 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1010780:	e0bffb17 	ldw	r2,-20(fp)
 1010784:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010788:	e0fffb17 	ldw	r3,-20(fp)
 101078c:	00804074 	movhi	r2,257
 1010790:	108f3104 	addi	r2,r2,15556
 1010794:	e0bff615 	stw	r2,-40(fp)
 1010798:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101079c:	e0fff717 	ldw	r3,-36(fp)
 10107a0:	e0bff617 	ldw	r2,-40(fp)
 10107a4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10107a8:	e0bff617 	ldw	r2,-40(fp)
 10107ac:	10c00017 	ldw	r3,0(r2)
 10107b0:	e0bff717 	ldw	r2,-36(fp)
 10107b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10107b8:	e0bff617 	ldw	r2,-40(fp)
 10107bc:	10c00017 	ldw	r3,0(r2)
 10107c0:	e0bff717 	ldw	r2,-36(fp)
 10107c4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10107c8:	e0fff617 	ldw	r3,-40(fp)
 10107cc:	e0bff717 	ldw	r2,-36(fp)
 10107d0:	18800015 	stw	r2,0(r3)
 10107d4:	e0bffa17 	ldw	r2,-24(fp)
 10107d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10107dc:	e0bff517 	ldw	r2,-44(fp)
 10107e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10107e4:	e03fff15 	stw	zero,-4(fp)
 10107e8:	00000506 	br	1010800 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 10107ec:	00bffa84 	movi	r2,-22
 10107f0:	e0bfff15 	stw	r2,-4(fp)
 10107f4:	00000206 	br	1010800 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 10107f8:	00bfde84 	movi	r2,-134
 10107fc:	e0bfff15 	stw	r2,-4(fp)
 1010800:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1010804:	e037883a 	mov	sp,fp
 1010808:	df000017 	ldw	fp,0(sp)
 101080c:	dec00104 	addi	sp,sp,4
 1010810:	f800283a 	ret

01010814 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1010814:	defffa04 	addi	sp,sp,-24
 1010818:	dfc00515 	stw	ra,20(sp)
 101081c:	df000415 	stw	fp,16(sp)
 1010820:	df000404 	addi	fp,sp,16
 1010824:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1010828:	008000c4 	movi	r2,3
 101082c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 1010830:	e13ffc17 	ldw	r4,-16(fp)
 1010834:	014003f4 	movhi	r5,15
 1010838:	29509004 	addi	r5,r5,16960
 101083c:	100435c0 	call	100435c <__mulsi3>
 1010840:	100b883a 	mov	r5,r2
 1010844:	0100bef4 	movhi	r4,763
 1010848:	213c2004 	addi	r4,r4,-3968
 101084c:	100434c0 	call	100434c <__udivsi3>
 1010850:	100b883a 	mov	r5,r2
 1010854:	01200034 	movhi	r4,32768
 1010858:	213fffc4 	addi	r4,r4,-1
 101085c:	100434c0 	call	100434c <__udivsi3>
 1010860:	100b883a 	mov	r5,r2
 1010864:	e13fff17 	ldw	r4,-4(fp)
 1010868:	100434c0 	call	100434c <__udivsi3>
 101086c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1010870:	e0bffd17 	ldw	r2,-12(fp)
 1010874:	1005003a 	cmpeq	r2,r2,zero
 1010878:	10002a1e 	bne	r2,zero,1010924 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 101087c:	e03ffe15 	stw	zero,-8(fp)
 1010880:	00001706 	br	10108e0 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1010884:	00a00034 	movhi	r2,32768
 1010888:	10bfffc4 	addi	r2,r2,-1
 101088c:	10bfffc4 	addi	r2,r2,-1
 1010890:	103ffe1e 	bne	r2,zero,101088c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1010894:	e13ffc17 	ldw	r4,-16(fp)
 1010898:	014003f4 	movhi	r5,15
 101089c:	29509004 	addi	r5,r5,16960
 10108a0:	100435c0 	call	100435c <__mulsi3>
 10108a4:	100b883a 	mov	r5,r2
 10108a8:	0100bef4 	movhi	r4,763
 10108ac:	213c2004 	addi	r4,r4,-3968
 10108b0:	100434c0 	call	100434c <__udivsi3>
 10108b4:	100b883a 	mov	r5,r2
 10108b8:	01200034 	movhi	r4,32768
 10108bc:	213fffc4 	addi	r4,r4,-1
 10108c0:	100434c0 	call	100434c <__udivsi3>
 10108c4:	1007883a 	mov	r3,r2
 10108c8:	e0bfff17 	ldw	r2,-4(fp)
 10108cc:	10c5c83a 	sub	r2,r2,r3
 10108d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10108d4:	e0bffe17 	ldw	r2,-8(fp)
 10108d8:	10800044 	addi	r2,r2,1
 10108dc:	e0bffe15 	stw	r2,-8(fp)
 10108e0:	e0fffe17 	ldw	r3,-8(fp)
 10108e4:	e0bffd17 	ldw	r2,-12(fp)
 10108e8:	18bfe616 	blt	r3,r2,1010884 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10108ec:	e13ffc17 	ldw	r4,-16(fp)
 10108f0:	014003f4 	movhi	r5,15
 10108f4:	29509004 	addi	r5,r5,16960
 10108f8:	100435c0 	call	100435c <__mulsi3>
 10108fc:	100b883a 	mov	r5,r2
 1010900:	0100bef4 	movhi	r4,763
 1010904:	213c2004 	addi	r4,r4,-3968
 1010908:	100434c0 	call	100434c <__udivsi3>
 101090c:	1009883a 	mov	r4,r2
 1010910:	e17fff17 	ldw	r5,-4(fp)
 1010914:	100435c0 	call	100435c <__mulsi3>
 1010918:	10bfffc4 	addi	r2,r2,-1
 101091c:	103ffe1e 	bne	r2,zero,1010918 <alt_busy_sleep+0x104>
 1010920:	00000d06 	br	1010958 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1010924:	e13ffc17 	ldw	r4,-16(fp)
 1010928:	014003f4 	movhi	r5,15
 101092c:	29509004 	addi	r5,r5,16960
 1010930:	100435c0 	call	100435c <__mulsi3>
 1010934:	100b883a 	mov	r5,r2
 1010938:	0100bef4 	movhi	r4,763
 101093c:	213c2004 	addi	r4,r4,-3968
 1010940:	100434c0 	call	100434c <__udivsi3>
 1010944:	1009883a 	mov	r4,r2
 1010948:	e17fff17 	ldw	r5,-4(fp)
 101094c:	100435c0 	call	100435c <__mulsi3>
 1010950:	10bfffc4 	addi	r2,r2,-1
 1010954:	00bffe16 	blt	zero,r2,1010950 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1010958:	0005883a 	mov	r2,zero
}
 101095c:	e037883a 	mov	sp,fp
 1010960:	dfc00117 	ldw	ra,4(sp)
 1010964:	df000017 	ldw	fp,0(sp)
 1010968:	dec00204 	addi	sp,sp,8
 101096c:	f800283a 	ret

01010970 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1010970:	deffff04 	addi	sp,sp,-4
 1010974:	df000015 	stw	fp,0(sp)
 1010978:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101097c:	e037883a 	mov	sp,fp
 1010980:	df000017 	ldw	fp,0(sp)
 1010984:	dec00104 	addi	sp,sp,4
 1010988:	f800283a 	ret

0101098c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101098c:	defff904 	addi	sp,sp,-28
 1010990:	dfc00615 	stw	ra,24(sp)
 1010994:	df000515 	stw	fp,20(sp)
 1010998:	df000504 	addi	fp,sp,20
 101099c:	e13ffd15 	stw	r4,-12(fp)
 10109a0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10109a4:	e0bffd17 	ldw	r2,-12(fp)
 10109a8:	1005003a 	cmpeq	r2,r2,zero
 10109ac:	1000041e 	bne	r2,zero,10109c0 <alt_dev_llist_insert+0x34>
 10109b0:	e0bffd17 	ldw	r2,-12(fp)
 10109b4:	10800217 	ldw	r2,8(r2)
 10109b8:	1004c03a 	cmpne	r2,r2,zero
 10109bc:	1000071e 	bne	r2,zero,10109dc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10109c0:	1010a400 	call	1010a40 <alt_get_errno>
 10109c4:	1007883a 	mov	r3,r2
 10109c8:	00800584 	movi	r2,22
 10109cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10109d0:	00bffa84 	movi	r2,-22
 10109d4:	e0bfff15 	stw	r2,-4(fp)
 10109d8:	00001306 	br	1010a28 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10109dc:	e0fffd17 	ldw	r3,-12(fp)
 10109e0:	e0bffe17 	ldw	r2,-8(fp)
 10109e4:	e0bffb15 	stw	r2,-20(fp)
 10109e8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10109ec:	e0fffc17 	ldw	r3,-16(fp)
 10109f0:	e0bffb17 	ldw	r2,-20(fp)
 10109f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10109f8:	e0bffb17 	ldw	r2,-20(fp)
 10109fc:	10c00017 	ldw	r3,0(r2)
 1010a00:	e0bffc17 	ldw	r2,-16(fp)
 1010a04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010a08:	e0bffb17 	ldw	r2,-20(fp)
 1010a0c:	10c00017 	ldw	r3,0(r2)
 1010a10:	e0bffc17 	ldw	r2,-16(fp)
 1010a14:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010a18:	e0fffb17 	ldw	r3,-20(fp)
 1010a1c:	e0bffc17 	ldw	r2,-16(fp)
 1010a20:	18800015 	stw	r2,0(r3)

  return 0;  
 1010a24:	e03fff15 	stw	zero,-4(fp)
 1010a28:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a2c:	e037883a 	mov	sp,fp
 1010a30:	dfc00117 	ldw	ra,4(sp)
 1010a34:	df000017 	ldw	fp,0(sp)
 1010a38:	dec00204 	addi	sp,sp,8
 1010a3c:	f800283a 	ret

01010a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010a40:	defffd04 	addi	sp,sp,-12
 1010a44:	dfc00215 	stw	ra,8(sp)
 1010a48:	df000115 	stw	fp,4(sp)
 1010a4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010a50:	00804074 	movhi	r2,257
 1010a54:	108f2e04 	addi	r2,r2,15544
 1010a58:	10800017 	ldw	r2,0(r2)
 1010a5c:	1005003a 	cmpeq	r2,r2,zero
 1010a60:	1000061e 	bne	r2,zero,1010a7c <alt_get_errno+0x3c>
 1010a64:	00804074 	movhi	r2,257
 1010a68:	108f2e04 	addi	r2,r2,15544
 1010a6c:	10800017 	ldw	r2,0(r2)
 1010a70:	103ee83a 	callr	r2
 1010a74:	e0bfff15 	stw	r2,-4(fp)
 1010a78:	00000306 	br	1010a88 <alt_get_errno+0x48>
 1010a7c:	00804074 	movhi	r2,257
 1010a80:	1095ed04 	addi	r2,r2,22452
 1010a84:	e0bfff15 	stw	r2,-4(fp)
 1010a88:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a8c:	e037883a 	mov	sp,fp
 1010a90:	dfc00117 	ldw	ra,4(sp)
 1010a94:	df000017 	ldw	fp,0(sp)
 1010a98:	dec00204 	addi	sp,sp,8
 1010a9c:	f800283a 	ret

01010aa0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1010aa0:	defffd04 	addi	sp,sp,-12
 1010aa4:	dfc00215 	stw	ra,8(sp)
 1010aa8:	df000115 	stw	fp,4(sp)
 1010aac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010ab0:	00bfff04 	movi	r2,-4
 1010ab4:	00c04074 	movhi	r3,257
 1010ab8:	18c6fa04 	addi	r3,r3,7144
 1010abc:	1885883a 	add	r2,r3,r2
 1010ac0:	e0bfff15 	stw	r2,-4(fp)
 1010ac4:	00000606 	br	1010ae0 <_do_ctors+0x40>
        (*ctor) (); 
 1010ac8:	e0bfff17 	ldw	r2,-4(fp)
 1010acc:	10800017 	ldw	r2,0(r2)
 1010ad0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010ad4:	e0bfff17 	ldw	r2,-4(fp)
 1010ad8:	10bfff04 	addi	r2,r2,-4
 1010adc:	e0bfff15 	stw	r2,-4(fp)
 1010ae0:	e0ffff17 	ldw	r3,-4(fp)
 1010ae4:	00804074 	movhi	r2,257
 1010ae8:	1086f904 	addi	r2,r2,7140
 1010aec:	18bff62e 	bgeu	r3,r2,1010ac8 <_do_ctors+0x28>
        (*ctor) (); 
}
 1010af0:	e037883a 	mov	sp,fp
 1010af4:	dfc00117 	ldw	ra,4(sp)
 1010af8:	df000017 	ldw	fp,0(sp)
 1010afc:	dec00204 	addi	sp,sp,8
 1010b00:	f800283a 	ret

01010b04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010b04:	defffd04 	addi	sp,sp,-12
 1010b08:	dfc00215 	stw	ra,8(sp)
 1010b0c:	df000115 	stw	fp,4(sp)
 1010b10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010b14:	00bfff04 	movi	r2,-4
 1010b18:	00c04074 	movhi	r3,257
 1010b1c:	18c6fa04 	addi	r3,r3,7144
 1010b20:	1885883a 	add	r2,r3,r2
 1010b24:	e0bfff15 	stw	r2,-4(fp)
 1010b28:	00000606 	br	1010b44 <_do_dtors+0x40>
        (*dtor) (); 
 1010b2c:	e0bfff17 	ldw	r2,-4(fp)
 1010b30:	10800017 	ldw	r2,0(r2)
 1010b34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010b38:	e0bfff17 	ldw	r2,-4(fp)
 1010b3c:	10bfff04 	addi	r2,r2,-4
 1010b40:	e0bfff15 	stw	r2,-4(fp)
 1010b44:	e0ffff17 	ldw	r3,-4(fp)
 1010b48:	00804074 	movhi	r2,257
 1010b4c:	1086fa04 	addi	r2,r2,7144
 1010b50:	18bff62e 	bgeu	r3,r2,1010b2c <_do_dtors+0x28>
        (*dtor) (); 
}
 1010b54:	e037883a 	mov	sp,fp
 1010b58:	dfc00117 	ldw	ra,4(sp)
 1010b5c:	df000017 	ldw	fp,0(sp)
 1010b60:	dec00204 	addi	sp,sp,8
 1010b64:	f800283a 	ret

01010b68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1010b68:	defff904 	addi	sp,sp,-28
 1010b6c:	dfc00615 	stw	ra,24(sp)
 1010b70:	df000515 	stw	fp,20(sp)
 1010b74:	df000504 	addi	fp,sp,20
 1010b78:	e13ffd15 	stw	r4,-12(fp)
 1010b7c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1010b80:	e0bffe17 	ldw	r2,-8(fp)
 1010b84:	10800017 	ldw	r2,0(r2)
 1010b88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1010b8c:	e13ffd17 	ldw	r4,-12(fp)
 1010b90:	10056200 	call	1005620 <strlen>
 1010b94:	10800044 	addi	r2,r2,1
 1010b98:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010b9c:	00000d06 	br	1010bd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1010ba0:	e0bffc17 	ldw	r2,-16(fp)
 1010ba4:	11000217 	ldw	r4,8(r2)
 1010ba8:	e1bffb17 	ldw	r6,-20(fp)
 1010bac:	e17ffd17 	ldw	r5,-12(fp)
 1010bb0:	10117bc0 	call	10117bc <memcmp>
 1010bb4:	1004c03a 	cmpne	r2,r2,zero
 1010bb8:	1000031e 	bne	r2,zero,1010bc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1010bbc:	e0bffc17 	ldw	r2,-16(fp)
 1010bc0:	e0bfff15 	stw	r2,-4(fp)
 1010bc4:	00000706 	br	1010be4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1010bc8:	e0bffc17 	ldw	r2,-16(fp)
 1010bcc:	10800017 	ldw	r2,0(r2)
 1010bd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010bd4:	e0fffe17 	ldw	r3,-8(fp)
 1010bd8:	e0bffc17 	ldw	r2,-16(fp)
 1010bdc:	10fff01e 	bne	r2,r3,1010ba0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1010be0:	e03fff15 	stw	zero,-4(fp)
 1010be4:	e0bfff17 	ldw	r2,-4(fp)
}
 1010be8:	e037883a 	mov	sp,fp
 1010bec:	dfc00117 	ldw	ra,4(sp)
 1010bf0:	df000017 	ldw	fp,0(sp)
 1010bf4:	dec00204 	addi	sp,sp,8
 1010bf8:	f800283a 	ret

01010bfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010bfc:	defffe04 	addi	sp,sp,-8
 1010c00:	dfc00115 	stw	ra,4(sp)
 1010c04:	df000015 	stw	fp,0(sp)
 1010c08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1010c0c:	0009883a 	mov	r4,zero
 1010c10:	01440004 	movi	r5,4096
 1010c14:	10116e00 	call	10116e0 <alt_icache_flush>
#endif
}
 1010c18:	e037883a 	mov	sp,fp
 1010c1c:	dfc00117 	ldw	ra,4(sp)
 1010c20:	df000017 	ldw	fp,0(sp)
 1010c24:	dec00204 	addi	sp,sp,8
 1010c28:	f800283a 	ret

01010c2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010c2c:	defff904 	addi	sp,sp,-28
 1010c30:	dfc00615 	stw	ra,24(sp)
 1010c34:	df000515 	stw	fp,20(sp)
 1010c38:	df000504 	addi	fp,sp,20
 1010c3c:	e13ffc15 	stw	r4,-16(fp)
 1010c40:	e17ffd15 	stw	r5,-12(fp)
 1010c44:	e1bffe15 	stw	r6,-8(fp)
 1010c48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010c4c:	e0800217 	ldw	r2,8(fp)
 1010c50:	d8800015 	stw	r2,0(sp)
 1010c54:	e13ffc17 	ldw	r4,-16(fp)
 1010c58:	e17ffd17 	ldw	r5,-12(fp)
 1010c5c:	e1bffe17 	ldw	r6,-8(fp)
 1010c60:	e1ffff17 	ldw	r7,-4(fp)
 1010c64:	1010e000 	call	1010e00 <alt_iic_isr_register>
}  
 1010c68:	e037883a 	mov	sp,fp
 1010c6c:	dfc00117 	ldw	ra,4(sp)
 1010c70:	df000017 	ldw	fp,0(sp)
 1010c74:	dec00204 	addi	sp,sp,8
 1010c78:	f800283a 	ret

01010c7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1010c7c:	defff904 	addi	sp,sp,-28
 1010c80:	df000615 	stw	fp,24(sp)
 1010c84:	df000604 	addi	fp,sp,24
 1010c88:	e13ffe15 	stw	r4,-8(fp)
 1010c8c:	e17fff15 	stw	r5,-4(fp)
 1010c90:	e0bfff17 	ldw	r2,-4(fp)
 1010c94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c98:	0005303a 	rdctl	r2,status
 1010c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010ca0:	e0fffb17 	ldw	r3,-20(fp)
 1010ca4:	00bfff84 	movi	r2,-2
 1010ca8:	1884703a 	and	r2,r3,r2
 1010cac:	1001703a 	wrctl	status,r2
  
  return context;
 1010cb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010cb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1010cb8:	e0fffc17 	ldw	r3,-16(fp)
 1010cbc:	00800044 	movi	r2,1
 1010cc0:	10c4983a 	sll	r2,r2,r3
 1010cc4:	1007883a 	mov	r3,r2
 1010cc8:	00804074 	movhi	r2,257
 1010ccc:	1095f404 	addi	r2,r2,22480
 1010cd0:	10800017 	ldw	r2,0(r2)
 1010cd4:	1886b03a 	or	r3,r3,r2
 1010cd8:	00804074 	movhi	r2,257
 1010cdc:	1095f404 	addi	r2,r2,22480
 1010ce0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010ce4:	00804074 	movhi	r2,257
 1010ce8:	1095f404 	addi	r2,r2,22480
 1010cec:	10800017 	ldw	r2,0(r2)
 1010cf0:	100170fa 	wrctl	ienable,r2
 1010cf4:	e0bffd17 	ldw	r2,-12(fp)
 1010cf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010cfc:	e0bffa17 	ldw	r2,-24(fp)
 1010d00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010d04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1010d08:	e037883a 	mov	sp,fp
 1010d0c:	df000017 	ldw	fp,0(sp)
 1010d10:	dec00104 	addi	sp,sp,4
 1010d14:	f800283a 	ret

01010d18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010d18:	defff904 	addi	sp,sp,-28
 1010d1c:	df000615 	stw	fp,24(sp)
 1010d20:	df000604 	addi	fp,sp,24
 1010d24:	e13ffe15 	stw	r4,-8(fp)
 1010d28:	e17fff15 	stw	r5,-4(fp)
 1010d2c:	e0bfff17 	ldw	r2,-4(fp)
 1010d30:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010d34:	0005303a 	rdctl	r2,status
 1010d38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d3c:	e0fffb17 	ldw	r3,-20(fp)
 1010d40:	00bfff84 	movi	r2,-2
 1010d44:	1884703a 	and	r2,r3,r2
 1010d48:	1001703a 	wrctl	status,r2
  
  return context;
 1010d4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010d50:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1010d54:	e0fffc17 	ldw	r3,-16(fp)
 1010d58:	00800044 	movi	r2,1
 1010d5c:	10c4983a 	sll	r2,r2,r3
 1010d60:	0084303a 	nor	r2,zero,r2
 1010d64:	1007883a 	mov	r3,r2
 1010d68:	00804074 	movhi	r2,257
 1010d6c:	1095f404 	addi	r2,r2,22480
 1010d70:	10800017 	ldw	r2,0(r2)
 1010d74:	1886703a 	and	r3,r3,r2
 1010d78:	00804074 	movhi	r2,257
 1010d7c:	1095f404 	addi	r2,r2,22480
 1010d80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010d84:	00804074 	movhi	r2,257
 1010d88:	1095f404 	addi	r2,r2,22480
 1010d8c:	10800017 	ldw	r2,0(r2)
 1010d90:	100170fa 	wrctl	ienable,r2
 1010d94:	e0bffd17 	ldw	r2,-12(fp)
 1010d98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d9c:	e0bffa17 	ldw	r2,-24(fp)
 1010da0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010da4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1010da8:	e037883a 	mov	sp,fp
 1010dac:	df000017 	ldw	fp,0(sp)
 1010db0:	dec00104 	addi	sp,sp,4
 1010db4:	f800283a 	ret

01010db8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1010db8:	defffc04 	addi	sp,sp,-16
 1010dbc:	df000315 	stw	fp,12(sp)
 1010dc0:	df000304 	addi	fp,sp,12
 1010dc4:	e13ffe15 	stw	r4,-8(fp)
 1010dc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1010dcc:	000530fa 	rdctl	r2,ienable
 1010dd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010dd4:	e0ffff17 	ldw	r3,-4(fp)
 1010dd8:	00800044 	movi	r2,1
 1010ddc:	10c4983a 	sll	r2,r2,r3
 1010de0:	1007883a 	mov	r3,r2
 1010de4:	e0bffd17 	ldw	r2,-12(fp)
 1010de8:	1884703a 	and	r2,r3,r2
 1010dec:	1004c03a 	cmpne	r2,r2,zero
}
 1010df0:	e037883a 	mov	sp,fp
 1010df4:	df000017 	ldw	fp,0(sp)
 1010df8:	dec00104 	addi	sp,sp,4
 1010dfc:	f800283a 	ret

01010e00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010e00:	defff404 	addi	sp,sp,-48
 1010e04:	dfc00b15 	stw	ra,44(sp)
 1010e08:	df000a15 	stw	fp,40(sp)
 1010e0c:	df000a04 	addi	fp,sp,40
 1010e10:	e13ffb15 	stw	r4,-20(fp)
 1010e14:	e17ffc15 	stw	r5,-16(fp)
 1010e18:	e1bffd15 	stw	r6,-12(fp)
 1010e1c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1010e20:	00bffa84 	movi	r2,-22
 1010e24:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010e28:	e0bffc17 	ldw	r2,-16(fp)
 1010e2c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010e30:	e0bff917 	ldw	r2,-28(fp)
 1010e34:	10800808 	cmpgei	r2,r2,32
 1010e38:	1000291e 	bne	r2,zero,1010ee0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e3c:	0005303a 	rdctl	r2,status
 1010e40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e44:	e0fff717 	ldw	r3,-36(fp)
 1010e48:	00bfff84 	movi	r2,-2
 1010e4c:	1884703a 	and	r2,r3,r2
 1010e50:	1001703a 	wrctl	status,r2
  
  return context;
 1010e54:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010e58:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1010e5c:	e0bff917 	ldw	r2,-28(fp)
 1010e60:	00c04074 	movhi	r3,257
 1010e64:	18d60104 	addi	r3,r3,22532
 1010e68:	100490fa 	slli	r2,r2,3
 1010e6c:	10c7883a 	add	r3,r2,r3
 1010e70:	e0bffd17 	ldw	r2,-12(fp)
 1010e74:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1010e78:	e0bff917 	ldw	r2,-28(fp)
 1010e7c:	00c04074 	movhi	r3,257
 1010e80:	18d60104 	addi	r3,r3,22532
 1010e84:	100490fa 	slli	r2,r2,3
 1010e88:	10c5883a 	add	r2,r2,r3
 1010e8c:	10c00104 	addi	r3,r2,4
 1010e90:	e0bffe17 	ldw	r2,-8(fp)
 1010e94:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1010e98:	e0bffd17 	ldw	r2,-12(fp)
 1010e9c:	1005003a 	cmpeq	r2,r2,zero
 1010ea0:	1000051e 	bne	r2,zero,1010eb8 <alt_iic_isr_register+0xb8>
 1010ea4:	e17ff917 	ldw	r5,-28(fp)
 1010ea8:	e13ffb17 	ldw	r4,-20(fp)
 1010eac:	1010c7c0 	call	1010c7c <alt_ic_irq_enable>
 1010eb0:	e0bfff15 	stw	r2,-4(fp)
 1010eb4:	00000406 	br	1010ec8 <alt_iic_isr_register+0xc8>
 1010eb8:	e17ff917 	ldw	r5,-28(fp)
 1010ebc:	e13ffb17 	ldw	r4,-20(fp)
 1010ec0:	1010d180 	call	1010d18 <alt_ic_irq_disable>
 1010ec4:	e0bfff15 	stw	r2,-4(fp)
 1010ec8:	e0bfff17 	ldw	r2,-4(fp)
 1010ecc:	e0bffa15 	stw	r2,-24(fp)
 1010ed0:	e0bff817 	ldw	r2,-32(fp)
 1010ed4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010ed8:	e0bff617 	ldw	r2,-40(fp)
 1010edc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1010ee0:	e0bffa17 	ldw	r2,-24(fp)
}
 1010ee4:	e037883a 	mov	sp,fp
 1010ee8:	dfc00117 	ldw	ra,4(sp)
 1010eec:	df000017 	ldw	fp,0(sp)
 1010ef0:	dec00204 	addi	sp,sp,8
 1010ef4:	f800283a 	ret

01010ef8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010ef8:	defff804 	addi	sp,sp,-32
 1010efc:	dfc00715 	stw	ra,28(sp)
 1010f00:	df000615 	stw	fp,24(sp)
 1010f04:	dc000515 	stw	r16,20(sp)
 1010f08:	df000504 	addi	fp,sp,20
 1010f0c:	e13ffc15 	stw	r4,-16(fp)
 1010f10:	e17ffd15 	stw	r5,-12(fp)
 1010f14:	e1bffe15 	stw	r6,-8(fp)
 1010f18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1010f1c:	e13ffd17 	ldw	r4,-12(fp)
 1010f20:	e17ffe17 	ldw	r5,-8(fp)
 1010f24:	e1bfff17 	ldw	r6,-4(fp)
 1010f28:	10111400 	call	1011140 <open>
 1010f2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1010f30:	e0bffb17 	ldw	r2,-20(fp)
 1010f34:	1004803a 	cmplt	r2,r2,zero
 1010f38:	10001f1e 	bne	r2,zero,1010fb8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1010f3c:	e13ffb17 	ldw	r4,-20(fp)
 1010f40:	04004074 	movhi	r16,257
 1010f44:	840a8b04 	addi	r16,r16,10796
 1010f48:	01400304 	movi	r5,12
 1010f4c:	100435c0 	call	100435c <__mulsi3>
 1010f50:	1405883a 	add	r2,r2,r16
 1010f54:	10c00017 	ldw	r3,0(r2)
 1010f58:	e0bffc17 	ldw	r2,-16(fp)
 1010f5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1010f60:	e13ffb17 	ldw	r4,-20(fp)
 1010f64:	04004074 	movhi	r16,257
 1010f68:	840a8b04 	addi	r16,r16,10796
 1010f6c:	01400304 	movi	r5,12
 1010f70:	100435c0 	call	100435c <__mulsi3>
 1010f74:	1405883a 	add	r2,r2,r16
 1010f78:	10800104 	addi	r2,r2,4
 1010f7c:	10c00017 	ldw	r3,0(r2)
 1010f80:	e0bffc17 	ldw	r2,-16(fp)
 1010f84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1010f88:	e13ffb17 	ldw	r4,-20(fp)
 1010f8c:	04004074 	movhi	r16,257
 1010f90:	840a8b04 	addi	r16,r16,10796
 1010f94:	01400304 	movi	r5,12
 1010f98:	100435c0 	call	100435c <__mulsi3>
 1010f9c:	1405883a 	add	r2,r2,r16
 1010fa0:	10800204 	addi	r2,r2,8
 1010fa4:	10c00017 	ldw	r3,0(r2)
 1010fa8:	e0bffc17 	ldw	r2,-16(fp)
 1010fac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1010fb0:	e13ffb17 	ldw	r4,-20(fp)
 1010fb4:	100db9c0 	call	100db9c <alt_release_fd>
  }
} 
 1010fb8:	e037883a 	mov	sp,fp
 1010fbc:	dfc00217 	ldw	ra,8(sp)
 1010fc0:	df000117 	ldw	fp,4(sp)
 1010fc4:	dc000017 	ldw	r16,0(sp)
 1010fc8:	dec00304 	addi	sp,sp,12
 1010fcc:	f800283a 	ret

01010fd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1010fd0:	defffb04 	addi	sp,sp,-20
 1010fd4:	dfc00415 	stw	ra,16(sp)
 1010fd8:	df000315 	stw	fp,12(sp)
 1010fdc:	df000304 	addi	fp,sp,12
 1010fe0:	e13ffd15 	stw	r4,-12(fp)
 1010fe4:	e17ffe15 	stw	r5,-8(fp)
 1010fe8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1010fec:	01004074 	movhi	r4,257
 1010ff0:	210a8e04 	addi	r4,r4,10808
 1010ff4:	e17ffd17 	ldw	r5,-12(fp)
 1010ff8:	01800044 	movi	r6,1
 1010ffc:	01c07fc4 	movi	r7,511
 1011000:	1010ef80 	call	1010ef8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1011004:	01004074 	movhi	r4,257
 1011008:	210a8b04 	addi	r4,r4,10796
 101100c:	e17ffe17 	ldw	r5,-8(fp)
 1011010:	000d883a 	mov	r6,zero
 1011014:	01c07fc4 	movi	r7,511
 1011018:	1010ef80 	call	1010ef8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101101c:	01004074 	movhi	r4,257
 1011020:	210a9104 	addi	r4,r4,10820
 1011024:	e17fff17 	ldw	r5,-4(fp)
 1011028:	01800044 	movi	r6,1
 101102c:	01c07fc4 	movi	r7,511
 1011030:	1010ef80 	call	1010ef8 <alt_open_fd>
}  
 1011034:	e037883a 	mov	sp,fp
 1011038:	dfc00117 	ldw	ra,4(sp)
 101103c:	df000017 	ldw	fp,0(sp)
 1011040:	dec00204 	addi	sp,sp,8
 1011044:	f800283a 	ret

01011048 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1011048:	defffa04 	addi	sp,sp,-24
 101104c:	dfc00515 	stw	ra,20(sp)
 1011050:	df000415 	stw	fp,16(sp)
 1011054:	dc000315 	stw	r16,12(sp)
 1011058:	df000304 	addi	fp,sp,12
 101105c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1011060:	e0bffe17 	ldw	r2,-8(fp)
 1011064:	10800217 	ldw	r2,8(r2)
 1011068:	10d00034 	orhi	r3,r2,16384
 101106c:	e0bffe17 	ldw	r2,-8(fp)
 1011070:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1011074:	e03ffd15 	stw	zero,-12(fp)
 1011078:	00002306 	br	1011108 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101107c:	e13ffd17 	ldw	r4,-12(fp)
 1011080:	04004074 	movhi	r16,257
 1011084:	840a8b04 	addi	r16,r16,10796
 1011088:	01400304 	movi	r5,12
 101108c:	100435c0 	call	100435c <__mulsi3>
 1011090:	1405883a 	add	r2,r2,r16
 1011094:	10c00017 	ldw	r3,0(r2)
 1011098:	e0bffe17 	ldw	r2,-8(fp)
 101109c:	10800017 	ldw	r2,0(r2)
 10110a0:	1880161e 	bne	r3,r2,10110fc <alt_file_locked+0xb4>
 10110a4:	e13ffd17 	ldw	r4,-12(fp)
 10110a8:	04004074 	movhi	r16,257
 10110ac:	840a8b04 	addi	r16,r16,10796
 10110b0:	01400304 	movi	r5,12
 10110b4:	100435c0 	call	100435c <__mulsi3>
 10110b8:	1405883a 	add	r2,r2,r16
 10110bc:	10800204 	addi	r2,r2,8
 10110c0:	10800017 	ldw	r2,0(r2)
 10110c4:	1004403a 	cmpge	r2,r2,zero
 10110c8:	10000c1e 	bne	r2,zero,10110fc <alt_file_locked+0xb4>
 10110cc:	e13ffd17 	ldw	r4,-12(fp)
 10110d0:	01400304 	movi	r5,12
 10110d4:	100435c0 	call	100435c <__mulsi3>
 10110d8:	1007883a 	mov	r3,r2
 10110dc:	00804074 	movhi	r2,257
 10110e0:	108a8b04 	addi	r2,r2,10796
 10110e4:	1887883a 	add	r3,r3,r2
 10110e8:	e0bffe17 	ldw	r2,-8(fp)
 10110ec:	18800326 	beq	r3,r2,10110fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10110f0:	00bffcc4 	movi	r2,-13
 10110f4:	e0bfff15 	stw	r2,-4(fp)
 10110f8:	00000a06 	br	1011124 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10110fc:	e0bffd17 	ldw	r2,-12(fp)
 1011100:	10800044 	addi	r2,r2,1
 1011104:	e0bffd15 	stw	r2,-12(fp)
 1011108:	00804074 	movhi	r2,257
 101110c:	108f2d04 	addi	r2,r2,15540
 1011110:	10800017 	ldw	r2,0(r2)
 1011114:	1007883a 	mov	r3,r2
 1011118:	e0bffd17 	ldw	r2,-12(fp)
 101111c:	18bfd72e 	bgeu	r3,r2,101107c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1011120:	e03fff15 	stw	zero,-4(fp)
 1011124:	e0bfff17 	ldw	r2,-4(fp)
}
 1011128:	e037883a 	mov	sp,fp
 101112c:	dfc00217 	ldw	ra,8(sp)
 1011130:	df000117 	ldw	fp,4(sp)
 1011134:	dc000017 	ldw	r16,0(sp)
 1011138:	dec00304 	addi	sp,sp,12
 101113c:	f800283a 	ret

01011140 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1011140:	defff404 	addi	sp,sp,-48
 1011144:	dfc00b15 	stw	ra,44(sp)
 1011148:	df000a15 	stw	fp,40(sp)
 101114c:	df000a04 	addi	fp,sp,40
 1011150:	e13ffb15 	stw	r4,-20(fp)
 1011154:	e17ffc15 	stw	r5,-16(fp)
 1011158:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101115c:	00bfffc4 	movi	r2,-1
 1011160:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1011164:	00bffb44 	movi	r2,-19
 1011168:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101116c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1011170:	e13ffb17 	ldw	r4,-20(fp)
 1011174:	01404074 	movhi	r5,257
 1011178:	294f2b04 	addi	r5,r5,15532
 101117c:	1010b680 	call	1010b68 <alt_find_dev>
 1011180:	e0bffa15 	stw	r2,-24(fp)
 1011184:	e0bffa17 	ldw	r2,-24(fp)
 1011188:	1004c03a 	cmpne	r2,r2,zero
 101118c:	1000051e 	bne	r2,zero,10111a4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1011190:	e13ffb17 	ldw	r4,-20(fp)
 1011194:	10114f00 	call	10114f0 <alt_find_file>
 1011198:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101119c:	00800044 	movi	r2,1
 10111a0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10111a4:	e0bffa17 	ldw	r2,-24(fp)
 10111a8:	1005003a 	cmpeq	r2,r2,zero
 10111ac:	1000311e 	bne	r2,zero,1011274 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10111b0:	e13ffa17 	ldw	r4,-24(fp)
 10111b4:	10116100 	call	1011610 <alt_get_fd>
 10111b8:	e0bff815 	stw	r2,-32(fp)
 10111bc:	e0bff817 	ldw	r2,-32(fp)
 10111c0:	1004403a 	cmpge	r2,r2,zero
 10111c4:	1000031e 	bne	r2,zero,10111d4 <open+0x94>
    {
      status = index;
 10111c8:	e0bff817 	ldw	r2,-32(fp)
 10111cc:	e0bff715 	stw	r2,-36(fp)
 10111d0:	00002a06 	br	101127c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 10111d4:	e13ff817 	ldw	r4,-32(fp)
 10111d8:	01400304 	movi	r5,12
 10111dc:	100435c0 	call	100435c <__mulsi3>
 10111e0:	1007883a 	mov	r3,r2
 10111e4:	00804074 	movhi	r2,257
 10111e8:	108a8b04 	addi	r2,r2,10796
 10111ec:	1885883a 	add	r2,r3,r2
 10111f0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10111f4:	e0fffc17 	ldw	r3,-16(fp)
 10111f8:	00900034 	movhi	r2,16384
 10111fc:	10bfffc4 	addi	r2,r2,-1
 1011200:	1886703a 	and	r3,r3,r2
 1011204:	e0bff917 	ldw	r2,-28(fp)
 1011208:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101120c:	e0bff617 	ldw	r2,-40(fp)
 1011210:	1004c03a 	cmpne	r2,r2,zero
 1011214:	1000061e 	bne	r2,zero,1011230 <open+0xf0>
 1011218:	e13ff917 	ldw	r4,-28(fp)
 101121c:	10110480 	call	1011048 <alt_file_locked>
 1011220:	e0bff715 	stw	r2,-36(fp)
 1011224:	e0bff717 	ldw	r2,-36(fp)
 1011228:	1004803a 	cmplt	r2,r2,zero
 101122c:	1000131e 	bne	r2,zero,101127c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1011230:	e0bffa17 	ldw	r2,-24(fp)
 1011234:	10800317 	ldw	r2,12(r2)
 1011238:	1005003a 	cmpeq	r2,r2,zero
 101123c:	1000091e 	bne	r2,zero,1011264 <open+0x124>
 1011240:	e0bffa17 	ldw	r2,-24(fp)
 1011244:	10800317 	ldw	r2,12(r2)
 1011248:	e13ff917 	ldw	r4,-28(fp)
 101124c:	e17ffb17 	ldw	r5,-20(fp)
 1011250:	e1bffc17 	ldw	r6,-16(fp)
 1011254:	e1fffd17 	ldw	r7,-12(fp)
 1011258:	103ee83a 	callr	r2
 101125c:	e0bfff15 	stw	r2,-4(fp)
 1011260:	00000106 	br	1011268 <open+0x128>
 1011264:	e03fff15 	stw	zero,-4(fp)
 1011268:	e0bfff17 	ldw	r2,-4(fp)
 101126c:	e0bff715 	stw	r2,-36(fp)
 1011270:	00000206 	br	101127c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1011274:	00bffb44 	movi	r2,-19
 1011278:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101127c:	e0bff717 	ldw	r2,-36(fp)
 1011280:	1004403a 	cmpge	r2,r2,zero
 1011284:	1000091e 	bne	r2,zero,10112ac <open+0x16c>
  {
    alt_release_fd (index);  
 1011288:	e13ff817 	ldw	r4,-32(fp)
 101128c:	100db9c0 	call	100db9c <alt_release_fd>
    ALT_ERRNO = -status;
 1011290:	10112cc0 	call	10112cc <alt_get_errno>
 1011294:	e0fff717 	ldw	r3,-36(fp)
 1011298:	00c7c83a 	sub	r3,zero,r3
 101129c:	10c00015 	stw	r3,0(r2)
    return -1;
 10112a0:	00bfffc4 	movi	r2,-1
 10112a4:	e0bffe15 	stw	r2,-8(fp)
 10112a8:	00000206 	br	10112b4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 10112ac:	e0bff817 	ldw	r2,-32(fp)
 10112b0:	e0bffe15 	stw	r2,-8(fp)
 10112b4:	e0bffe17 	ldw	r2,-8(fp)
}
 10112b8:	e037883a 	mov	sp,fp
 10112bc:	dfc00117 	ldw	ra,4(sp)
 10112c0:	df000017 	ldw	fp,0(sp)
 10112c4:	dec00204 	addi	sp,sp,8
 10112c8:	f800283a 	ret

010112cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10112cc:	defffd04 	addi	sp,sp,-12
 10112d0:	dfc00215 	stw	ra,8(sp)
 10112d4:	df000115 	stw	fp,4(sp)
 10112d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10112dc:	00804074 	movhi	r2,257
 10112e0:	108f2e04 	addi	r2,r2,15544
 10112e4:	10800017 	ldw	r2,0(r2)
 10112e8:	1005003a 	cmpeq	r2,r2,zero
 10112ec:	1000061e 	bne	r2,zero,1011308 <alt_get_errno+0x3c>
 10112f0:	00804074 	movhi	r2,257
 10112f4:	108f2e04 	addi	r2,r2,15544
 10112f8:	10800017 	ldw	r2,0(r2)
 10112fc:	103ee83a 	callr	r2
 1011300:	e0bfff15 	stw	r2,-4(fp)
 1011304:	00000306 	br	1011314 <alt_get_errno+0x48>
 1011308:	00804074 	movhi	r2,257
 101130c:	1095ed04 	addi	r2,r2,22452
 1011310:	e0bfff15 	stw	r2,-4(fp)
 1011314:	e0bfff17 	ldw	r2,-4(fp)
}
 1011318:	e037883a 	mov	sp,fp
 101131c:	dfc00117 	ldw	ra,4(sp)
 1011320:	df000017 	ldw	fp,0(sp)
 1011324:	dec00204 	addi	sp,sp,8
 1011328:	f800283a 	ret

0101132c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 101132c:	defffa04 	addi	sp,sp,-24
 1011330:	df000515 	stw	fp,20(sp)
 1011334:	df000504 	addi	fp,sp,20
 1011338:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101133c:	0005303a 	rdctl	r2,status
 1011340:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011344:	e0fffd17 	ldw	r3,-12(fp)
 1011348:	00bfff84 	movi	r2,-2
 101134c:	1884703a 	and	r2,r3,r2
 1011350:	1001703a 	wrctl	status,r2
  
  return context;
 1011354:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1011358:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 101135c:	e0bfff17 	ldw	r2,-4(fp)
 1011360:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1011364:	e0bffc17 	ldw	r2,-16(fp)
 1011368:	10c00017 	ldw	r3,0(r2)
 101136c:	e0bffc17 	ldw	r2,-16(fp)
 1011370:	10800117 	ldw	r2,4(r2)
 1011374:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1011378:	e0bffc17 	ldw	r2,-16(fp)
 101137c:	10c00117 	ldw	r3,4(r2)
 1011380:	e0bffc17 	ldw	r2,-16(fp)
 1011384:	10800017 	ldw	r2,0(r2)
 1011388:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 101138c:	e0fffc17 	ldw	r3,-16(fp)
 1011390:	e0bffc17 	ldw	r2,-16(fp)
 1011394:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1011398:	e0fffc17 	ldw	r3,-16(fp)
 101139c:	e0bffc17 	ldw	r2,-16(fp)
 10113a0:	18800015 	stw	r2,0(r3)
 10113a4:	e0bffe17 	ldw	r2,-8(fp)
 10113a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10113ac:	e0bffb17 	ldw	r2,-20(fp)
 10113b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10113b4:	e037883a 	mov	sp,fp
 10113b8:	df000017 	ldw	fp,0(sp)
 10113bc:	dec00104 	addi	sp,sp,4
 10113c0:	f800283a 	ret

010113c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10113c4:	defffb04 	addi	sp,sp,-20
 10113c8:	dfc00415 	stw	ra,16(sp)
 10113cc:	df000315 	stw	fp,12(sp)
 10113d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10113d4:	d0a00e17 	ldw	r2,-32712(gp)
 10113d8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10113dc:	d0a6d317 	ldw	r2,-25780(gp)
 10113e0:	10800044 	addi	r2,r2,1
 10113e4:	d0a6d315 	stw	r2,-25780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10113e8:	00003106 	br	10114b0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10113ec:	e0bffe17 	ldw	r2,-8(fp)
 10113f0:	10800017 	ldw	r2,0(r2)
 10113f4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10113f8:	e0bffe17 	ldw	r2,-8(fp)
 10113fc:	10800403 	ldbu	r2,16(r2)
 1011400:	10803fcc 	andi	r2,r2,255
 1011404:	1005003a 	cmpeq	r2,r2,zero
 1011408:	1000051e 	bne	r2,zero,1011420 <alt_tick+0x5c>
 101140c:	d0a6d317 	ldw	r2,-25780(gp)
 1011410:	1004c03a 	cmpne	r2,r2,zero
 1011414:	1000021e 	bne	r2,zero,1011420 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1011418:	e0bffe17 	ldw	r2,-8(fp)
 101141c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011420:	e0bffe17 	ldw	r2,-8(fp)
 1011424:	10c00217 	ldw	r3,8(r2)
 1011428:	d0a6d317 	ldw	r2,-25780(gp)
 101142c:	10c01e36 	bltu	r2,r3,10114a8 <alt_tick+0xe4>
 1011430:	e0bffe17 	ldw	r2,-8(fp)
 1011434:	10800403 	ldbu	r2,16(r2)
 1011438:	10803fcc 	andi	r2,r2,255
 101143c:	1004c03a 	cmpne	r2,r2,zero
 1011440:	1000191e 	bne	r2,zero,10114a8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011444:	e0bffe17 	ldw	r2,-8(fp)
 1011448:	10c00317 	ldw	r3,12(r2)
 101144c:	e0bffe17 	ldw	r2,-8(fp)
 1011450:	11000517 	ldw	r4,20(r2)
 1011454:	183ee83a 	callr	r3
 1011458:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 101145c:	e0bffd17 	ldw	r2,-12(fp)
 1011460:	1004c03a 	cmpne	r2,r2,zero
 1011464:	1000031e 	bne	r2,zero,1011474 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1011468:	e13ffe17 	ldw	r4,-8(fp)
 101146c:	101132c0 	call	101132c <alt_alarm_stop>
 1011470:	00000d06 	br	10114a8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1011474:	e0bffe17 	ldw	r2,-8(fp)
 1011478:	10c00217 	ldw	r3,8(r2)
 101147c:	e0bffd17 	ldw	r2,-12(fp)
 1011480:	1887883a 	add	r3,r3,r2
 1011484:	e0bffe17 	ldw	r2,-8(fp)
 1011488:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 101148c:	e0bffe17 	ldw	r2,-8(fp)
 1011490:	10c00217 	ldw	r3,8(r2)
 1011494:	d0a6d317 	ldw	r2,-25780(gp)
 1011498:	1880032e 	bgeu	r3,r2,10114a8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 101149c:	e0fffe17 	ldw	r3,-8(fp)
 10114a0:	00800044 	movi	r2,1
 10114a4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10114a8:	e0bfff17 	ldw	r2,-4(fp)
 10114ac:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10114b0:	d0e00e04 	addi	r3,gp,-32712
 10114b4:	e0bffe17 	ldw	r2,-8(fp)
 10114b8:	10ffcc1e 	bne	r2,r3,10113ec <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10114bc:	e037883a 	mov	sp,fp
 10114c0:	dfc00117 	ldw	ra,4(sp)
 10114c4:	df000017 	ldw	fp,0(sp)
 10114c8:	dec00204 	addi	sp,sp,8
 10114cc:	f800283a 	ret

010114d0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10114d0:	deffff04 	addi	sp,sp,-4
 10114d4:	df000015 	stw	fp,0(sp)
 10114d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10114dc:	000170fa 	wrctl	ienable,zero
}
 10114e0:	e037883a 	mov	sp,fp
 10114e4:	df000017 	ldw	fp,0(sp)
 10114e8:	dec00104 	addi	sp,sp,4
 10114ec:	f800283a 	ret

010114f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10114f0:	defffa04 	addi	sp,sp,-24
 10114f4:	dfc00515 	stw	ra,20(sp)
 10114f8:	df000415 	stw	fp,16(sp)
 10114fc:	df000404 	addi	fp,sp,16
 1011500:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011504:	00804074 	movhi	r2,257
 1011508:	108f2904 	addi	r2,r2,15524
 101150c:	10800017 	ldw	r2,0(r2)
 1011510:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011514:	00003306 	br	10115e4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1011518:	e0bffd17 	ldw	r2,-12(fp)
 101151c:	11000217 	ldw	r4,8(r2)
 1011520:	10056200 	call	1005620 <strlen>
 1011524:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1011528:	e0bffd17 	ldw	r2,-12(fp)
 101152c:	10c00217 	ldw	r3,8(r2)
 1011530:	e0bffc17 	ldw	r2,-16(fp)
 1011534:	1885883a 	add	r2,r3,r2
 1011538:	10bfffc4 	addi	r2,r2,-1
 101153c:	10800003 	ldbu	r2,0(r2)
 1011540:	10803fcc 	andi	r2,r2,255
 1011544:	1080201c 	xori	r2,r2,128
 1011548:	10bfe004 	addi	r2,r2,-128
 101154c:	10800bd8 	cmpnei	r2,r2,47
 1011550:	1000031e 	bne	r2,zero,1011560 <alt_find_file+0x70>
    {
      len -= 1;
 1011554:	e0bffc17 	ldw	r2,-16(fp)
 1011558:	10bfffc4 	addi	r2,r2,-1
 101155c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011560:	e0bffc17 	ldw	r2,-16(fp)
 1011564:	1007883a 	mov	r3,r2
 1011568:	e0bffe17 	ldw	r2,-8(fp)
 101156c:	1885883a 	add	r2,r3,r2
 1011570:	10800003 	ldbu	r2,0(r2)
 1011574:	10803fcc 	andi	r2,r2,255
 1011578:	1080201c 	xori	r2,r2,128
 101157c:	10bfe004 	addi	r2,r2,-128
 1011580:	10800be0 	cmpeqi	r2,r2,47
 1011584:	10000a1e 	bne	r2,zero,10115b0 <alt_find_file+0xc0>
 1011588:	e0bffc17 	ldw	r2,-16(fp)
 101158c:	1007883a 	mov	r3,r2
 1011590:	e0bffe17 	ldw	r2,-8(fp)
 1011594:	1885883a 	add	r2,r3,r2
 1011598:	10800003 	ldbu	r2,0(r2)
 101159c:	10803fcc 	andi	r2,r2,255
 10115a0:	1080201c 	xori	r2,r2,128
 10115a4:	10bfe004 	addi	r2,r2,-128
 10115a8:	1004c03a 	cmpne	r2,r2,zero
 10115ac:	10000a1e 	bne	r2,zero,10115d8 <alt_find_file+0xe8>
 10115b0:	e0bffd17 	ldw	r2,-12(fp)
 10115b4:	11000217 	ldw	r4,8(r2)
 10115b8:	e1bffc17 	ldw	r6,-16(fp)
 10115bc:	e17ffe17 	ldw	r5,-8(fp)
 10115c0:	10117bc0 	call	10117bc <memcmp>
 10115c4:	1004c03a 	cmpne	r2,r2,zero
 10115c8:	1000031e 	bne	r2,zero,10115d8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10115cc:	e0bffd17 	ldw	r2,-12(fp)
 10115d0:	e0bfff15 	stw	r2,-4(fp)
 10115d4:	00000806 	br	10115f8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10115d8:	e0bffd17 	ldw	r2,-12(fp)
 10115dc:	10800017 	ldw	r2,0(r2)
 10115e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10115e4:	00c04074 	movhi	r3,257
 10115e8:	18cf2904 	addi	r3,r3,15524
 10115ec:	e0bffd17 	ldw	r2,-12(fp)
 10115f0:	10ffc91e 	bne	r2,r3,1011518 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10115f4:	e03fff15 	stw	zero,-4(fp)
 10115f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10115fc:	e037883a 	mov	sp,fp
 1011600:	dfc00117 	ldw	ra,4(sp)
 1011604:	df000017 	ldw	fp,0(sp)
 1011608:	dec00204 	addi	sp,sp,8
 101160c:	f800283a 	ret

01011610 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1011610:	defffa04 	addi	sp,sp,-24
 1011614:	dfc00515 	stw	ra,20(sp)
 1011618:	df000415 	stw	fp,16(sp)
 101161c:	dc000315 	stw	r16,12(sp)
 1011620:	df000304 	addi	fp,sp,12
 1011624:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011628:	00bffa04 	movi	r2,-24
 101162c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011630:	e03ffe15 	stw	zero,-8(fp)
 1011634:	00002006 	br	10116b8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1011638:	e13ffe17 	ldw	r4,-8(fp)
 101163c:	04004074 	movhi	r16,257
 1011640:	840a8b04 	addi	r16,r16,10796
 1011644:	01400304 	movi	r5,12
 1011648:	100435c0 	call	100435c <__mulsi3>
 101164c:	1405883a 	add	r2,r2,r16
 1011650:	10800017 	ldw	r2,0(r2)
 1011654:	1004c03a 	cmpne	r2,r2,zero
 1011658:	1000141e 	bne	r2,zero,10116ac <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 101165c:	e13ffe17 	ldw	r4,-8(fp)
 1011660:	04004074 	movhi	r16,257
 1011664:	840a8b04 	addi	r16,r16,10796
 1011668:	01400304 	movi	r5,12
 101166c:	100435c0 	call	100435c <__mulsi3>
 1011670:	1407883a 	add	r3,r2,r16
 1011674:	e0bfff17 	ldw	r2,-4(fp)
 1011678:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101167c:	00804074 	movhi	r2,257
 1011680:	108f2d04 	addi	r2,r2,15540
 1011684:	10c00017 	ldw	r3,0(r2)
 1011688:	e0bffe17 	ldw	r2,-8(fp)
 101168c:	1880040e 	bge	r3,r2,10116a0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1011690:	00c04074 	movhi	r3,257
 1011694:	18cf2d04 	addi	r3,r3,15540
 1011698:	e0bffe17 	ldw	r2,-8(fp)
 101169c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10116a0:	e0bffe17 	ldw	r2,-8(fp)
 10116a4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10116a8:	00000606 	br	10116c4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10116ac:	e0bffe17 	ldw	r2,-8(fp)
 10116b0:	10800044 	addi	r2,r2,1
 10116b4:	e0bffe15 	stw	r2,-8(fp)
 10116b8:	e0bffe17 	ldw	r2,-8(fp)
 10116bc:	10800810 	cmplti	r2,r2,32
 10116c0:	103fdd1e 	bne	r2,zero,1011638 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10116c4:	e0bffd17 	ldw	r2,-12(fp)
}
 10116c8:	e037883a 	mov	sp,fp
 10116cc:	dfc00217 	ldw	ra,8(sp)
 10116d0:	df000117 	ldw	fp,4(sp)
 10116d4:	dc000017 	ldw	r16,0(sp)
 10116d8:	dec00304 	addi	sp,sp,12
 10116dc:	f800283a 	ret

010116e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10116e0:	defffb04 	addi	sp,sp,-20
 10116e4:	df000415 	stw	fp,16(sp)
 10116e8:	df000404 	addi	fp,sp,16
 10116ec:	e13ffe15 	stw	r4,-8(fp)
 10116f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10116f4:	e0bfff17 	ldw	r2,-4(fp)
 10116f8:	10840070 	cmpltui	r2,r2,4097
 10116fc:	1000021e 	bne	r2,zero,1011708 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1011700:	00840004 	movi	r2,4096
 1011704:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1011708:	e0fffe17 	ldw	r3,-8(fp)
 101170c:	e0bfff17 	ldw	r2,-4(fp)
 1011710:	1885883a 	add	r2,r3,r2
 1011714:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1011718:	e0bffe17 	ldw	r2,-8(fp)
 101171c:	e0bffd15 	stw	r2,-12(fp)
 1011720:	00000506 	br	1011738 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1011724:	e0bffd17 	ldw	r2,-12(fp)
 1011728:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101172c:	e0bffd17 	ldw	r2,-12(fp)
 1011730:	10800804 	addi	r2,r2,32
 1011734:	e0bffd15 	stw	r2,-12(fp)
 1011738:	e0fffd17 	ldw	r3,-12(fp)
 101173c:	e0bffc17 	ldw	r2,-16(fp)
 1011740:	18bff836 	bltu	r3,r2,1011724 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1011744:	e0bffe17 	ldw	r2,-8(fp)
 1011748:	108007cc 	andi	r2,r2,31
 101174c:	1005003a 	cmpeq	r2,r2,zero
 1011750:	1000021e 	bne	r2,zero,101175c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1011754:	e0bffd17 	ldw	r2,-12(fp)
 1011758:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101175c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1011760:	e037883a 	mov	sp,fp
 1011764:	df000017 	ldw	fp,0(sp)
 1011768:	dec00104 	addi	sp,sp,4
 101176c:	f800283a 	ret

01011770 <atexit>:
 1011770:	200b883a 	mov	r5,r4
 1011774:	000d883a 	mov	r6,zero
 1011778:	0009883a 	mov	r4,zero
 101177c:	000f883a 	mov	r7,zero
 1011780:	10118301 	jmpi	1011830 <__register_exitproc>

01011784 <exit>:
 1011784:	defffe04 	addi	sp,sp,-8
 1011788:	000b883a 	mov	r5,zero
 101178c:	dc000015 	stw	r16,0(sp)
 1011790:	dfc00115 	stw	ra,4(sp)
 1011794:	2021883a 	mov	r16,r4
 1011798:	10119680 	call	1011968 <__call_exitprocs>
 101179c:	00804074 	movhi	r2,257
 10117a0:	108f2604 	addi	r2,r2,15512
 10117a4:	11000017 	ldw	r4,0(r2)
 10117a8:	20800f17 	ldw	r2,60(r4)
 10117ac:	10000126 	beq	r2,zero,10117b4 <exit+0x30>
 10117b0:	103ee83a 	callr	r2
 10117b4:	8009883a 	mov	r4,r16
 10117b8:	1011b580 	call	1011b58 <_exit>

010117bc <memcmp>:
 10117bc:	00c000c4 	movi	r3,3
 10117c0:	1980032e 	bgeu	r3,r6,10117d0 <memcmp+0x14>
 10117c4:	2144b03a 	or	r2,r4,r5
 10117c8:	10c4703a 	and	r2,r2,r3
 10117cc:	10000f26 	beq	r2,zero,101180c <memcmp+0x50>
 10117d0:	31ffffc4 	addi	r7,r6,-1
 10117d4:	3000061e 	bne	r6,zero,10117f0 <memcmp+0x34>
 10117d8:	00000a06 	br	1011804 <memcmp+0x48>
 10117dc:	39ffffc4 	addi	r7,r7,-1
 10117e0:	00bfffc4 	movi	r2,-1
 10117e4:	21000044 	addi	r4,r4,1
 10117e8:	29400044 	addi	r5,r5,1
 10117ec:	38800526 	beq	r7,r2,1011804 <memcmp+0x48>
 10117f0:	20c00003 	ldbu	r3,0(r4)
 10117f4:	28800003 	ldbu	r2,0(r5)
 10117f8:	18bff826 	beq	r3,r2,10117dc <memcmp+0x20>
 10117fc:	1885c83a 	sub	r2,r3,r2
 1011800:	f800283a 	ret
 1011804:	0005883a 	mov	r2,zero
 1011808:	f800283a 	ret
 101180c:	180f883a 	mov	r7,r3
 1011810:	20c00017 	ldw	r3,0(r4)
 1011814:	28800017 	ldw	r2,0(r5)
 1011818:	18bfed1e 	bne	r3,r2,10117d0 <memcmp+0x14>
 101181c:	31bfff04 	addi	r6,r6,-4
 1011820:	21000104 	addi	r4,r4,4
 1011824:	29400104 	addi	r5,r5,4
 1011828:	39bff936 	bltu	r7,r6,1011810 <memcmp+0x54>
 101182c:	003fe806 	br	10117d0 <memcmp+0x14>

01011830 <__register_exitproc>:
 1011830:	defffa04 	addi	sp,sp,-24
 1011834:	00804074 	movhi	r2,257
 1011838:	108f2604 	addi	r2,r2,15512
 101183c:	dc000015 	stw	r16,0(sp)
 1011840:	14000017 	ldw	r16,0(r2)
 1011844:	dd000415 	stw	r20,16(sp)
 1011848:	2829883a 	mov	r20,r5
 101184c:	81405217 	ldw	r5,328(r16)
 1011850:	dcc00315 	stw	r19,12(sp)
 1011854:	dc800215 	stw	r18,8(sp)
 1011858:	dc400115 	stw	r17,4(sp)
 101185c:	dfc00515 	stw	ra,20(sp)
 1011860:	2023883a 	mov	r17,r4
 1011864:	3027883a 	mov	r19,r6
 1011868:	3825883a 	mov	r18,r7
 101186c:	28002526 	beq	r5,zero,1011904 <__register_exitproc+0xd4>
 1011870:	29000117 	ldw	r4,4(r5)
 1011874:	008007c4 	movi	r2,31
 1011878:	11002716 	blt	r2,r4,1011918 <__register_exitproc+0xe8>
 101187c:	8800101e 	bne	r17,zero,10118c0 <__register_exitproc+0x90>
 1011880:	2105883a 	add	r2,r4,r4
 1011884:	1085883a 	add	r2,r2,r2
 1011888:	20c00044 	addi	r3,r4,1
 101188c:	1145883a 	add	r2,r2,r5
 1011890:	0009883a 	mov	r4,zero
 1011894:	15000215 	stw	r20,8(r2)
 1011898:	28c00115 	stw	r3,4(r5)
 101189c:	2005883a 	mov	r2,r4
 10118a0:	dfc00517 	ldw	ra,20(sp)
 10118a4:	dd000417 	ldw	r20,16(sp)
 10118a8:	dcc00317 	ldw	r19,12(sp)
 10118ac:	dc800217 	ldw	r18,8(sp)
 10118b0:	dc400117 	ldw	r17,4(sp)
 10118b4:	dc000017 	ldw	r16,0(sp)
 10118b8:	dec00604 	addi	sp,sp,24
 10118bc:	f800283a 	ret
 10118c0:	29802204 	addi	r6,r5,136
 10118c4:	00800044 	movi	r2,1
 10118c8:	110e983a 	sll	r7,r2,r4
 10118cc:	30c04017 	ldw	r3,256(r6)
 10118d0:	2105883a 	add	r2,r4,r4
 10118d4:	1085883a 	add	r2,r2,r2
 10118d8:	1185883a 	add	r2,r2,r6
 10118dc:	19c6b03a 	or	r3,r3,r7
 10118e0:	14802015 	stw	r18,128(r2)
 10118e4:	14c00015 	stw	r19,0(r2)
 10118e8:	00800084 	movi	r2,2
 10118ec:	30c04015 	stw	r3,256(r6)
 10118f0:	88bfe31e 	bne	r17,r2,1011880 <__register_exitproc+0x50>
 10118f4:	30804117 	ldw	r2,260(r6)
 10118f8:	11c4b03a 	or	r2,r2,r7
 10118fc:	30804115 	stw	r2,260(r6)
 1011900:	003fdf06 	br	1011880 <__register_exitproc+0x50>
 1011904:	00804074 	movhi	r2,257
 1011908:	10964104 	addi	r2,r2,22788
 101190c:	100b883a 	mov	r5,r2
 1011910:	80805215 	stw	r2,328(r16)
 1011914:	003fd606 	br	1011870 <__register_exitproc+0x40>
 1011918:	00804034 	movhi	r2,256
 101191c:	10934c04 	addi	r2,r2,19760
 1011920:	1000021e 	bne	r2,zero,101192c <__register_exitproc+0xfc>
 1011924:	013fffc4 	movi	r4,-1
 1011928:	003fdc06 	br	101189c <__register_exitproc+0x6c>
 101192c:	01006404 	movi	r4,400
 1011930:	103ee83a 	callr	r2
 1011934:	1007883a 	mov	r3,r2
 1011938:	103ffa26 	beq	r2,zero,1011924 <__register_exitproc+0xf4>
 101193c:	80805217 	ldw	r2,328(r16)
 1011940:	180b883a 	mov	r5,r3
 1011944:	18000115 	stw	zero,4(r3)
 1011948:	18800015 	stw	r2,0(r3)
 101194c:	80c05215 	stw	r3,328(r16)
 1011950:	18006215 	stw	zero,392(r3)
 1011954:	18006315 	stw	zero,396(r3)
 1011958:	0009883a 	mov	r4,zero
 101195c:	883fc826 	beq	r17,zero,1011880 <__register_exitproc+0x50>
 1011960:	003fd706 	br	10118c0 <__register_exitproc+0x90>

01011964 <register_fini>:
 1011964:	f800283a 	ret

01011968 <__call_exitprocs>:
 1011968:	00804074 	movhi	r2,257
 101196c:	108f2604 	addi	r2,r2,15512
 1011970:	10800017 	ldw	r2,0(r2)
 1011974:	defff304 	addi	sp,sp,-52
 1011978:	df000b15 	stw	fp,44(sp)
 101197c:	d8800115 	stw	r2,4(sp)
 1011980:	00804034 	movhi	r2,256
 1011984:	10934704 	addi	r2,r2,19740
 1011988:	1005003a 	cmpeq	r2,r2,zero
 101198c:	d8800215 	stw	r2,8(sp)
 1011990:	d8800117 	ldw	r2,4(sp)
 1011994:	dd400815 	stw	r21,32(sp)
 1011998:	dd000715 	stw	r20,28(sp)
 101199c:	10805204 	addi	r2,r2,328
 10119a0:	dfc00c15 	stw	ra,48(sp)
 10119a4:	ddc00a15 	stw	r23,40(sp)
 10119a8:	dd800915 	stw	r22,36(sp)
 10119ac:	dcc00615 	stw	r19,24(sp)
 10119b0:	dc800515 	stw	r18,20(sp)
 10119b4:	dc400415 	stw	r17,16(sp)
 10119b8:	dc000315 	stw	r16,12(sp)
 10119bc:	282b883a 	mov	r21,r5
 10119c0:	2039883a 	mov	fp,r4
 10119c4:	d8800015 	stw	r2,0(sp)
 10119c8:	2829003a 	cmpeq	r20,r5,zero
 10119cc:	d8800117 	ldw	r2,4(sp)
 10119d0:	14405217 	ldw	r17,328(r2)
 10119d4:	88001026 	beq	r17,zero,1011a18 <__call_exitprocs+0xb0>
 10119d8:	ddc00017 	ldw	r23,0(sp)
 10119dc:	88800117 	ldw	r2,4(r17)
 10119e0:	8c802204 	addi	r18,r17,136
 10119e4:	143fffc4 	addi	r16,r2,-1
 10119e8:	80000916 	blt	r16,zero,1011a10 <__call_exitprocs+0xa8>
 10119ec:	05bfffc4 	movi	r22,-1
 10119f0:	a000151e 	bne	r20,zero,1011a48 <__call_exitprocs+0xe0>
 10119f4:	8409883a 	add	r4,r16,r16
 10119f8:	2105883a 	add	r2,r4,r4
 10119fc:	1485883a 	add	r2,r2,r18
 1011a00:	10c02017 	ldw	r3,128(r2)
 1011a04:	a8c01126 	beq	r21,r3,1011a4c <__call_exitprocs+0xe4>
 1011a08:	843fffc4 	addi	r16,r16,-1
 1011a0c:	85bff81e 	bne	r16,r22,10119f0 <__call_exitprocs+0x88>
 1011a10:	d8800217 	ldw	r2,8(sp)
 1011a14:	10003126 	beq	r2,zero,1011adc <__call_exitprocs+0x174>
 1011a18:	dfc00c17 	ldw	ra,48(sp)
 1011a1c:	df000b17 	ldw	fp,44(sp)
 1011a20:	ddc00a17 	ldw	r23,40(sp)
 1011a24:	dd800917 	ldw	r22,36(sp)
 1011a28:	dd400817 	ldw	r21,32(sp)
 1011a2c:	dd000717 	ldw	r20,28(sp)
 1011a30:	dcc00617 	ldw	r19,24(sp)
 1011a34:	dc800517 	ldw	r18,20(sp)
 1011a38:	dc400417 	ldw	r17,16(sp)
 1011a3c:	dc000317 	ldw	r16,12(sp)
 1011a40:	dec00d04 	addi	sp,sp,52
 1011a44:	f800283a 	ret
 1011a48:	8409883a 	add	r4,r16,r16
 1011a4c:	88c00117 	ldw	r3,4(r17)
 1011a50:	2105883a 	add	r2,r4,r4
 1011a54:	1445883a 	add	r2,r2,r17
 1011a58:	18ffffc4 	addi	r3,r3,-1
 1011a5c:	11800217 	ldw	r6,8(r2)
 1011a60:	1c001526 	beq	r3,r16,1011ab8 <__call_exitprocs+0x150>
 1011a64:	10000215 	stw	zero,8(r2)
 1011a68:	303fe726 	beq	r6,zero,1011a08 <__call_exitprocs+0xa0>
 1011a6c:	00c00044 	movi	r3,1
 1011a70:	1c06983a 	sll	r3,r3,r16
 1011a74:	90804017 	ldw	r2,256(r18)
 1011a78:	8cc00117 	ldw	r19,4(r17)
 1011a7c:	1884703a 	and	r2,r3,r2
 1011a80:	10001426 	beq	r2,zero,1011ad4 <__call_exitprocs+0x16c>
 1011a84:	90804117 	ldw	r2,260(r18)
 1011a88:	1884703a 	and	r2,r3,r2
 1011a8c:	10000c1e 	bne	r2,zero,1011ac0 <__call_exitprocs+0x158>
 1011a90:	2105883a 	add	r2,r4,r4
 1011a94:	1485883a 	add	r2,r2,r18
 1011a98:	11400017 	ldw	r5,0(r2)
 1011a9c:	e009883a 	mov	r4,fp
 1011aa0:	303ee83a 	callr	r6
 1011aa4:	88800117 	ldw	r2,4(r17)
 1011aa8:	98bfc81e 	bne	r19,r2,10119cc <__call_exitprocs+0x64>
 1011aac:	b8800017 	ldw	r2,0(r23)
 1011ab0:	147fd526 	beq	r2,r17,1011a08 <__call_exitprocs+0xa0>
 1011ab4:	003fc506 	br	10119cc <__call_exitprocs+0x64>
 1011ab8:	8c000115 	stw	r16,4(r17)
 1011abc:	003fea06 	br	1011a68 <__call_exitprocs+0x100>
 1011ac0:	2105883a 	add	r2,r4,r4
 1011ac4:	1485883a 	add	r2,r2,r18
 1011ac8:	11000017 	ldw	r4,0(r2)
 1011acc:	303ee83a 	callr	r6
 1011ad0:	003ff406 	br	1011aa4 <__call_exitprocs+0x13c>
 1011ad4:	303ee83a 	callr	r6
 1011ad8:	003ff206 	br	1011aa4 <__call_exitprocs+0x13c>
 1011adc:	88800117 	ldw	r2,4(r17)
 1011ae0:	1000081e 	bne	r2,zero,1011b04 <__call_exitprocs+0x19c>
 1011ae4:	89000017 	ldw	r4,0(r17)
 1011ae8:	20000726 	beq	r4,zero,1011b08 <__call_exitprocs+0x1a0>
 1011aec:	b9000015 	stw	r4,0(r23)
 1011af0:	8809883a 	mov	r4,r17
 1011af4:	1004d1c0 	call	1004d1c <free>
 1011af8:	bc400017 	ldw	r17,0(r23)
 1011afc:	883fb71e 	bne	r17,zero,10119dc <__call_exitprocs+0x74>
 1011b00:	003fc506 	br	1011a18 <__call_exitprocs+0xb0>
 1011b04:	89000017 	ldw	r4,0(r17)
 1011b08:	882f883a 	mov	r23,r17
 1011b0c:	2023883a 	mov	r17,r4
 1011b10:	883fb21e 	bne	r17,zero,10119dc <__call_exitprocs+0x74>
 1011b14:	003fc006 	br	1011a18 <__call_exitprocs+0xb0>

01011b18 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1011b18:	defffd04 	addi	sp,sp,-12
 1011b1c:	df000215 	stw	fp,8(sp)
 1011b20:	df000204 	addi	fp,sp,8
 1011b24:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1011b28:	e0bfff17 	ldw	r2,-4(fp)
 1011b2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1011b30:	e0bffe17 	ldw	r2,-8(fp)
 1011b34:	1005003a 	cmpeq	r2,r2,zero
 1011b38:	1000021e 	bne	r2,zero,1011b44 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1011b3c:	002af070 	cmpltui	zero,zero,43969
 1011b40:	00000106 	br	1011b48 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1011b44:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1011b48:	e037883a 	mov	sp,fp
 1011b4c:	df000017 	ldw	fp,0(sp)
 1011b50:	dec00104 	addi	sp,sp,4
 1011b54:	f800283a 	ret

01011b58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1011b58:	defffd04 	addi	sp,sp,-12
 1011b5c:	dfc00215 	stw	ra,8(sp)
 1011b60:	df000115 	stw	fp,4(sp)
 1011b64:	df000104 	addi	fp,sp,4
 1011b68:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1011b6c:	e13fff17 	ldw	r4,-4(fp)
 1011b70:	1011b180 	call	1011b18 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1011b74:	003fff06 	br	1011b74 <_exit+0x1c>
 1011b78:	00000010 	cmplti	zero,zero,0
 1011b7c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011b80:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_0+0x527a0>
 1011b84:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_0+0x11f7c0>
 1011b88:	001b0c0b 	ldhu	zero,27696(zero)
 1011b8c:	00000028 	cmpgeui	zero,zero,0
 1011b90:	00000018 	cmpnei	zero,zero,0
 1011b94:	0100c17c 	xorhi	r4,zero,773
 1011b98:	0000066c 	andhi	zero,zero,25
 1011b9c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 1011ba0:	910a9074 	orhi	r4,r18,10817
 1011ba4:	94089209 	0x94089209
 1011ba8:	97049606 	br	1012e04 <jtag_uart_0+0x258>
 1011bac:	93019f03 	ldbu	r12,1660(r18)
 1011bb0:	9c059507 	ldb	r16,5716(r19)
 1011bb4:	00000002 	0x2
 1011bb8:	00000028 	cmpgeui	zero,zero,0
 1011bbc:	00000044 	movi	zero,1
 1011bc0:	0100c7e8 	cmpgeui	r4,zero,799
 1011bc4:	00000660 	cmpeqi	zero,zero,25
 1011bc8:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 1011bcc:	92099170 	cmpltui	r8,r18,9797
 1011bd0:	96069408 	cmpgei	et,r18,6736
 1011bd4:	9c039704 	addi	r16,r19,3676
 1011bd8:	90019f02 	0x90019f02
 1011bdc:	9507930a 	0x9507930a
 1011be0:	00000005 	stb	zero,0(zero)
 1011be4:	01011964 	muli	r4,zero,1125
